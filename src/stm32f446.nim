# This file is auto-generated.  Edits will be lost if the tool is run again.
#
# Tool:                 svd2nim
# Tool version:         0.5.1-dev-f56b7f7
# Tool args:            @["STM32F446_v1_7.svd"]
# Input file:           STM32F446_v1_7.svd
# Input file version:   1.7
#
# Peripheral access API for STM32F446 microcontrollers

import std/volatile
import std/bitops
import uncheckedenums

export volatile
export uncheckedenums

{.hint[name]: off.}

when NimMajor < 2:
  {.experimental: "overloadableEnums".}

# Some information about this device.
const DEVICE* = "STM32F446"
const CM4_REV* = 0x0001
const MPU_PRESENT* = true
const FPU_PRESENT* = true
const VTOR_PRESENT* = true
const NVIC_PRIO_BITS* = 4
const Vendor_SysTickConfig* = false

################################################################################
# Interrupt Number Definition
################################################################################
type IRQn* = enum
# #### Cortex-M Processor Exception Numbers ####################################
  irqReset             =  -15 # Reset Vector, invoked on Power up and warm reset
  irqNonMaskableInt    =  -14 # Non maskable Interrupt, cannot be stopped or preempted
  irqHardFault         =  -13 # Hard Fault, all classes of Fault
  irqMemoryManagement  =  -12 # Memory Management, MPU mismatch, including Access Violation and No Match
  irqBusFault          =  -11 # Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory related Fault
  irqUsageFault        =  -10 # Usage Fault, i.e. Undef Instruction, Illegal State Transition
  irqSVCall            =   -5 # System Service Call via SVC instruction
  irqDebugMonitor      =   -4 # Debug Monitor
  irqPendSV            =   -2 # Pendable request for system service
  irqSysTick           =   -1 # System Tick Timer
# #### Device Peripheral Interrupts ############################################
  irqWWDG              =    0 # Window Watchdog interrupt
  irqPVD               =    1 # PVD through EXTI line detection interrupt
  irqTAMP_STAMP        =    2 # Tamper and TimeStamp interrupts through the EXTI line
  irqRTC_WKUP          =    3 # RTC Wakeup interrupt through the EXTI line
  irqFLASH             =    4 # Flash global interrupt
  irqRCC               =    5 # RCC global interrupt
  irqEXTI0             =    6 # EXTI Line0 interrupt
  irqEXTI1             =    7 # EXTI Line1 interrupt
  irqEXTI2             =    8 # EXTI Line2 interrupt
  irqEXTI3             =    9 # EXTI Line3 interrupt
  irqEXTI4             =   10 # EXTI Line4 interrupt
  irqDMA1_Stream0      =   11 # DMA1 Stream0 global interrupt
  irqDMA1_Stream1      =   12 # DMA1 Stream1 global interrupt
  irqDMA1_Stream2      =   13 # DMA1 Stream2 global interrupt
  irqDMA1_Stream3      =   14 # DMA1 Stream3 global interrupt
  irqDMA1_Stream4      =   15 # DMA1 Stream4 global interrupt
  irqDMA1_Stream5      =   16 # DMA1 Stream5 global interrupt
  irqDMA1_Stream6      =   17 # DMA1 Stream6 global interrupt
  irqADC               =   18 # ADC1 global interrupt
  irqCAN1_TX           =   19 # CAN1 TX interrupts
  irqCAN1_RX0          =   20 # CAN1 RX0 interrupts
  irqCAN1_RX1          =   21 # CAN1 RX1 interrupts
  irqCAN1_SCE          =   22 # CAN1 SCE interrupt
  irqEXTI9_5           =   23 # EXTI Line[9:5] interrupts
  irqTIM1_BRK_TIM9     =   24 # TIM1 Break interrupt and TIM9 global interrupt
  irqTIM1_UP_TIM10     =   25 # TIM1 Update interrupt and TIM10 global interrupt
  irqTIM1_TRG_COM_TIM11 =   26 # TIM1 Trigger and Commutation interrupts and TIM11 global interrupt
  irqTIM1_CC           =   27 # TIM1 Capture Compare interrupt
  irqTIM2              =   28 # TIM2 global interrupt
  irqTIM3              =   29 # TIM3 global interrupt
  irqTIM4              =   30 # TIM4 global interrupt
  irqI2C1_EV           =   31 # I2C1 event interrupt
  irqI2C1_ER           =   32 # I2C1 error interrupt
  irqI2C2_EV           =   33 # I2C2 event interrupt
  irqI2C2_ER           =   34 # I2C2 error interrupt
  irqSPI1              =   35 # SPI1 global interrupt
  irqSPI2              =   36 # SPI2 global interrupt
  irqUSART1            =   37 # USART1 global interrupt
  irqUSART2            =   38 # USART2 global interrupt
  irqUSART3            =   39 # USART3 global interrupt
  irqEXTI15_10         =   40 # EXTI Line[15:10] interrupts
  irqRTC_Alarm         =   41 # RTC Alarms (A and B) through EXTI line interrupt
  irqOTG_FS_WKUP       =   42 # USB On-The-Go FS Wakeup through EXTI line interrupt
  irqTIM8_BRK_TIM12    =   43 # TIM8 Break interrupt and TIM12 global interrupt
  irqTIM8_UP_TIM13     =   44 # TIM8 Update interrupt and TIM13 global interrupt
  irqTIM8_TRG_COM_TIM14 =   45 # TIM8 Trigger and Commutation interrupts and TIM14 global interrupt
  irqTIM8_CC           =   46 # TIM8 Capture Compare interrupt
  irqDMA1_Stream7      =   47 # DMA1 Stream7 global interrupt
  irqFMC               =   48 # FMC global interrupt
  irqSDIO              =   49 # SDIO global interrupt
  irqTIM5              =   50 # TIM5 global interrupt
  irqSPI3              =   51 # SPI3 global interrupt
  irqUART4             =   52 # UART4 global interrupt
  irqUART5             =   53 # UART5 global interrupt
  irqTIM6_DAC          =   54 # TIM6 global interrupt, DAC1 and DAC2 underrun error interrupt
  irqTIM7              =   55 # TIM7 global interrupt
  irqDMA2_Stream0      =   56 # DMA2 Stream0 global interrupt
  irqDMA2_Stream1      =   57 # DMA2 Stream1 global interrupt
  irqDMA2_Stream2      =   58 # DMA2 Stream2 global interrupt
  irqDMA2_Stream3      =   59 # DMA2 Stream3 global interrupt
  irqDMA2_Stream4      =   60 # DMA2 Stream4 global interrupt
  irqCAN2_TX           =   63 # CAN2 TX interrupts
  irqCAN2_RX0          =   64 # CAN2 RX0 interrupts
  irqCAN2_RX1          =   65 # CAN2 RX1 interrupts
  irqCAN2_SCE          =   66 # CAN2 SCE interrupt
  irqOTG_FS            =   67 # USB On The Go FS global interrupt
  irqDMA2_Stream5      =   68 # DMA2 Stream5 global interrupt
  irqDMA2_Stream6      =   69 # DMA2 Stream6 global interrupt
  irqDMA2_Stream7      =   70 # DMA2 Stream7 global interrupt
  irqUSART6            =   71 # USART6 global interrupt
  irqI2C3_EV           =   72 # I2C3 event interrupt
  irqI2C3_ER           =   73 # I2C3 error interrupt
  irqOTG_HS_EP1_OUT    =   74 # USB On The Go HS End Point 1 Out
  irqOTG_HS_EP1_IN     =   75 # USB On The Go HS End Point 1 In
  irqOTG_HS_WKUP       =   76 # USB On The Go HS Wakeup
  irqOTG_HS            =   77 # USB On The Go HS global interrupt
  irqDCMI              =   78 # DCMI global interrupt
  irqSPI4              =   84 # SPI 4 global interrupt
  irqSAI1              =   87 # SAI1 global interrupt
  irqSAI2              =   91 # SAI2 global interrupt
  irqQuadSPI           =   92 # QuadSPI global interrupt
  irqHDMI_CEC          =   93 # HDMI-CEC global interrupt
  irqSPDIF_Rx          =   94 # SPDIF-Rx global interrupt
  irqFMPI2C1           =   95 # FMPI2C1 event interrupt
  irqFMPI2C1_error     =   96 # FMPI2C1 error interrupt

################################################################################
# Type definitions for peripheral registers
################################################################################
type DCMI_CR_Type* = object
  loc: uint

type DCMI_SR_Type* = object
  loc: uint

type DCMI_RIS_Type* = object
  loc: uint

type DCMI_IER_Type* = object
  loc: uint

type DCMI_MIS_Type* = object
  loc: uint

type DCMI_ICR_Type* = object
  loc: uint

type DCMI_ESCR_Type* = object
  loc: uint

type DCMI_ESUR_Type* = object
  loc: uint

type DCMI_CWSTRT_Type* = object
  loc: uint

type DCMI_CWSIZE_Type* = object
  loc: uint

type DCMI_DR_Type* = object
  loc: uint

type DCMI_Type* = object
  CR*: DCMI_CR_Type
  SR*: DCMI_SR_Type
  RIS*: DCMI_RIS_Type
  IER*: DCMI_IER_Type
  MIS*: DCMI_MIS_Type
  ICR*: DCMI_ICR_Type
  ESCR*: DCMI_ESCR_Type
  ESUR*: DCMI_ESUR_Type
  CWSTRT*: DCMI_CWSTRT_Type
  CWSIZE*: DCMI_CWSIZE_Type
  DR*: DCMI_DR_Type

type FMC_BCR1_Type* = object
  loc: uint

type FMC_BTR1_Type* = object
  loc: uint

type FMC_BCR2_Type* = object
  loc: uint

type FMC_BTR2_Type* = object
  loc: uint

type FMC_BCR3_Type* = object
  loc: uint

type FMC_BTR3_Type* = object
  loc: uint

type FMC_BCR4_Type* = object
  loc: uint

type FMC_BTR4_Type* = object
  loc: uint

type FMC_PCR2_Type* = object
  loc: uint

type FMC_SR2_Type* = object
  loc: uint

type FMC_PMEM2_Type* = object
  loc: uint

type FMC_PATT2_Type* = object
  loc: uint

type FMC_ECCR2_Type* = object
  loc: uint

type FMC_PCR3_Type* = object
  loc: uint

type FMC_SR3_Type* = object
  loc: uint

type FMC_PMEM3_Type* = object
  loc: uint

type FMC_PATT3_Type* = object
  loc: uint

type FMC_ECCR3_Type* = object
  loc: uint

type FMC_PCR4_Type* = object
  loc: uint

type FMC_SR4_Type* = object
  loc: uint

type FMC_PMEM4_Type* = object
  loc: uint

type FMC_PATT4_Type* = object
  loc: uint

type FMC_PIO4_Type* = object
  loc: uint

type FMC_BWTR1_Type* = object
  loc: uint

type FMC_BWTR2_Type* = object
  loc: uint

type FMC_BWTR3_Type* = object
  loc: uint

type FMC_BWTR4_Type* = object
  loc: uint

type FMC_SDCR1_Type* = object
  loc: uint

type FMC_SDCR2_Type* = object
  loc: uint

type FMC_SDTR1_Type* = object
  loc: uint

type FMC_SDTR2_Type* = object
  loc: uint

type FMC_SDCMR_Type* = object
  loc: uint

type FMC_SDRTR_Type* = object
  loc: uint

type FMC_SDSR_Type* = object
  loc: uint

type FMC_Type* = object
  BCR1*: FMC_BCR1_Type
  BTR1*: FMC_BTR1_Type
  BCR2*: FMC_BCR2_Type
  BTR2*: FMC_BTR2_Type
  BCR3*: FMC_BCR3_Type
  BTR3*: FMC_BTR3_Type
  BCR4*: FMC_BCR4_Type
  BTR4*: FMC_BTR4_Type
  PCR2*: FMC_PCR2_Type
  SR2*: FMC_SR2_Type
  PMEM2*: FMC_PMEM2_Type
  PATT2*: FMC_PATT2_Type
  ECCR2*: FMC_ECCR2_Type
  PCR3*: FMC_PCR3_Type
  SR3*: FMC_SR3_Type
  PMEM3*: FMC_PMEM3_Type
  PATT3*: FMC_PATT3_Type
  ECCR3*: FMC_ECCR3_Type
  PCR4*: FMC_PCR4_Type
  SR4*: FMC_SR4_Type
  PMEM4*: FMC_PMEM4_Type
  PATT4*: FMC_PATT4_Type
  PIO4*: FMC_PIO4_Type
  BWTR1*: FMC_BWTR1_Type
  BWTR2*: FMC_BWTR2_Type
  BWTR3*: FMC_BWTR3_Type
  BWTR4*: FMC_BWTR4_Type
  SDCR1*: FMC_SDCR1_Type
  SDCR2*: FMC_SDCR2_Type
  SDTR1*: FMC_SDTR1_Type
  SDTR2*: FMC_SDTR2_Type
  SDCMR*: FMC_SDCMR_Type
  SDRTR*: FMC_SDRTR_Type
  SDSR*: FMC_SDSR_Type

type DBG_DBGMCU_IDCODE_Type* = object
  loc: uint

type DBG_DBGMCU_CR_Type* = object
  loc: uint

type DBG_DBGMCU_APB1_FZ_Type* = object
  loc: uint

type DBG_DBGMCU_APB2_FZ_Type* = object
  loc: uint

type DBG_Type* = object
  DBGMCU_IDCODE*: DBG_DBGMCU_IDCODE_Type
  DBGMCU_CR*: DBG_DBGMCU_CR_Type
  DBGMCU_APB1_FZ*: DBG_DBGMCU_APB1_FZ_Type
  DBGMCU_APB2_FZ*: DBG_DBGMCU_APB2_FZ_Type

type DMA2_LISR_Type* = object
  loc: uint

type DMA2_HISR_Type* = object
  loc: uint

type DMA2_LIFCR_Type* = object
  loc: uint

type DMA2_HIFCR_Type* = object
  loc: uint

type DMA2_S0CR_Type* = object
  loc: uint

type DMA2_S0NDTR_Type* = object
  loc: uint

type DMA2_S0PAR_Type* = object
  loc: uint

type DMA2_S0M0AR_Type* = object
  loc: uint

type DMA2_S0M1AR_Type* = object
  loc: uint

type DMA2_S0FCR_Type* = object
  loc: uint

type DMA2_S1CR_Type* = object
  loc: uint

type DMA2_S1NDTR_Type* = object
  loc: uint

type DMA2_S1PAR_Type* = object
  loc: uint

type DMA2_S1M0AR_Type* = object
  loc: uint

type DMA2_S1M1AR_Type* = object
  loc: uint

type DMA2_S1FCR_Type* = object
  loc: uint

type DMA2_S2CR_Type* = object
  loc: uint

type DMA2_S2NDTR_Type* = object
  loc: uint

type DMA2_S2PAR_Type* = object
  loc: uint

type DMA2_S2M0AR_Type* = object
  loc: uint

type DMA2_S2M1AR_Type* = object
  loc: uint

type DMA2_S2FCR_Type* = object
  loc: uint

type DMA2_S3CR_Type* = object
  loc: uint

type DMA2_S3NDTR_Type* = object
  loc: uint

type DMA2_S3PAR_Type* = object
  loc: uint

type DMA2_S3M0AR_Type* = object
  loc: uint

type DMA2_S3M1AR_Type* = object
  loc: uint

type DMA2_S3FCR_Type* = object
  loc: uint

type DMA2_S4CR_Type* = object
  loc: uint

type DMA2_S4NDTR_Type* = object
  loc: uint

type DMA2_S4PAR_Type* = object
  loc: uint

type DMA2_S4M0AR_Type* = object
  loc: uint

type DMA2_S4M1AR_Type* = object
  loc: uint

type DMA2_S4FCR_Type* = object
  loc: uint

type DMA2_S5CR_Type* = object
  loc: uint

type DMA2_S5NDTR_Type* = object
  loc: uint

type DMA2_S5PAR_Type* = object
  loc: uint

type DMA2_S5M0AR_Type* = object
  loc: uint

type DMA2_S5M1AR_Type* = object
  loc: uint

type DMA2_S5FCR_Type* = object
  loc: uint

type DMA2_S6CR_Type* = object
  loc: uint

type DMA2_S6NDTR_Type* = object
  loc: uint

type DMA2_S6PAR_Type* = object
  loc: uint

type DMA2_S6M0AR_Type* = object
  loc: uint

type DMA2_S6M1AR_Type* = object
  loc: uint

type DMA2_S6FCR_Type* = object
  loc: uint

type DMA2_S7CR_Type* = object
  loc: uint

type DMA2_S7NDTR_Type* = object
  loc: uint

type DMA2_S7PAR_Type* = object
  loc: uint

type DMA2_S7M0AR_Type* = object
  loc: uint

type DMA2_S7M1AR_Type* = object
  loc: uint

type DMA2_S7FCR_Type* = object
  loc: uint

type DMA2_Type* = object
  LISR*: DMA2_LISR_Type
  HISR*: DMA2_HISR_Type
  LIFCR*: DMA2_LIFCR_Type
  HIFCR*: DMA2_HIFCR_Type
  S0CR*: DMA2_S0CR_Type
  S0NDTR*: DMA2_S0NDTR_Type
  S0PAR*: DMA2_S0PAR_Type
  S0M0AR*: DMA2_S0M0AR_Type
  S0M1AR*: DMA2_S0M1AR_Type
  S0FCR*: DMA2_S0FCR_Type
  S1CR*: DMA2_S1CR_Type
  S1NDTR*: DMA2_S1NDTR_Type
  S1PAR*: DMA2_S1PAR_Type
  S1M0AR*: DMA2_S1M0AR_Type
  S1M1AR*: DMA2_S1M1AR_Type
  S1FCR*: DMA2_S1FCR_Type
  S2CR*: DMA2_S2CR_Type
  S2NDTR*: DMA2_S2NDTR_Type
  S2PAR*: DMA2_S2PAR_Type
  S2M0AR*: DMA2_S2M0AR_Type
  S2M1AR*: DMA2_S2M1AR_Type
  S2FCR*: DMA2_S2FCR_Type
  S3CR*: DMA2_S3CR_Type
  S3NDTR*: DMA2_S3NDTR_Type
  S3PAR*: DMA2_S3PAR_Type
  S3M0AR*: DMA2_S3M0AR_Type
  S3M1AR*: DMA2_S3M1AR_Type
  S3FCR*: DMA2_S3FCR_Type
  S4CR*: DMA2_S4CR_Type
  S4NDTR*: DMA2_S4NDTR_Type
  S4PAR*: DMA2_S4PAR_Type
  S4M0AR*: DMA2_S4M0AR_Type
  S4M1AR*: DMA2_S4M1AR_Type
  S4FCR*: DMA2_S4FCR_Type
  S5CR*: DMA2_S5CR_Type
  S5NDTR*: DMA2_S5NDTR_Type
  S5PAR*: DMA2_S5PAR_Type
  S5M0AR*: DMA2_S5M0AR_Type
  S5M1AR*: DMA2_S5M1AR_Type
  S5FCR*: DMA2_S5FCR_Type
  S6CR*: DMA2_S6CR_Type
  S6NDTR*: DMA2_S6NDTR_Type
  S6PAR*: DMA2_S6PAR_Type
  S6M0AR*: DMA2_S6M0AR_Type
  S6M1AR*: DMA2_S6M1AR_Type
  S6FCR*: DMA2_S6FCR_Type
  S7CR*: DMA2_S7CR_Type
  S7NDTR*: DMA2_S7NDTR_Type
  S7PAR*: DMA2_S7PAR_Type
  S7M0AR*: DMA2_S7M0AR_Type
  S7M1AR*: DMA2_S7M1AR_Type
  S7FCR*: DMA2_S7FCR_Type

type RCC_CR_Type* = object
  loc: uint

type RCC_PLLCFGR_Type* = object
  loc: uint

type RCC_CFGR_Type* = object
  loc: uint

type RCC_CIR_Type* = object
  loc: uint

type RCC_AHB1RSTR_Type* = object
  loc: uint

type RCC_AHB2RSTR_Type* = object
  loc: uint

type RCC_AHB3RSTR_Type* = object
  loc: uint

type RCC_APB1RSTR_Type* = object
  loc: uint

type RCC_APB2RSTR_Type* = object
  loc: uint

type RCC_AHB1ENR_Type* = object
  loc: uint

type RCC_AHB2ENR_Type* = object
  loc: uint

type RCC_AHB3ENR_Type* = object
  loc: uint

type RCC_APB1ENR_Type* = object
  loc: uint

type RCC_APB2ENR_Type* = object
  loc: uint

type RCC_AHB1LPENR_Type* = object
  loc: uint

type RCC_AHB2LPENR_Type* = object
  loc: uint

type RCC_AHB3LPENR_Type* = object
  loc: uint

type RCC_APB1LPENR_Type* = object
  loc: uint

type RCC_APB2LPENR_Type* = object
  loc: uint

type RCC_BDCR_Type* = object
  loc: uint

type RCC_CSR_Type* = object
  loc: uint

type RCC_SSCGR_Type* = object
  loc: uint

type RCC_PLLI2SCFGR_Type* = object
  loc: uint

type RCC_PLLSAICFGR_Type* = object
  loc: uint

type RCC_DCKCFGR_Type* = object
  loc: uint

type RCC_CKGATENR_Type* = object
  loc: uint

type RCC_DCKCFGR2_Type* = object
  loc: uint

type RCC_Type* = object
  CR*: RCC_CR_Type
  PLLCFGR*: RCC_PLLCFGR_Type
  CFGR*: RCC_CFGR_Type
  CIR*: RCC_CIR_Type
  AHB1RSTR*: RCC_AHB1RSTR_Type
  AHB2RSTR*: RCC_AHB2RSTR_Type
  AHB3RSTR*: RCC_AHB3RSTR_Type
  APB1RSTR*: RCC_APB1RSTR_Type
  APB2RSTR*: RCC_APB2RSTR_Type
  AHB1ENR*: RCC_AHB1ENR_Type
  AHB2ENR*: RCC_AHB2ENR_Type
  AHB3ENR*: RCC_AHB3ENR_Type
  APB1ENR*: RCC_APB1ENR_Type
  APB2ENR*: RCC_APB2ENR_Type
  AHB1LPENR*: RCC_AHB1LPENR_Type
  AHB2LPENR*: RCC_AHB2LPENR_Type
  AHB3LPENR*: RCC_AHB3LPENR_Type
  APB1LPENR*: RCC_APB1LPENR_Type
  APB2LPENR*: RCC_APB2LPENR_Type
  BDCR*: RCC_BDCR_Type
  CSR*: RCC_CSR_Type
  SSCGR*: RCC_SSCGR_Type
  PLLI2SCFGR*: RCC_PLLI2SCFGR_Type
  PLLSAICFGR*: RCC_PLLSAICFGR_Type
  DCKCFGR*: RCC_DCKCFGR_Type
  CKGATENR*: RCC_CKGATENR_Type
  DCKCFGR2*: RCC_DCKCFGR2_Type

type GPIOH_MODER_Type* = object
  loc: uint

type GPIOH_OTYPER_Type* = object
  loc: uint

type GPIOH_OSPEEDR_Type* = object
  loc: uint

type GPIOH_PUPDR_Type* = object
  loc: uint

type GPIOH_IDR_Type* = object
  loc: uint

type GPIOH_ODR_Type* = object
  loc: uint

type GPIOH_BSRR_Type* = object
  loc: uint

type GPIOH_LCKR_Type* = object
  loc: uint

type GPIOH_AFRL_Type* = object
  loc: uint

type GPIOH_AFRH_Type* = object
  loc: uint

type GPIOH_Type* = object
  MODER*: GPIOH_MODER_Type
  OTYPER*: GPIOH_OTYPER_Type
  OSPEEDR*: GPIOH_OSPEEDR_Type
  PUPDR*: GPIOH_PUPDR_Type
  IDR*: GPIOH_IDR_Type
  ODR*: GPIOH_ODR_Type
  BSRR*: GPIOH_BSRR_Type
  LCKR*: GPIOH_LCKR_Type
  AFRL*: GPIOH_AFRL_Type
  AFRH*: GPIOH_AFRH_Type

type GPIOB_MODER_Type* = object
  loc: uint

type GPIOB_OTYPER_Type* = object
  loc: uint

type GPIOB_OSPEEDR_Type* = object
  loc: uint

type GPIOB_PUPDR_Type* = object
  loc: uint

type GPIOB_IDR_Type* = object
  loc: uint

type GPIOB_ODR_Type* = object
  loc: uint

type GPIOB_BSRR_Type* = object
  loc: uint

type GPIOB_LCKR_Type* = object
  loc: uint

type GPIOB_AFRL_Type* = object
  loc: uint

type GPIOB_AFRH_Type* = object
  loc: uint

type GPIOB_Type* = object
  MODER*: GPIOB_MODER_Type
  OTYPER*: GPIOB_OTYPER_Type
  OSPEEDR*: GPIOB_OSPEEDR_Type
  PUPDR*: GPIOB_PUPDR_Type
  IDR*: GPIOB_IDR_Type
  ODR*: GPIOB_ODR_Type
  BSRR*: GPIOB_BSRR_Type
  LCKR*: GPIOB_LCKR_Type
  AFRL*: GPIOB_AFRL_Type
  AFRH*: GPIOB_AFRH_Type

type GPIOA_MODER_Type* = object
  loc: uint

type GPIOA_OTYPER_Type* = object
  loc: uint

type GPIOA_OSPEEDR_Type* = object
  loc: uint

type GPIOA_PUPDR_Type* = object
  loc: uint

type GPIOA_IDR_Type* = object
  loc: uint

type GPIOA_ODR_Type* = object
  loc: uint

type GPIOA_BSRR_Type* = object
  loc: uint

type GPIOA_LCKR_Type* = object
  loc: uint

type GPIOA_AFRL_Type* = object
  loc: uint

type GPIOA_AFRH_Type* = object
  loc: uint

type GPIOA_Type* = object
  MODER*: GPIOA_MODER_Type
  OTYPER*: GPIOA_OTYPER_Type
  OSPEEDR*: GPIOA_OSPEEDR_Type
  PUPDR*: GPIOA_PUPDR_Type
  IDR*: GPIOA_IDR_Type
  ODR*: GPIOA_ODR_Type
  BSRR*: GPIOA_BSRR_Type
  LCKR*: GPIOA_LCKR_Type
  AFRL*: GPIOA_AFRL_Type
  AFRH*: GPIOA_AFRH_Type

type SYSCFG_MEMRM_Type* = object
  loc: uint

type SYSCFG_PMC_Type* = object
  loc: uint

type SYSCFG_EXTICR1_Type* = object
  loc: uint

type SYSCFG_EXTICR2_Type* = object
  loc: uint

type SYSCFG_EXTICR3_Type* = object
  loc: uint

type SYSCFG_EXTICR4_Type* = object
  loc: uint

type SYSCFG_CMPCR_Type* = object
  loc: uint

type SYSCFG_Type* = object
  MEMRM*: SYSCFG_MEMRM_Type
  PMC*: SYSCFG_PMC_Type
  EXTICR1*: SYSCFG_EXTICR1_Type
  EXTICR2*: SYSCFG_EXTICR2_Type
  EXTICR3*: SYSCFG_EXTICR3_Type
  EXTICR4*: SYSCFG_EXTICR4_Type
  CMPCR*: SYSCFG_CMPCR_Type

type SPI1_CR1_Type* = object
  loc: uint

type SPI1_CR2_Type* = object
  loc: uint

type SPI1_SR_Type* = object
  loc: uint

type SPI1_DR_Type* = object
  loc: uint

type SPI1_CRCPR_Type* = object
  loc: uint

type SPI1_RXCRCR_Type* = object
  loc: uint

type SPI1_TXCRCR_Type* = object
  loc: uint

type SPI1_I2SCFGR_Type* = object
  loc: uint

type SPI1_I2SPR_Type* = object
  loc: uint

type SPI1_Type* = object
  CR1*: SPI1_CR1_Type
  CR2*: SPI1_CR2_Type
  SR*: SPI1_SR_Type
  DR*: SPI1_DR_Type
  CRCPR*: SPI1_CRCPR_Type
  RXCRCR*: SPI1_RXCRCR_Type
  TXCRCR*: SPI1_TXCRCR_Type
  I2SCFGR*: SPI1_I2SCFGR_Type
  I2SPR*: SPI1_I2SPR_Type

type ADC1_SR_Type* = object
  loc: uint

type ADC1_CR1_Type* = object
  loc: uint

type ADC1_CR2_Type* = object
  loc: uint

type ADC1_SMPR1_Type* = object
  loc: uint

type ADC1_SMPR2_Type* = object
  loc: uint

type ADC1_JOFR1_Type* = object
  loc: uint

type ADC1_JOFR2_Type* = object
  loc: uint

type ADC1_JOFR3_Type* = object
  loc: uint

type ADC1_JOFR4_Type* = object
  loc: uint

type ADC1_HTR_Type* = object
  loc: uint

type ADC1_LTR_Type* = object
  loc: uint

type ADC1_SQR1_Type* = object
  loc: uint

type ADC1_SQR2_Type* = object
  loc: uint

type ADC1_SQR3_Type* = object
  loc: uint

type ADC1_JSQR_Type* = object
  loc: uint

type ADC1_JDR1_Type* = object
  loc: uint

type ADC1_JDR2_Type* = object
  loc: uint

type ADC1_JDR3_Type* = object
  loc: uint

type ADC1_JDR4_Type* = object
  loc: uint

type ADC1_DR_Type* = object
  loc: uint

type ADC1_Type* = object
  SR*: ADC1_SR_Type
  CR1*: ADC1_CR1_Type
  CR2*: ADC1_CR2_Type
  SMPR1*: ADC1_SMPR1_Type
  SMPR2*: ADC1_SMPR2_Type
  JOFR1*: ADC1_JOFR1_Type
  JOFR2*: ADC1_JOFR2_Type
  JOFR3*: ADC1_JOFR3_Type
  JOFR4*: ADC1_JOFR4_Type
  HTR*: ADC1_HTR_Type
  LTR*: ADC1_LTR_Type
  SQR1*: ADC1_SQR1_Type
  SQR2*: ADC1_SQR2_Type
  SQR3*: ADC1_SQR3_Type
  JSQR*: ADC1_JSQR_Type
  JDR1*: ADC1_JDR1_Type
  JDR2*: ADC1_JDR2_Type
  JDR3*: ADC1_JDR3_Type
  JDR4*: ADC1_JDR4_Type
  DR*: ADC1_DR_Type

type USART6_SR_Type* = object
  loc: uint

type USART6_DR_Type* = object
  loc: uint

type USART6_BRR_Type* = object
  loc: uint

type USART6_CR1_Type* = object
  loc: uint

type USART6_CR2_Type* = object
  loc: uint

type USART6_CR3_Type* = object
  loc: uint

type USART6_GTPR_Type* = object
  loc: uint

type USART6_Type* = object
  SR*: USART6_SR_Type
  DR*: USART6_DR_Type
  BRR*: USART6_BRR_Type
  CR1*: USART6_CR1_Type
  CR2*: USART6_CR2_Type
  CR3*: USART6_CR3_Type
  GTPR*: USART6_GTPR_Type

type DAC_CR_Type* = object
  loc: uint

type DAC_SWTRIGR_Type* = object
  loc: uint

type DAC_DHR12R1_Type* = object
  loc: uint

type DAC_DHR12L1_Type* = object
  loc: uint

type DAC_DHR8R1_Type* = object
  loc: uint

type DAC_DHR12R2_Type* = object
  loc: uint

type DAC_DHR12L2_Type* = object
  loc: uint

type DAC_DHR8R2_Type* = object
  loc: uint

type DAC_DHR12RD_Type* = object
  loc: uint

type DAC_DHR12LD_Type* = object
  loc: uint

type DAC_DHR8RD_Type* = object
  loc: uint

type DAC_DOR1_Type* = object
  loc: uint

type DAC_DOR2_Type* = object
  loc: uint

type DAC_SR_Type* = object
  loc: uint

type DAC_Type* = object
  CR*: DAC_CR_Type
  SWTRIGR*: DAC_SWTRIGR_Type
  DHR12R1*: DAC_DHR12R1_Type
  DHR12L1*: DAC_DHR12L1_Type
  DHR8R1*: DAC_DHR8R1_Type
  DHR12R2*: DAC_DHR12R2_Type
  DHR12L2*: DAC_DHR12L2_Type
  DHR8R2*: DAC_DHR8R2_Type
  DHR12RD*: DAC_DHR12RD_Type
  DHR12LD*: DAC_DHR12LD_Type
  DHR8RD*: DAC_DHR8RD_Type
  DOR1*: DAC_DOR1_Type
  DOR2*: DAC_DOR2_Type
  SR*: DAC_SR_Type

type FMPI2C_CR1_Type* = object
  loc: uint

type FMPI2C_CR2_Type* = object
  loc: uint

type FMPI2C_OAR1_Type* = object
  loc: uint

type FMPI2C_OAR2_Type* = object
  loc: uint

type FMPI2C_TIMINGR_Type* = object
  loc: uint

type FMPI2C_TIMEOUTR_Type* = object
  loc: uint

type FMPI2C_ISR_Type* = object
  loc: uint

type FMPI2C_ICR_Type* = object
  loc: uint

type FMPI2C_PECR_Type* = object
  loc: uint

type FMPI2C_RXDR_Type* = object
  loc: uint

type FMPI2C_TXDR_Type* = object
  loc: uint

type FMPI2C_Type* = object
  CR1*: FMPI2C_CR1_Type
  CR2*: FMPI2C_CR2_Type
  OAR1*: FMPI2C_OAR1_Type
  OAR2*: FMPI2C_OAR2_Type
  TIMINGR*: FMPI2C_TIMINGR_Type
  TIMEOUTR*: FMPI2C_TIMEOUTR_Type
  ISR*: FMPI2C_ISR_Type
  ICR*: FMPI2C_ICR_Type
  PECR*: FMPI2C_PECR_Type
  RXDR*: FMPI2C_RXDR_Type
  TXDR*: FMPI2C_TXDR_Type

type I2C3_CR1_Type* = object
  loc: uint

type I2C3_CR2_Type* = object
  loc: uint

type I2C3_OAR1_Type* = object
  loc: uint

type I2C3_OAR2_Type* = object
  loc: uint

type I2C3_DR_Type* = object
  loc: uint

type I2C3_SR1_Type* = object
  loc: uint

type I2C3_SR2_Type* = object
  loc: uint

type I2C3_CCR_Type* = object
  loc: uint

type I2C3_TRISE_Type* = object
  loc: uint

type I2C3_FLTR_Type* = object
  loc: uint

type I2C3_Type* = object
  CR1*: I2C3_CR1_Type
  CR2*: I2C3_CR2_Type
  OAR1*: I2C3_OAR1_Type
  OAR2*: I2C3_OAR2_Type
  DR*: I2C3_DR_Type
  SR1*: I2C3_SR1_Type
  SR2*: I2C3_SR2_Type
  CCR*: I2C3_CCR_Type
  TRISE*: I2C3_TRISE_Type
  FLTR*: I2C3_FLTR_Type

type IWDG_KR_Type* = object
  loc: uint

type IWDG_PR_Type* = object
  loc: uint

type IWDG_RLR_Type* = object
  loc: uint

type IWDG_SR_Type* = object
  loc: uint

type IWDG_Type* = object
  KR*: IWDG_KR_Type
  PR*: IWDG_PR_Type
  RLR*: IWDG_RLR_Type
  SR*: IWDG_SR_Type

type WWDG_CR_Type* = object
  loc: uint

type WWDG_CFR_Type* = object
  loc: uint

type WWDG_SR_Type* = object
  loc: uint

type WWDG_Type* = object
  CR*: WWDG_CR_Type
  CFR*: WWDG_CFR_Type
  SR*: WWDG_SR_Type

type RTC_TR_Type* = object
  loc: uint

type RTC_DR_Type* = object
  loc: uint

type RTC_CR_Type* = object
  loc: uint

type RTC_ISR_Type* = object
  loc: uint

type RTC_PRER_Type* = object
  loc: uint

type RTC_WUTR_Type* = object
  loc: uint

type RTC_CALIBR_Type* = object
  loc: uint

type RTC_ALRMAR_Type* = object
  loc: uint

type RTC_ALRMBR_Type* = object
  loc: uint

type RTC_WPR_Type* = object
  loc: uint

type RTC_SSR_Type* = object
  loc: uint

type RTC_SHIFTR_Type* = object
  loc: uint

type RTC_TSTR_Type* = object
  loc: uint

type RTC_TSDR_Type* = object
  loc: uint

type RTC_TSSSR_Type* = object
  loc: uint

type RTC_CALR_Type* = object
  loc: uint

type RTC_TAFCR_Type* = object
  loc: uint

type RTC_ALRMASSR_Type* = object
  loc: uint

type RTC_ALRMBSSR_Type* = object
  loc: uint

type RTC_BKP0R_Type* = object
  loc: uint

type RTC_BKP1R_Type* = object
  loc: uint

type RTC_BKP2R_Type* = object
  loc: uint

type RTC_BKP3R_Type* = object
  loc: uint

type RTC_BKP4R_Type* = object
  loc: uint

type RTC_BKP5R_Type* = object
  loc: uint

type RTC_BKP6R_Type* = object
  loc: uint

type RTC_BKP7R_Type* = object
  loc: uint

type RTC_BKP8R_Type* = object
  loc: uint

type RTC_BKP9R_Type* = object
  loc: uint

type RTC_BKP10R_Type* = object
  loc: uint

type RTC_BKP11R_Type* = object
  loc: uint

type RTC_BKP12R_Type* = object
  loc: uint

type RTC_BKP13R_Type* = object
  loc: uint

type RTC_BKP14R_Type* = object
  loc: uint

type RTC_BKP15R_Type* = object
  loc: uint

type RTC_BKP16R_Type* = object
  loc: uint

type RTC_BKP17R_Type* = object
  loc: uint

type RTC_BKP18R_Type* = object
  loc: uint

type RTC_BKP19R_Type* = object
  loc: uint

type RTC_Type* = object
  TR*: RTC_TR_Type
  DR*: RTC_DR_Type
  CR*: RTC_CR_Type
  ISR*: RTC_ISR_Type
  PRER*: RTC_PRER_Type
  WUTR*: RTC_WUTR_Type
  CALIBR*: RTC_CALIBR_Type
  ALRMAR*: RTC_ALRMAR_Type
  ALRMBR*: RTC_ALRMBR_Type
  WPR*: RTC_WPR_Type
  SSR*: RTC_SSR_Type
  SHIFTR*: RTC_SHIFTR_Type
  TSTR*: RTC_TSTR_Type
  TSDR*: RTC_TSDR_Type
  TSSSR*: RTC_TSSSR_Type
  CALR*: RTC_CALR_Type
  TAFCR*: RTC_TAFCR_Type
  ALRMASSR*: RTC_ALRMASSR_Type
  ALRMBSSR*: RTC_ALRMBSSR_Type
  BKP0R*: RTC_BKP0R_Type
  BKP1R*: RTC_BKP1R_Type
  BKP2R*: RTC_BKP2R_Type
  BKP3R*: RTC_BKP3R_Type
  BKP4R*: RTC_BKP4R_Type
  BKP5R*: RTC_BKP5R_Type
  BKP6R*: RTC_BKP6R_Type
  BKP7R*: RTC_BKP7R_Type
  BKP8R*: RTC_BKP8R_Type
  BKP9R*: RTC_BKP9R_Type
  BKP10R*: RTC_BKP10R_Type
  BKP11R*: RTC_BKP11R_Type
  BKP12R*: RTC_BKP12R_Type
  BKP13R*: RTC_BKP13R_Type
  BKP14R*: RTC_BKP14R_Type
  BKP15R*: RTC_BKP15R_Type
  BKP16R*: RTC_BKP16R_Type
  BKP17R*: RTC_BKP17R_Type
  BKP18R*: RTC_BKP18R_Type
  BKP19R*: RTC_BKP19R_Type

type UART4_SR_Type* = object
  loc: uint

type UART4_DR_Type* = object
  loc: uint

type UART4_BRR_Type* = object
  loc: uint

type UART4_CR1_Type* = object
  loc: uint

type UART4_CR2_Type* = object
  loc: uint

type UART4_CR3_Type* = object
  loc: uint

type UART4_Type* = object
  SR*: UART4_SR_Type
  DR*: UART4_DR_Type
  BRR*: UART4_BRR_Type
  CR1*: UART4_CR1_Type
  CR2*: UART4_CR2_Type
  CR3*: UART4_CR3_Type

type C_ADC_CSR_Type* = object
  loc: uint

type C_ADC_CCR_Type* = object
  loc: uint

type C_ADC_CDR_Type* = object
  loc: uint

type C_ADC_Type* = object
  CSR*: C_ADC_CSR_Type
  CCR*: C_ADC_CCR_Type
  CDR*: C_ADC_CDR_Type

type TIM1_CR1_Type* = object
  loc: uint

type TIM1_CR2_Type* = object
  loc: uint

type TIM1_SMCR_Type* = object
  loc: uint

type TIM1_DIER_Type* = object
  loc: uint

type TIM1_SR_Type* = object
  loc: uint

type TIM1_EGR_Type* = object
  loc: uint

type TIM1_CCMR1_Output_Type* = object
  loc: uint

type TIM1_CCMR1_Input_Type* = object
  loc: uint

type TIM1_CCMR2_Output_Type* = object
  loc: uint

type TIM1_CCMR2_Input_Type* = object
  loc: uint

type TIM1_CCER_Type* = object
  loc: uint

type TIM1_CNT_Type* = object
  loc: uint

type TIM1_PSC_Type* = object
  loc: uint

type TIM1_ARR_Type* = object
  loc: uint

type TIM1_CCR1_Type* = object
  loc: uint

type TIM1_CCR2_Type* = object
  loc: uint

type TIM1_CCR3_Type* = object
  loc: uint

type TIM1_CCR4_Type* = object
  loc: uint

type TIM1_DCR_Type* = object
  loc: uint

type TIM1_DMAR_Type* = object
  loc: uint

type TIM1_RCR_Type* = object
  loc: uint

type TIM1_BDTR_Type* = object
  loc: uint

type TIM1_Type* = object
  CR1*: TIM1_CR1_Type
  CR2*: TIM1_CR2_Type
  SMCR*: TIM1_SMCR_Type
  DIER*: TIM1_DIER_Type
  SR*: TIM1_SR_Type
  EGR*: TIM1_EGR_Type
  CCMR1_Output*: TIM1_CCMR1_Output_Type
  CCMR1_Input*: TIM1_CCMR1_Input_Type
  CCMR2_Output*: TIM1_CCMR2_Output_Type
  CCMR2_Input*: TIM1_CCMR2_Input_Type
  CCER*: TIM1_CCER_Type
  CNT*: TIM1_CNT_Type
  PSC*: TIM1_PSC_Type
  ARR*: TIM1_ARR_Type
  RCR*: TIM1_RCR_Type
  CCR1*: TIM1_CCR1_Type
  CCR2*: TIM1_CCR2_Type
  CCR3*: TIM1_CCR3_Type
  CCR4*: TIM1_CCR4_Type
  BDTR*: TIM1_BDTR_Type
  DCR*: TIM1_DCR_Type
  DMAR*: TIM1_DMAR_Type

type TIM2_CR1_Type* = object
  loc: uint

type TIM2_CR2_Type* = object
  loc: uint

type TIM2_SMCR_Type* = object
  loc: uint

type TIM2_DIER_Type* = object
  loc: uint

type TIM2_SR_Type* = object
  loc: uint

type TIM2_EGR_Type* = object
  loc: uint

type TIM2_CCMR1_Output_Type* = object
  loc: uint

type TIM2_CCMR1_Input_Type* = object
  loc: uint

type TIM2_CCMR2_Output_Type* = object
  loc: uint

type TIM2_CCMR2_Input_Type* = object
  loc: uint

type TIM2_CCER_Type* = object
  loc: uint

type TIM2_CNT_Type* = object
  loc: uint

type TIM2_PSC_Type* = object
  loc: uint

type TIM2_ARR_Type* = object
  loc: uint

type TIM2_CCR1_Type* = object
  loc: uint

type TIM2_CCR2_Type* = object
  loc: uint

type TIM2_CCR3_Type* = object
  loc: uint

type TIM2_CCR4_Type* = object
  loc: uint

type TIM2_DCR_Type* = object
  loc: uint

type TIM2_DMAR_Type* = object
  loc: uint

type TIM2_OR_Type* = object
  loc: uint

type TIM2_Type* = object
  CR1*: TIM2_CR1_Type
  CR2*: TIM2_CR2_Type
  SMCR*: TIM2_SMCR_Type
  DIER*: TIM2_DIER_Type
  SR*: TIM2_SR_Type
  EGR*: TIM2_EGR_Type
  CCMR1_Output*: TIM2_CCMR1_Output_Type
  CCMR1_Input*: TIM2_CCMR1_Input_Type
  CCMR2_Output*: TIM2_CCMR2_Output_Type
  CCMR2_Input*: TIM2_CCMR2_Input_Type
  CCER*: TIM2_CCER_Type
  CNT*: TIM2_CNT_Type
  PSC*: TIM2_PSC_Type
  ARR*: TIM2_ARR_Type
  CCR1*: TIM2_CCR1_Type
  CCR2*: TIM2_CCR2_Type
  CCR3*: TIM2_CCR3_Type
  CCR4*: TIM2_CCR4_Type
  DCR*: TIM2_DCR_Type
  DMAR*: TIM2_DMAR_Type
  ORx*: TIM2_OR_Type

type TIM3_CR1_Type* = object
  loc: uint

type TIM3_CR2_Type* = object
  loc: uint

type TIM3_SMCR_Type* = object
  loc: uint

type TIM3_DIER_Type* = object
  loc: uint

type TIM3_SR_Type* = object
  loc: uint

type TIM3_EGR_Type* = object
  loc: uint

type TIM3_CCMR1_Output_Type* = object
  loc: uint

type TIM3_CCMR1_Input_Type* = object
  loc: uint

type TIM3_CCMR2_Output_Type* = object
  loc: uint

type TIM3_CCMR2_Input_Type* = object
  loc: uint

type TIM3_CCER_Type* = object
  loc: uint

type TIM3_CNT_Type* = object
  loc: uint

type TIM3_PSC_Type* = object
  loc: uint

type TIM3_ARR_Type* = object
  loc: uint

type TIM3_CCR1_Type* = object
  loc: uint

type TIM3_CCR2_Type* = object
  loc: uint

type TIM3_CCR3_Type* = object
  loc: uint

type TIM3_CCR4_Type* = object
  loc: uint

type TIM3_DCR_Type* = object
  loc: uint

type TIM3_DMAR_Type* = object
  loc: uint

type TIM3_Type* = object
  CR1*: TIM3_CR1_Type
  CR2*: TIM3_CR2_Type
  SMCR*: TIM3_SMCR_Type
  DIER*: TIM3_DIER_Type
  SR*: TIM3_SR_Type
  EGR*: TIM3_EGR_Type
  CCMR1_Output*: TIM3_CCMR1_Output_Type
  CCMR1_Input*: TIM3_CCMR1_Input_Type
  CCMR2_Output*: TIM3_CCMR2_Output_Type
  CCMR2_Input*: TIM3_CCMR2_Input_Type
  CCER*: TIM3_CCER_Type
  CNT*: TIM3_CNT_Type
  PSC*: TIM3_PSC_Type
  ARR*: TIM3_ARR_Type
  CCR1*: TIM3_CCR1_Type
  CCR2*: TIM3_CCR2_Type
  CCR3*: TIM3_CCR3_Type
  CCR4*: TIM3_CCR4_Type
  DCR*: TIM3_DCR_Type
  DMAR*: TIM3_DMAR_Type

type TIM5_CR1_Type* = object
  loc: uint

type TIM5_CR2_Type* = object
  loc: uint

type TIM5_SMCR_Type* = object
  loc: uint

type TIM5_DIER_Type* = object
  loc: uint

type TIM5_SR_Type* = object
  loc: uint

type TIM5_EGR_Type* = object
  loc: uint

type TIM5_CCMR1_Output_Type* = object
  loc: uint

type TIM5_CCMR1_Input_Type* = object
  loc: uint

type TIM5_CCMR2_Output_Type* = object
  loc: uint

type TIM5_CCMR2_Input_Type* = object
  loc: uint

type TIM5_CCER_Type* = object
  loc: uint

type TIM5_CNT_Type* = object
  loc: uint

type TIM5_PSC_Type* = object
  loc: uint

type TIM5_ARR_Type* = object
  loc: uint

type TIM5_CCR1_Type* = object
  loc: uint

type TIM5_CCR2_Type* = object
  loc: uint

type TIM5_CCR3_Type* = object
  loc: uint

type TIM5_CCR4_Type* = object
  loc: uint

type TIM5_DCR_Type* = object
  loc: uint

type TIM5_DMAR_Type* = object
  loc: uint

type TIM5_OR_Type* = object
  loc: uint

type TIM5_Type* = object
  CR1*: TIM5_CR1_Type
  CR2*: TIM5_CR2_Type
  SMCR*: TIM5_SMCR_Type
  DIER*: TIM5_DIER_Type
  SR*: TIM5_SR_Type
  EGR*: TIM5_EGR_Type
  CCMR1_Output*: TIM5_CCMR1_Output_Type
  CCMR1_Input*: TIM5_CCMR1_Input_Type
  CCMR2_Output*: TIM5_CCMR2_Output_Type
  CCMR2_Input*: TIM5_CCMR2_Input_Type
  CCER*: TIM5_CCER_Type
  CNT*: TIM5_CNT_Type
  PSC*: TIM5_PSC_Type
  ARR*: TIM5_ARR_Type
  CCR1*: TIM5_CCR1_Type
  CCR2*: TIM5_CCR2_Type
  CCR3*: TIM5_CCR3_Type
  CCR4*: TIM5_CCR4_Type
  DCR*: TIM5_DCR_Type
  DMAR*: TIM5_DMAR_Type
  ORx*: TIM5_OR_Type

type TIM9_CR1_Type* = object
  loc: uint

type TIM9_CR2_Type* = object
  loc: uint

type TIM9_SMCR_Type* = object
  loc: uint

type TIM9_DIER_Type* = object
  loc: uint

type TIM9_SR_Type* = object
  loc: uint

type TIM9_EGR_Type* = object
  loc: uint

type TIM9_CCMR1_Output_Type* = object
  loc: uint

type TIM9_CCMR1_Input_Type* = object
  loc: uint

type TIM9_CCER_Type* = object
  loc: uint

type TIM9_CNT_Type* = object
  loc: uint

type TIM9_PSC_Type* = object
  loc: uint

type TIM9_ARR_Type* = object
  loc: uint

type TIM9_CCR1_Type* = object
  loc: uint

type TIM9_CCR2_Type* = object
  loc: uint

type TIM9_Type* = object
  CR1*: TIM9_CR1_Type
  CR2*: TIM9_CR2_Type
  SMCR*: TIM9_SMCR_Type
  DIER*: TIM9_DIER_Type
  SR*: TIM9_SR_Type
  EGR*: TIM9_EGR_Type
  CCMR1_Output*: TIM9_CCMR1_Output_Type
  CCMR1_Input*: TIM9_CCMR1_Input_Type
  CCER*: TIM9_CCER_Type
  CNT*: TIM9_CNT_Type
  PSC*: TIM9_PSC_Type
  ARR*: TIM9_ARR_Type
  CCR1*: TIM9_CCR1_Type
  CCR2*: TIM9_CCR2_Type

type TIM10_CR1_Type* = object
  loc: uint

type TIM10_DIER_Type* = object
  loc: uint

type TIM10_SR_Type* = object
  loc: uint

type TIM10_EGR_Type* = object
  loc: uint

type TIM10_CCMR1_Output_Type* = object
  loc: uint

type TIM10_CCMR1_Input_Type* = object
  loc: uint

type TIM10_CCER_Type* = object
  loc: uint

type TIM10_CNT_Type* = object
  loc: uint

type TIM10_PSC_Type* = object
  loc: uint

type TIM10_ARR_Type* = object
  loc: uint

type TIM10_CCR1_Type* = object
  loc: uint

type TIM10_Type* = object
  CR1*: TIM10_CR1_Type
  DIER*: TIM10_DIER_Type
  SR*: TIM10_SR_Type
  EGR*: TIM10_EGR_Type
  CCMR1_Output*: TIM10_CCMR1_Output_Type
  CCMR1_Input*: TIM10_CCMR1_Input_Type
  CCER*: TIM10_CCER_Type
  CNT*: TIM10_CNT_Type
  PSC*: TIM10_PSC_Type
  ARR*: TIM10_ARR_Type
  CCR1*: TIM10_CCR1_Type

type TIM11_CR1_Type* = object
  loc: uint

type TIM11_DIER_Type* = object
  loc: uint

type TIM11_SR_Type* = object
  loc: uint

type TIM11_EGR_Type* = object
  loc: uint

type TIM11_CCMR1_Output_Type* = object
  loc: uint

type TIM11_CCMR1_Input_Type* = object
  loc: uint

type TIM11_CCER_Type* = object
  loc: uint

type TIM11_CNT_Type* = object
  loc: uint

type TIM11_PSC_Type* = object
  loc: uint

type TIM11_ARR_Type* = object
  loc: uint

type TIM11_CCR1_Type* = object
  loc: uint

type TIM11_OR_Type* = object
  loc: uint

type TIM11_Type* = object
  CR1*: TIM11_CR1_Type
  DIER*: TIM11_DIER_Type
  SR*: TIM11_SR_Type
  EGR*: TIM11_EGR_Type
  CCMR1_Output*: TIM11_CCMR1_Output_Type
  CCMR1_Input*: TIM11_CCMR1_Input_Type
  CCER*: TIM11_CCER_Type
  CNT*: TIM11_CNT_Type
  PSC*: TIM11_PSC_Type
  ARR*: TIM11_ARR_Type
  CCR1*: TIM11_CCR1_Type
  ORx*: TIM11_OR_Type

type TIM6_CR1_Type* = object
  loc: uint

type TIM6_CR2_Type* = object
  loc: uint

type TIM6_DIER_Type* = object
  loc: uint

type TIM6_SR_Type* = object
  loc: uint

type TIM6_EGR_Type* = object
  loc: uint

type TIM6_CNT_Type* = object
  loc: uint

type TIM6_PSC_Type* = object
  loc: uint

type TIM6_ARR_Type* = object
  loc: uint

type TIM6_Type* = object
  CR1*: TIM6_CR1_Type
  CR2*: TIM6_CR2_Type
  DIER*: TIM6_DIER_Type
  SR*: TIM6_SR_Type
  EGR*: TIM6_EGR_Type
  CNT*: TIM6_CNT_Type
  PSC*: TIM6_PSC_Type
  ARR*: TIM6_ARR_Type

type CRC_DR_Type* = object
  loc: uint

type CRC_IDR_Type* = object
  loc: uint

type CRC_CR_Type* = object
  loc: uint

type CRC_Type* = object
  DR*: CRC_DR_Type
  IDR*: CRC_IDR_Type
  CR*: CRC_CR_Type

type OTG_FS_GLOBAL_FS_GOTGCTL_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GOTGINT_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GAHBCFG_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GUSBCFG_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GRSTCTL_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GINTSTS_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GINTMSK_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GRXSTSR_Device_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GRXSTSR_Host_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GRXFSIZ_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GNPTXSTS_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_GCCFG_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_CID_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_HPTXFSIZ_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_DIEPTXF1_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_DIEPTXF2_Type* = object
  loc: uint

type OTG_FS_GLOBAL_FS_DIEPTXF3_Type* = object
  loc: uint

type OTG_FS_GLOBAL_Type* = object
  FS_GOTGCTL*: OTG_FS_GLOBAL_FS_GOTGCTL_Type
  FS_GOTGINT*: OTG_FS_GLOBAL_FS_GOTGINT_Type
  FS_GAHBCFG*: OTG_FS_GLOBAL_FS_GAHBCFG_Type
  FS_GUSBCFG*: OTG_FS_GLOBAL_FS_GUSBCFG_Type
  FS_GRSTCTL*: OTG_FS_GLOBAL_FS_GRSTCTL_Type
  FS_GINTSTS*: OTG_FS_GLOBAL_FS_GINTSTS_Type
  FS_GINTMSK*: OTG_FS_GLOBAL_FS_GINTMSK_Type
  FS_GRXSTSR_Device*: OTG_FS_GLOBAL_FS_GRXSTSR_Device_Type
  FS_GRXSTSR_Host*: OTG_FS_GLOBAL_FS_GRXSTSR_Host_Type
  FS_GRXFSIZ*: OTG_FS_GLOBAL_FS_GRXFSIZ_Type
  FS_GNPTXFSIZ_Device*: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Type
  FS_GNPTXFSIZ_Host*: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Type
  FS_GNPTXSTS*: OTG_FS_GLOBAL_FS_GNPTXSTS_Type
  FS_GCCFG*: OTG_FS_GLOBAL_FS_GCCFG_Type
  FS_CID*: OTG_FS_GLOBAL_FS_CID_Type
  FS_HPTXFSIZ*: OTG_FS_GLOBAL_FS_HPTXFSIZ_Type
  FS_DIEPTXF1*: OTG_FS_GLOBAL_FS_DIEPTXF1_Type
  FS_DIEPTXF2*: OTG_FS_GLOBAL_FS_DIEPTXF2_Type
  FS_DIEPTXF3*: OTG_FS_GLOBAL_FS_DIEPTXF3_Type

type OTG_FS_HOST_FS_HCFG_Type* = object
  loc: uint

type OTG_FS_HOST_HFIR_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HFNUM_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HPTXSTS_Type* = object
  loc: uint

type OTG_FS_HOST_HAINT_Type* = object
  loc: uint

type OTG_FS_HOST_HAINTMSK_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HPRT_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR0_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR1_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR2_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR3_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR4_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR5_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR6_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR7_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR8_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR9_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR10_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCCHAR11_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT0_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT1_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT2_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT3_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT4_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT5_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT6_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT7_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT8_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT9_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT10_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINT11_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK0_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK1_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK2_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK3_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK4_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK5_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK6_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK7_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK8_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK9_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK10_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCINTMSK11_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ0_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ1_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ2_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ3_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ4_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ5_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ6_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ7_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ8_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ9_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ10_Type* = object
  loc: uint

type OTG_FS_HOST_FS_HCTSIZ11_Type* = object
  loc: uint

type OTG_FS_HOST_Type* = object
  FS_HCFG*: OTG_FS_HOST_FS_HCFG_Type
  HFIR*: OTG_FS_HOST_HFIR_Type
  FS_HFNUM*: OTG_FS_HOST_FS_HFNUM_Type
  FS_HPTXSTS*: OTG_FS_HOST_FS_HPTXSTS_Type
  HAINT*: OTG_FS_HOST_HAINT_Type
  HAINTMSK*: OTG_FS_HOST_HAINTMSK_Type
  FS_HPRT*: OTG_FS_HOST_FS_HPRT_Type
  FS_HCCHAR0*: OTG_FS_HOST_FS_HCCHAR0_Type
  FS_HCINT0*: OTG_FS_HOST_FS_HCINT0_Type
  FS_HCINTMSK0*: OTG_FS_HOST_FS_HCINTMSK0_Type
  FS_HCTSIZ0*: OTG_FS_HOST_FS_HCTSIZ0_Type
  FS_HCCHAR1*: OTG_FS_HOST_FS_HCCHAR1_Type
  FS_HCINT1*: OTG_FS_HOST_FS_HCINT1_Type
  FS_HCINTMSK1*: OTG_FS_HOST_FS_HCINTMSK1_Type
  FS_HCTSIZ1*: OTG_FS_HOST_FS_HCTSIZ1_Type
  FS_HCCHAR2*: OTG_FS_HOST_FS_HCCHAR2_Type
  FS_HCINT2*: OTG_FS_HOST_FS_HCINT2_Type
  FS_HCINTMSK2*: OTG_FS_HOST_FS_HCINTMSK2_Type
  FS_HCTSIZ2*: OTG_FS_HOST_FS_HCTSIZ2_Type
  FS_HCCHAR3*: OTG_FS_HOST_FS_HCCHAR3_Type
  FS_HCINT3*: OTG_FS_HOST_FS_HCINT3_Type
  FS_HCINTMSK3*: OTG_FS_HOST_FS_HCINTMSK3_Type
  FS_HCTSIZ3*: OTG_FS_HOST_FS_HCTSIZ3_Type
  FS_HCCHAR4*: OTG_FS_HOST_FS_HCCHAR4_Type
  FS_HCINT4*: OTG_FS_HOST_FS_HCINT4_Type
  FS_HCINTMSK4*: OTG_FS_HOST_FS_HCINTMSK4_Type
  FS_HCTSIZ4*: OTG_FS_HOST_FS_HCTSIZ4_Type
  FS_HCCHAR5*: OTG_FS_HOST_FS_HCCHAR5_Type
  FS_HCINT5*: OTG_FS_HOST_FS_HCINT5_Type
  FS_HCINTMSK5*: OTG_FS_HOST_FS_HCINTMSK5_Type
  FS_HCTSIZ5*: OTG_FS_HOST_FS_HCTSIZ5_Type
  FS_HCCHAR6*: OTG_FS_HOST_FS_HCCHAR6_Type
  FS_HCINT6*: OTG_FS_HOST_FS_HCINT6_Type
  FS_HCINTMSK6*: OTG_FS_HOST_FS_HCINTMSK6_Type
  FS_HCTSIZ6*: OTG_FS_HOST_FS_HCTSIZ6_Type
  FS_HCCHAR7*: OTG_FS_HOST_FS_HCCHAR7_Type
  FS_HCINT7*: OTG_FS_HOST_FS_HCINT7_Type
  FS_HCINTMSK7*: OTG_FS_HOST_FS_HCINTMSK7_Type
  FS_HCTSIZ7*: OTG_FS_HOST_FS_HCTSIZ7_Type
  FS_HCCHAR8*: OTG_FS_HOST_FS_HCCHAR8_Type
  FS_HCINT8*: OTG_FS_HOST_FS_HCINT8_Type
  FS_HCINTMSK8*: OTG_FS_HOST_FS_HCINTMSK8_Type
  FS_HCTSIZ8*: OTG_FS_HOST_FS_HCTSIZ8_Type
  FS_HCCHAR9*: OTG_FS_HOST_FS_HCCHAR9_Type
  FS_HCINT9*: OTG_FS_HOST_FS_HCINT9_Type
  FS_HCINTMSK9*: OTG_FS_HOST_FS_HCINTMSK9_Type
  FS_HCTSIZ9*: OTG_FS_HOST_FS_HCTSIZ9_Type
  FS_HCCHAR10*: OTG_FS_HOST_FS_HCCHAR10_Type
  FS_HCINT10*: OTG_FS_HOST_FS_HCINT10_Type
  FS_HCINTMSK10*: OTG_FS_HOST_FS_HCINTMSK10_Type
  FS_HCTSIZ10*: OTG_FS_HOST_FS_HCTSIZ10_Type
  FS_HCCHAR11*: OTG_FS_HOST_FS_HCCHAR11_Type
  FS_HCINT11*: OTG_FS_HOST_FS_HCINT11_Type
  FS_HCINTMSK11*: OTG_FS_HOST_FS_HCINTMSK11_Type
  FS_HCTSIZ11*: OTG_FS_HOST_FS_HCTSIZ11_Type

type OTG_FS_DEVICE_FS_DCFG_Type* = object
  loc: uint

type OTG_FS_DEVICE_FS_DCTL_Type* = object
  loc: uint

type OTG_FS_DEVICE_FS_DSTS_Type* = object
  loc: uint

type OTG_FS_DEVICE_FS_DIEPMSK_Type* = object
  loc: uint

type OTG_FS_DEVICE_FS_DOEPMSK_Type* = object
  loc: uint

type OTG_FS_DEVICE_FS_DAINT_Type* = object
  loc: uint

type OTG_FS_DEVICE_FS_DAINTMSK_Type* = object
  loc: uint

type OTG_FS_DEVICE_DVBUSDIS_Type* = object
  loc: uint

type OTG_FS_DEVICE_DVBUSPULSE_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPEMPMSK_Type* = object
  loc: uint

type OTG_FS_DEVICE_FS_DIEPCTL0_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPCTL1_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPCTL2_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPCTL3_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPCTL0_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPCTL1_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPCTL2_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPCTL3_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPINT0_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPINT1_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPINT2_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPINT3_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPINT0_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPINT1_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPINT2_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPINT3_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPTSIZ0_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPTSIZ0_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPTSIZ1_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPTSIZ2_Type* = object
  loc: uint

type OTG_FS_DEVICE_DIEPTSIZ3_Type* = object
  loc: uint

type OTG_FS_DEVICE_DTXFSTS0_Type* = object
  loc: uint

type OTG_FS_DEVICE_DTXFSTS1_Type* = object
  loc: uint

type OTG_FS_DEVICE_DTXFSTS2_Type* = object
  loc: uint

type OTG_FS_DEVICE_DTXFSTS3_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPTSIZ1_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPTSIZ2_Type* = object
  loc: uint

type OTG_FS_DEVICE_DOEPTSIZ3_Type* = object
  loc: uint

type OTG_FS_DEVICE_Type* = object
  FS_DCFG*: OTG_FS_DEVICE_FS_DCFG_Type
  FS_DCTL*: OTG_FS_DEVICE_FS_DCTL_Type
  FS_DSTS*: OTG_FS_DEVICE_FS_DSTS_Type
  FS_DIEPMSK*: OTG_FS_DEVICE_FS_DIEPMSK_Type
  FS_DOEPMSK*: OTG_FS_DEVICE_FS_DOEPMSK_Type
  FS_DAINT*: OTG_FS_DEVICE_FS_DAINT_Type
  FS_DAINTMSK*: OTG_FS_DEVICE_FS_DAINTMSK_Type
  DVBUSDIS*: OTG_FS_DEVICE_DVBUSDIS_Type
  DVBUSPULSE*: OTG_FS_DEVICE_DVBUSPULSE_Type
  DIEPEMPMSK*: OTG_FS_DEVICE_DIEPEMPMSK_Type
  FS_DIEPCTL0*: OTG_FS_DEVICE_FS_DIEPCTL0_Type
  DIEPINT0*: OTG_FS_DEVICE_DIEPINT0_Type
  DIEPTSIZ0*: OTG_FS_DEVICE_DIEPTSIZ0_Type
  DTXFSTS0*: OTG_FS_DEVICE_DTXFSTS0_Type
  DIEPCTL1*: OTG_FS_DEVICE_DIEPCTL1_Type
  DIEPINT1*: OTG_FS_DEVICE_DIEPINT1_Type
  DIEPTSIZ1*: OTG_FS_DEVICE_DIEPTSIZ1_Type
  DTXFSTS1*: OTG_FS_DEVICE_DTXFSTS1_Type
  DIEPCTL2*: OTG_FS_DEVICE_DIEPCTL2_Type
  DIEPINT2*: OTG_FS_DEVICE_DIEPINT2_Type
  DIEPTSIZ2*: OTG_FS_DEVICE_DIEPTSIZ2_Type
  DTXFSTS2*: OTG_FS_DEVICE_DTXFSTS2_Type
  DIEPCTL3*: OTG_FS_DEVICE_DIEPCTL3_Type
  DIEPINT3*: OTG_FS_DEVICE_DIEPINT3_Type
  DIEPTSIZ3*: OTG_FS_DEVICE_DIEPTSIZ3_Type
  DTXFSTS3*: OTG_FS_DEVICE_DTXFSTS3_Type
  DOEPCTL0*: OTG_FS_DEVICE_DOEPCTL0_Type
  DOEPINT0*: OTG_FS_DEVICE_DOEPINT0_Type
  DOEPTSIZ0*: OTG_FS_DEVICE_DOEPTSIZ0_Type
  DOEPCTL1*: OTG_FS_DEVICE_DOEPCTL1_Type
  DOEPINT1*: OTG_FS_DEVICE_DOEPINT1_Type
  DOEPTSIZ1*: OTG_FS_DEVICE_DOEPTSIZ1_Type
  DOEPCTL2*: OTG_FS_DEVICE_DOEPCTL2_Type
  DOEPINT2*: OTG_FS_DEVICE_DOEPINT2_Type
  DOEPTSIZ2*: OTG_FS_DEVICE_DOEPTSIZ2_Type
  DOEPCTL3*: OTG_FS_DEVICE_DOEPCTL3_Type
  DOEPINT3*: OTG_FS_DEVICE_DOEPINT3_Type
  DOEPTSIZ3*: OTG_FS_DEVICE_DOEPTSIZ3_Type

type OTG_FS_PWRCLK_FS_PCGCCTL_Type* = object
  loc: uint

type OTG_FS_PWRCLK_Type* = object
  FS_PCGCCTL*: OTG_FS_PWRCLK_FS_PCGCCTL_Type

type CAN1_MCR_Type* = object
  loc: uint

type CAN1_MSR_Type* = object
  loc: uint

type CAN1_TSR_Type* = object
  loc: uint

type CAN1_RF0R_Type* = object
  loc: uint

type CAN1_RF1R_Type* = object
  loc: uint

type CAN1_IER_Type* = object
  loc: uint

type CAN1_ESR_Type* = object
  loc: uint

type CAN1_BTR_Type* = object
  loc: uint

type CAN1_TI0R_Type* = object
  loc: uint

type CAN1_TDT0R_Type* = object
  loc: uint

type CAN1_TDL0R_Type* = object
  loc: uint

type CAN1_TDH0R_Type* = object
  loc: uint

type CAN1_TI1R_Type* = object
  loc: uint

type CAN1_TDT1R_Type* = object
  loc: uint

type CAN1_TDL1R_Type* = object
  loc: uint

type CAN1_TDH1R_Type* = object
  loc: uint

type CAN1_TI2R_Type* = object
  loc: uint

type CAN1_TDT2R_Type* = object
  loc: uint

type CAN1_TDL2R_Type* = object
  loc: uint

type CAN1_TDH2R_Type* = object
  loc: uint

type CAN1_RI0R_Type* = object
  loc: uint

type CAN1_RDT0R_Type* = object
  loc: uint

type CAN1_RDL0R_Type* = object
  loc: uint

type CAN1_RDH0R_Type* = object
  loc: uint

type CAN1_RI1R_Type* = object
  loc: uint

type CAN1_RDT1R_Type* = object
  loc: uint

type CAN1_RDL1R_Type* = object
  loc: uint

type CAN1_RDH1R_Type* = object
  loc: uint

type CAN1_FMR_Type* = object
  loc: uint

type CAN1_FM1R_Type* = object
  loc: uint

type CAN1_FS1R_Type* = object
  loc: uint

type CAN1_FFA1R_Type* = object
  loc: uint

type CAN1_FA1R_Type* = object
  loc: uint

type CAN1_F0R1_Type* = object
  loc: uint

type CAN1_F0R2_Type* = object
  loc: uint

type CAN1_F1R1_Type* = object
  loc: uint

type CAN1_F1R2_Type* = object
  loc: uint

type CAN1_F2R1_Type* = object
  loc: uint

type CAN1_F2R2_Type* = object
  loc: uint

type CAN1_F3R1_Type* = object
  loc: uint

type CAN1_F3R2_Type* = object
  loc: uint

type CAN1_F4R1_Type* = object
  loc: uint

type CAN1_F4R2_Type* = object
  loc: uint

type CAN1_F5R1_Type* = object
  loc: uint

type CAN1_F5R2_Type* = object
  loc: uint

type CAN1_F6R1_Type* = object
  loc: uint

type CAN1_F6R2_Type* = object
  loc: uint

type CAN1_F7R1_Type* = object
  loc: uint

type CAN1_F7R2_Type* = object
  loc: uint

type CAN1_F8R1_Type* = object
  loc: uint

type CAN1_F8R2_Type* = object
  loc: uint

type CAN1_F9R1_Type* = object
  loc: uint

type CAN1_F9R2_Type* = object
  loc: uint

type CAN1_F10R1_Type* = object
  loc: uint

type CAN1_F10R2_Type* = object
  loc: uint

type CAN1_F11R1_Type* = object
  loc: uint

type CAN1_F11R2_Type* = object
  loc: uint

type CAN1_F12R1_Type* = object
  loc: uint

type CAN1_F12R2_Type* = object
  loc: uint

type CAN1_F13R1_Type* = object
  loc: uint

type CAN1_F13R2_Type* = object
  loc: uint

type CAN1_F14R1_Type* = object
  loc: uint

type CAN1_F14R2_Type* = object
  loc: uint

type CAN1_F15R1_Type* = object
  loc: uint

type CAN1_F15R2_Type* = object
  loc: uint

type CAN1_F16R1_Type* = object
  loc: uint

type CAN1_F16R2_Type* = object
  loc: uint

type CAN1_F17R1_Type* = object
  loc: uint

type CAN1_F17R2_Type* = object
  loc: uint

type CAN1_F18R1_Type* = object
  loc: uint

type CAN1_F18R2_Type* = object
  loc: uint

type CAN1_F19R1_Type* = object
  loc: uint

type CAN1_F19R2_Type* = object
  loc: uint

type CAN1_F20R1_Type* = object
  loc: uint

type CAN1_F20R2_Type* = object
  loc: uint

type CAN1_F21R1_Type* = object
  loc: uint

type CAN1_F21R2_Type* = object
  loc: uint

type CAN1_F22R1_Type* = object
  loc: uint

type CAN1_F22R2_Type* = object
  loc: uint

type CAN1_F23R1_Type* = object
  loc: uint

type CAN1_F23R2_Type* = object
  loc: uint

type CAN1_F24R1_Type* = object
  loc: uint

type CAN1_F24R2_Type* = object
  loc: uint

type CAN1_F25R1_Type* = object
  loc: uint

type CAN1_F25R2_Type* = object
  loc: uint

type CAN1_F26R1_Type* = object
  loc: uint

type CAN1_F26R2_Type* = object
  loc: uint

type CAN1_F27R1_Type* = object
  loc: uint

type CAN1_F27R2_Type* = object
  loc: uint

type CAN1_Type* = object
  MCR*: CAN1_MCR_Type
  MSR*: CAN1_MSR_Type
  TSR*: CAN1_TSR_Type
  RF0R*: CAN1_RF0R_Type
  RF1R*: CAN1_RF1R_Type
  IER*: CAN1_IER_Type
  ESR*: CAN1_ESR_Type
  BTR*: CAN1_BTR_Type
  TI0R*: CAN1_TI0R_Type
  TDT0R*: CAN1_TDT0R_Type
  TDL0R*: CAN1_TDL0R_Type
  TDH0R*: CAN1_TDH0R_Type
  TI1R*: CAN1_TI1R_Type
  TDT1R*: CAN1_TDT1R_Type
  TDL1R*: CAN1_TDL1R_Type
  TDH1R*: CAN1_TDH1R_Type
  TI2R*: CAN1_TI2R_Type
  TDT2R*: CAN1_TDT2R_Type
  TDL2R*: CAN1_TDL2R_Type
  TDH2R*: CAN1_TDH2R_Type
  RI0R*: CAN1_RI0R_Type
  RDT0R*: CAN1_RDT0R_Type
  RDL0R*: CAN1_RDL0R_Type
  RDH0R*: CAN1_RDH0R_Type
  RI1R*: CAN1_RI1R_Type
  RDT1R*: CAN1_RDT1R_Type
  RDL1R*: CAN1_RDL1R_Type
  RDH1R*: CAN1_RDH1R_Type
  FMR*: CAN1_FMR_Type
  FM1R*: CAN1_FM1R_Type
  FS1R*: CAN1_FS1R_Type
  FFA1R*: CAN1_FFA1R_Type
  FA1R*: CAN1_FA1R_Type
  F0R1*: CAN1_F0R1_Type
  F0R2*: CAN1_F0R2_Type
  F1R1*: CAN1_F1R1_Type
  F1R2*: CAN1_F1R2_Type
  F2R1*: CAN1_F2R1_Type
  F2R2*: CAN1_F2R2_Type
  F3R1*: CAN1_F3R1_Type
  F3R2*: CAN1_F3R2_Type
  F4R1*: CAN1_F4R1_Type
  F4R2*: CAN1_F4R2_Type
  F5R1*: CAN1_F5R1_Type
  F5R2*: CAN1_F5R2_Type
  F6R1*: CAN1_F6R1_Type
  F6R2*: CAN1_F6R2_Type
  F7R1*: CAN1_F7R1_Type
  F7R2*: CAN1_F7R2_Type
  F8R1*: CAN1_F8R1_Type
  F8R2*: CAN1_F8R2_Type
  F9R1*: CAN1_F9R1_Type
  F9R2*: CAN1_F9R2_Type
  F10R1*: CAN1_F10R1_Type
  F10R2*: CAN1_F10R2_Type
  F11R1*: CAN1_F11R1_Type
  F11R2*: CAN1_F11R2_Type
  F12R1*: CAN1_F12R1_Type
  F12R2*: CAN1_F12R2_Type
  F13R1*: CAN1_F13R1_Type
  F13R2*: CAN1_F13R2_Type
  F14R1*: CAN1_F14R1_Type
  F14R2*: CAN1_F14R2_Type
  F15R1*: CAN1_F15R1_Type
  F15R2*: CAN1_F15R2_Type
  F16R1*: CAN1_F16R1_Type
  F16R2*: CAN1_F16R2_Type
  F17R1*: CAN1_F17R1_Type
  F17R2*: CAN1_F17R2_Type
  F18R1*: CAN1_F18R1_Type
  F18R2*: CAN1_F18R2_Type
  F19R1*: CAN1_F19R1_Type
  F19R2*: CAN1_F19R2_Type
  F20R1*: CAN1_F20R1_Type
  F20R2*: CAN1_F20R2_Type
  F21R1*: CAN1_F21R1_Type
  F21R2*: CAN1_F21R2_Type
  F22R1*: CAN1_F22R1_Type
  F22R2*: CAN1_F22R2_Type
  F23R1*: CAN1_F23R1_Type
  F23R2*: CAN1_F23R2_Type
  F24R1*: CAN1_F24R1_Type
  F24R2*: CAN1_F24R2_Type
  F25R1*: CAN1_F25R1_Type
  F25R2*: CAN1_F25R2_Type
  F26R1*: CAN1_F26R1_Type
  F26R2*: CAN1_F26R2_Type
  F27R1*: CAN1_F27R1_Type
  F27R2*: CAN1_F27R2_Type

type FLASH_ACR_Type* = object
  loc: uint

type FLASH_KEYR_Type* = object
  loc: uint

type FLASH_OPTKEYR_Type* = object
  loc: uint

type FLASH_SR_Type* = object
  loc: uint

type FLASH_CR_Type* = object
  loc: uint

type FLASH_OPTCR_Type* = object
  loc: uint

type FLASH_Type* = object
  ACR*: FLASH_ACR_Type
  KEYR*: FLASH_KEYR_Type
  OPTKEYR*: FLASH_OPTKEYR_Type
  SR*: FLASH_SR_Type
  CR*: FLASH_CR_Type
  OPTCR*: FLASH_OPTCR_Type

type EXTI_IMR_Type* = object
  loc: uint

type EXTI_EMR_Type* = object
  loc: uint

type EXTI_RTSR_Type* = object
  loc: uint

type EXTI_FTSR_Type* = object
  loc: uint

type EXTI_SWIER_Type* = object
  loc: uint

type EXTI_PR_Type* = object
  loc: uint

type EXTI_Type* = object
  IMR*: EXTI_IMR_Type
  EMR*: EXTI_EMR_Type
  RTSR*: EXTI_RTSR_Type
  FTSR*: EXTI_FTSR_Type
  SWIER*: EXTI_SWIER_Type
  PR*: EXTI_PR_Type

type OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GOTGINT_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GINTSTS_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GINTMSK_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GCCFG_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_CID_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Type* = object
  loc: uint

type OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Type* = object
  loc: uint

type OTG_HS_GLOBAL_Type* = object
  OTG_HS_GOTGCTL*: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Type
  OTG_HS_GOTGINT*: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Type
  OTG_HS_GAHBCFG*: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Type
  OTG_HS_GUSBCFG*: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Type
  OTG_HS_GRSTCTL*: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Type
  OTG_HS_GINTSTS*: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Type
  OTG_HS_GINTMSK*: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Type
  OTG_HS_GRXSTSR_Host*: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Type
  OTG_HS_GRXSTSR_Peripheral*: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Type
  OTG_HS_GRXSTSP_Host*: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Type
  OTG_HS_GRXSTSP_Peripheral*: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Type
  OTG_HS_GRXFSIZ*: OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Type
  OTG_HS_GNPTXFSIZ_Host*: OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Type
  OTG_HS_TX0FSIZ_Peripheral*: OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Type
  OTG_HS_GNPTXSTS*: OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_Type
  OTG_HS_GCCFG*: OTG_HS_GLOBAL_OTG_HS_GCCFG_Type
  OTG_HS_CID*: OTG_HS_GLOBAL_OTG_HS_CID_Type
  OTG_HS_HPTXFSIZ*: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Type
  OTG_HS_DIEPTXF1*: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Type
  OTG_HS_DIEPTXF2*: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Type
  OTG_HS_DIEPTXF3*: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Type
  OTG_HS_DIEPTXF4*: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Type
  OTG_HS_DIEPTXF5*: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Type
  OTG_HS_DIEPTXF6*: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Type
  OTG_HS_DIEPTXF7*: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Type

type OTG_HS_HOST_OTG_HS_HCFG_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HFIR_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HFNUM_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HPTXSTS_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HAINT_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HAINTMSK_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HPRT_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR0_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR1_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR2_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR3_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR4_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR5_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR6_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR7_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR8_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR9_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR10_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR11_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR12_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR13_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR14_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCCHAR15_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT0_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT1_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT2_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT3_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT4_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT5_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT6_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT7_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT8_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT9_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT10_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT11_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT12_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT13_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT14_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCSPLT15_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT0_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT1_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT2_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT3_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT4_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT5_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT6_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT7_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT8_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT9_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT10_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT11_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT12_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT13_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT14_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINT15_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK0_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK1_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK2_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK3_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK4_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK5_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK6_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK7_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK8_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK9_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK10_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK11_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK12_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK13_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK14_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCINTMSK15_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ0_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ1_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ2_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ3_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ4_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ5_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ6_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ7_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ8_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ9_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ10_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ11_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ12_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ13_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ14_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCTSIZ15_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA0_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA1_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA2_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA3_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA4_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA5_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA6_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA7_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA8_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA9_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA10_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA11_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA12_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA13_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA14_Type* = object
  loc: uint

type OTG_HS_HOST_OTG_HS_HCDMA15_Type* = object
  loc: uint

type OTG_HS_HOST_Type* = object
  OTG_HS_HCFG*: OTG_HS_HOST_OTG_HS_HCFG_Type
  OTG_HS_HFIR*: OTG_HS_HOST_OTG_HS_HFIR_Type
  OTG_HS_HFNUM*: OTG_HS_HOST_OTG_HS_HFNUM_Type
  OTG_HS_HPTXSTS*: OTG_HS_HOST_OTG_HS_HPTXSTS_Type
  OTG_HS_HAINT*: OTG_HS_HOST_OTG_HS_HAINT_Type
  OTG_HS_HAINTMSK*: OTG_HS_HOST_OTG_HS_HAINTMSK_Type
  OTG_HS_HPRT*: OTG_HS_HOST_OTG_HS_HPRT_Type
  OTG_HS_HCCHAR0*: OTG_HS_HOST_OTG_HS_HCCHAR0_Type
  OTG_HS_HCSPLT0*: OTG_HS_HOST_OTG_HS_HCSPLT0_Type
  OTG_HS_HCINT0*: OTG_HS_HOST_OTG_HS_HCINT0_Type
  OTG_HS_HCINTMSK0*: OTG_HS_HOST_OTG_HS_HCINTMSK0_Type
  OTG_HS_HCTSIZ0*: OTG_HS_HOST_OTG_HS_HCTSIZ0_Type
  OTG_HS_HCDMA0*: OTG_HS_HOST_OTG_HS_HCDMA0_Type
  OTG_HS_HCCHAR1*: OTG_HS_HOST_OTG_HS_HCCHAR1_Type
  OTG_HS_HCSPLT1*: OTG_HS_HOST_OTG_HS_HCSPLT1_Type
  OTG_HS_HCINT1*: OTG_HS_HOST_OTG_HS_HCINT1_Type
  OTG_HS_HCINTMSK1*: OTG_HS_HOST_OTG_HS_HCINTMSK1_Type
  OTG_HS_HCTSIZ1*: OTG_HS_HOST_OTG_HS_HCTSIZ1_Type
  OTG_HS_HCDMA1*: OTG_HS_HOST_OTG_HS_HCDMA1_Type
  OTG_HS_HCCHAR2*: OTG_HS_HOST_OTG_HS_HCCHAR2_Type
  OTG_HS_HCSPLT2*: OTG_HS_HOST_OTG_HS_HCSPLT2_Type
  OTG_HS_HCINT2*: OTG_HS_HOST_OTG_HS_HCINT2_Type
  OTG_HS_HCINTMSK2*: OTG_HS_HOST_OTG_HS_HCINTMSK2_Type
  OTG_HS_HCTSIZ2*: OTG_HS_HOST_OTG_HS_HCTSIZ2_Type
  OTG_HS_HCDMA2*: OTG_HS_HOST_OTG_HS_HCDMA2_Type
  OTG_HS_HCCHAR3*: OTG_HS_HOST_OTG_HS_HCCHAR3_Type
  OTG_HS_HCSPLT3*: OTG_HS_HOST_OTG_HS_HCSPLT3_Type
  OTG_HS_HCINT3*: OTG_HS_HOST_OTG_HS_HCINT3_Type
  OTG_HS_HCINTMSK3*: OTG_HS_HOST_OTG_HS_HCINTMSK3_Type
  OTG_HS_HCTSIZ3*: OTG_HS_HOST_OTG_HS_HCTSIZ3_Type
  OTG_HS_HCDMA3*: OTG_HS_HOST_OTG_HS_HCDMA3_Type
  OTG_HS_HCCHAR4*: OTG_HS_HOST_OTG_HS_HCCHAR4_Type
  OTG_HS_HCSPLT4*: OTG_HS_HOST_OTG_HS_HCSPLT4_Type
  OTG_HS_HCINT4*: OTG_HS_HOST_OTG_HS_HCINT4_Type
  OTG_HS_HCINTMSK4*: OTG_HS_HOST_OTG_HS_HCINTMSK4_Type
  OTG_HS_HCTSIZ4*: OTG_HS_HOST_OTG_HS_HCTSIZ4_Type
  OTG_HS_HCDMA4*: OTG_HS_HOST_OTG_HS_HCDMA4_Type
  OTG_HS_HCCHAR5*: OTG_HS_HOST_OTG_HS_HCCHAR5_Type
  OTG_HS_HCSPLT5*: OTG_HS_HOST_OTG_HS_HCSPLT5_Type
  OTG_HS_HCINT5*: OTG_HS_HOST_OTG_HS_HCINT5_Type
  OTG_HS_HCINTMSK5*: OTG_HS_HOST_OTG_HS_HCINTMSK5_Type
  OTG_HS_HCTSIZ5*: OTG_HS_HOST_OTG_HS_HCTSIZ5_Type
  OTG_HS_HCDMA5*: OTG_HS_HOST_OTG_HS_HCDMA5_Type
  OTG_HS_HCCHAR6*: OTG_HS_HOST_OTG_HS_HCCHAR6_Type
  OTG_HS_HCSPLT6*: OTG_HS_HOST_OTG_HS_HCSPLT6_Type
  OTG_HS_HCINT6*: OTG_HS_HOST_OTG_HS_HCINT6_Type
  OTG_HS_HCINTMSK6*: OTG_HS_HOST_OTG_HS_HCINTMSK6_Type
  OTG_HS_HCTSIZ6*: OTG_HS_HOST_OTG_HS_HCTSIZ6_Type
  OTG_HS_HCDMA6*: OTG_HS_HOST_OTG_HS_HCDMA6_Type
  OTG_HS_HCCHAR7*: OTG_HS_HOST_OTG_HS_HCCHAR7_Type
  OTG_HS_HCSPLT7*: OTG_HS_HOST_OTG_HS_HCSPLT7_Type
  OTG_HS_HCINT7*: OTG_HS_HOST_OTG_HS_HCINT7_Type
  OTG_HS_HCINTMSK7*: OTG_HS_HOST_OTG_HS_HCINTMSK7_Type
  OTG_HS_HCTSIZ7*: OTG_HS_HOST_OTG_HS_HCTSIZ7_Type
  OTG_HS_HCDMA7*: OTG_HS_HOST_OTG_HS_HCDMA7_Type
  OTG_HS_HCCHAR8*: OTG_HS_HOST_OTG_HS_HCCHAR8_Type
  OTG_HS_HCSPLT8*: OTG_HS_HOST_OTG_HS_HCSPLT8_Type
  OTG_HS_HCINT8*: OTG_HS_HOST_OTG_HS_HCINT8_Type
  OTG_HS_HCINTMSK8*: OTG_HS_HOST_OTG_HS_HCINTMSK8_Type
  OTG_HS_HCTSIZ8*: OTG_HS_HOST_OTG_HS_HCTSIZ8_Type
  OTG_HS_HCDMA8*: OTG_HS_HOST_OTG_HS_HCDMA8_Type
  OTG_HS_HCCHAR9*: OTG_HS_HOST_OTG_HS_HCCHAR9_Type
  OTG_HS_HCSPLT9*: OTG_HS_HOST_OTG_HS_HCSPLT9_Type
  OTG_HS_HCINT9*: OTG_HS_HOST_OTG_HS_HCINT9_Type
  OTG_HS_HCINTMSK9*: OTG_HS_HOST_OTG_HS_HCINTMSK9_Type
  OTG_HS_HCTSIZ9*: OTG_HS_HOST_OTG_HS_HCTSIZ9_Type
  OTG_HS_HCDMA9*: OTG_HS_HOST_OTG_HS_HCDMA9_Type
  OTG_HS_HCCHAR10*: OTG_HS_HOST_OTG_HS_HCCHAR10_Type
  OTG_HS_HCSPLT10*: OTG_HS_HOST_OTG_HS_HCSPLT10_Type
  OTG_HS_HCINT10*: OTG_HS_HOST_OTG_HS_HCINT10_Type
  OTG_HS_HCINTMSK10*: OTG_HS_HOST_OTG_HS_HCINTMSK10_Type
  OTG_HS_HCTSIZ10*: OTG_HS_HOST_OTG_HS_HCTSIZ10_Type
  OTG_HS_HCDMA10*: OTG_HS_HOST_OTG_HS_HCDMA10_Type
  OTG_HS_HCCHAR11*: OTG_HS_HOST_OTG_HS_HCCHAR11_Type
  OTG_HS_HCSPLT11*: OTG_HS_HOST_OTG_HS_HCSPLT11_Type
  OTG_HS_HCINT11*: OTG_HS_HOST_OTG_HS_HCINT11_Type
  OTG_HS_HCINTMSK11*: OTG_HS_HOST_OTG_HS_HCINTMSK11_Type
  OTG_HS_HCTSIZ11*: OTG_HS_HOST_OTG_HS_HCTSIZ11_Type
  OTG_HS_HCDMA11*: OTG_HS_HOST_OTG_HS_HCDMA11_Type
  OTG_HS_HCCHAR12*: OTG_HS_HOST_OTG_HS_HCCHAR12_Type
  OTG_HS_HCSPLT12*: OTG_HS_HOST_OTG_HS_HCSPLT12_Type
  OTG_HS_HCINT12*: OTG_HS_HOST_OTG_HS_HCINT12_Type
  OTG_HS_HCINTMSK12*: OTG_HS_HOST_OTG_HS_HCINTMSK12_Type
  OTG_HS_HCTSIZ12*: OTG_HS_HOST_OTG_HS_HCTSIZ12_Type
  OTG_HS_HCDMA12*: OTG_HS_HOST_OTG_HS_HCDMA12_Type
  OTG_HS_HCCHAR13*: OTG_HS_HOST_OTG_HS_HCCHAR13_Type
  OTG_HS_HCSPLT13*: OTG_HS_HOST_OTG_HS_HCSPLT13_Type
  OTG_HS_HCINT13*: OTG_HS_HOST_OTG_HS_HCINT13_Type
  OTG_HS_HCINTMSK13*: OTG_HS_HOST_OTG_HS_HCINTMSK13_Type
  OTG_HS_HCTSIZ13*: OTG_HS_HOST_OTG_HS_HCTSIZ13_Type
  OTG_HS_HCDMA13*: OTG_HS_HOST_OTG_HS_HCDMA13_Type
  OTG_HS_HCCHAR14*: OTG_HS_HOST_OTG_HS_HCCHAR14_Type
  OTG_HS_HCSPLT14*: OTG_HS_HOST_OTG_HS_HCSPLT14_Type
  OTG_HS_HCINT14*: OTG_HS_HOST_OTG_HS_HCINT14_Type
  OTG_HS_HCINTMSK14*: OTG_HS_HOST_OTG_HS_HCINTMSK14_Type
  OTG_HS_HCTSIZ14*: OTG_HS_HOST_OTG_HS_HCTSIZ14_Type
  OTG_HS_HCDMA14*: OTG_HS_HOST_OTG_HS_HCDMA14_Type
  OTG_HS_HCCHAR15*: OTG_HS_HOST_OTG_HS_HCCHAR15_Type
  OTG_HS_HCSPLT15*: OTG_HS_HOST_OTG_HS_HCSPLT15_Type
  OTG_HS_HCINT15*: OTG_HS_HOST_OTG_HS_HCINT15_Type
  OTG_HS_HCINTMSK15*: OTG_HS_HOST_OTG_HS_HCINTMSK15_Type
  OTG_HS_HCTSIZ15*: OTG_HS_HOST_OTG_HS_HCTSIZ15_Type
  OTG_HS_HCDMA15*: OTG_HS_HOST_OTG_HS_HCDMA15_Type

type OTG_HS_DEVICE_OTG_HS_DCFG_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DCTL_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DSTS_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPMSK_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPMSK_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DAINT_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DAINTMSK_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DTHRCTL_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DEACHINT_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPINT0_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPINT1_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPINT2_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPINT3_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPINT4_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPINT5_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPINT6_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPINT7_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPDMA1_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPDMA2_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPDMA3_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPDMA4_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPDMA5_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DTXFSTS0_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DTXFSTS1_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DTXFSTS2_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DTXFSTS3_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DTXFSTS4_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DTXFSTS5_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPINT0_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPINT1_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPINT2_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPINT3_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPINT4_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPINT5_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPINT6_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPINT7_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Type* = object
  loc: uint

type OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Type* = object
  loc: uint

type OTG_HS_DEVICE_Type* = object
  OTG_HS_DCFG*: OTG_HS_DEVICE_OTG_HS_DCFG_Type
  OTG_HS_DCTL*: OTG_HS_DEVICE_OTG_HS_DCTL_Type
  OTG_HS_DSTS*: OTG_HS_DEVICE_OTG_HS_DSTS_Type
  OTG_HS_DIEPMSK*: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Type
  OTG_HS_DOEPMSK*: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Type
  OTG_HS_DAINT*: OTG_HS_DEVICE_OTG_HS_DAINT_Type
  OTG_HS_DAINTMSK*: OTG_HS_DEVICE_OTG_HS_DAINTMSK_Type
  OTG_HS_DVBUSDIS*: OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Type
  OTG_HS_DVBUSPULSE*: OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Type
  OTG_HS_DTHRCTL*: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Type
  OTG_HS_DIEPEMPMSK*: OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Type
  OTG_HS_DEACHINT*: OTG_HS_DEVICE_OTG_HS_DEACHINT_Type
  OTG_HS_DEACHINTMSK*: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Type
  OTG_HS_DIEPEACHMSK1*: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Type
  OTG_HS_DOEPEACHMSK1*: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Type
  OTG_HS_DIEPCTL0*: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Type
  OTG_HS_DIEPINT0*: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Type
  OTG_HS_DIEPTSIZ0*: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Type
  OTG_HS_DIEPDMA1*: OTG_HS_DEVICE_OTG_HS_DIEPDMA1_Type
  OTG_HS_DTXFSTS0*: OTG_HS_DEVICE_OTG_HS_DTXFSTS0_Type
  OTG_HS_DIEPCTL1*: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Type
  OTG_HS_DIEPINT1*: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Type
  OTG_HS_DIEPTSIZ1*: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Type
  OTG_HS_DIEPDMA2*: OTG_HS_DEVICE_OTG_HS_DIEPDMA2_Type
  OTG_HS_DTXFSTS1*: OTG_HS_DEVICE_OTG_HS_DTXFSTS1_Type
  OTG_HS_DIEPCTL2*: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Type
  OTG_HS_DIEPINT2*: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Type
  OTG_HS_DIEPTSIZ2*: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Type
  OTG_HS_DIEPDMA3*: OTG_HS_DEVICE_OTG_HS_DIEPDMA3_Type
  OTG_HS_DTXFSTS2*: OTG_HS_DEVICE_OTG_HS_DTXFSTS2_Type
  OTG_HS_DIEPCTL3*: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Type
  OTG_HS_DIEPINT3*: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Type
  OTG_HS_DIEPTSIZ3*: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Type
  OTG_HS_DIEPDMA4*: OTG_HS_DEVICE_OTG_HS_DIEPDMA4_Type
  OTG_HS_DTXFSTS3*: OTG_HS_DEVICE_OTG_HS_DTXFSTS3_Type
  OTG_HS_DIEPCTL4*: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Type
  OTG_HS_DIEPINT4*: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Type
  OTG_HS_DIEPTSIZ4*: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Type
  OTG_HS_DIEPDMA5*: OTG_HS_DEVICE_OTG_HS_DIEPDMA5_Type
  OTG_HS_DTXFSTS4*: OTG_HS_DEVICE_OTG_HS_DTXFSTS4_Type
  OTG_HS_DIEPCTL5*: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Type
  OTG_HS_DIEPINT5*: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Type
  OTG_HS_DIEPTSIZ5*: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Type
  OTG_HS_DTXFSTS5*: OTG_HS_DEVICE_OTG_HS_DTXFSTS5_Type
  OTG_HS_DIEPCTL6*: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Type
  OTG_HS_DIEPINT6*: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Type
  OTG_HS_DIEPCTL7*: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Type
  OTG_HS_DIEPINT7*: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Type
  OTG_HS_DOEPCTL0*: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Type
  OTG_HS_DOEPINT0*: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Type
  OTG_HS_DOEPTSIZ0*: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Type
  OTG_HS_DOEPCTL1*: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Type
  OTG_HS_DOEPINT1*: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Type
  OTG_HS_DOEPTSIZ1*: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Type
  OTG_HS_DOEPCTL2*: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Type
  OTG_HS_DOEPINT2*: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Type
  OTG_HS_DOEPTSIZ2*: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Type
  OTG_HS_DOEPCTL3*: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Type
  OTG_HS_DOEPINT3*: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Type
  OTG_HS_DOEPTSIZ3*: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Type
  OTG_HS_DOEPINT4*: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Type
  OTG_HS_DOEPTSIZ4*: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Type
  OTG_HS_DOEPINT5*: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Type
  OTG_HS_DOEPINT6*: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Type
  OTG_HS_DOEPINT7*: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Type

type OTG_HS_PWRCLK_OTG_HS_PCGCR_Type* = object
  loc: uint

type OTG_HS_PWRCLK_Type* = object
  OTG_HS_PCGCR*: OTG_HS_PWRCLK_OTG_HS_PCGCR_Type

type SAI1_BCR1_Type* = object
  loc: uint

type SAI1_BCR2_Type* = object
  loc: uint

type SAI1_BFRCR_Type* = object
  loc: uint

type SAI1_BSLOTR_Type* = object
  loc: uint

type SAI1_BIM_Type* = object
  loc: uint

type SAI1_BSR_Type* = object
  loc: uint

type SAI1_BCLRFR_Type* = object
  loc: uint

type SAI1_BDR_Type* = object
  loc: uint

type SAI1_ACR1_Type* = object
  loc: uint

type SAI1_ACR2_Type* = object
  loc: uint

type SAI1_AFRCR_Type* = object
  loc: uint

type SAI1_ASLOTR_Type* = object
  loc: uint

type SAI1_AIM_Type* = object
  loc: uint

type SAI1_ASR_Type* = object
  loc: uint

type SAI1_ACLRFR_Type* = object
  loc: uint

type SAI1_ADR_Type* = object
  loc: uint

type SAI1_GCR_Type* = object
  loc: uint

type SAI1_Type* = object
  GCR*: SAI1_GCR_Type
  ACR1*: SAI1_ACR1_Type
  ACR2*: SAI1_ACR2_Type
  AFRCR*: SAI1_AFRCR_Type
  ASLOTR*: SAI1_ASLOTR_Type
  AIM*: SAI1_AIM_Type
  ASR*: SAI1_ASR_Type
  ACLRFR*: SAI1_ACLRFR_Type
  ADR*: SAI1_ADR_Type
  BCR1*: SAI1_BCR1_Type
  BCR2*: SAI1_BCR2_Type
  BFRCR*: SAI1_BFRCR_Type
  BSLOTR*: SAI1_BSLOTR_Type
  BIM*: SAI1_BIM_Type
  BSR*: SAI1_BSR_Type
  BCLRFR*: SAI1_BCLRFR_Type
  BDR*: SAI1_BDR_Type

type PWR_CR_Type* = object
  loc: uint

type PWR_CSR_Type* = object
  loc: uint

type PWR_Type* = object
  CR*: PWR_CR_Type
  CSR*: PWR_CSR_Type

type QUADSPI_CR_Type* = object
  loc: uint

type QUADSPI_DCR_Type* = object
  loc: uint

type QUADSPI_SR_Type* = object
  loc: uint

type QUADSPI_FCR_Type* = object
  loc: uint

type QUADSPI_DLR_Type* = object
  loc: uint

type QUADSPI_CCR_Type* = object
  loc: uint

type QUADSPI_AR_Type* = object
  loc: uint

type QUADSPI_ABR_Type* = object
  loc: uint

type QUADSPI_DR_Type* = object
  loc: uint

type QUADSPI_PSMKR_Type* = object
  loc: uint

type QUADSPI_PSMAR_Type* = object
  loc: uint

type QUADSPI_PIR_Type* = object
  loc: uint

type QUADSPI_LPTR_Type* = object
  loc: uint

type QUADSPI_Type* = object
  CR*: QUADSPI_CR_Type
  DCR*: QUADSPI_DCR_Type
  SR*: QUADSPI_SR_Type
  FCR*: QUADSPI_FCR_Type
  DLR*: QUADSPI_DLR_Type
  CCR*: QUADSPI_CCR_Type
  AR*: QUADSPI_AR_Type
  ABR*: QUADSPI_ABR_Type
  DR*: QUADSPI_DR_Type
  PSMKR*: QUADSPI_PSMKR_Type
  PSMAR*: QUADSPI_PSMAR_Type
  PIR*: QUADSPI_PIR_Type
  LPTR*: QUADSPI_LPTR_Type

type SPDIF_RX_CR_Type* = object
  loc: uint

type SPDIF_RX_IMR_Type* = object
  loc: uint

type SPDIF_RX_SR_Type* = object
  loc: uint

type SPDIF_RX_IFCR_Type* = object
  loc: uint

type SPDIF_RX_DR_Type* = object
  loc: uint

type SPDIF_RX_CSR_Type* = object
  loc: uint

type SPDIF_RX_DIR_Type* = object
  loc: uint

type SPDIF_RX_Type* = object
  CR*: SPDIF_RX_CR_Type
  IMR*: SPDIF_RX_IMR_Type
  SR*: SPDIF_RX_SR_Type
  IFCR*: SPDIF_RX_IFCR_Type
  DR*: SPDIF_RX_DR_Type
  CSR*: SPDIF_RX_CSR_Type
  DIR*: SPDIF_RX_DIR_Type

type HDMI_CEC_CEC_CR_Type* = object
  loc: uint

type HDMI_CEC_CEC_CFGR_Type* = object
  loc: uint

type HDMI_CEC_CEC_TXDR_Type* = object
  loc: uint

type HDMI_CEC_CEC_RXDR_Type* = object
  loc: uint

type HDMI_CEC_CEC_ISR_Type* = object
  loc: uint

type HDMI_CEC_CEC_IER_Type* = object
  loc: uint

type HDMI_CEC_Type* = object
  CEC_CR*: HDMI_CEC_CEC_CR_Type
  CEC_CFGR*: HDMI_CEC_CEC_CFGR_Type
  CEC_TXDR*: HDMI_CEC_CEC_TXDR_Type
  CEC_RXDR*: HDMI_CEC_CEC_RXDR_Type
  CEC_ISR*: HDMI_CEC_CEC_ISR_Type
  CEC_IER*: HDMI_CEC_CEC_IER_Type

type SDIO_POWER_Type* = object
  loc: uint

type SDIO_CLKCR_Type* = object
  loc: uint

type SDIO_ARG_Type* = object
  loc: uint

type SDIO_CMD_Type* = object
  loc: uint

type SDIO_RESPCMD_Type* = object
  loc: uint

type SDIO_RESP1_Type* = object
  loc: uint

type SDIO_RESP2_Type* = object
  loc: uint

type SDIO_RESP3_Type* = object
  loc: uint

type SDIO_RESP4_Type* = object
  loc: uint

type SDIO_DTIMER_Type* = object
  loc: uint

type SDIO_DLEN_Type* = object
  loc: uint

type SDIO_DCTRL_Type* = object
  loc: uint

type SDIO_DCOUNT_Type* = object
  loc: uint

type SDIO_STA_Type* = object
  loc: uint

type SDIO_ICR_Type* = object
  loc: uint

type SDIO_MASK_Type* = object
  loc: uint

type SDIO_FIFOCNT_Type* = object
  loc: uint

type SDIO_FIFO_Type* = object
  loc: uint

type SDIO_Type* = object
  POWER*: SDIO_POWER_Type
  CLKCR*: SDIO_CLKCR_Type
  ARG*: SDIO_ARG_Type
  CMD*: SDIO_CMD_Type
  RESPCMD*: SDIO_RESPCMD_Type
  RESP1*: SDIO_RESP1_Type
  RESP2*: SDIO_RESP2_Type
  RESP3*: SDIO_RESP3_Type
  RESP4*: SDIO_RESP4_Type
  DTIMER*: SDIO_DTIMER_Type
  DLEN*: SDIO_DLEN_Type
  DCTRL*: SDIO_DCTRL_Type
  DCOUNT*: SDIO_DCOUNT_Type
  STA*: SDIO_STA_Type
  ICR*: SDIO_ICR_Type
  MASK*: SDIO_MASK_Type
  FIFOCNT*: SDIO_FIFOCNT_Type
  FIFO*: SDIO_FIFO_Type


################################################################################
# Peripheral object instances
################################################################################
const DCMI* = DCMI_Type(
  CR: DCMI_CR_Type(loc: 0x50050000'u),
  SR: DCMI_SR_Type(loc: 0x50050004'u),
  RIS: DCMI_RIS_Type(loc: 0x50050008'u),
  IER: DCMI_IER_Type(loc: 0x5005000c'u),
  MIS: DCMI_MIS_Type(loc: 0x50050010'u),
  ICR: DCMI_ICR_Type(loc: 0x50050014'u),
  ESCR: DCMI_ESCR_Type(loc: 0x50050018'u),
  ESUR: DCMI_ESUR_Type(loc: 0x5005001c'u),
  CWSTRT: DCMI_CWSTRT_Type(loc: 0x50050020'u),
  CWSIZE: DCMI_CWSIZE_Type(loc: 0x50050024'u),
  DR: DCMI_DR_Type(loc: 0x50050028'u),
)

const FMC* = FMC_Type(
  BCR1: FMC_BCR1_Type(loc: 0xa0000000'u),
  BTR1: FMC_BTR1_Type(loc: 0xa0000004'u),
  BCR2: FMC_BCR2_Type(loc: 0xa0000008'u),
  BTR2: FMC_BTR2_Type(loc: 0xa000000c'u),
  BCR3: FMC_BCR3_Type(loc: 0xa0000010'u),
  BTR3: FMC_BTR3_Type(loc: 0xa0000014'u),
  BCR4: FMC_BCR4_Type(loc: 0xa0000018'u),
  BTR4: FMC_BTR4_Type(loc: 0xa000001c'u),
  PCR2: FMC_PCR2_Type(loc: 0xa0000060'u),
  SR2: FMC_SR2_Type(loc: 0xa0000064'u),
  PMEM2: FMC_PMEM2_Type(loc: 0xa0000068'u),
  PATT2: FMC_PATT2_Type(loc: 0xa000006c'u),
  ECCR2: FMC_ECCR2_Type(loc: 0xa0000074'u),
  PCR3: FMC_PCR3_Type(loc: 0xa0000080'u),
  SR3: FMC_SR3_Type(loc: 0xa0000084'u),
  PMEM3: FMC_PMEM3_Type(loc: 0xa0000088'u),
  PATT3: FMC_PATT3_Type(loc: 0xa000008c'u),
  ECCR3: FMC_ECCR3_Type(loc: 0xa0000094'u),
  PCR4: FMC_PCR4_Type(loc: 0xa00000a0'u),
  SR4: FMC_SR4_Type(loc: 0xa00000a4'u),
  PMEM4: FMC_PMEM4_Type(loc: 0xa00000a8'u),
  PATT4: FMC_PATT4_Type(loc: 0xa00000ac'u),
  PIO4: FMC_PIO4_Type(loc: 0xa00000b0'u),
  BWTR1: FMC_BWTR1_Type(loc: 0xa0000104'u),
  BWTR2: FMC_BWTR2_Type(loc: 0xa000010c'u),
  BWTR3: FMC_BWTR3_Type(loc: 0xa0000114'u),
  BWTR4: FMC_BWTR4_Type(loc: 0xa000011c'u),
  SDCR1: FMC_SDCR1_Type(loc: 0xa0000140'u),
  SDCR2: FMC_SDCR2_Type(loc: 0xa0000144'u),
  SDTR1: FMC_SDTR1_Type(loc: 0xa0000148'u),
  SDTR2: FMC_SDTR2_Type(loc: 0xa000014c'u),
  SDCMR: FMC_SDCMR_Type(loc: 0xa0000150'u),
  SDRTR: FMC_SDRTR_Type(loc: 0xa0000154'u),
  SDSR: FMC_SDSR_Type(loc: 0xa0000158'u),
)

const DBG* = DBG_Type(
  DBGMCU_IDCODE: DBG_DBGMCU_IDCODE_Type(loc: 0xe0042000'u),
  DBGMCU_CR: DBG_DBGMCU_CR_Type(loc: 0xe0042004'u),
  DBGMCU_APB1_FZ: DBG_DBGMCU_APB1_FZ_Type(loc: 0xe0042008'u),
  DBGMCU_APB2_FZ: DBG_DBGMCU_APB2_FZ_Type(loc: 0xe004200c'u),
)

const DMA2* = DMA2_Type(
  LISR: DMA2_LISR_Type(loc: 0x40026400'u),
  HISR: DMA2_HISR_Type(loc: 0x40026404'u),
  LIFCR: DMA2_LIFCR_Type(loc: 0x40026408'u),
  HIFCR: DMA2_HIFCR_Type(loc: 0x4002640c'u),
  S0CR: DMA2_S0CR_Type(loc: 0x40026410'u),
  S0NDTR: DMA2_S0NDTR_Type(loc: 0x40026414'u),
  S0PAR: DMA2_S0PAR_Type(loc: 0x40026418'u),
  S0M0AR: DMA2_S0M0AR_Type(loc: 0x4002641c'u),
  S0M1AR: DMA2_S0M1AR_Type(loc: 0x40026420'u),
  S0FCR: DMA2_S0FCR_Type(loc: 0x40026424'u),
  S1CR: DMA2_S1CR_Type(loc: 0x40026428'u),
  S1NDTR: DMA2_S1NDTR_Type(loc: 0x4002642c'u),
  S1PAR: DMA2_S1PAR_Type(loc: 0x40026430'u),
  S1M0AR: DMA2_S1M0AR_Type(loc: 0x40026434'u),
  S1M1AR: DMA2_S1M1AR_Type(loc: 0x40026438'u),
  S1FCR: DMA2_S1FCR_Type(loc: 0x4002643c'u),
  S2CR: DMA2_S2CR_Type(loc: 0x40026440'u),
  S2NDTR: DMA2_S2NDTR_Type(loc: 0x40026444'u),
  S2PAR: DMA2_S2PAR_Type(loc: 0x40026448'u),
  S2M0AR: DMA2_S2M0AR_Type(loc: 0x4002644c'u),
  S2M1AR: DMA2_S2M1AR_Type(loc: 0x40026450'u),
  S2FCR: DMA2_S2FCR_Type(loc: 0x40026454'u),
  S3CR: DMA2_S3CR_Type(loc: 0x40026458'u),
  S3NDTR: DMA2_S3NDTR_Type(loc: 0x4002645c'u),
  S3PAR: DMA2_S3PAR_Type(loc: 0x40026460'u),
  S3M0AR: DMA2_S3M0AR_Type(loc: 0x40026464'u),
  S3M1AR: DMA2_S3M1AR_Type(loc: 0x40026468'u),
  S3FCR: DMA2_S3FCR_Type(loc: 0x4002646c'u),
  S4CR: DMA2_S4CR_Type(loc: 0x40026470'u),
  S4NDTR: DMA2_S4NDTR_Type(loc: 0x40026474'u),
  S4PAR: DMA2_S4PAR_Type(loc: 0x40026478'u),
  S4M0AR: DMA2_S4M0AR_Type(loc: 0x4002647c'u),
  S4M1AR: DMA2_S4M1AR_Type(loc: 0x40026480'u),
  S4FCR: DMA2_S4FCR_Type(loc: 0x40026484'u),
  S5CR: DMA2_S5CR_Type(loc: 0x40026488'u),
  S5NDTR: DMA2_S5NDTR_Type(loc: 0x4002648c'u),
  S5PAR: DMA2_S5PAR_Type(loc: 0x40026490'u),
  S5M0AR: DMA2_S5M0AR_Type(loc: 0x40026494'u),
  S5M1AR: DMA2_S5M1AR_Type(loc: 0x40026498'u),
  S5FCR: DMA2_S5FCR_Type(loc: 0x4002649c'u),
  S6CR: DMA2_S6CR_Type(loc: 0x400264a0'u),
  S6NDTR: DMA2_S6NDTR_Type(loc: 0x400264a4'u),
  S6PAR: DMA2_S6PAR_Type(loc: 0x400264a8'u),
  S6M0AR: DMA2_S6M0AR_Type(loc: 0x400264ac'u),
  S6M1AR: DMA2_S6M1AR_Type(loc: 0x400264b0'u),
  S6FCR: DMA2_S6FCR_Type(loc: 0x400264b4'u),
  S7CR: DMA2_S7CR_Type(loc: 0x400264b8'u),
  S7NDTR: DMA2_S7NDTR_Type(loc: 0x400264bc'u),
  S7PAR: DMA2_S7PAR_Type(loc: 0x400264c0'u),
  S7M0AR: DMA2_S7M0AR_Type(loc: 0x400264c4'u),
  S7M1AR: DMA2_S7M1AR_Type(loc: 0x400264c8'u),
  S7FCR: DMA2_S7FCR_Type(loc: 0x400264cc'u),
)

const DMA1* = DMA2_Type(
  LISR: DMA2_LISR_Type(loc: 0x40026000'u),
  HISR: DMA2_HISR_Type(loc: 0x40026004'u),
  LIFCR: DMA2_LIFCR_Type(loc: 0x40026008'u),
  HIFCR: DMA2_HIFCR_Type(loc: 0x4002600c'u),
  S0CR: DMA2_S0CR_Type(loc: 0x40026010'u),
  S0NDTR: DMA2_S0NDTR_Type(loc: 0x40026014'u),
  S0PAR: DMA2_S0PAR_Type(loc: 0x40026018'u),
  S0M0AR: DMA2_S0M0AR_Type(loc: 0x4002601c'u),
  S0M1AR: DMA2_S0M1AR_Type(loc: 0x40026020'u),
  S0FCR: DMA2_S0FCR_Type(loc: 0x40026024'u),
  S1CR: DMA2_S1CR_Type(loc: 0x40026028'u),
  S1NDTR: DMA2_S1NDTR_Type(loc: 0x4002602c'u),
  S1PAR: DMA2_S1PAR_Type(loc: 0x40026030'u),
  S1M0AR: DMA2_S1M0AR_Type(loc: 0x40026034'u),
  S1M1AR: DMA2_S1M1AR_Type(loc: 0x40026038'u),
  S1FCR: DMA2_S1FCR_Type(loc: 0x4002603c'u),
  S2CR: DMA2_S2CR_Type(loc: 0x40026040'u),
  S2NDTR: DMA2_S2NDTR_Type(loc: 0x40026044'u),
  S2PAR: DMA2_S2PAR_Type(loc: 0x40026048'u),
  S2M0AR: DMA2_S2M0AR_Type(loc: 0x4002604c'u),
  S2M1AR: DMA2_S2M1AR_Type(loc: 0x40026050'u),
  S2FCR: DMA2_S2FCR_Type(loc: 0x40026054'u),
  S3CR: DMA2_S3CR_Type(loc: 0x40026058'u),
  S3NDTR: DMA2_S3NDTR_Type(loc: 0x4002605c'u),
  S3PAR: DMA2_S3PAR_Type(loc: 0x40026060'u),
  S3M0AR: DMA2_S3M0AR_Type(loc: 0x40026064'u),
  S3M1AR: DMA2_S3M1AR_Type(loc: 0x40026068'u),
  S3FCR: DMA2_S3FCR_Type(loc: 0x4002606c'u),
  S4CR: DMA2_S4CR_Type(loc: 0x40026070'u),
  S4NDTR: DMA2_S4NDTR_Type(loc: 0x40026074'u),
  S4PAR: DMA2_S4PAR_Type(loc: 0x40026078'u),
  S4M0AR: DMA2_S4M0AR_Type(loc: 0x4002607c'u),
  S4M1AR: DMA2_S4M1AR_Type(loc: 0x40026080'u),
  S4FCR: DMA2_S4FCR_Type(loc: 0x40026084'u),
  S5CR: DMA2_S5CR_Type(loc: 0x40026088'u),
  S5NDTR: DMA2_S5NDTR_Type(loc: 0x4002608c'u),
  S5PAR: DMA2_S5PAR_Type(loc: 0x40026090'u),
  S5M0AR: DMA2_S5M0AR_Type(loc: 0x40026094'u),
  S5M1AR: DMA2_S5M1AR_Type(loc: 0x40026098'u),
  S5FCR: DMA2_S5FCR_Type(loc: 0x4002609c'u),
  S6CR: DMA2_S6CR_Type(loc: 0x400260a0'u),
  S6NDTR: DMA2_S6NDTR_Type(loc: 0x400260a4'u),
  S6PAR: DMA2_S6PAR_Type(loc: 0x400260a8'u),
  S6M0AR: DMA2_S6M0AR_Type(loc: 0x400260ac'u),
  S6M1AR: DMA2_S6M1AR_Type(loc: 0x400260b0'u),
  S6FCR: DMA2_S6FCR_Type(loc: 0x400260b4'u),
  S7CR: DMA2_S7CR_Type(loc: 0x400260b8'u),
  S7NDTR: DMA2_S7NDTR_Type(loc: 0x400260bc'u),
  S7PAR: DMA2_S7PAR_Type(loc: 0x400260c0'u),
  S7M0AR: DMA2_S7M0AR_Type(loc: 0x400260c4'u),
  S7M1AR: DMA2_S7M1AR_Type(loc: 0x400260c8'u),
  S7FCR: DMA2_S7FCR_Type(loc: 0x400260cc'u),
)

const RCC* = RCC_Type(
  CR: RCC_CR_Type(loc: 0x40023800'u),
  PLLCFGR: RCC_PLLCFGR_Type(loc: 0x40023804'u),
  CFGR: RCC_CFGR_Type(loc: 0x40023808'u),
  CIR: RCC_CIR_Type(loc: 0x4002380c'u),
  AHB1RSTR: RCC_AHB1RSTR_Type(loc: 0x40023810'u),
  AHB2RSTR: RCC_AHB2RSTR_Type(loc: 0x40023814'u),
  AHB3RSTR: RCC_AHB3RSTR_Type(loc: 0x40023818'u),
  APB1RSTR: RCC_APB1RSTR_Type(loc: 0x40023820'u),
  APB2RSTR: RCC_APB2RSTR_Type(loc: 0x40023824'u),
  AHB1ENR: RCC_AHB1ENR_Type(loc: 0x40023830'u),
  AHB2ENR: RCC_AHB2ENR_Type(loc: 0x40023834'u),
  AHB3ENR: RCC_AHB3ENR_Type(loc: 0x40023838'u),
  APB1ENR: RCC_APB1ENR_Type(loc: 0x40023840'u),
  APB2ENR: RCC_APB2ENR_Type(loc: 0x40023844'u),
  AHB1LPENR: RCC_AHB1LPENR_Type(loc: 0x40023850'u),
  AHB2LPENR: RCC_AHB2LPENR_Type(loc: 0x40023854'u),
  AHB3LPENR: RCC_AHB3LPENR_Type(loc: 0x40023858'u),
  APB1LPENR: RCC_APB1LPENR_Type(loc: 0x40023860'u),
  APB2LPENR: RCC_APB2LPENR_Type(loc: 0x40023864'u),
  BDCR: RCC_BDCR_Type(loc: 0x40023870'u),
  CSR: RCC_CSR_Type(loc: 0x40023874'u),
  SSCGR: RCC_SSCGR_Type(loc: 0x40023880'u),
  PLLI2SCFGR: RCC_PLLI2SCFGR_Type(loc: 0x40023884'u),
  PLLSAICFGR: RCC_PLLSAICFGR_Type(loc: 0x40023888'u),
  DCKCFGR: RCC_DCKCFGR_Type(loc: 0x4002388c'u),
  CKGATENR: RCC_CKGATENR_Type(loc: 0x40023890'u),
  DCKCFGR2: RCC_DCKCFGR2_Type(loc: 0x40023894'u),
)

const GPIOH* = GPIOH_Type(
  MODER: GPIOH_MODER_Type(loc: 0x40021c00'u),
  OTYPER: GPIOH_OTYPER_Type(loc: 0x40021c04'u),
  OSPEEDR: GPIOH_OSPEEDR_Type(loc: 0x40021c08'u),
  PUPDR: GPIOH_PUPDR_Type(loc: 0x40021c0c'u),
  IDR: GPIOH_IDR_Type(loc: 0x40021c10'u),
  ODR: GPIOH_ODR_Type(loc: 0x40021c14'u),
  BSRR: GPIOH_BSRR_Type(loc: 0x40021c18'u),
  LCKR: GPIOH_LCKR_Type(loc: 0x40021c1c'u),
  AFRL: GPIOH_AFRL_Type(loc: 0x40021c20'u),
  AFRH: GPIOH_AFRH_Type(loc: 0x40021c24'u),
)

const GPIOG* = GPIOH_Type(
  MODER: GPIOH_MODER_Type(loc: 0x40021800'u),
  OTYPER: GPIOH_OTYPER_Type(loc: 0x40021804'u),
  OSPEEDR: GPIOH_OSPEEDR_Type(loc: 0x40021808'u),
  PUPDR: GPIOH_PUPDR_Type(loc: 0x4002180c'u),
  IDR: GPIOH_IDR_Type(loc: 0x40021810'u),
  ODR: GPIOH_ODR_Type(loc: 0x40021814'u),
  BSRR: GPIOH_BSRR_Type(loc: 0x40021818'u),
  LCKR: GPIOH_LCKR_Type(loc: 0x4002181c'u),
  AFRL: GPIOH_AFRL_Type(loc: 0x40021820'u),
  AFRH: GPIOH_AFRH_Type(loc: 0x40021824'u),
)

const GPIOF* = GPIOH_Type(
  MODER: GPIOH_MODER_Type(loc: 0x40021400'u),
  OTYPER: GPIOH_OTYPER_Type(loc: 0x40021404'u),
  OSPEEDR: GPIOH_OSPEEDR_Type(loc: 0x40021408'u),
  PUPDR: GPIOH_PUPDR_Type(loc: 0x4002140c'u),
  IDR: GPIOH_IDR_Type(loc: 0x40021410'u),
  ODR: GPIOH_ODR_Type(loc: 0x40021414'u),
  BSRR: GPIOH_BSRR_Type(loc: 0x40021418'u),
  LCKR: GPIOH_LCKR_Type(loc: 0x4002141c'u),
  AFRL: GPIOH_AFRL_Type(loc: 0x40021420'u),
  AFRH: GPIOH_AFRH_Type(loc: 0x40021424'u),
)

const GPIOE* = GPIOH_Type(
  MODER: GPIOH_MODER_Type(loc: 0x40021000'u),
  OTYPER: GPIOH_OTYPER_Type(loc: 0x40021004'u),
  OSPEEDR: GPIOH_OSPEEDR_Type(loc: 0x40021008'u),
  PUPDR: GPIOH_PUPDR_Type(loc: 0x4002100c'u),
  IDR: GPIOH_IDR_Type(loc: 0x40021010'u),
  ODR: GPIOH_ODR_Type(loc: 0x40021014'u),
  BSRR: GPIOH_BSRR_Type(loc: 0x40021018'u),
  LCKR: GPIOH_LCKR_Type(loc: 0x4002101c'u),
  AFRL: GPIOH_AFRL_Type(loc: 0x40021020'u),
  AFRH: GPIOH_AFRH_Type(loc: 0x40021024'u),
)

const GPIOD* = GPIOH_Type(
  MODER: GPIOH_MODER_Type(loc: 0x40020c00'u),
  OTYPER: GPIOH_OTYPER_Type(loc: 0x40020c04'u),
  OSPEEDR: GPIOH_OSPEEDR_Type(loc: 0x40020c08'u),
  PUPDR: GPIOH_PUPDR_Type(loc: 0x40020c0c'u),
  IDR: GPIOH_IDR_Type(loc: 0x40020c10'u),
  ODR: GPIOH_ODR_Type(loc: 0x40020c14'u),
  BSRR: GPIOH_BSRR_Type(loc: 0x40020c18'u),
  LCKR: GPIOH_LCKR_Type(loc: 0x40020c1c'u),
  AFRL: GPIOH_AFRL_Type(loc: 0x40020c20'u),
  AFRH: GPIOH_AFRH_Type(loc: 0x40020c24'u),
)

const GPIOC* = GPIOH_Type(
  MODER: GPIOH_MODER_Type(loc: 0x40020800'u),
  OTYPER: GPIOH_OTYPER_Type(loc: 0x40020804'u),
  OSPEEDR: GPIOH_OSPEEDR_Type(loc: 0x40020808'u),
  PUPDR: GPIOH_PUPDR_Type(loc: 0x4002080c'u),
  IDR: GPIOH_IDR_Type(loc: 0x40020810'u),
  ODR: GPIOH_ODR_Type(loc: 0x40020814'u),
  BSRR: GPIOH_BSRR_Type(loc: 0x40020818'u),
  LCKR: GPIOH_LCKR_Type(loc: 0x4002081c'u),
  AFRL: GPIOH_AFRL_Type(loc: 0x40020820'u),
  AFRH: GPIOH_AFRH_Type(loc: 0x40020824'u),
)

const GPIOB* = GPIOB_Type(
  MODER: GPIOB_MODER_Type(loc: 0x40020400'u),
  OTYPER: GPIOB_OTYPER_Type(loc: 0x40020404'u),
  OSPEEDR: GPIOB_OSPEEDR_Type(loc: 0x40020408'u),
  PUPDR: GPIOB_PUPDR_Type(loc: 0x4002040c'u),
  IDR: GPIOB_IDR_Type(loc: 0x40020410'u),
  ODR: GPIOB_ODR_Type(loc: 0x40020414'u),
  BSRR: GPIOB_BSRR_Type(loc: 0x40020418'u),
  LCKR: GPIOB_LCKR_Type(loc: 0x4002041c'u),
  AFRL: GPIOB_AFRL_Type(loc: 0x40020420'u),
  AFRH: GPIOB_AFRH_Type(loc: 0x40020424'u),
)

const GPIOA* = GPIOA_Type(
  MODER: GPIOA_MODER_Type(loc: 0x40020000'u),
  OTYPER: GPIOA_OTYPER_Type(loc: 0x40020004'u),
  OSPEEDR: GPIOA_OSPEEDR_Type(loc: 0x40020008'u),
  PUPDR: GPIOA_PUPDR_Type(loc: 0x4002000c'u),
  IDR: GPIOA_IDR_Type(loc: 0x40020010'u),
  ODR: GPIOA_ODR_Type(loc: 0x40020014'u),
  BSRR: GPIOA_BSRR_Type(loc: 0x40020018'u),
  LCKR: GPIOA_LCKR_Type(loc: 0x4002001c'u),
  AFRL: GPIOA_AFRL_Type(loc: 0x40020020'u),
  AFRH: GPIOA_AFRH_Type(loc: 0x40020024'u),
)

const SYSCFG* = SYSCFG_Type(
  MEMRM: SYSCFG_MEMRM_Type(loc: 0x40013800'u),
  PMC: SYSCFG_PMC_Type(loc: 0x40013804'u),
  EXTICR1: SYSCFG_EXTICR1_Type(loc: 0x40013808'u),
  EXTICR2: SYSCFG_EXTICR2_Type(loc: 0x4001380c'u),
  EXTICR3: SYSCFG_EXTICR3_Type(loc: 0x40013810'u),
  EXTICR4: SYSCFG_EXTICR4_Type(loc: 0x40013814'u),
  CMPCR: SYSCFG_CMPCR_Type(loc: 0x40013820'u),
)

const SPI1* = SPI1_Type(
  CR1: SPI1_CR1_Type(loc: 0x40013000'u),
  CR2: SPI1_CR2_Type(loc: 0x40013004'u),
  SR: SPI1_SR_Type(loc: 0x40013008'u),
  DR: SPI1_DR_Type(loc: 0x4001300c'u),
  CRCPR: SPI1_CRCPR_Type(loc: 0x40013010'u),
  RXCRCR: SPI1_RXCRCR_Type(loc: 0x40013014'u),
  TXCRCR: SPI1_TXCRCR_Type(loc: 0x40013018'u),
  I2SCFGR: SPI1_I2SCFGR_Type(loc: 0x4001301c'u),
  I2SPR: SPI1_I2SPR_Type(loc: 0x40013020'u),
)

const SPI2* = SPI1_Type(
  CR1: SPI1_CR1_Type(loc: 0x40003800'u),
  CR2: SPI1_CR2_Type(loc: 0x40003804'u),
  SR: SPI1_SR_Type(loc: 0x40003808'u),
  DR: SPI1_DR_Type(loc: 0x4000380c'u),
  CRCPR: SPI1_CRCPR_Type(loc: 0x40003810'u),
  RXCRCR: SPI1_RXCRCR_Type(loc: 0x40003814'u),
  TXCRCR: SPI1_TXCRCR_Type(loc: 0x40003818'u),
  I2SCFGR: SPI1_I2SCFGR_Type(loc: 0x4000381c'u),
  I2SPR: SPI1_I2SPR_Type(loc: 0x40003820'u),
)

const SPI3* = SPI1_Type(
  CR1: SPI1_CR1_Type(loc: 0x40003c00'u),
  CR2: SPI1_CR2_Type(loc: 0x40003c04'u),
  SR: SPI1_SR_Type(loc: 0x40003c08'u),
  DR: SPI1_DR_Type(loc: 0x40003c0c'u),
  CRCPR: SPI1_CRCPR_Type(loc: 0x40003c10'u),
  RXCRCR: SPI1_RXCRCR_Type(loc: 0x40003c14'u),
  TXCRCR: SPI1_TXCRCR_Type(loc: 0x40003c18'u),
  I2SCFGR: SPI1_I2SCFGR_Type(loc: 0x40003c1c'u),
  I2SPR: SPI1_I2SPR_Type(loc: 0x40003c20'u),
)

const SPI4* = SPI1_Type(
  CR1: SPI1_CR1_Type(loc: 0x40013400'u),
  CR2: SPI1_CR2_Type(loc: 0x40013404'u),
  SR: SPI1_SR_Type(loc: 0x40013408'u),
  DR: SPI1_DR_Type(loc: 0x4001340c'u),
  CRCPR: SPI1_CRCPR_Type(loc: 0x40013410'u),
  RXCRCR: SPI1_RXCRCR_Type(loc: 0x40013414'u),
  TXCRCR: SPI1_TXCRCR_Type(loc: 0x40013418'u),
  I2SCFGR: SPI1_I2SCFGR_Type(loc: 0x4001341c'u),
  I2SPR: SPI1_I2SPR_Type(loc: 0x40013420'u),
)

const ADC1* = ADC1_Type(
  SR: ADC1_SR_Type(loc: 0x40012000'u),
  CR1: ADC1_CR1_Type(loc: 0x40012004'u),
  CR2: ADC1_CR2_Type(loc: 0x40012008'u),
  SMPR1: ADC1_SMPR1_Type(loc: 0x4001200c'u),
  SMPR2: ADC1_SMPR2_Type(loc: 0x40012010'u),
  JOFR1: ADC1_JOFR1_Type(loc: 0x40012014'u),
  JOFR2: ADC1_JOFR2_Type(loc: 0x40012018'u),
  JOFR3: ADC1_JOFR3_Type(loc: 0x4001201c'u),
  JOFR4: ADC1_JOFR4_Type(loc: 0x40012020'u),
  HTR: ADC1_HTR_Type(loc: 0x40012024'u),
  LTR: ADC1_LTR_Type(loc: 0x40012028'u),
  SQR1: ADC1_SQR1_Type(loc: 0x4001202c'u),
  SQR2: ADC1_SQR2_Type(loc: 0x40012030'u),
  SQR3: ADC1_SQR3_Type(loc: 0x40012034'u),
  JSQR: ADC1_JSQR_Type(loc: 0x40012038'u),
  JDR1: ADC1_JDR1_Type(loc: 0x4001203c'u),
  JDR2: ADC1_JDR2_Type(loc: 0x40012040'u),
  JDR3: ADC1_JDR3_Type(loc: 0x40012044'u),
  JDR4: ADC1_JDR4_Type(loc: 0x40012048'u),
  DR: ADC1_DR_Type(loc: 0x4001204c'u),
)

const ADC2* = ADC1_Type(
  SR: ADC1_SR_Type(loc: 0x40012100'u),
  CR1: ADC1_CR1_Type(loc: 0x40012104'u),
  CR2: ADC1_CR2_Type(loc: 0x40012108'u),
  SMPR1: ADC1_SMPR1_Type(loc: 0x4001210c'u),
  SMPR2: ADC1_SMPR2_Type(loc: 0x40012110'u),
  JOFR1: ADC1_JOFR1_Type(loc: 0x40012114'u),
  JOFR2: ADC1_JOFR2_Type(loc: 0x40012118'u),
  JOFR3: ADC1_JOFR3_Type(loc: 0x4001211c'u),
  JOFR4: ADC1_JOFR4_Type(loc: 0x40012120'u),
  HTR: ADC1_HTR_Type(loc: 0x40012124'u),
  LTR: ADC1_LTR_Type(loc: 0x40012128'u),
  SQR1: ADC1_SQR1_Type(loc: 0x4001212c'u),
  SQR2: ADC1_SQR2_Type(loc: 0x40012130'u),
  SQR3: ADC1_SQR3_Type(loc: 0x40012134'u),
  JSQR: ADC1_JSQR_Type(loc: 0x40012138'u),
  JDR1: ADC1_JDR1_Type(loc: 0x4001213c'u),
  JDR2: ADC1_JDR2_Type(loc: 0x40012140'u),
  JDR3: ADC1_JDR3_Type(loc: 0x40012144'u),
  JDR4: ADC1_JDR4_Type(loc: 0x40012148'u),
  DR: ADC1_DR_Type(loc: 0x4001214c'u),
)

const ADC3* = ADC1_Type(
  SR: ADC1_SR_Type(loc: 0x40012200'u),
  CR1: ADC1_CR1_Type(loc: 0x40012204'u),
  CR2: ADC1_CR2_Type(loc: 0x40012208'u),
  SMPR1: ADC1_SMPR1_Type(loc: 0x4001220c'u),
  SMPR2: ADC1_SMPR2_Type(loc: 0x40012210'u),
  JOFR1: ADC1_JOFR1_Type(loc: 0x40012214'u),
  JOFR2: ADC1_JOFR2_Type(loc: 0x40012218'u),
  JOFR3: ADC1_JOFR3_Type(loc: 0x4001221c'u),
  JOFR4: ADC1_JOFR4_Type(loc: 0x40012220'u),
  HTR: ADC1_HTR_Type(loc: 0x40012224'u),
  LTR: ADC1_LTR_Type(loc: 0x40012228'u),
  SQR1: ADC1_SQR1_Type(loc: 0x4001222c'u),
  SQR2: ADC1_SQR2_Type(loc: 0x40012230'u),
  SQR3: ADC1_SQR3_Type(loc: 0x40012234'u),
  JSQR: ADC1_JSQR_Type(loc: 0x40012238'u),
  JDR1: ADC1_JDR1_Type(loc: 0x4001223c'u),
  JDR2: ADC1_JDR2_Type(loc: 0x40012240'u),
  JDR3: ADC1_JDR3_Type(loc: 0x40012244'u),
  JDR4: ADC1_JDR4_Type(loc: 0x40012248'u),
  DR: ADC1_DR_Type(loc: 0x4001224c'u),
)

const USART6* = USART6_Type(
  SR: USART6_SR_Type(loc: 0x40011400'u),
  DR: USART6_DR_Type(loc: 0x40011404'u),
  BRR: USART6_BRR_Type(loc: 0x40011408'u),
  CR1: USART6_CR1_Type(loc: 0x4001140c'u),
  CR2: USART6_CR2_Type(loc: 0x40011410'u),
  CR3: USART6_CR3_Type(loc: 0x40011414'u),
  GTPR: USART6_GTPR_Type(loc: 0x40011418'u),
)

const USART1* = USART6_Type(
  SR: USART6_SR_Type(loc: 0x40011000'u),
  DR: USART6_DR_Type(loc: 0x40011004'u),
  BRR: USART6_BRR_Type(loc: 0x40011008'u),
  CR1: USART6_CR1_Type(loc: 0x4001100c'u),
  CR2: USART6_CR2_Type(loc: 0x40011010'u),
  CR3: USART6_CR3_Type(loc: 0x40011014'u),
  GTPR: USART6_GTPR_Type(loc: 0x40011018'u),
)

const USART2* = USART6_Type(
  SR: USART6_SR_Type(loc: 0x40004400'u),
  DR: USART6_DR_Type(loc: 0x40004404'u),
  BRR: USART6_BRR_Type(loc: 0x40004408'u),
  CR1: USART6_CR1_Type(loc: 0x4000440c'u),
  CR2: USART6_CR2_Type(loc: 0x40004410'u),
  CR3: USART6_CR3_Type(loc: 0x40004414'u),
  GTPR: USART6_GTPR_Type(loc: 0x40004418'u),
)

const USART3* = USART6_Type(
  SR: USART6_SR_Type(loc: 0x40004800'u),
  DR: USART6_DR_Type(loc: 0x40004804'u),
  BRR: USART6_BRR_Type(loc: 0x40004808'u),
  CR1: USART6_CR1_Type(loc: 0x4000480c'u),
  CR2: USART6_CR2_Type(loc: 0x40004810'u),
  CR3: USART6_CR3_Type(loc: 0x40004814'u),
  GTPR: USART6_GTPR_Type(loc: 0x40004818'u),
)

const DAC* = DAC_Type(
  CR: DAC_CR_Type(loc: 0x40007400'u),
  SWTRIGR: DAC_SWTRIGR_Type(loc: 0x40007404'u),
  DHR12R1: DAC_DHR12R1_Type(loc: 0x40007408'u),
  DHR12L1: DAC_DHR12L1_Type(loc: 0x4000740c'u),
  DHR8R1: DAC_DHR8R1_Type(loc: 0x40007410'u),
  DHR12R2: DAC_DHR12R2_Type(loc: 0x40007414'u),
  DHR12L2: DAC_DHR12L2_Type(loc: 0x40007418'u),
  DHR8R2: DAC_DHR8R2_Type(loc: 0x4000741c'u),
  DHR12RD: DAC_DHR12RD_Type(loc: 0x40007420'u),
  DHR12LD: DAC_DHR12LD_Type(loc: 0x40007424'u),
  DHR8RD: DAC_DHR8RD_Type(loc: 0x40007428'u),
  DOR1: DAC_DOR1_Type(loc: 0x4000742c'u),
  DOR2: DAC_DOR2_Type(loc: 0x40007430'u),
  SR: DAC_SR_Type(loc: 0x40007434'u),
)

const FMPI2C* = FMPI2C_Type(
  CR1: FMPI2C_CR1_Type(loc: 0x40006000'u),
  CR2: FMPI2C_CR2_Type(loc: 0x40006004'u),
  OAR1: FMPI2C_OAR1_Type(loc: 0x40006008'u),
  OAR2: FMPI2C_OAR2_Type(loc: 0x4000600c'u),
  TIMINGR: FMPI2C_TIMINGR_Type(loc: 0x40006010'u),
  TIMEOUTR: FMPI2C_TIMEOUTR_Type(loc: 0x40006014'u),
  ISR: FMPI2C_ISR_Type(loc: 0x40006018'u),
  ICR: FMPI2C_ICR_Type(loc: 0x4000601c'u),
  PECR: FMPI2C_PECR_Type(loc: 0x40006020'u),
  RXDR: FMPI2C_RXDR_Type(loc: 0x40006024'u),
  TXDR: FMPI2C_TXDR_Type(loc: 0x40006028'u),
)

const I2C3* = I2C3_Type(
  CR1: I2C3_CR1_Type(loc: 0x40005c00'u),
  CR2: I2C3_CR2_Type(loc: 0x40005c04'u),
  OAR1: I2C3_OAR1_Type(loc: 0x40005c08'u),
  OAR2: I2C3_OAR2_Type(loc: 0x40005c0c'u),
  DR: I2C3_DR_Type(loc: 0x40005c10'u),
  SR1: I2C3_SR1_Type(loc: 0x40005c14'u),
  SR2: I2C3_SR2_Type(loc: 0x40005c18'u),
  CCR: I2C3_CCR_Type(loc: 0x40005c1c'u),
  TRISE: I2C3_TRISE_Type(loc: 0x40005c20'u),
  FLTR: I2C3_FLTR_Type(loc: 0x40005c24'u),
)

const I2C2* = I2C3_Type(
  CR1: I2C3_CR1_Type(loc: 0x40005800'u),
  CR2: I2C3_CR2_Type(loc: 0x40005804'u),
  OAR1: I2C3_OAR1_Type(loc: 0x40005808'u),
  OAR2: I2C3_OAR2_Type(loc: 0x4000580c'u),
  DR: I2C3_DR_Type(loc: 0x40005810'u),
  SR1: I2C3_SR1_Type(loc: 0x40005814'u),
  SR2: I2C3_SR2_Type(loc: 0x40005818'u),
  CCR: I2C3_CCR_Type(loc: 0x4000581c'u),
  TRISE: I2C3_TRISE_Type(loc: 0x40005820'u),
  FLTR: I2C3_FLTR_Type(loc: 0x40005824'u),
)

const I2C1* = I2C3_Type(
  CR1: I2C3_CR1_Type(loc: 0x40005400'u),
  CR2: I2C3_CR2_Type(loc: 0x40005404'u),
  OAR1: I2C3_OAR1_Type(loc: 0x40005408'u),
  OAR2: I2C3_OAR2_Type(loc: 0x4000540c'u),
  DR: I2C3_DR_Type(loc: 0x40005410'u),
  SR1: I2C3_SR1_Type(loc: 0x40005414'u),
  SR2: I2C3_SR2_Type(loc: 0x40005418'u),
  CCR: I2C3_CCR_Type(loc: 0x4000541c'u),
  TRISE: I2C3_TRISE_Type(loc: 0x40005420'u),
  FLTR: I2C3_FLTR_Type(loc: 0x40005424'u),
)

const IWDG* = IWDG_Type(
  KR: IWDG_KR_Type(loc: 0x40003000'u),
  PR: IWDG_PR_Type(loc: 0x40003004'u),
  RLR: IWDG_RLR_Type(loc: 0x40003008'u),
  SR: IWDG_SR_Type(loc: 0x4000300c'u),
)

const WWDG* = WWDG_Type(
  CR: WWDG_CR_Type(loc: 0x40002c00'u),
  CFR: WWDG_CFR_Type(loc: 0x40002c04'u),
  SR: WWDG_SR_Type(loc: 0x40002c08'u),
)

const RTC* = RTC_Type(
  TR: RTC_TR_Type(loc: 0x40002800'u),
  DR: RTC_DR_Type(loc: 0x40002804'u),
  CR: RTC_CR_Type(loc: 0x40002808'u),
  ISR: RTC_ISR_Type(loc: 0x4000280c'u),
  PRER: RTC_PRER_Type(loc: 0x40002810'u),
  WUTR: RTC_WUTR_Type(loc: 0x40002814'u),
  CALIBR: RTC_CALIBR_Type(loc: 0x40002818'u),
  ALRMAR: RTC_ALRMAR_Type(loc: 0x4000281c'u),
  ALRMBR: RTC_ALRMBR_Type(loc: 0x40002820'u),
  WPR: RTC_WPR_Type(loc: 0x40002824'u),
  SSR: RTC_SSR_Type(loc: 0x40002828'u),
  SHIFTR: RTC_SHIFTR_Type(loc: 0x4000282c'u),
  TSTR: RTC_TSTR_Type(loc: 0x40002830'u),
  TSDR: RTC_TSDR_Type(loc: 0x40002834'u),
  TSSSR: RTC_TSSSR_Type(loc: 0x40002838'u),
  CALR: RTC_CALR_Type(loc: 0x4000283c'u),
  TAFCR: RTC_TAFCR_Type(loc: 0x40002840'u),
  ALRMASSR: RTC_ALRMASSR_Type(loc: 0x40002844'u),
  ALRMBSSR: RTC_ALRMBSSR_Type(loc: 0x40002848'u),
  BKP0R: RTC_BKP0R_Type(loc: 0x40002850'u),
  BKP1R: RTC_BKP1R_Type(loc: 0x40002854'u),
  BKP2R: RTC_BKP2R_Type(loc: 0x40002858'u),
  BKP3R: RTC_BKP3R_Type(loc: 0x4000285c'u),
  BKP4R: RTC_BKP4R_Type(loc: 0x40002860'u),
  BKP5R: RTC_BKP5R_Type(loc: 0x40002864'u),
  BKP6R: RTC_BKP6R_Type(loc: 0x40002868'u),
  BKP7R: RTC_BKP7R_Type(loc: 0x4000286c'u),
  BKP8R: RTC_BKP8R_Type(loc: 0x40002870'u),
  BKP9R: RTC_BKP9R_Type(loc: 0x40002874'u),
  BKP10R: RTC_BKP10R_Type(loc: 0x40002878'u),
  BKP11R: RTC_BKP11R_Type(loc: 0x4000287c'u),
  BKP12R: RTC_BKP12R_Type(loc: 0x40002880'u),
  BKP13R: RTC_BKP13R_Type(loc: 0x40002884'u),
  BKP14R: RTC_BKP14R_Type(loc: 0x40002888'u),
  BKP15R: RTC_BKP15R_Type(loc: 0x4000288c'u),
  BKP16R: RTC_BKP16R_Type(loc: 0x40002890'u),
  BKP17R: RTC_BKP17R_Type(loc: 0x40002894'u),
  BKP18R: RTC_BKP18R_Type(loc: 0x40002898'u),
  BKP19R: RTC_BKP19R_Type(loc: 0x4000289c'u),
)

const UART4* = UART4_Type(
  SR: UART4_SR_Type(loc: 0x40004c00'u),
  DR: UART4_DR_Type(loc: 0x40004c04'u),
  BRR: UART4_BRR_Type(loc: 0x40004c08'u),
  CR1: UART4_CR1_Type(loc: 0x40004c0c'u),
  CR2: UART4_CR2_Type(loc: 0x40004c10'u),
  CR3: UART4_CR3_Type(loc: 0x40004c14'u),
)

const UART5* = UART4_Type(
  SR: UART4_SR_Type(loc: 0x40005000'u),
  DR: UART4_DR_Type(loc: 0x40005004'u),
  BRR: UART4_BRR_Type(loc: 0x40005008'u),
  CR1: UART4_CR1_Type(loc: 0x4000500c'u),
  CR2: UART4_CR2_Type(loc: 0x40005010'u),
  CR3: UART4_CR3_Type(loc: 0x40005014'u),
)

const C_ADC* = C_ADC_Type(
  CSR: C_ADC_CSR_Type(loc: 0x40012300'u),
  CCR: C_ADC_CCR_Type(loc: 0x40012304'u),
  CDR: C_ADC_CDR_Type(loc: 0x40012308'u),
)

const TIM1* = TIM1_Type(
  CR1: TIM1_CR1_Type(loc: 0x40010000'u),
  CR2: TIM1_CR2_Type(loc: 0x40010004'u),
  SMCR: TIM1_SMCR_Type(loc: 0x40010008'u),
  DIER: TIM1_DIER_Type(loc: 0x4001000c'u),
  SR: TIM1_SR_Type(loc: 0x40010010'u),
  EGR: TIM1_EGR_Type(loc: 0x40010014'u),
  CCMR1_Output: TIM1_CCMR1_Output_Type(loc: 0x40010018'u),
  CCMR1_Input: TIM1_CCMR1_Input_Type(loc: 0x40010018'u),
  CCMR2_Output: TIM1_CCMR2_Output_Type(loc: 0x4001001c'u),
  CCMR2_Input: TIM1_CCMR2_Input_Type(loc: 0x4001001c'u),
  CCER: TIM1_CCER_Type(loc: 0x40010020'u),
  CNT: TIM1_CNT_Type(loc: 0x40010024'u),
  PSC: TIM1_PSC_Type(loc: 0x40010028'u),
  ARR: TIM1_ARR_Type(loc: 0x4001002c'u),
  RCR: TIM1_RCR_Type(loc: 0x40010030'u),
  CCR1: TIM1_CCR1_Type(loc: 0x40010034'u),
  CCR2: TIM1_CCR2_Type(loc: 0x40010038'u),
  CCR3: TIM1_CCR3_Type(loc: 0x4001003c'u),
  CCR4: TIM1_CCR4_Type(loc: 0x40010040'u),
  BDTR: TIM1_BDTR_Type(loc: 0x40010044'u),
  DCR: TIM1_DCR_Type(loc: 0x40010048'u),
  DMAR: TIM1_DMAR_Type(loc: 0x4001004c'u),
)

const TIM8* = TIM1_Type(
  CR1: TIM1_CR1_Type(loc: 0x40010400'u),
  CR2: TIM1_CR2_Type(loc: 0x40010404'u),
  SMCR: TIM1_SMCR_Type(loc: 0x40010408'u),
  DIER: TIM1_DIER_Type(loc: 0x4001040c'u),
  SR: TIM1_SR_Type(loc: 0x40010410'u),
  EGR: TIM1_EGR_Type(loc: 0x40010414'u),
  CCMR1_Output: TIM1_CCMR1_Output_Type(loc: 0x40010418'u),
  CCMR1_Input: TIM1_CCMR1_Input_Type(loc: 0x40010418'u),
  CCMR2_Output: TIM1_CCMR2_Output_Type(loc: 0x4001041c'u),
  CCMR2_Input: TIM1_CCMR2_Input_Type(loc: 0x4001041c'u),
  CCER: TIM1_CCER_Type(loc: 0x40010420'u),
  CNT: TIM1_CNT_Type(loc: 0x40010424'u),
  PSC: TIM1_PSC_Type(loc: 0x40010428'u),
  ARR: TIM1_ARR_Type(loc: 0x4001042c'u),
  RCR: TIM1_RCR_Type(loc: 0x40010430'u),
  CCR1: TIM1_CCR1_Type(loc: 0x40010434'u),
  CCR2: TIM1_CCR2_Type(loc: 0x40010438'u),
  CCR3: TIM1_CCR3_Type(loc: 0x4001043c'u),
  CCR4: TIM1_CCR4_Type(loc: 0x40010440'u),
  BDTR: TIM1_BDTR_Type(loc: 0x40010444'u),
  DCR: TIM1_DCR_Type(loc: 0x40010448'u),
  DMAR: TIM1_DMAR_Type(loc: 0x4001044c'u),
)

const TIM2* = TIM2_Type(
  CR1: TIM2_CR1_Type(loc: 0x40000000'u),
  CR2: TIM2_CR2_Type(loc: 0x40000004'u),
  SMCR: TIM2_SMCR_Type(loc: 0x40000008'u),
  DIER: TIM2_DIER_Type(loc: 0x4000000c'u),
  SR: TIM2_SR_Type(loc: 0x40000010'u),
  EGR: TIM2_EGR_Type(loc: 0x40000014'u),
  CCMR1_Output: TIM2_CCMR1_Output_Type(loc: 0x40000018'u),
  CCMR1_Input: TIM2_CCMR1_Input_Type(loc: 0x40000018'u),
  CCMR2_Output: TIM2_CCMR2_Output_Type(loc: 0x4000001c'u),
  CCMR2_Input: TIM2_CCMR2_Input_Type(loc: 0x4000001c'u),
  CCER: TIM2_CCER_Type(loc: 0x40000020'u),
  CNT: TIM2_CNT_Type(loc: 0x40000024'u),
  PSC: TIM2_PSC_Type(loc: 0x40000028'u),
  ARR: TIM2_ARR_Type(loc: 0x4000002c'u),
  CCR1: TIM2_CCR1_Type(loc: 0x40000034'u),
  CCR2: TIM2_CCR2_Type(loc: 0x40000038'u),
  CCR3: TIM2_CCR3_Type(loc: 0x4000003c'u),
  CCR4: TIM2_CCR4_Type(loc: 0x40000040'u),
  DCR: TIM2_DCR_Type(loc: 0x40000048'u),
  DMAR: TIM2_DMAR_Type(loc: 0x4000004c'u),
  ORx: TIM2_OR_Type(loc: 0x40000050'u),
)

const TIM3* = TIM3_Type(
  CR1: TIM3_CR1_Type(loc: 0x40000400'u),
  CR2: TIM3_CR2_Type(loc: 0x40000404'u),
  SMCR: TIM3_SMCR_Type(loc: 0x40000408'u),
  DIER: TIM3_DIER_Type(loc: 0x4000040c'u),
  SR: TIM3_SR_Type(loc: 0x40000410'u),
  EGR: TIM3_EGR_Type(loc: 0x40000414'u),
  CCMR1_Output: TIM3_CCMR1_Output_Type(loc: 0x40000418'u),
  CCMR1_Input: TIM3_CCMR1_Input_Type(loc: 0x40000418'u),
  CCMR2_Output: TIM3_CCMR2_Output_Type(loc: 0x4000041c'u),
  CCMR2_Input: TIM3_CCMR2_Input_Type(loc: 0x4000041c'u),
  CCER: TIM3_CCER_Type(loc: 0x40000420'u),
  CNT: TIM3_CNT_Type(loc: 0x40000424'u),
  PSC: TIM3_PSC_Type(loc: 0x40000428'u),
  ARR: TIM3_ARR_Type(loc: 0x4000042c'u),
  CCR1: TIM3_CCR1_Type(loc: 0x40000434'u),
  CCR2: TIM3_CCR2_Type(loc: 0x40000438'u),
  CCR3: TIM3_CCR3_Type(loc: 0x4000043c'u),
  CCR4: TIM3_CCR4_Type(loc: 0x40000440'u),
  DCR: TIM3_DCR_Type(loc: 0x40000448'u),
  DMAR: TIM3_DMAR_Type(loc: 0x4000044c'u),
)

const TIM4* = TIM3_Type(
  CR1: TIM3_CR1_Type(loc: 0x40000800'u),
  CR2: TIM3_CR2_Type(loc: 0x40000804'u),
  SMCR: TIM3_SMCR_Type(loc: 0x40000808'u),
  DIER: TIM3_DIER_Type(loc: 0x4000080c'u),
  SR: TIM3_SR_Type(loc: 0x40000810'u),
  EGR: TIM3_EGR_Type(loc: 0x40000814'u),
  CCMR1_Output: TIM3_CCMR1_Output_Type(loc: 0x40000818'u),
  CCMR1_Input: TIM3_CCMR1_Input_Type(loc: 0x40000818'u),
  CCMR2_Output: TIM3_CCMR2_Output_Type(loc: 0x4000081c'u),
  CCMR2_Input: TIM3_CCMR2_Input_Type(loc: 0x4000081c'u),
  CCER: TIM3_CCER_Type(loc: 0x40000820'u),
  CNT: TIM3_CNT_Type(loc: 0x40000824'u),
  PSC: TIM3_PSC_Type(loc: 0x40000828'u),
  ARR: TIM3_ARR_Type(loc: 0x4000082c'u),
  CCR1: TIM3_CCR1_Type(loc: 0x40000834'u),
  CCR2: TIM3_CCR2_Type(loc: 0x40000838'u),
  CCR3: TIM3_CCR3_Type(loc: 0x4000083c'u),
  CCR4: TIM3_CCR4_Type(loc: 0x40000840'u),
  DCR: TIM3_DCR_Type(loc: 0x40000848'u),
  DMAR: TIM3_DMAR_Type(loc: 0x4000084c'u),
)

const TIM5* = TIM5_Type(
  CR1: TIM5_CR1_Type(loc: 0x40000c00'u),
  CR2: TIM5_CR2_Type(loc: 0x40000c04'u),
  SMCR: TIM5_SMCR_Type(loc: 0x40000c08'u),
  DIER: TIM5_DIER_Type(loc: 0x40000c0c'u),
  SR: TIM5_SR_Type(loc: 0x40000c10'u),
  EGR: TIM5_EGR_Type(loc: 0x40000c14'u),
  CCMR1_Output: TIM5_CCMR1_Output_Type(loc: 0x40000c18'u),
  CCMR1_Input: TIM5_CCMR1_Input_Type(loc: 0x40000c18'u),
  CCMR2_Output: TIM5_CCMR2_Output_Type(loc: 0x40000c1c'u),
  CCMR2_Input: TIM5_CCMR2_Input_Type(loc: 0x40000c1c'u),
  CCER: TIM5_CCER_Type(loc: 0x40000c20'u),
  CNT: TIM5_CNT_Type(loc: 0x40000c24'u),
  PSC: TIM5_PSC_Type(loc: 0x40000c28'u),
  ARR: TIM5_ARR_Type(loc: 0x40000c2c'u),
  CCR1: TIM5_CCR1_Type(loc: 0x40000c34'u),
  CCR2: TIM5_CCR2_Type(loc: 0x40000c38'u),
  CCR3: TIM5_CCR3_Type(loc: 0x40000c3c'u),
  CCR4: TIM5_CCR4_Type(loc: 0x40000c40'u),
  DCR: TIM5_DCR_Type(loc: 0x40000c48'u),
  DMAR: TIM5_DMAR_Type(loc: 0x40000c4c'u),
  ORx: TIM5_OR_Type(loc: 0x40000c50'u),
)

const TIM9* = TIM9_Type(
  CR1: TIM9_CR1_Type(loc: 0x40014000'u),
  CR2: TIM9_CR2_Type(loc: 0x40014004'u),
  SMCR: TIM9_SMCR_Type(loc: 0x40014008'u),
  DIER: TIM9_DIER_Type(loc: 0x4001400c'u),
  SR: TIM9_SR_Type(loc: 0x40014010'u),
  EGR: TIM9_EGR_Type(loc: 0x40014014'u),
  CCMR1_Output: TIM9_CCMR1_Output_Type(loc: 0x40014018'u),
  CCMR1_Input: TIM9_CCMR1_Input_Type(loc: 0x40014018'u),
  CCER: TIM9_CCER_Type(loc: 0x40014020'u),
  CNT: TIM9_CNT_Type(loc: 0x40014024'u),
  PSC: TIM9_PSC_Type(loc: 0x40014028'u),
  ARR: TIM9_ARR_Type(loc: 0x4001402c'u),
  CCR1: TIM9_CCR1_Type(loc: 0x40014034'u),
  CCR2: TIM9_CCR2_Type(loc: 0x40014038'u),
)

const TIM12* = TIM9_Type(
  CR1: TIM9_CR1_Type(loc: 0x40001800'u),
  CR2: TIM9_CR2_Type(loc: 0x40001804'u),
  SMCR: TIM9_SMCR_Type(loc: 0x40001808'u),
  DIER: TIM9_DIER_Type(loc: 0x4000180c'u),
  SR: TIM9_SR_Type(loc: 0x40001810'u),
  EGR: TIM9_EGR_Type(loc: 0x40001814'u),
  CCMR1_Output: TIM9_CCMR1_Output_Type(loc: 0x40001818'u),
  CCMR1_Input: TIM9_CCMR1_Input_Type(loc: 0x40001818'u),
  CCER: TIM9_CCER_Type(loc: 0x40001820'u),
  CNT: TIM9_CNT_Type(loc: 0x40001824'u),
  PSC: TIM9_PSC_Type(loc: 0x40001828'u),
  ARR: TIM9_ARR_Type(loc: 0x4000182c'u),
  CCR1: TIM9_CCR1_Type(loc: 0x40001834'u),
  CCR2: TIM9_CCR2_Type(loc: 0x40001838'u),
)

const TIM10* = TIM10_Type(
  CR1: TIM10_CR1_Type(loc: 0x40014400'u),
  DIER: TIM10_DIER_Type(loc: 0x4001440c'u),
  SR: TIM10_SR_Type(loc: 0x40014410'u),
  EGR: TIM10_EGR_Type(loc: 0x40014414'u),
  CCMR1_Output: TIM10_CCMR1_Output_Type(loc: 0x40014418'u),
  CCMR1_Input: TIM10_CCMR1_Input_Type(loc: 0x40014418'u),
  CCER: TIM10_CCER_Type(loc: 0x40014420'u),
  CNT: TIM10_CNT_Type(loc: 0x40014424'u),
  PSC: TIM10_PSC_Type(loc: 0x40014428'u),
  ARR: TIM10_ARR_Type(loc: 0x4001442c'u),
  CCR1: TIM10_CCR1_Type(loc: 0x40014434'u),
)

const TIM13* = TIM10_Type(
  CR1: TIM10_CR1_Type(loc: 0x40001c00'u),
  DIER: TIM10_DIER_Type(loc: 0x40001c0c'u),
  SR: TIM10_SR_Type(loc: 0x40001c10'u),
  EGR: TIM10_EGR_Type(loc: 0x40001c14'u),
  CCMR1_Output: TIM10_CCMR1_Output_Type(loc: 0x40001c18'u),
  CCMR1_Input: TIM10_CCMR1_Input_Type(loc: 0x40001c18'u),
  CCER: TIM10_CCER_Type(loc: 0x40001c20'u),
  CNT: TIM10_CNT_Type(loc: 0x40001c24'u),
  PSC: TIM10_PSC_Type(loc: 0x40001c28'u),
  ARR: TIM10_ARR_Type(loc: 0x40001c2c'u),
  CCR1: TIM10_CCR1_Type(loc: 0x40001c34'u),
)

const TIM14* = TIM10_Type(
  CR1: TIM10_CR1_Type(loc: 0x40002000'u),
  DIER: TIM10_DIER_Type(loc: 0x4000200c'u),
  SR: TIM10_SR_Type(loc: 0x40002010'u),
  EGR: TIM10_EGR_Type(loc: 0x40002014'u),
  CCMR1_Output: TIM10_CCMR1_Output_Type(loc: 0x40002018'u),
  CCMR1_Input: TIM10_CCMR1_Input_Type(loc: 0x40002018'u),
  CCER: TIM10_CCER_Type(loc: 0x40002020'u),
  CNT: TIM10_CNT_Type(loc: 0x40002024'u),
  PSC: TIM10_PSC_Type(loc: 0x40002028'u),
  ARR: TIM10_ARR_Type(loc: 0x4000202c'u),
  CCR1: TIM10_CCR1_Type(loc: 0x40002034'u),
)

const TIM11* = TIM11_Type(
  CR1: TIM11_CR1_Type(loc: 0x40014800'u),
  DIER: TIM11_DIER_Type(loc: 0x4001480c'u),
  SR: TIM11_SR_Type(loc: 0x40014810'u),
  EGR: TIM11_EGR_Type(loc: 0x40014814'u),
  CCMR1_Output: TIM11_CCMR1_Output_Type(loc: 0x40014818'u),
  CCMR1_Input: TIM11_CCMR1_Input_Type(loc: 0x40014818'u),
  CCER: TIM11_CCER_Type(loc: 0x40014820'u),
  CNT: TIM11_CNT_Type(loc: 0x40014824'u),
  PSC: TIM11_PSC_Type(loc: 0x40014828'u),
  ARR: TIM11_ARR_Type(loc: 0x4001482c'u),
  CCR1: TIM11_CCR1_Type(loc: 0x40014834'u),
  ORx: TIM11_OR_Type(loc: 0x40014850'u),
)

const TIM6* = TIM6_Type(
  CR1: TIM6_CR1_Type(loc: 0x40001000'u),
  CR2: TIM6_CR2_Type(loc: 0x40001004'u),
  DIER: TIM6_DIER_Type(loc: 0x4000100c'u),
  SR: TIM6_SR_Type(loc: 0x40001010'u),
  EGR: TIM6_EGR_Type(loc: 0x40001014'u),
  CNT: TIM6_CNT_Type(loc: 0x40001024'u),
  PSC: TIM6_PSC_Type(loc: 0x40001028'u),
  ARR: TIM6_ARR_Type(loc: 0x4000102c'u),
)

const TIM7* = TIM6_Type(
  CR1: TIM6_CR1_Type(loc: 0x40001400'u),
  CR2: TIM6_CR2_Type(loc: 0x40001404'u),
  DIER: TIM6_DIER_Type(loc: 0x4000140c'u),
  SR: TIM6_SR_Type(loc: 0x40001410'u),
  EGR: TIM6_EGR_Type(loc: 0x40001414'u),
  CNT: TIM6_CNT_Type(loc: 0x40001424'u),
  PSC: TIM6_PSC_Type(loc: 0x40001428'u),
  ARR: TIM6_ARR_Type(loc: 0x4000142c'u),
)

const CRC* = CRC_Type(
  DR: CRC_DR_Type(loc: 0x40023000'u),
  IDR: CRC_IDR_Type(loc: 0x40023004'u),
  CR: CRC_CR_Type(loc: 0x40023008'u),
)

const OTG_FS_GLOBAL* = OTG_FS_GLOBAL_Type(
  FS_GOTGCTL: OTG_FS_GLOBAL_FS_GOTGCTL_Type(loc: 0x50000000'u),
  FS_GOTGINT: OTG_FS_GLOBAL_FS_GOTGINT_Type(loc: 0x50000004'u),
  FS_GAHBCFG: OTG_FS_GLOBAL_FS_GAHBCFG_Type(loc: 0x50000008'u),
  FS_GUSBCFG: OTG_FS_GLOBAL_FS_GUSBCFG_Type(loc: 0x5000000c'u),
  FS_GRSTCTL: OTG_FS_GLOBAL_FS_GRSTCTL_Type(loc: 0x50000010'u),
  FS_GINTSTS: OTG_FS_GLOBAL_FS_GINTSTS_Type(loc: 0x50000014'u),
  FS_GINTMSK: OTG_FS_GLOBAL_FS_GINTMSK_Type(loc: 0x50000018'u),
  FS_GRXSTSR_Device: OTG_FS_GLOBAL_FS_GRXSTSR_Device_Type(loc: 0x5000001c'u),
  FS_GRXSTSR_Host: OTG_FS_GLOBAL_FS_GRXSTSR_Host_Type(loc: 0x5000001c'u),
  FS_GRXFSIZ: OTG_FS_GLOBAL_FS_GRXFSIZ_Type(loc: 0x50000024'u),
  FS_GNPTXFSIZ_Device: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Type(loc: 0x50000028'u),
  FS_GNPTXFSIZ_Host: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Type(loc: 0x50000028'u),
  FS_GNPTXSTS: OTG_FS_GLOBAL_FS_GNPTXSTS_Type(loc: 0x5000002c'u),
  FS_GCCFG: OTG_FS_GLOBAL_FS_GCCFG_Type(loc: 0x50000038'u),
  FS_CID: OTG_FS_GLOBAL_FS_CID_Type(loc: 0x5000003c'u),
  FS_HPTXFSIZ: OTG_FS_GLOBAL_FS_HPTXFSIZ_Type(loc: 0x50000100'u),
  FS_DIEPTXF1: OTG_FS_GLOBAL_FS_DIEPTXF1_Type(loc: 0x50000104'u),
  FS_DIEPTXF2: OTG_FS_GLOBAL_FS_DIEPTXF2_Type(loc: 0x50000108'u),
  FS_DIEPTXF3: OTG_FS_GLOBAL_FS_DIEPTXF3_Type(loc: 0x5000010c'u),
)

const OTG_FS_HOST* = OTG_FS_HOST_Type(
  FS_HCFG: OTG_FS_HOST_FS_HCFG_Type(loc: 0x50000400'u),
  HFIR: OTG_FS_HOST_HFIR_Type(loc: 0x50000404'u),
  FS_HFNUM: OTG_FS_HOST_FS_HFNUM_Type(loc: 0x50000408'u),
  FS_HPTXSTS: OTG_FS_HOST_FS_HPTXSTS_Type(loc: 0x50000410'u),
  HAINT: OTG_FS_HOST_HAINT_Type(loc: 0x50000414'u),
  HAINTMSK: OTG_FS_HOST_HAINTMSK_Type(loc: 0x50000418'u),
  FS_HPRT: OTG_FS_HOST_FS_HPRT_Type(loc: 0x50000440'u),
  FS_HCCHAR0: OTG_FS_HOST_FS_HCCHAR0_Type(loc: 0x50000500'u),
  FS_HCINT0: OTG_FS_HOST_FS_HCINT0_Type(loc: 0x50000508'u),
  FS_HCINTMSK0: OTG_FS_HOST_FS_HCINTMSK0_Type(loc: 0x5000050c'u),
  FS_HCTSIZ0: OTG_FS_HOST_FS_HCTSIZ0_Type(loc: 0x50000510'u),
  FS_HCCHAR1: OTG_FS_HOST_FS_HCCHAR1_Type(loc: 0x50000520'u),
  FS_HCINT1: OTG_FS_HOST_FS_HCINT1_Type(loc: 0x50000528'u),
  FS_HCINTMSK1: OTG_FS_HOST_FS_HCINTMSK1_Type(loc: 0x5000052c'u),
  FS_HCTSIZ1: OTG_FS_HOST_FS_HCTSIZ1_Type(loc: 0x50000530'u),
  FS_HCCHAR2: OTG_FS_HOST_FS_HCCHAR2_Type(loc: 0x50000540'u),
  FS_HCINT2: OTG_FS_HOST_FS_HCINT2_Type(loc: 0x50000548'u),
  FS_HCINTMSK2: OTG_FS_HOST_FS_HCINTMSK2_Type(loc: 0x5000054c'u),
  FS_HCTSIZ2: OTG_FS_HOST_FS_HCTSIZ2_Type(loc: 0x50000550'u),
  FS_HCCHAR3: OTG_FS_HOST_FS_HCCHAR3_Type(loc: 0x50000560'u),
  FS_HCINT3: OTG_FS_HOST_FS_HCINT3_Type(loc: 0x50000568'u),
  FS_HCINTMSK3: OTG_FS_HOST_FS_HCINTMSK3_Type(loc: 0x5000056c'u),
  FS_HCTSIZ3: OTG_FS_HOST_FS_HCTSIZ3_Type(loc: 0x50000570'u),
  FS_HCCHAR4: OTG_FS_HOST_FS_HCCHAR4_Type(loc: 0x50000580'u),
  FS_HCINT4: OTG_FS_HOST_FS_HCINT4_Type(loc: 0x50000588'u),
  FS_HCINTMSK4: OTG_FS_HOST_FS_HCINTMSK4_Type(loc: 0x5000058c'u),
  FS_HCTSIZ4: OTG_FS_HOST_FS_HCTSIZ4_Type(loc: 0x50000590'u),
  FS_HCCHAR5: OTG_FS_HOST_FS_HCCHAR5_Type(loc: 0x500005a0'u),
  FS_HCINT5: OTG_FS_HOST_FS_HCINT5_Type(loc: 0x500005a8'u),
  FS_HCINTMSK5: OTG_FS_HOST_FS_HCINTMSK5_Type(loc: 0x500005ac'u),
  FS_HCTSIZ5: OTG_FS_HOST_FS_HCTSIZ5_Type(loc: 0x500005b0'u),
  FS_HCCHAR6: OTG_FS_HOST_FS_HCCHAR6_Type(loc: 0x500005c0'u),
  FS_HCINT6: OTG_FS_HOST_FS_HCINT6_Type(loc: 0x500005c8'u),
  FS_HCINTMSK6: OTG_FS_HOST_FS_HCINTMSK6_Type(loc: 0x500005cc'u),
  FS_HCTSIZ6: OTG_FS_HOST_FS_HCTSIZ6_Type(loc: 0x500005d0'u),
  FS_HCCHAR7: OTG_FS_HOST_FS_HCCHAR7_Type(loc: 0x500005e0'u),
  FS_HCINT7: OTG_FS_HOST_FS_HCINT7_Type(loc: 0x500005e8'u),
  FS_HCINTMSK7: OTG_FS_HOST_FS_HCINTMSK7_Type(loc: 0x500005ec'u),
  FS_HCTSIZ7: OTG_FS_HOST_FS_HCTSIZ7_Type(loc: 0x500005f0'u),
  FS_HCCHAR8: OTG_FS_HOST_FS_HCCHAR8_Type(loc: 0x50000600'u),
  FS_HCINT8: OTG_FS_HOST_FS_HCINT8_Type(loc: 0x50000608'u),
  FS_HCINTMSK8: OTG_FS_HOST_FS_HCINTMSK8_Type(loc: 0x5000060c'u),
  FS_HCTSIZ8: OTG_FS_HOST_FS_HCTSIZ8_Type(loc: 0x50000610'u),
  FS_HCCHAR9: OTG_FS_HOST_FS_HCCHAR9_Type(loc: 0x50000620'u),
  FS_HCINT9: OTG_FS_HOST_FS_HCINT9_Type(loc: 0x50000628'u),
  FS_HCINTMSK9: OTG_FS_HOST_FS_HCINTMSK9_Type(loc: 0x5000062c'u),
  FS_HCTSIZ9: OTG_FS_HOST_FS_HCTSIZ9_Type(loc: 0x50000630'u),
  FS_HCCHAR10: OTG_FS_HOST_FS_HCCHAR10_Type(loc: 0x50000640'u),
  FS_HCINT10: OTG_FS_HOST_FS_HCINT10_Type(loc: 0x50000648'u),
  FS_HCINTMSK10: OTG_FS_HOST_FS_HCINTMSK10_Type(loc: 0x5000064c'u),
  FS_HCTSIZ10: OTG_FS_HOST_FS_HCTSIZ10_Type(loc: 0x50000650'u),
  FS_HCCHAR11: OTG_FS_HOST_FS_HCCHAR11_Type(loc: 0x50000660'u),
  FS_HCINT11: OTG_FS_HOST_FS_HCINT11_Type(loc: 0x50000668'u),
  FS_HCINTMSK11: OTG_FS_HOST_FS_HCINTMSK11_Type(loc: 0x5000066c'u),
  FS_HCTSIZ11: OTG_FS_HOST_FS_HCTSIZ11_Type(loc: 0x50000670'u),
)

const OTG_FS_DEVICE* = OTG_FS_DEVICE_Type(
  FS_DCFG: OTG_FS_DEVICE_FS_DCFG_Type(loc: 0x50000800'u),
  FS_DCTL: OTG_FS_DEVICE_FS_DCTL_Type(loc: 0x50000804'u),
  FS_DSTS: OTG_FS_DEVICE_FS_DSTS_Type(loc: 0x50000808'u),
  FS_DIEPMSK: OTG_FS_DEVICE_FS_DIEPMSK_Type(loc: 0x50000810'u),
  FS_DOEPMSK: OTG_FS_DEVICE_FS_DOEPMSK_Type(loc: 0x50000814'u),
  FS_DAINT: OTG_FS_DEVICE_FS_DAINT_Type(loc: 0x50000818'u),
  FS_DAINTMSK: OTG_FS_DEVICE_FS_DAINTMSK_Type(loc: 0x5000081c'u),
  DVBUSDIS: OTG_FS_DEVICE_DVBUSDIS_Type(loc: 0x50000828'u),
  DVBUSPULSE: OTG_FS_DEVICE_DVBUSPULSE_Type(loc: 0x5000082c'u),
  DIEPEMPMSK: OTG_FS_DEVICE_DIEPEMPMSK_Type(loc: 0x50000834'u),
  FS_DIEPCTL0: OTG_FS_DEVICE_FS_DIEPCTL0_Type(loc: 0x50000900'u),
  DIEPINT0: OTG_FS_DEVICE_DIEPINT0_Type(loc: 0x50000908'u),
  DIEPTSIZ0: OTG_FS_DEVICE_DIEPTSIZ0_Type(loc: 0x50000910'u),
  DTXFSTS0: OTG_FS_DEVICE_DTXFSTS0_Type(loc: 0x50000918'u),
  DIEPCTL1: OTG_FS_DEVICE_DIEPCTL1_Type(loc: 0x50000920'u),
  DIEPINT1: OTG_FS_DEVICE_DIEPINT1_Type(loc: 0x50000928'u),
  DIEPTSIZ1: OTG_FS_DEVICE_DIEPTSIZ1_Type(loc: 0x50000930'u),
  DTXFSTS1: OTG_FS_DEVICE_DTXFSTS1_Type(loc: 0x50000938'u),
  DIEPCTL2: OTG_FS_DEVICE_DIEPCTL2_Type(loc: 0x50000940'u),
  DIEPINT2: OTG_FS_DEVICE_DIEPINT2_Type(loc: 0x50000948'u),
  DIEPTSIZ2: OTG_FS_DEVICE_DIEPTSIZ2_Type(loc: 0x50000950'u),
  DTXFSTS2: OTG_FS_DEVICE_DTXFSTS2_Type(loc: 0x50000958'u),
  DIEPCTL3: OTG_FS_DEVICE_DIEPCTL3_Type(loc: 0x50000960'u),
  DIEPINT3: OTG_FS_DEVICE_DIEPINT3_Type(loc: 0x50000968'u),
  DIEPTSIZ3: OTG_FS_DEVICE_DIEPTSIZ3_Type(loc: 0x50000970'u),
  DTXFSTS3: OTG_FS_DEVICE_DTXFSTS3_Type(loc: 0x50000978'u),
  DOEPCTL0: OTG_FS_DEVICE_DOEPCTL0_Type(loc: 0x50000b00'u),
  DOEPINT0: OTG_FS_DEVICE_DOEPINT0_Type(loc: 0x50000b08'u),
  DOEPTSIZ0: OTG_FS_DEVICE_DOEPTSIZ0_Type(loc: 0x50000b10'u),
  DOEPCTL1: OTG_FS_DEVICE_DOEPCTL1_Type(loc: 0x50000b20'u),
  DOEPINT1: OTG_FS_DEVICE_DOEPINT1_Type(loc: 0x50000b28'u),
  DOEPTSIZ1: OTG_FS_DEVICE_DOEPTSIZ1_Type(loc: 0x50000b30'u),
  DOEPCTL2: OTG_FS_DEVICE_DOEPCTL2_Type(loc: 0x50000b40'u),
  DOEPINT2: OTG_FS_DEVICE_DOEPINT2_Type(loc: 0x50000b48'u),
  DOEPTSIZ2: OTG_FS_DEVICE_DOEPTSIZ2_Type(loc: 0x50000b50'u),
  DOEPCTL3: OTG_FS_DEVICE_DOEPCTL3_Type(loc: 0x50000b60'u),
  DOEPINT3: OTG_FS_DEVICE_DOEPINT3_Type(loc: 0x50000b68'u),
  DOEPTSIZ3: OTG_FS_DEVICE_DOEPTSIZ3_Type(loc: 0x50000b70'u),
)

const OTG_FS_PWRCLK* = OTG_FS_PWRCLK_Type(
  FS_PCGCCTL: OTG_FS_PWRCLK_FS_PCGCCTL_Type(loc: 0x50000e00'u),
)

const CAN1* = CAN1_Type(
  MCR: CAN1_MCR_Type(loc: 0x40006400'u),
  MSR: CAN1_MSR_Type(loc: 0x40006404'u),
  TSR: CAN1_TSR_Type(loc: 0x40006408'u),
  RF0R: CAN1_RF0R_Type(loc: 0x4000640c'u),
  RF1R: CAN1_RF1R_Type(loc: 0x40006410'u),
  IER: CAN1_IER_Type(loc: 0x40006414'u),
  ESR: CAN1_ESR_Type(loc: 0x40006418'u),
  BTR: CAN1_BTR_Type(loc: 0x4000641c'u),
  TI0R: CAN1_TI0R_Type(loc: 0x40006580'u),
  TDT0R: CAN1_TDT0R_Type(loc: 0x40006584'u),
  TDL0R: CAN1_TDL0R_Type(loc: 0x40006588'u),
  TDH0R: CAN1_TDH0R_Type(loc: 0x4000658c'u),
  TI1R: CAN1_TI1R_Type(loc: 0x40006590'u),
  TDT1R: CAN1_TDT1R_Type(loc: 0x40006594'u),
  TDL1R: CAN1_TDL1R_Type(loc: 0x40006598'u),
  TDH1R: CAN1_TDH1R_Type(loc: 0x4000659c'u),
  TI2R: CAN1_TI2R_Type(loc: 0x400065a0'u),
  TDT2R: CAN1_TDT2R_Type(loc: 0x400065a4'u),
  TDL2R: CAN1_TDL2R_Type(loc: 0x400065a8'u),
  TDH2R: CAN1_TDH2R_Type(loc: 0x400065ac'u),
  RI0R: CAN1_RI0R_Type(loc: 0x400065b0'u),
  RDT0R: CAN1_RDT0R_Type(loc: 0x400065b4'u),
  RDL0R: CAN1_RDL0R_Type(loc: 0x400065b8'u),
  RDH0R: CAN1_RDH0R_Type(loc: 0x400065bc'u),
  RI1R: CAN1_RI1R_Type(loc: 0x400065c0'u),
  RDT1R: CAN1_RDT1R_Type(loc: 0x400065c4'u),
  RDL1R: CAN1_RDL1R_Type(loc: 0x400065c8'u),
  RDH1R: CAN1_RDH1R_Type(loc: 0x400065cc'u),
  FMR: CAN1_FMR_Type(loc: 0x40006600'u),
  FM1R: CAN1_FM1R_Type(loc: 0x40006604'u),
  FS1R: CAN1_FS1R_Type(loc: 0x4000660c'u),
  FFA1R: CAN1_FFA1R_Type(loc: 0x40006614'u),
  FA1R: CAN1_FA1R_Type(loc: 0x4000661c'u),
  F0R1: CAN1_F0R1_Type(loc: 0x40006640'u),
  F0R2: CAN1_F0R2_Type(loc: 0x40006644'u),
  F1R1: CAN1_F1R1_Type(loc: 0x40006648'u),
  F1R2: CAN1_F1R2_Type(loc: 0x4000664c'u),
  F2R1: CAN1_F2R1_Type(loc: 0x40006650'u),
  F2R2: CAN1_F2R2_Type(loc: 0x40006654'u),
  F3R1: CAN1_F3R1_Type(loc: 0x40006658'u),
  F3R2: CAN1_F3R2_Type(loc: 0x4000665c'u),
  F4R1: CAN1_F4R1_Type(loc: 0x40006660'u),
  F4R2: CAN1_F4R2_Type(loc: 0x40006664'u),
  F5R1: CAN1_F5R1_Type(loc: 0x40006668'u),
  F5R2: CAN1_F5R2_Type(loc: 0x4000666c'u),
  F6R1: CAN1_F6R1_Type(loc: 0x40006670'u),
  F6R2: CAN1_F6R2_Type(loc: 0x40006674'u),
  F7R1: CAN1_F7R1_Type(loc: 0x40006678'u),
  F7R2: CAN1_F7R2_Type(loc: 0x4000667c'u),
  F8R1: CAN1_F8R1_Type(loc: 0x40006680'u),
  F8R2: CAN1_F8R2_Type(loc: 0x40006684'u),
  F9R1: CAN1_F9R1_Type(loc: 0x40006688'u),
  F9R2: CAN1_F9R2_Type(loc: 0x4000668c'u),
  F10R1: CAN1_F10R1_Type(loc: 0x40006690'u),
  F10R2: CAN1_F10R2_Type(loc: 0x40006694'u),
  F11R1: CAN1_F11R1_Type(loc: 0x40006698'u),
  F11R2: CAN1_F11R2_Type(loc: 0x4000669c'u),
  F12R1: CAN1_F12R1_Type(loc: 0x400066a0'u),
  F12R2: CAN1_F12R2_Type(loc: 0x400066a4'u),
  F13R1: CAN1_F13R1_Type(loc: 0x400066a8'u),
  F13R2: CAN1_F13R2_Type(loc: 0x400066ac'u),
  F14R1: CAN1_F14R1_Type(loc: 0x400066b0'u),
  F14R2: CAN1_F14R2_Type(loc: 0x400066b4'u),
  F15R1: CAN1_F15R1_Type(loc: 0x400066b8'u),
  F15R2: CAN1_F15R2_Type(loc: 0x400066bc'u),
  F16R1: CAN1_F16R1_Type(loc: 0x400066c0'u),
  F16R2: CAN1_F16R2_Type(loc: 0x400066c4'u),
  F17R1: CAN1_F17R1_Type(loc: 0x400066c8'u),
  F17R2: CAN1_F17R2_Type(loc: 0x400066cc'u),
  F18R1: CAN1_F18R1_Type(loc: 0x400066d0'u),
  F18R2: CAN1_F18R2_Type(loc: 0x400066d4'u),
  F19R1: CAN1_F19R1_Type(loc: 0x400066d8'u),
  F19R2: CAN1_F19R2_Type(loc: 0x400066dc'u),
  F20R1: CAN1_F20R1_Type(loc: 0x400066e0'u),
  F20R2: CAN1_F20R2_Type(loc: 0x400066e4'u),
  F21R1: CAN1_F21R1_Type(loc: 0x400066e8'u),
  F21R2: CAN1_F21R2_Type(loc: 0x400066ec'u),
  F22R1: CAN1_F22R1_Type(loc: 0x400066f0'u),
  F22R2: CAN1_F22R2_Type(loc: 0x400066f4'u),
  F23R1: CAN1_F23R1_Type(loc: 0x400066f8'u),
  F23R2: CAN1_F23R2_Type(loc: 0x400066fc'u),
  F24R1: CAN1_F24R1_Type(loc: 0x40006700'u),
  F24R2: CAN1_F24R2_Type(loc: 0x40006704'u),
  F25R1: CAN1_F25R1_Type(loc: 0x40006708'u),
  F25R2: CAN1_F25R2_Type(loc: 0x4000670c'u),
  F26R1: CAN1_F26R1_Type(loc: 0x40006710'u),
  F26R2: CAN1_F26R2_Type(loc: 0x40006714'u),
  F27R1: CAN1_F27R1_Type(loc: 0x40006718'u),
  F27R2: CAN1_F27R2_Type(loc: 0x4000671c'u),
)

const CAN2* = CAN1_Type(
  MCR: CAN1_MCR_Type(loc: 0x40006800'u),
  MSR: CAN1_MSR_Type(loc: 0x40006804'u),
  TSR: CAN1_TSR_Type(loc: 0x40006808'u),
  RF0R: CAN1_RF0R_Type(loc: 0x4000680c'u),
  RF1R: CAN1_RF1R_Type(loc: 0x40006810'u),
  IER: CAN1_IER_Type(loc: 0x40006814'u),
  ESR: CAN1_ESR_Type(loc: 0x40006818'u),
  BTR: CAN1_BTR_Type(loc: 0x4000681c'u),
  TI0R: CAN1_TI0R_Type(loc: 0x40006980'u),
  TDT0R: CAN1_TDT0R_Type(loc: 0x40006984'u),
  TDL0R: CAN1_TDL0R_Type(loc: 0x40006988'u),
  TDH0R: CAN1_TDH0R_Type(loc: 0x4000698c'u),
  TI1R: CAN1_TI1R_Type(loc: 0x40006990'u),
  TDT1R: CAN1_TDT1R_Type(loc: 0x40006994'u),
  TDL1R: CAN1_TDL1R_Type(loc: 0x40006998'u),
  TDH1R: CAN1_TDH1R_Type(loc: 0x4000699c'u),
  TI2R: CAN1_TI2R_Type(loc: 0x400069a0'u),
  TDT2R: CAN1_TDT2R_Type(loc: 0x400069a4'u),
  TDL2R: CAN1_TDL2R_Type(loc: 0x400069a8'u),
  TDH2R: CAN1_TDH2R_Type(loc: 0x400069ac'u),
  RI0R: CAN1_RI0R_Type(loc: 0x400069b0'u),
  RDT0R: CAN1_RDT0R_Type(loc: 0x400069b4'u),
  RDL0R: CAN1_RDL0R_Type(loc: 0x400069b8'u),
  RDH0R: CAN1_RDH0R_Type(loc: 0x400069bc'u),
  RI1R: CAN1_RI1R_Type(loc: 0x400069c0'u),
  RDT1R: CAN1_RDT1R_Type(loc: 0x400069c4'u),
  RDL1R: CAN1_RDL1R_Type(loc: 0x400069c8'u),
  RDH1R: CAN1_RDH1R_Type(loc: 0x400069cc'u),
  FMR: CAN1_FMR_Type(loc: 0x40006a00'u),
  FM1R: CAN1_FM1R_Type(loc: 0x40006a04'u),
  FS1R: CAN1_FS1R_Type(loc: 0x40006a0c'u),
  FFA1R: CAN1_FFA1R_Type(loc: 0x40006a14'u),
  FA1R: CAN1_FA1R_Type(loc: 0x40006a1c'u),
  F0R1: CAN1_F0R1_Type(loc: 0x40006a40'u),
  F0R2: CAN1_F0R2_Type(loc: 0x40006a44'u),
  F1R1: CAN1_F1R1_Type(loc: 0x40006a48'u),
  F1R2: CAN1_F1R2_Type(loc: 0x40006a4c'u),
  F2R1: CAN1_F2R1_Type(loc: 0x40006a50'u),
  F2R2: CAN1_F2R2_Type(loc: 0x40006a54'u),
  F3R1: CAN1_F3R1_Type(loc: 0x40006a58'u),
  F3R2: CAN1_F3R2_Type(loc: 0x40006a5c'u),
  F4R1: CAN1_F4R1_Type(loc: 0x40006a60'u),
  F4R2: CAN1_F4R2_Type(loc: 0x40006a64'u),
  F5R1: CAN1_F5R1_Type(loc: 0x40006a68'u),
  F5R2: CAN1_F5R2_Type(loc: 0x40006a6c'u),
  F6R1: CAN1_F6R1_Type(loc: 0x40006a70'u),
  F6R2: CAN1_F6R2_Type(loc: 0x40006a74'u),
  F7R1: CAN1_F7R1_Type(loc: 0x40006a78'u),
  F7R2: CAN1_F7R2_Type(loc: 0x40006a7c'u),
  F8R1: CAN1_F8R1_Type(loc: 0x40006a80'u),
  F8R2: CAN1_F8R2_Type(loc: 0x40006a84'u),
  F9R1: CAN1_F9R1_Type(loc: 0x40006a88'u),
  F9R2: CAN1_F9R2_Type(loc: 0x40006a8c'u),
  F10R1: CAN1_F10R1_Type(loc: 0x40006a90'u),
  F10R2: CAN1_F10R2_Type(loc: 0x40006a94'u),
  F11R1: CAN1_F11R1_Type(loc: 0x40006a98'u),
  F11R2: CAN1_F11R2_Type(loc: 0x40006a9c'u),
  F12R1: CAN1_F12R1_Type(loc: 0x40006aa0'u),
  F12R2: CAN1_F12R2_Type(loc: 0x40006aa4'u),
  F13R1: CAN1_F13R1_Type(loc: 0x40006aa8'u),
  F13R2: CAN1_F13R2_Type(loc: 0x40006aac'u),
  F14R1: CAN1_F14R1_Type(loc: 0x40006ab0'u),
  F14R2: CAN1_F14R2_Type(loc: 0x40006ab4'u),
  F15R1: CAN1_F15R1_Type(loc: 0x40006ab8'u),
  F15R2: CAN1_F15R2_Type(loc: 0x40006abc'u),
  F16R1: CAN1_F16R1_Type(loc: 0x40006ac0'u),
  F16R2: CAN1_F16R2_Type(loc: 0x40006ac4'u),
  F17R1: CAN1_F17R1_Type(loc: 0x40006ac8'u),
  F17R2: CAN1_F17R2_Type(loc: 0x40006acc'u),
  F18R1: CAN1_F18R1_Type(loc: 0x40006ad0'u),
  F18R2: CAN1_F18R2_Type(loc: 0x40006ad4'u),
  F19R1: CAN1_F19R1_Type(loc: 0x40006ad8'u),
  F19R2: CAN1_F19R2_Type(loc: 0x40006adc'u),
  F20R1: CAN1_F20R1_Type(loc: 0x40006ae0'u),
  F20R2: CAN1_F20R2_Type(loc: 0x40006ae4'u),
  F21R1: CAN1_F21R1_Type(loc: 0x40006ae8'u),
  F21R2: CAN1_F21R2_Type(loc: 0x40006aec'u),
  F22R1: CAN1_F22R1_Type(loc: 0x40006af0'u),
  F22R2: CAN1_F22R2_Type(loc: 0x40006af4'u),
  F23R1: CAN1_F23R1_Type(loc: 0x40006af8'u),
  F23R2: CAN1_F23R2_Type(loc: 0x40006afc'u),
  F24R1: CAN1_F24R1_Type(loc: 0x40006b00'u),
  F24R2: CAN1_F24R2_Type(loc: 0x40006b04'u),
  F25R1: CAN1_F25R1_Type(loc: 0x40006b08'u),
  F25R2: CAN1_F25R2_Type(loc: 0x40006b0c'u),
  F26R1: CAN1_F26R1_Type(loc: 0x40006b10'u),
  F26R2: CAN1_F26R2_Type(loc: 0x40006b14'u),
  F27R1: CAN1_F27R1_Type(loc: 0x40006b18'u),
  F27R2: CAN1_F27R2_Type(loc: 0x40006b1c'u),
)

const FLASH* = FLASH_Type(
  ACR: FLASH_ACR_Type(loc: 0x40023c00'u),
  KEYR: FLASH_KEYR_Type(loc: 0x40023c04'u),
  OPTKEYR: FLASH_OPTKEYR_Type(loc: 0x40023c08'u),
  SR: FLASH_SR_Type(loc: 0x40023c0c'u),
  CR: FLASH_CR_Type(loc: 0x40023c10'u),
  OPTCR: FLASH_OPTCR_Type(loc: 0x40023c14'u),
)

const EXTI* = EXTI_Type(
  IMR: EXTI_IMR_Type(loc: 0x40013c00'u),
  EMR: EXTI_EMR_Type(loc: 0x40013c04'u),
  RTSR: EXTI_RTSR_Type(loc: 0x40013c08'u),
  FTSR: EXTI_FTSR_Type(loc: 0x40013c0c'u),
  SWIER: EXTI_SWIER_Type(loc: 0x40013c10'u),
  PR: EXTI_PR_Type(loc: 0x40013c14'u),
)

const OTG_HS_GLOBAL* = OTG_HS_GLOBAL_Type(
  OTG_HS_GOTGCTL: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Type(loc: 0x40040000'u),
  OTG_HS_GOTGINT: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Type(loc: 0x40040004'u),
  OTG_HS_GAHBCFG: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Type(loc: 0x40040008'u),
  OTG_HS_GUSBCFG: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Type(loc: 0x4004000c'u),
  OTG_HS_GRSTCTL: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Type(loc: 0x40040010'u),
  OTG_HS_GINTSTS: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Type(loc: 0x40040014'u),
  OTG_HS_GINTMSK: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Type(loc: 0x40040018'u),
  OTG_HS_GRXSTSR_Host: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Type(loc: 0x4004001c'u),
  OTG_HS_GRXSTSR_Peripheral: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Type(loc: 0x4004001c'u),
  OTG_HS_GRXSTSP_Host: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Type(loc: 0x40040020'u),
  OTG_HS_GRXSTSP_Peripheral: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Type(loc: 0x40040020'u),
  OTG_HS_GRXFSIZ: OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Type(loc: 0x40040024'u),
  OTG_HS_GNPTXFSIZ_Host: OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Type(loc: 0x40040028'u),
  OTG_HS_TX0FSIZ_Peripheral: OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Type(loc: 0x40040028'u),
  OTG_HS_GNPTXSTS: OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_Type(loc: 0x4004002c'u),
  OTG_HS_GCCFG: OTG_HS_GLOBAL_OTG_HS_GCCFG_Type(loc: 0x40040038'u),
  OTG_HS_CID: OTG_HS_GLOBAL_OTG_HS_CID_Type(loc: 0x4004003c'u),
  OTG_HS_HPTXFSIZ: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Type(loc: 0x40040100'u),
  OTG_HS_DIEPTXF1: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Type(loc: 0x40040104'u),
  OTG_HS_DIEPTXF2: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Type(loc: 0x40040108'u),
  OTG_HS_DIEPTXF3: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Type(loc: 0x4004011c'u),
  OTG_HS_DIEPTXF4: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Type(loc: 0x40040120'u),
  OTG_HS_DIEPTXF5: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Type(loc: 0x40040124'u),
  OTG_HS_DIEPTXF6: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Type(loc: 0x40040128'u),
  OTG_HS_DIEPTXF7: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Type(loc: 0x4004012c'u),
)

const OTG_HS_HOST* = OTG_HS_HOST_Type(
  OTG_HS_HCFG: OTG_HS_HOST_OTG_HS_HCFG_Type(loc: 0x40040400'u),
  OTG_HS_HFIR: OTG_HS_HOST_OTG_HS_HFIR_Type(loc: 0x40040404'u),
  OTG_HS_HFNUM: OTG_HS_HOST_OTG_HS_HFNUM_Type(loc: 0x40040408'u),
  OTG_HS_HPTXSTS: OTG_HS_HOST_OTG_HS_HPTXSTS_Type(loc: 0x40040410'u),
  OTG_HS_HAINT: OTG_HS_HOST_OTG_HS_HAINT_Type(loc: 0x40040414'u),
  OTG_HS_HAINTMSK: OTG_HS_HOST_OTG_HS_HAINTMSK_Type(loc: 0x40040418'u),
  OTG_HS_HPRT: OTG_HS_HOST_OTG_HS_HPRT_Type(loc: 0x40040440'u),
  OTG_HS_HCCHAR0: OTG_HS_HOST_OTG_HS_HCCHAR0_Type(loc: 0x40040500'u),
  OTG_HS_HCSPLT0: OTG_HS_HOST_OTG_HS_HCSPLT0_Type(loc: 0x40040504'u),
  OTG_HS_HCINT0: OTG_HS_HOST_OTG_HS_HCINT0_Type(loc: 0x40040508'u),
  OTG_HS_HCINTMSK0: OTG_HS_HOST_OTG_HS_HCINTMSK0_Type(loc: 0x4004050c'u),
  OTG_HS_HCTSIZ0: OTG_HS_HOST_OTG_HS_HCTSIZ0_Type(loc: 0x40040510'u),
  OTG_HS_HCDMA0: OTG_HS_HOST_OTG_HS_HCDMA0_Type(loc: 0x40040514'u),
  OTG_HS_HCCHAR1: OTG_HS_HOST_OTG_HS_HCCHAR1_Type(loc: 0x40040520'u),
  OTG_HS_HCSPLT1: OTG_HS_HOST_OTG_HS_HCSPLT1_Type(loc: 0x40040524'u),
  OTG_HS_HCINT1: OTG_HS_HOST_OTG_HS_HCINT1_Type(loc: 0x40040528'u),
  OTG_HS_HCINTMSK1: OTG_HS_HOST_OTG_HS_HCINTMSK1_Type(loc: 0x4004052c'u),
  OTG_HS_HCTSIZ1: OTG_HS_HOST_OTG_HS_HCTSIZ1_Type(loc: 0x40040530'u),
  OTG_HS_HCDMA1: OTG_HS_HOST_OTG_HS_HCDMA1_Type(loc: 0x40040534'u),
  OTG_HS_HCCHAR2: OTG_HS_HOST_OTG_HS_HCCHAR2_Type(loc: 0x40040540'u),
  OTG_HS_HCSPLT2: OTG_HS_HOST_OTG_HS_HCSPLT2_Type(loc: 0x40040544'u),
  OTG_HS_HCINT2: OTG_HS_HOST_OTG_HS_HCINT2_Type(loc: 0x40040548'u),
  OTG_HS_HCINTMSK2: OTG_HS_HOST_OTG_HS_HCINTMSK2_Type(loc: 0x4004054c'u),
  OTG_HS_HCTSIZ2: OTG_HS_HOST_OTG_HS_HCTSIZ2_Type(loc: 0x40040550'u),
  OTG_HS_HCDMA2: OTG_HS_HOST_OTG_HS_HCDMA2_Type(loc: 0x40040554'u),
  OTG_HS_HCCHAR3: OTG_HS_HOST_OTG_HS_HCCHAR3_Type(loc: 0x40040560'u),
  OTG_HS_HCSPLT3: OTG_HS_HOST_OTG_HS_HCSPLT3_Type(loc: 0x40040564'u),
  OTG_HS_HCINT3: OTG_HS_HOST_OTG_HS_HCINT3_Type(loc: 0x40040568'u),
  OTG_HS_HCINTMSK3: OTG_HS_HOST_OTG_HS_HCINTMSK3_Type(loc: 0x4004056c'u),
  OTG_HS_HCTSIZ3: OTG_HS_HOST_OTG_HS_HCTSIZ3_Type(loc: 0x40040570'u),
  OTG_HS_HCDMA3: OTG_HS_HOST_OTG_HS_HCDMA3_Type(loc: 0x40040574'u),
  OTG_HS_HCCHAR4: OTG_HS_HOST_OTG_HS_HCCHAR4_Type(loc: 0x40040580'u),
  OTG_HS_HCSPLT4: OTG_HS_HOST_OTG_HS_HCSPLT4_Type(loc: 0x40040584'u),
  OTG_HS_HCINT4: OTG_HS_HOST_OTG_HS_HCINT4_Type(loc: 0x40040588'u),
  OTG_HS_HCINTMSK4: OTG_HS_HOST_OTG_HS_HCINTMSK4_Type(loc: 0x4004058c'u),
  OTG_HS_HCTSIZ4: OTG_HS_HOST_OTG_HS_HCTSIZ4_Type(loc: 0x40040590'u),
  OTG_HS_HCDMA4: OTG_HS_HOST_OTG_HS_HCDMA4_Type(loc: 0x40040594'u),
  OTG_HS_HCCHAR5: OTG_HS_HOST_OTG_HS_HCCHAR5_Type(loc: 0x400405a0'u),
  OTG_HS_HCSPLT5: OTG_HS_HOST_OTG_HS_HCSPLT5_Type(loc: 0x400405a4'u),
  OTG_HS_HCINT5: OTG_HS_HOST_OTG_HS_HCINT5_Type(loc: 0x400405a8'u),
  OTG_HS_HCINTMSK5: OTG_HS_HOST_OTG_HS_HCINTMSK5_Type(loc: 0x400405ac'u),
  OTG_HS_HCTSIZ5: OTG_HS_HOST_OTG_HS_HCTSIZ5_Type(loc: 0x400405b0'u),
  OTG_HS_HCDMA5: OTG_HS_HOST_OTG_HS_HCDMA5_Type(loc: 0x400405b4'u),
  OTG_HS_HCCHAR6: OTG_HS_HOST_OTG_HS_HCCHAR6_Type(loc: 0x400405c0'u),
  OTG_HS_HCSPLT6: OTG_HS_HOST_OTG_HS_HCSPLT6_Type(loc: 0x400405c4'u),
  OTG_HS_HCINT6: OTG_HS_HOST_OTG_HS_HCINT6_Type(loc: 0x400405c8'u),
  OTG_HS_HCINTMSK6: OTG_HS_HOST_OTG_HS_HCINTMSK6_Type(loc: 0x400405cc'u),
  OTG_HS_HCTSIZ6: OTG_HS_HOST_OTG_HS_HCTSIZ6_Type(loc: 0x400405d0'u),
  OTG_HS_HCDMA6: OTG_HS_HOST_OTG_HS_HCDMA6_Type(loc: 0x400405d4'u),
  OTG_HS_HCCHAR7: OTG_HS_HOST_OTG_HS_HCCHAR7_Type(loc: 0x400405e0'u),
  OTG_HS_HCSPLT7: OTG_HS_HOST_OTG_HS_HCSPLT7_Type(loc: 0x400405e4'u),
  OTG_HS_HCINT7: OTG_HS_HOST_OTG_HS_HCINT7_Type(loc: 0x400405e8'u),
  OTG_HS_HCINTMSK7: OTG_HS_HOST_OTG_HS_HCINTMSK7_Type(loc: 0x400405ec'u),
  OTG_HS_HCTSIZ7: OTG_HS_HOST_OTG_HS_HCTSIZ7_Type(loc: 0x400405f0'u),
  OTG_HS_HCDMA7: OTG_HS_HOST_OTG_HS_HCDMA7_Type(loc: 0x400405f4'u),
  OTG_HS_HCCHAR8: OTG_HS_HOST_OTG_HS_HCCHAR8_Type(loc: 0x40040600'u),
  OTG_HS_HCSPLT8: OTG_HS_HOST_OTG_HS_HCSPLT8_Type(loc: 0x40040604'u),
  OTG_HS_HCINT8: OTG_HS_HOST_OTG_HS_HCINT8_Type(loc: 0x40040608'u),
  OTG_HS_HCINTMSK8: OTG_HS_HOST_OTG_HS_HCINTMSK8_Type(loc: 0x4004060c'u),
  OTG_HS_HCTSIZ8: OTG_HS_HOST_OTG_HS_HCTSIZ8_Type(loc: 0x40040610'u),
  OTG_HS_HCDMA8: OTG_HS_HOST_OTG_HS_HCDMA8_Type(loc: 0x40040614'u),
  OTG_HS_HCCHAR9: OTG_HS_HOST_OTG_HS_HCCHAR9_Type(loc: 0x40040620'u),
  OTG_HS_HCSPLT9: OTG_HS_HOST_OTG_HS_HCSPLT9_Type(loc: 0x40040624'u),
  OTG_HS_HCINT9: OTG_HS_HOST_OTG_HS_HCINT9_Type(loc: 0x40040628'u),
  OTG_HS_HCINTMSK9: OTG_HS_HOST_OTG_HS_HCINTMSK9_Type(loc: 0x4004062c'u),
  OTG_HS_HCTSIZ9: OTG_HS_HOST_OTG_HS_HCTSIZ9_Type(loc: 0x40040630'u),
  OTG_HS_HCDMA9: OTG_HS_HOST_OTG_HS_HCDMA9_Type(loc: 0x40040634'u),
  OTG_HS_HCCHAR10: OTG_HS_HOST_OTG_HS_HCCHAR10_Type(loc: 0x40040640'u),
  OTG_HS_HCSPLT10: OTG_HS_HOST_OTG_HS_HCSPLT10_Type(loc: 0x40040644'u),
  OTG_HS_HCINT10: OTG_HS_HOST_OTG_HS_HCINT10_Type(loc: 0x40040648'u),
  OTG_HS_HCINTMSK10: OTG_HS_HOST_OTG_HS_HCINTMSK10_Type(loc: 0x4004064c'u),
  OTG_HS_HCTSIZ10: OTG_HS_HOST_OTG_HS_HCTSIZ10_Type(loc: 0x40040650'u),
  OTG_HS_HCDMA10: OTG_HS_HOST_OTG_HS_HCDMA10_Type(loc: 0x40040654'u),
  OTG_HS_HCCHAR11: OTG_HS_HOST_OTG_HS_HCCHAR11_Type(loc: 0x40040660'u),
  OTG_HS_HCSPLT11: OTG_HS_HOST_OTG_HS_HCSPLT11_Type(loc: 0x40040664'u),
  OTG_HS_HCINT11: OTG_HS_HOST_OTG_HS_HCINT11_Type(loc: 0x40040668'u),
  OTG_HS_HCINTMSK11: OTG_HS_HOST_OTG_HS_HCINTMSK11_Type(loc: 0x4004066c'u),
  OTG_HS_HCTSIZ11: OTG_HS_HOST_OTG_HS_HCTSIZ11_Type(loc: 0x40040670'u),
  OTG_HS_HCDMA11: OTG_HS_HOST_OTG_HS_HCDMA11_Type(loc: 0x40040674'u),
  OTG_HS_HCCHAR12: OTG_HS_HOST_OTG_HS_HCCHAR12_Type(loc: 0x40040680'u),
  OTG_HS_HCSPLT12: OTG_HS_HOST_OTG_HS_HCSPLT12_Type(loc: 0x40040684'u),
  OTG_HS_HCINT12: OTG_HS_HOST_OTG_HS_HCINT12_Type(loc: 0x40040688'u),
  OTG_HS_HCINTMSK12: OTG_HS_HOST_OTG_HS_HCINTMSK12_Type(loc: 0x4004068c'u),
  OTG_HS_HCTSIZ12: OTG_HS_HOST_OTG_HS_HCTSIZ12_Type(loc: 0x40040690'u),
  OTG_HS_HCDMA12: OTG_HS_HOST_OTG_HS_HCDMA12_Type(loc: 0x40040694'u),
  OTG_HS_HCCHAR13: OTG_HS_HOST_OTG_HS_HCCHAR13_Type(loc: 0x400406a0'u),
  OTG_HS_HCSPLT13: OTG_HS_HOST_OTG_HS_HCSPLT13_Type(loc: 0x400406a4'u),
  OTG_HS_HCINT13: OTG_HS_HOST_OTG_HS_HCINT13_Type(loc: 0x400406a8'u),
  OTG_HS_HCINTMSK13: OTG_HS_HOST_OTG_HS_HCINTMSK13_Type(loc: 0x400406ac'u),
  OTG_HS_HCTSIZ13: OTG_HS_HOST_OTG_HS_HCTSIZ13_Type(loc: 0x400406b0'u),
  OTG_HS_HCDMA13: OTG_HS_HOST_OTG_HS_HCDMA13_Type(loc: 0x400406b4'u),
  OTG_HS_HCCHAR14: OTG_HS_HOST_OTG_HS_HCCHAR14_Type(loc: 0x400406c0'u),
  OTG_HS_HCSPLT14: OTG_HS_HOST_OTG_HS_HCSPLT14_Type(loc: 0x400406c4'u),
  OTG_HS_HCINT14: OTG_HS_HOST_OTG_HS_HCINT14_Type(loc: 0x400406c8'u),
  OTG_HS_HCINTMSK14: OTG_HS_HOST_OTG_HS_HCINTMSK14_Type(loc: 0x400406cc'u),
  OTG_HS_HCTSIZ14: OTG_HS_HOST_OTG_HS_HCTSIZ14_Type(loc: 0x400406d0'u),
  OTG_HS_HCDMA14: OTG_HS_HOST_OTG_HS_HCDMA14_Type(loc: 0x400406d4'u),
  OTG_HS_HCCHAR15: OTG_HS_HOST_OTG_HS_HCCHAR15_Type(loc: 0x400406e0'u),
  OTG_HS_HCSPLT15: OTG_HS_HOST_OTG_HS_HCSPLT15_Type(loc: 0x400406e4'u),
  OTG_HS_HCINT15: OTG_HS_HOST_OTG_HS_HCINT15_Type(loc: 0x400406e8'u),
  OTG_HS_HCINTMSK15: OTG_HS_HOST_OTG_HS_HCINTMSK15_Type(loc: 0x400406ec'u),
  OTG_HS_HCTSIZ15: OTG_HS_HOST_OTG_HS_HCTSIZ15_Type(loc: 0x400406f0'u),
  OTG_HS_HCDMA15: OTG_HS_HOST_OTG_HS_HCDMA15_Type(loc: 0x400406f4'u),
)

const OTG_HS_DEVICE* = OTG_HS_DEVICE_Type(
  OTG_HS_DCFG: OTG_HS_DEVICE_OTG_HS_DCFG_Type(loc: 0x40040800'u),
  OTG_HS_DCTL: OTG_HS_DEVICE_OTG_HS_DCTL_Type(loc: 0x40040804'u),
  OTG_HS_DSTS: OTG_HS_DEVICE_OTG_HS_DSTS_Type(loc: 0x40040808'u),
  OTG_HS_DIEPMSK: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Type(loc: 0x40040810'u),
  OTG_HS_DOEPMSK: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Type(loc: 0x40040814'u),
  OTG_HS_DAINT: OTG_HS_DEVICE_OTG_HS_DAINT_Type(loc: 0x40040818'u),
  OTG_HS_DAINTMSK: OTG_HS_DEVICE_OTG_HS_DAINTMSK_Type(loc: 0x4004081c'u),
  OTG_HS_DVBUSDIS: OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Type(loc: 0x40040828'u),
  OTG_HS_DVBUSPULSE: OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Type(loc: 0x4004082c'u),
  OTG_HS_DTHRCTL: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Type(loc: 0x40040830'u),
  OTG_HS_DIEPEMPMSK: OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Type(loc: 0x40040834'u),
  OTG_HS_DEACHINT: OTG_HS_DEVICE_OTG_HS_DEACHINT_Type(loc: 0x40040838'u),
  OTG_HS_DEACHINTMSK: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Type(loc: 0x4004083c'u),
  OTG_HS_DIEPEACHMSK1: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Type(loc: 0x40040844'u),
  OTG_HS_DOEPEACHMSK1: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Type(loc: 0x40040884'u),
  OTG_HS_DIEPCTL0: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Type(loc: 0x40040900'u),
  OTG_HS_DIEPINT0: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Type(loc: 0x40040908'u),
  OTG_HS_DIEPTSIZ0: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Type(loc: 0x40040910'u),
  OTG_HS_DIEPDMA1: OTG_HS_DEVICE_OTG_HS_DIEPDMA1_Type(loc: 0x40040914'u),
  OTG_HS_DTXFSTS0: OTG_HS_DEVICE_OTG_HS_DTXFSTS0_Type(loc: 0x40040918'u),
  OTG_HS_DIEPCTL1: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Type(loc: 0x40040920'u),
  OTG_HS_DIEPINT1: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Type(loc: 0x40040928'u),
  OTG_HS_DIEPTSIZ1: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Type(loc: 0x40040930'u),
  OTG_HS_DIEPDMA2: OTG_HS_DEVICE_OTG_HS_DIEPDMA2_Type(loc: 0x40040934'u),
  OTG_HS_DTXFSTS1: OTG_HS_DEVICE_OTG_HS_DTXFSTS1_Type(loc: 0x40040938'u),
  OTG_HS_DIEPCTL2: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Type(loc: 0x40040940'u),
  OTG_HS_DIEPINT2: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Type(loc: 0x40040948'u),
  OTG_HS_DIEPTSIZ2: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Type(loc: 0x40040950'u),
  OTG_HS_DIEPDMA3: OTG_HS_DEVICE_OTG_HS_DIEPDMA3_Type(loc: 0x40040954'u),
  OTG_HS_DTXFSTS2: OTG_HS_DEVICE_OTG_HS_DTXFSTS2_Type(loc: 0x40040958'u),
  OTG_HS_DIEPCTL3: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Type(loc: 0x40040960'u),
  OTG_HS_DIEPINT3: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Type(loc: 0x40040968'u),
  OTG_HS_DIEPTSIZ3: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Type(loc: 0x40040970'u),
  OTG_HS_DIEPDMA4: OTG_HS_DEVICE_OTG_HS_DIEPDMA4_Type(loc: 0x40040974'u),
  OTG_HS_DTXFSTS3: OTG_HS_DEVICE_OTG_HS_DTXFSTS3_Type(loc: 0x40040978'u),
  OTG_HS_DIEPCTL4: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Type(loc: 0x40040980'u),
  OTG_HS_DIEPINT4: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Type(loc: 0x40040988'u),
  OTG_HS_DIEPTSIZ4: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Type(loc: 0x40040990'u),
  OTG_HS_DIEPDMA5: OTG_HS_DEVICE_OTG_HS_DIEPDMA5_Type(loc: 0x40040994'u),
  OTG_HS_DTXFSTS4: OTG_HS_DEVICE_OTG_HS_DTXFSTS4_Type(loc: 0x40040998'u),
  OTG_HS_DIEPCTL5: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Type(loc: 0x400409a0'u),
  OTG_HS_DIEPINT5: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Type(loc: 0x400409a8'u),
  OTG_HS_DIEPTSIZ5: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Type(loc: 0x400409b0'u),
  OTG_HS_DTXFSTS5: OTG_HS_DEVICE_OTG_HS_DTXFSTS5_Type(loc: 0x400409b8'u),
  OTG_HS_DIEPCTL6: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Type(loc: 0x400409c0'u),
  OTG_HS_DIEPINT6: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Type(loc: 0x400409c8'u),
  OTG_HS_DIEPCTL7: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Type(loc: 0x400409e0'u),
  OTG_HS_DIEPINT7: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Type(loc: 0x400409e8'u),
  OTG_HS_DOEPCTL0: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Type(loc: 0x40040b00'u),
  OTG_HS_DOEPINT0: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Type(loc: 0x40040b08'u),
  OTG_HS_DOEPTSIZ0: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Type(loc: 0x40040b10'u),
  OTG_HS_DOEPCTL1: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Type(loc: 0x40040b20'u),
  OTG_HS_DOEPINT1: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Type(loc: 0x40040b28'u),
  OTG_HS_DOEPTSIZ1: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Type(loc: 0x40040b30'u),
  OTG_HS_DOEPCTL2: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Type(loc: 0x40040b40'u),
  OTG_HS_DOEPINT2: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Type(loc: 0x40040b48'u),
  OTG_HS_DOEPTSIZ2: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Type(loc: 0x40040b50'u),
  OTG_HS_DOEPCTL3: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Type(loc: 0x40040b60'u),
  OTG_HS_DOEPINT3: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Type(loc: 0x40040b68'u),
  OTG_HS_DOEPTSIZ3: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Type(loc: 0x40040b70'u),
  OTG_HS_DOEPINT4: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Type(loc: 0x40040b88'u),
  OTG_HS_DOEPTSIZ4: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Type(loc: 0x40040b90'u),
  OTG_HS_DOEPINT5: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Type(loc: 0x40040ba8'u),
  OTG_HS_DOEPINT6: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Type(loc: 0x40040bc8'u),
  OTG_HS_DOEPINT7: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Type(loc: 0x40040be8'u),
)

const OTG_HS_PWRCLK* = OTG_HS_PWRCLK_Type(
  OTG_HS_PCGCR: OTG_HS_PWRCLK_OTG_HS_PCGCR_Type(loc: 0x40040e00'u),
)

const SAI1* = SAI1_Type(
  GCR: SAI1_GCR_Type(loc: 0x40015800'u),
  ACR1: SAI1_ACR1_Type(loc: 0x40015804'u),
  ACR2: SAI1_ACR2_Type(loc: 0x40015808'u),
  AFRCR: SAI1_AFRCR_Type(loc: 0x4001580c'u),
  ASLOTR: SAI1_ASLOTR_Type(loc: 0x40015810'u),
  AIM: SAI1_AIM_Type(loc: 0x40015814'u),
  ASR: SAI1_ASR_Type(loc: 0x40015818'u),
  ACLRFR: SAI1_ACLRFR_Type(loc: 0x4001581c'u),
  ADR: SAI1_ADR_Type(loc: 0x40015820'u),
  BCR1: SAI1_BCR1_Type(loc: 0x40015824'u),
  BCR2: SAI1_BCR2_Type(loc: 0x40015828'u),
  BFRCR: SAI1_BFRCR_Type(loc: 0x4001582c'u),
  BSLOTR: SAI1_BSLOTR_Type(loc: 0x40015830'u),
  BIM: SAI1_BIM_Type(loc: 0x40015834'u),
  BSR: SAI1_BSR_Type(loc: 0x40015838'u),
  BCLRFR: SAI1_BCLRFR_Type(loc: 0x4001583c'u),
  BDR: SAI1_BDR_Type(loc: 0x40015840'u),
)

const SAI2* = SAI1_Type(
  GCR: SAI1_GCR_Type(loc: 0x40015c00'u),
  ACR1: SAI1_ACR1_Type(loc: 0x40015c04'u),
  ACR2: SAI1_ACR2_Type(loc: 0x40015c08'u),
  AFRCR: SAI1_AFRCR_Type(loc: 0x40015c0c'u),
  ASLOTR: SAI1_ASLOTR_Type(loc: 0x40015c10'u),
  AIM: SAI1_AIM_Type(loc: 0x40015c14'u),
  ASR: SAI1_ASR_Type(loc: 0x40015c18'u),
  ACLRFR: SAI1_ACLRFR_Type(loc: 0x40015c1c'u),
  ADR: SAI1_ADR_Type(loc: 0x40015c20'u),
  BCR1: SAI1_BCR1_Type(loc: 0x40015c24'u),
  BCR2: SAI1_BCR2_Type(loc: 0x40015c28'u),
  BFRCR: SAI1_BFRCR_Type(loc: 0x40015c2c'u),
  BSLOTR: SAI1_BSLOTR_Type(loc: 0x40015c30'u),
  BIM: SAI1_BIM_Type(loc: 0x40015c34'u),
  BSR: SAI1_BSR_Type(loc: 0x40015c38'u),
  BCLRFR: SAI1_BCLRFR_Type(loc: 0x40015c3c'u),
  BDR: SAI1_BDR_Type(loc: 0x40015c40'u),
)

const PWR* = PWR_Type(
  CR: PWR_CR_Type(loc: 0x40007000'u),
  CSR: PWR_CSR_Type(loc: 0x40007004'u),
)

const QUADSPI* = QUADSPI_Type(
  CR: QUADSPI_CR_Type(loc: 0xa0001000'u),
  DCR: QUADSPI_DCR_Type(loc: 0xa0001004'u),
  SR: QUADSPI_SR_Type(loc: 0xa0001008'u),
  FCR: QUADSPI_FCR_Type(loc: 0xa000100c'u),
  DLR: QUADSPI_DLR_Type(loc: 0xa0001010'u),
  CCR: QUADSPI_CCR_Type(loc: 0xa0001014'u),
  AR: QUADSPI_AR_Type(loc: 0xa0001018'u),
  ABR: QUADSPI_ABR_Type(loc: 0xa000101c'u),
  DR: QUADSPI_DR_Type(loc: 0xa0001020'u),
  PSMKR: QUADSPI_PSMKR_Type(loc: 0xa0001024'u),
  PSMAR: QUADSPI_PSMAR_Type(loc: 0xa0001028'u),
  PIR: QUADSPI_PIR_Type(loc: 0xa000102c'u),
  LPTR: QUADSPI_LPTR_Type(loc: 0xa0001030'u),
)

const SPDIF_RX* = SPDIF_RX_Type(
  CR: SPDIF_RX_CR_Type(loc: 0x40004000'u),
  IMR: SPDIF_RX_IMR_Type(loc: 0x40004004'u),
  SR: SPDIF_RX_SR_Type(loc: 0x40004008'u),
  IFCR: SPDIF_RX_IFCR_Type(loc: 0x4000400c'u),
  DR: SPDIF_RX_DR_Type(loc: 0x40004010'u),
  CSR: SPDIF_RX_CSR_Type(loc: 0x40004014'u),
  DIR: SPDIF_RX_DIR_Type(loc: 0x40004018'u),
)

const HDMI_CEC* = HDMI_CEC_Type(
  CEC_CR: HDMI_CEC_CEC_CR_Type(loc: 0x40006c00'u),
  CEC_CFGR: HDMI_CEC_CEC_CFGR_Type(loc: 0x40006c04'u),
  CEC_TXDR: HDMI_CEC_CEC_TXDR_Type(loc: 0x40006c08'u),
  CEC_RXDR: HDMI_CEC_CEC_RXDR_Type(loc: 0x40006c0c'u),
  CEC_ISR: HDMI_CEC_CEC_ISR_Type(loc: 0x40006c10'u),
  CEC_IER: HDMI_CEC_CEC_IER_Type(loc: 0x40006c14'u),
)

const SDIO* = SDIO_Type(
  POWER: SDIO_POWER_Type(loc: 0x40012c00'u),
  CLKCR: SDIO_CLKCR_Type(loc: 0x40012c04'u),
  ARG: SDIO_ARG_Type(loc: 0x40012c08'u),
  CMD: SDIO_CMD_Type(loc: 0x40012c0c'u),
  RESPCMD: SDIO_RESPCMD_Type(loc: 0x40012c10'u),
  RESP1: SDIO_RESP1_Type(loc: 0x40012c14'u),
  RESP2: SDIO_RESP2_Type(loc: 0x40012c18'u),
  RESP3: SDIO_RESP3_Type(loc: 0x40012c1c'u),
  RESP4: SDIO_RESP4_Type(loc: 0x40012c20'u),
  DTIMER: SDIO_DTIMER_Type(loc: 0x40012c24'u),
  DLEN: SDIO_DLEN_Type(loc: 0x40012c28'u),
  DCTRL: SDIO_DCTRL_Type(loc: 0x40012c2c'u),
  DCOUNT: SDIO_DCOUNT_Type(loc: 0x40012c30'u),
  STA: SDIO_STA_Type(loc: 0x40012c34'u),
  ICR: SDIO_ICR_Type(loc: 0x40012c38'u),
  MASK: SDIO_MASK_Type(loc: 0x40012c3c'u),
  FIFOCNT: SDIO_FIFOCNT_Type(loc: 0x40012c48'u),
  FIFO: SDIO_FIFO_Type(loc: 0x40012c80'u),
)


################################################################################
# Accessors for peripheral registers
################################################################################
type
  DCMI_CR_Fields* = distinct uint32
  DCMI_SR_Fields* = distinct uint32
  DCMI_RIS_Fields* = distinct uint32
  DCMI_IER_Fields* = distinct uint32
  DCMI_MIS_Fields* = distinct uint32
  DCMI_ICR_Fields* = distinct uint32
  DCMI_ESCR_Fields* = distinct uint32
  DCMI_ESUR_Fields* = distinct uint32
  DCMI_CWSTRT_Fields* = distinct uint32
  DCMI_CWSIZE_Fields* = distinct uint32
  DCMI_DR_Fields* = distinct uint32

proc read*(reg: DCMI_CR_Type): DCMI_CR_Fields {.inline.} =
  volatileLoad(cast[ptr DCMI_CR_Fields](reg.loc))

proc write*(reg: DCMI_CR_Type, val: DCMI_CR_Fields) {.inline.} =
  volatileStore(cast[ptr DCMI_CR_Fields](reg.loc), val)

proc write*(reg: DCMI_CR_Type, CM: bool = false, CROP: bool = false, JPEG: bool = false, ESS: bool = false, PCKPOL: bool = false, HSPOL: bool = false, VSPOL: bool = false, EDM: uint32 = 0, ENABLE: bool = false, FCRC: uint32 = 0) =
  var x: uint32
  x.setMask((CM.uint32 shl 1).masked(1 .. 1))
  x.setMask((CROP.uint32 shl 2).masked(2 .. 2))
  x.setMask((JPEG.uint32 shl 3).masked(3 .. 3))
  x.setMask((ESS.uint32 shl 4).masked(4 .. 4))
  x.setMask((PCKPOL.uint32 shl 5).masked(5 .. 5))
  x.setMask((HSPOL.uint32 shl 6).masked(6 .. 6))
  x.setMask((VSPOL.uint32 shl 7).masked(7 .. 7))
  x.setMask((EDM shl 10).masked(10 .. 11))
  x.setMask((ENABLE.uint32 shl 14).masked(14 .. 14))
  x.setMask((FCRC shl 8).masked(8 .. 9))
  reg.write x.DCMI_CR_Fields

template modifyIt*(reg: DCMI_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DCMI_SR_Type): DCMI_SR_Fields {.inline.} =
  volatileLoad(cast[ptr DCMI_SR_Fields](reg.loc))

proc read*(reg: DCMI_RIS_Type): DCMI_RIS_Fields {.inline.} =
  volatileLoad(cast[ptr DCMI_RIS_Fields](reg.loc))

proc read*(reg: DCMI_IER_Type): DCMI_IER_Fields {.inline.} =
  volatileLoad(cast[ptr DCMI_IER_Fields](reg.loc))

proc write*(reg: DCMI_IER_Type, val: DCMI_IER_Fields) {.inline.} =
  volatileStore(cast[ptr DCMI_IER_Fields](reg.loc), val)

proc write*(reg: DCMI_IER_Type, LINE_IE: bool = false, VSYNC_IE: bool = false, ERR_IE: bool = false, OVR_IE: bool = false, FRAME_IE: bool = false) =
  var x: uint32
  x.setMask((LINE_IE.uint32 shl 4).masked(4 .. 4))
  x.setMask((VSYNC_IE.uint32 shl 3).masked(3 .. 3))
  x.setMask((ERR_IE.uint32 shl 2).masked(2 .. 2))
  x.setMask((OVR_IE.uint32 shl 1).masked(1 .. 1))
  x.setMask((FRAME_IE.uint32 shl 0).masked(0 .. 0))
  reg.write x.DCMI_IER_Fields

template modifyIt*(reg: DCMI_IER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DCMI_MIS_Type): DCMI_MIS_Fields {.inline.} =
  volatileLoad(cast[ptr DCMI_MIS_Fields](reg.loc))

proc write*(reg: DCMI_ICR_Type, val: DCMI_ICR_Fields) {.inline.} =
  volatileStore(cast[ptr DCMI_ICR_Fields](reg.loc), val)

proc write*(reg: DCMI_ICR_Type, LINE_ISC: bool = false, VSYNC_ISC: bool = false, ERR_ISC: bool = false, OVR_ISC: bool = false, FRAME_ISC: bool = false) =
  var x: uint32
  x.setMask((LINE_ISC.uint32 shl 4).masked(4 .. 4))
  x.setMask((VSYNC_ISC.uint32 shl 3).masked(3 .. 3))
  x.setMask((ERR_ISC.uint32 shl 2).masked(2 .. 2))
  x.setMask((OVR_ISC.uint32 shl 1).masked(1 .. 1))
  x.setMask((FRAME_ISC.uint32 shl 0).masked(0 .. 0))
  reg.write x.DCMI_ICR_Fields

proc read*(reg: DCMI_ESCR_Type): DCMI_ESCR_Fields {.inline.} =
  volatileLoad(cast[ptr DCMI_ESCR_Fields](reg.loc))

proc write*(reg: DCMI_ESCR_Type, val: DCMI_ESCR_Fields) {.inline.} =
  volatileStore(cast[ptr DCMI_ESCR_Fields](reg.loc), val)

proc write*(reg: DCMI_ESCR_Type, FEC: uint32 = 0, LEC: uint32 = 0, LSC: uint32 = 0, FSC: uint32 = 0) =
  var x: uint32
  x.setMask((FEC shl 24).masked(24 .. 31))
  x.setMask((LEC shl 16).masked(16 .. 23))
  x.setMask((LSC shl 8).masked(8 .. 15))
  x.setMask((FSC shl 0).masked(0 .. 7))
  reg.write x.DCMI_ESCR_Fields

template modifyIt*(reg: DCMI_ESCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DCMI_ESUR_Type): DCMI_ESUR_Fields {.inline.} =
  volatileLoad(cast[ptr DCMI_ESUR_Fields](reg.loc))

proc write*(reg: DCMI_ESUR_Type, val: DCMI_ESUR_Fields) {.inline.} =
  volatileStore(cast[ptr DCMI_ESUR_Fields](reg.loc), val)

proc write*(reg: DCMI_ESUR_Type, FEU: uint32 = 0, LEU: uint32 = 0, LSU: uint32 = 0, FSU: uint32 = 0) =
  var x: uint32
  x.setMask((FEU shl 24).masked(24 .. 31))
  x.setMask((LEU shl 16).masked(16 .. 23))
  x.setMask((LSU shl 8).masked(8 .. 15))
  x.setMask((FSU shl 0).masked(0 .. 7))
  reg.write x.DCMI_ESUR_Fields

template modifyIt*(reg: DCMI_ESUR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DCMI_CWSTRT_Type): DCMI_CWSTRT_Fields {.inline.} =
  volatileLoad(cast[ptr DCMI_CWSTRT_Fields](reg.loc))

proc write*(reg: DCMI_CWSTRT_Type, val: DCMI_CWSTRT_Fields) {.inline.} =
  volatileStore(cast[ptr DCMI_CWSTRT_Fields](reg.loc), val)

proc write*(reg: DCMI_CWSTRT_Type, VST: uint32 = 0, HOFFCNT: uint32 = 0) =
  var x: uint32
  x.setMask((VST shl 16).masked(16 .. 28))
  x.setMask((HOFFCNT shl 0).masked(0 .. 13))
  reg.write x.DCMI_CWSTRT_Fields

template modifyIt*(reg: DCMI_CWSTRT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DCMI_CWSIZE_Type): DCMI_CWSIZE_Fields {.inline.} =
  volatileLoad(cast[ptr DCMI_CWSIZE_Fields](reg.loc))

proc write*(reg: DCMI_CWSIZE_Type, val: DCMI_CWSIZE_Fields) {.inline.} =
  volatileStore(cast[ptr DCMI_CWSIZE_Fields](reg.loc), val)

proc write*(reg: DCMI_CWSIZE_Type, VLINE: uint32 = 0, CAPCNT: uint32 = 0) =
  var x: uint32
  x.setMask((VLINE shl 16).masked(16 .. 29))
  x.setMask((CAPCNT shl 0).masked(0 .. 13))
  reg.write x.DCMI_CWSIZE_Fields

template modifyIt*(reg: DCMI_CWSIZE_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DCMI_DR_Type): DCMI_DR_Fields {.inline.} =
  volatileLoad(cast[ptr DCMI_DR_Fields](reg.loc))

func CAPTURE*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func CM*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CM=`*(r: var DCMI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DCMI_CR_Fields

func CROP*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CROP=`*(r: var DCMI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DCMI_CR_Fields

func JPEG*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `JPEG=`*(r: var DCMI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DCMI_CR_Fields

func ESS*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ESS=`*(r: var DCMI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DCMI_CR_Fields

func PCKPOL*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PCKPOL=`*(r: var DCMI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DCMI_CR_Fields

func HSPOL*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `HSPOL=`*(r: var DCMI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DCMI_CR_Fields

func VSPOL*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `VSPOL=`*(r: var DCMI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DCMI_CR_Fields

func EDM*(r: DCMI_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `EDM=`*(r: var DCMI_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.DCMI_CR_Fields

func ENABLE*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ENABLE=`*(r: var DCMI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.DCMI_CR_Fields

func BSM*(r: DCMI_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

func OEBS*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func LSM*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

func OELS*(r: DCMI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

func FCRC*(r: DCMI_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `FCRC=`*(r: var DCMI_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.DCMI_CR_Fields

func FNE*(r: DCMI_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func VSYNC*(r: DCMI_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func HSYNC*(r: DCMI_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func LINE_RIS*(r: DCMI_RIS_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func VSYNC_RIS*(r: DCMI_RIS_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func ERR_RIS*(r: DCMI_RIS_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func OVR_RIS*(r: DCMI_RIS_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func FRAME_RIS*(r: DCMI_RIS_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func LINE_IE*(r: DCMI_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `LINE_IE=`*(r: var DCMI_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DCMI_IER_Fields

func VSYNC_IE*(r: DCMI_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `VSYNC_IE=`*(r: var DCMI_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DCMI_IER_Fields

func ERR_IE*(r: DCMI_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ERR_IE=`*(r: var DCMI_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DCMI_IER_Fields

func OVR_IE*(r: DCMI_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `OVR_IE=`*(r: var DCMI_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DCMI_IER_Fields

func FRAME_IE*(r: DCMI_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FRAME_IE=`*(r: var DCMI_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DCMI_IER_Fields

func LINE_MIS*(r: DCMI_MIS_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func VSYNC_MIS*(r: DCMI_MIS_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func ERR_MIS*(r: DCMI_MIS_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func OVR_MIS*(r: DCMI_MIS_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func FRAME_MIS*(r: DCMI_MIS_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LINE_ISC=`*(r: var DCMI_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DCMI_ICR_Fields

proc `VSYNC_ISC=`*(r: var DCMI_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DCMI_ICR_Fields

proc `ERR_ISC=`*(r: var DCMI_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DCMI_ICR_Fields

proc `OVR_ISC=`*(r: var DCMI_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DCMI_ICR_Fields

proc `FRAME_ISC=`*(r: var DCMI_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DCMI_ICR_Fields

func FEC*(r: DCMI_ESCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `FEC=`*(r: var DCMI_ESCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.DCMI_ESCR_Fields

func LEC*(r: DCMI_ESCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `LEC=`*(r: var DCMI_ESCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.DCMI_ESCR_Fields

func LSC*(r: DCMI_ESCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `LSC=`*(r: var DCMI_ESCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.DCMI_ESCR_Fields

func FSC*(r: DCMI_ESCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `FSC=`*(r: var DCMI_ESCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.DCMI_ESCR_Fields

func FEU*(r: DCMI_ESUR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `FEU=`*(r: var DCMI_ESUR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.DCMI_ESUR_Fields

func LEU*(r: DCMI_ESUR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `LEU=`*(r: var DCMI_ESUR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.DCMI_ESUR_Fields

func LSU*(r: DCMI_ESUR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `LSU=`*(r: var DCMI_ESUR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.DCMI_ESUR_Fields

func FSU*(r: DCMI_ESUR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `FSU=`*(r: var DCMI_ESUR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.DCMI_ESUR_Fields

func VST*(r: DCMI_CWSTRT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 28)

proc `VST=`*(r: var DCMI_CWSTRT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 28)
  tmp.setMask((val shl 16).masked(16 .. 28))
  r = tmp.DCMI_CWSTRT_Fields

func HOFFCNT*(r: DCMI_CWSTRT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 13)

proc `HOFFCNT=`*(r: var DCMI_CWSTRT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 13)
  tmp.setMask((val shl 0).masked(0 .. 13))
  r = tmp.DCMI_CWSTRT_Fields

func VLINE*(r: DCMI_CWSIZE_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 29)

proc `VLINE=`*(r: var DCMI_CWSIZE_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 29)
  tmp.setMask((val shl 16).masked(16 .. 29))
  r = tmp.DCMI_CWSIZE_Fields

func CAPCNT*(r: DCMI_CWSIZE_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 13)

proc `CAPCNT=`*(r: var DCMI_CWSIZE_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 13)
  tmp.setMask((val shl 0).masked(0 .. 13))
  r = tmp.DCMI_CWSIZE_Fields

func Byte3*(r: DCMI_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func Byte2*(r: DCMI_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func Byte1*(r: DCMI_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func Byte0*(r: DCMI_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

type
  FMC_BCR1_Fields* = distinct uint32
  FMC_BTR1_Fields* = distinct uint32
  FMC_BCR2_Fields* = distinct uint32
  FMC_BTR2_Fields* = distinct uint32
  FMC_BCR3_Fields* = distinct uint32
  FMC_BTR3_Fields* = distinct uint32
  FMC_BCR4_Fields* = distinct uint32
  FMC_BTR4_Fields* = distinct uint32
  FMC_PCR2_Fields* = distinct uint32
  FMC_SR2_Fields* = distinct uint32
  FMC_PMEM2_Fields* = distinct uint32
  FMC_PATT2_Fields* = distinct uint32
  FMC_PCR3_Fields* = distinct uint32
  FMC_SR3_Fields* = distinct uint32
  FMC_PMEM3_Fields* = distinct uint32
  FMC_PATT3_Fields* = distinct uint32
  FMC_PCR4_Fields* = distinct uint32
  FMC_SR4_Fields* = distinct uint32
  FMC_PMEM4_Fields* = distinct uint32
  FMC_PATT4_Fields* = distinct uint32
  FMC_PIO4_Fields* = distinct uint32
  FMC_BWTR1_Fields* = distinct uint32
  FMC_BWTR2_Fields* = distinct uint32
  FMC_BWTR3_Fields* = distinct uint32
  FMC_BWTR4_Fields* = distinct uint32
  FMC_SDCR1_Fields* = distinct uint32
  FMC_SDCR2_Fields* = distinct uint32
  FMC_SDTR1_Fields* = distinct uint32
  FMC_SDTR2_Fields* = distinct uint32
  FMC_SDCMR_Fields* = distinct uint32
  FMC_SDRTR_Fields* = distinct uint32
  FMC_SDSR_Fields* = distinct uint32

proc read*(reg: FMC_BCR1_Type): FMC_BCR1_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BCR1_Fields](reg.loc))

proc write*(reg: FMC_BCR1_Type, val: FMC_BCR1_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BCR1_Fields](reg.loc), val)

proc write*(reg: FMC_BCR1_Type, CCLKEN: bool = false, CBURSTRW: bool = false, ASYNCWAIT: bool = false, EXTMOD: bool = false, WAITEN: bool = true, WREN: bool = true, WAITCFG: bool = false, WAITPOL: bool = false, BURSTEN: bool = false, FACCEN: bool = true, MWID: uint32 = 1, MTYP: uint32 = 0, MUXEN: bool = false, MBKEN: bool = false) =
  var x: uint32
  x.setMask((CCLKEN.uint32 shl 20).masked(20 .. 20))
  x.setMask((CBURSTRW.uint32 shl 19).masked(19 .. 19))
  x.setMask((ASYNCWAIT.uint32 shl 15).masked(15 .. 15))
  x.setMask((EXTMOD.uint32 shl 14).masked(14 .. 14))
  x.setMask((WAITEN.uint32 shl 13).masked(13 .. 13))
  x.setMask((WREN.uint32 shl 12).masked(12 .. 12))
  x.setMask((WAITCFG.uint32 shl 11).masked(11 .. 11))
  x.setMask((WAITPOL.uint32 shl 9).masked(9 .. 9))
  x.setMask((BURSTEN.uint32 shl 8).masked(8 .. 8))
  x.setMask((FACCEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((MWID shl 4).masked(4 .. 5))
  x.setMask((MTYP shl 2).masked(2 .. 3))
  x.setMask((MUXEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((MBKEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.FMC_BCR1_Fields

template modifyIt*(reg: FMC_BCR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BTR1_Type): FMC_BTR1_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BTR1_Fields](reg.loc))

proc write*(reg: FMC_BTR1_Type, val: FMC_BTR1_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BTR1_Fields](reg.loc), val)

proc write*(reg: FMC_BTR1_Type, ACCMOD: uint32 = 3, DATLAT: uint32 = 15, CLKDIV: uint32 = 15, BUSTURN: uint32 = 15, DATAST: uint32 = 255, ADDHLD: uint32 = 15, ADDSET: uint32 = 15) =
  var x: uint32
  x.setMask((ACCMOD shl 28).masked(28 .. 29))
  x.setMask((DATLAT shl 24).masked(24 .. 27))
  x.setMask((CLKDIV shl 20).masked(20 .. 23))
  x.setMask((BUSTURN shl 16).masked(16 .. 19))
  x.setMask((DATAST shl 8).masked(8 .. 15))
  x.setMask((ADDHLD shl 4).masked(4 .. 7))
  x.setMask((ADDSET shl 0).masked(0 .. 3))
  reg.write x.FMC_BTR1_Fields

template modifyIt*(reg: FMC_BTR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BCR2_Type): FMC_BCR2_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BCR2_Fields](reg.loc))

proc write*(reg: FMC_BCR2_Type, val: FMC_BCR2_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BCR2_Fields](reg.loc), val)

proc write*(reg: FMC_BCR2_Type, CBURSTRW: bool = false, ASYNCWAIT: bool = false, EXTMOD: bool = false, WAITEN: bool = true, WREN: bool = true, WAITCFG: bool = false, WRAPMOD: bool = false, WAITPOL: bool = false, BURSTEN: bool = false, FACCEN: bool = true, MWID: uint32 = 1, MTYP: uint32 = 0, MUXEN: bool = false, MBKEN: bool = false) =
  var x: uint32
  x.setMask((CBURSTRW.uint32 shl 19).masked(19 .. 19))
  x.setMask((ASYNCWAIT.uint32 shl 15).masked(15 .. 15))
  x.setMask((EXTMOD.uint32 shl 14).masked(14 .. 14))
  x.setMask((WAITEN.uint32 shl 13).masked(13 .. 13))
  x.setMask((WREN.uint32 shl 12).masked(12 .. 12))
  x.setMask((WAITCFG.uint32 shl 11).masked(11 .. 11))
  x.setMask((WRAPMOD.uint32 shl 10).masked(10 .. 10))
  x.setMask((WAITPOL.uint32 shl 9).masked(9 .. 9))
  x.setMask((BURSTEN.uint32 shl 8).masked(8 .. 8))
  x.setMask((FACCEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((MWID shl 4).masked(4 .. 5))
  x.setMask((MTYP shl 2).masked(2 .. 3))
  x.setMask((MUXEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((MBKEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.FMC_BCR2_Fields

template modifyIt*(reg: FMC_BCR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BTR2_Type): FMC_BTR2_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BTR2_Fields](reg.loc))

proc write*(reg: FMC_BTR2_Type, val: FMC_BTR2_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BTR2_Fields](reg.loc), val)

proc write*(reg: FMC_BTR2_Type, ACCMOD: uint32 = 3, DATLAT: uint32 = 15, CLKDIV: uint32 = 15, BUSTURN: uint32 = 15, DATAST: uint32 = 255, ADDHLD: uint32 = 15, ADDSET: uint32 = 15) =
  var x: uint32
  x.setMask((ACCMOD shl 28).masked(28 .. 29))
  x.setMask((DATLAT shl 24).masked(24 .. 27))
  x.setMask((CLKDIV shl 20).masked(20 .. 23))
  x.setMask((BUSTURN shl 16).masked(16 .. 19))
  x.setMask((DATAST shl 8).masked(8 .. 15))
  x.setMask((ADDHLD shl 4).masked(4 .. 7))
  x.setMask((ADDSET shl 0).masked(0 .. 3))
  reg.write x.FMC_BTR2_Fields

template modifyIt*(reg: FMC_BTR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BCR3_Type): FMC_BCR3_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BCR3_Fields](reg.loc))

proc write*(reg: FMC_BCR3_Type, val: FMC_BCR3_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BCR3_Fields](reg.loc), val)

proc write*(reg: FMC_BCR3_Type, CBURSTRW: bool = false, ASYNCWAIT: bool = false, EXTMOD: bool = false, WAITEN: bool = true, WREN: bool = true, WAITCFG: bool = false, WRAPMOD: bool = false, WAITPOL: bool = false, BURSTEN: bool = false, FACCEN: bool = true, MWID: uint32 = 1, MTYP: uint32 = 0, MUXEN: bool = false, MBKEN: bool = false) =
  var x: uint32
  x.setMask((CBURSTRW.uint32 shl 19).masked(19 .. 19))
  x.setMask((ASYNCWAIT.uint32 shl 15).masked(15 .. 15))
  x.setMask((EXTMOD.uint32 shl 14).masked(14 .. 14))
  x.setMask((WAITEN.uint32 shl 13).masked(13 .. 13))
  x.setMask((WREN.uint32 shl 12).masked(12 .. 12))
  x.setMask((WAITCFG.uint32 shl 11).masked(11 .. 11))
  x.setMask((WRAPMOD.uint32 shl 10).masked(10 .. 10))
  x.setMask((WAITPOL.uint32 shl 9).masked(9 .. 9))
  x.setMask((BURSTEN.uint32 shl 8).masked(8 .. 8))
  x.setMask((FACCEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((MWID shl 4).masked(4 .. 5))
  x.setMask((MTYP shl 2).masked(2 .. 3))
  x.setMask((MUXEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((MBKEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.FMC_BCR3_Fields

template modifyIt*(reg: FMC_BCR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BTR3_Type): FMC_BTR3_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BTR3_Fields](reg.loc))

proc write*(reg: FMC_BTR3_Type, val: FMC_BTR3_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BTR3_Fields](reg.loc), val)

proc write*(reg: FMC_BTR3_Type, ACCMOD: uint32 = 3, DATLAT: uint32 = 15, CLKDIV: uint32 = 15, BUSTURN: uint32 = 15, DATAST: uint32 = 255, ADDHLD: uint32 = 15, ADDSET: uint32 = 15) =
  var x: uint32
  x.setMask((ACCMOD shl 28).masked(28 .. 29))
  x.setMask((DATLAT shl 24).masked(24 .. 27))
  x.setMask((CLKDIV shl 20).masked(20 .. 23))
  x.setMask((BUSTURN shl 16).masked(16 .. 19))
  x.setMask((DATAST shl 8).masked(8 .. 15))
  x.setMask((ADDHLD shl 4).masked(4 .. 7))
  x.setMask((ADDSET shl 0).masked(0 .. 3))
  reg.write x.FMC_BTR3_Fields

template modifyIt*(reg: FMC_BTR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BCR4_Type): FMC_BCR4_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BCR4_Fields](reg.loc))

proc write*(reg: FMC_BCR4_Type, val: FMC_BCR4_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BCR4_Fields](reg.loc), val)

proc write*(reg: FMC_BCR4_Type, CBURSTRW: bool = false, ASYNCWAIT: bool = false, EXTMOD: bool = false, WAITEN: bool = true, WREN: bool = true, WAITCFG: bool = false, WRAPMOD: bool = false, WAITPOL: bool = false, BURSTEN: bool = false, FACCEN: bool = true, MWID: uint32 = 1, MTYP: uint32 = 0, MUXEN: bool = false, MBKEN: bool = false) =
  var x: uint32
  x.setMask((CBURSTRW.uint32 shl 19).masked(19 .. 19))
  x.setMask((ASYNCWAIT.uint32 shl 15).masked(15 .. 15))
  x.setMask((EXTMOD.uint32 shl 14).masked(14 .. 14))
  x.setMask((WAITEN.uint32 shl 13).masked(13 .. 13))
  x.setMask((WREN.uint32 shl 12).masked(12 .. 12))
  x.setMask((WAITCFG.uint32 shl 11).masked(11 .. 11))
  x.setMask((WRAPMOD.uint32 shl 10).masked(10 .. 10))
  x.setMask((WAITPOL.uint32 shl 9).masked(9 .. 9))
  x.setMask((BURSTEN.uint32 shl 8).masked(8 .. 8))
  x.setMask((FACCEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((MWID shl 4).masked(4 .. 5))
  x.setMask((MTYP shl 2).masked(2 .. 3))
  x.setMask((MUXEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((MBKEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.FMC_BCR4_Fields

template modifyIt*(reg: FMC_BCR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BTR4_Type): FMC_BTR4_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BTR4_Fields](reg.loc))

proc write*(reg: FMC_BTR4_Type, val: FMC_BTR4_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BTR4_Fields](reg.loc), val)

proc write*(reg: FMC_BTR4_Type, ACCMOD: uint32 = 3, DATLAT: uint32 = 15, CLKDIV: uint32 = 15, BUSTURN: uint32 = 15, DATAST: uint32 = 255, ADDHLD: uint32 = 15, ADDSET: uint32 = 15) =
  var x: uint32
  x.setMask((ACCMOD shl 28).masked(28 .. 29))
  x.setMask((DATLAT shl 24).masked(24 .. 27))
  x.setMask((CLKDIV shl 20).masked(20 .. 23))
  x.setMask((BUSTURN shl 16).masked(16 .. 19))
  x.setMask((DATAST shl 8).masked(8 .. 15))
  x.setMask((ADDHLD shl 4).masked(4 .. 7))
  x.setMask((ADDSET shl 0).masked(0 .. 3))
  reg.write x.FMC_BTR4_Fields

template modifyIt*(reg: FMC_BTR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_PCR2_Type): FMC_PCR2_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_PCR2_Fields](reg.loc))

proc write*(reg: FMC_PCR2_Type, val: FMC_PCR2_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_PCR2_Fields](reg.loc), val)

proc write*(reg: FMC_PCR2_Type, ECCPS: uint32 = 0, TAR: uint32 = 0, TCLR: uint32 = 0, ECCEN: bool = false, PWID: uint32 = 1, PTYP: bool = true, PBKEN: bool = false, PWAITEN: bool = false) =
  var x: uint32
  x.setMask((ECCPS shl 17).masked(17 .. 19))
  x.setMask((TAR shl 13).masked(13 .. 16))
  x.setMask((TCLR shl 9).masked(9 .. 12))
  x.setMask((ECCEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((PWID shl 4).masked(4 .. 5))
  x.setMask((PTYP.uint32 shl 3).masked(3 .. 3))
  x.setMask((PBKEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((PWAITEN.uint32 shl 1).masked(1 .. 1))
  reg.write x.FMC_PCR2_Fields

template modifyIt*(reg: FMC_PCR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_SR2_Type): FMC_SR2_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_SR2_Fields](reg.loc))

proc write*(reg: FMC_SR2_Type, val: FMC_SR2_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_SR2_Fields](reg.loc), val)

proc write*(reg: FMC_SR2_Type, IFEN: bool = false, ILEN: bool = false, IREN: bool = false, IFS: bool = false, ILS: bool = false, IRS: bool = false) =
  var x: uint32
  x.setMask((IFEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((ILEN.uint32 shl 4).masked(4 .. 4))
  x.setMask((IREN.uint32 shl 3).masked(3 .. 3))
  x.setMask((IFS.uint32 shl 2).masked(2 .. 2))
  x.setMask((ILS.uint32 shl 1).masked(1 .. 1))
  x.setMask((IRS.uint32 shl 0).masked(0 .. 0))
  reg.write x.FMC_SR2_Fields

template modifyIt*(reg: FMC_SR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_PMEM2_Type): FMC_PMEM2_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_PMEM2_Fields](reg.loc))

proc write*(reg: FMC_PMEM2_Type, val: FMC_PMEM2_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_PMEM2_Fields](reg.loc), val)

proc write*(reg: FMC_PMEM2_Type, MEMHIZx: uint32 = 252, MEMHOLDx: uint32 = 252, MEMWAITx: uint32 = 252, MEMSETx: uint32 = 252) =
  var x: uint32
  x.setMask((MEMHIZx shl 24).masked(24 .. 31))
  x.setMask((MEMHOLDx shl 16).masked(16 .. 23))
  x.setMask((MEMWAITx shl 8).masked(8 .. 15))
  x.setMask((MEMSETx shl 0).masked(0 .. 7))
  reg.write x.FMC_PMEM2_Fields

template modifyIt*(reg: FMC_PMEM2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_PATT2_Type): FMC_PATT2_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_PATT2_Fields](reg.loc))

proc write*(reg: FMC_PATT2_Type, val: FMC_PATT2_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_PATT2_Fields](reg.loc), val)

proc write*(reg: FMC_PATT2_Type, ATTHIZx: uint32 = 252, ATTHOLDx: uint32 = 252, ATTWAITx: uint32 = 252, ATTSETx: uint32 = 252) =
  var x: uint32
  x.setMask((ATTHIZx shl 24).masked(24 .. 31))
  x.setMask((ATTHOLDx shl 16).masked(16 .. 23))
  x.setMask((ATTWAITx shl 8).masked(8 .. 15))
  x.setMask((ATTSETx shl 0).masked(0 .. 7))
  reg.write x.FMC_PATT2_Fields

template modifyIt*(reg: FMC_PATT2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_ECCR2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: FMC_PCR3_Type): FMC_PCR3_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_PCR3_Fields](reg.loc))

proc write*(reg: FMC_PCR3_Type, val: FMC_PCR3_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_PCR3_Fields](reg.loc), val)

proc write*(reg: FMC_PCR3_Type, ECCPS: uint32 = 0, TAR: uint32 = 0, TCLR: uint32 = 0, ECCEN: bool = false, PWID: uint32 = 1, PTYP: bool = true, PBKEN: bool = false, PWAITEN: bool = false) =
  var x: uint32
  x.setMask((ECCPS shl 17).masked(17 .. 19))
  x.setMask((TAR shl 13).masked(13 .. 16))
  x.setMask((TCLR shl 9).masked(9 .. 12))
  x.setMask((ECCEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((PWID shl 4).masked(4 .. 5))
  x.setMask((PTYP.uint32 shl 3).masked(3 .. 3))
  x.setMask((PBKEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((PWAITEN.uint32 shl 1).masked(1 .. 1))
  reg.write x.FMC_PCR3_Fields

template modifyIt*(reg: FMC_PCR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_SR3_Type): FMC_SR3_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_SR3_Fields](reg.loc))

proc write*(reg: FMC_SR3_Type, val: FMC_SR3_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_SR3_Fields](reg.loc), val)

proc write*(reg: FMC_SR3_Type, IFEN: bool = false, ILEN: bool = false, IREN: bool = false, IFS: bool = false, ILS: bool = false, IRS: bool = false) =
  var x: uint32
  x.setMask((IFEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((ILEN.uint32 shl 4).masked(4 .. 4))
  x.setMask((IREN.uint32 shl 3).masked(3 .. 3))
  x.setMask((IFS.uint32 shl 2).masked(2 .. 2))
  x.setMask((ILS.uint32 shl 1).masked(1 .. 1))
  x.setMask((IRS.uint32 shl 0).masked(0 .. 0))
  reg.write x.FMC_SR3_Fields

template modifyIt*(reg: FMC_SR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_PMEM3_Type): FMC_PMEM3_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_PMEM3_Fields](reg.loc))

proc write*(reg: FMC_PMEM3_Type, val: FMC_PMEM3_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_PMEM3_Fields](reg.loc), val)

proc write*(reg: FMC_PMEM3_Type, MEMHIZx: uint32 = 252, MEMHOLDx: uint32 = 252, MEMWAITx: uint32 = 252, MEMSETx: uint32 = 252) =
  var x: uint32
  x.setMask((MEMHIZx shl 24).masked(24 .. 31))
  x.setMask((MEMHOLDx shl 16).masked(16 .. 23))
  x.setMask((MEMWAITx shl 8).masked(8 .. 15))
  x.setMask((MEMSETx shl 0).masked(0 .. 7))
  reg.write x.FMC_PMEM3_Fields

template modifyIt*(reg: FMC_PMEM3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_PATT3_Type): FMC_PATT3_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_PATT3_Fields](reg.loc))

proc write*(reg: FMC_PATT3_Type, val: FMC_PATT3_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_PATT3_Fields](reg.loc), val)

proc write*(reg: FMC_PATT3_Type, ATTHIZx: uint32 = 252, ATTHOLDx: uint32 = 252, ATTWAITx: uint32 = 252, ATTSETx: uint32 = 252) =
  var x: uint32
  x.setMask((ATTHIZx shl 24).masked(24 .. 31))
  x.setMask((ATTHOLDx shl 16).masked(16 .. 23))
  x.setMask((ATTWAITx shl 8).masked(8 .. 15))
  x.setMask((ATTSETx shl 0).masked(0 .. 7))
  reg.write x.FMC_PATT3_Fields

template modifyIt*(reg: FMC_PATT3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_ECCR3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: FMC_PCR4_Type): FMC_PCR4_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_PCR4_Fields](reg.loc))

proc write*(reg: FMC_PCR4_Type, val: FMC_PCR4_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_PCR4_Fields](reg.loc), val)

proc write*(reg: FMC_PCR4_Type, ECCPS: uint32 = 0, TAR: uint32 = 0, TCLR: uint32 = 0, ECCEN: bool = false, PWID: uint32 = 1, PTYP: bool = true, PBKEN: bool = false, PWAITEN: bool = false) =
  var x: uint32
  x.setMask((ECCPS shl 17).masked(17 .. 19))
  x.setMask((TAR shl 13).masked(13 .. 16))
  x.setMask((TCLR shl 9).masked(9 .. 12))
  x.setMask((ECCEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((PWID shl 4).masked(4 .. 5))
  x.setMask((PTYP.uint32 shl 3).masked(3 .. 3))
  x.setMask((PBKEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((PWAITEN.uint32 shl 1).masked(1 .. 1))
  reg.write x.FMC_PCR4_Fields

template modifyIt*(reg: FMC_PCR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_SR4_Type): FMC_SR4_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_SR4_Fields](reg.loc))

proc write*(reg: FMC_SR4_Type, val: FMC_SR4_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_SR4_Fields](reg.loc), val)

proc write*(reg: FMC_SR4_Type, IFEN: bool = false, ILEN: bool = false, IREN: bool = false, IFS: bool = false, ILS: bool = false, IRS: bool = false) =
  var x: uint32
  x.setMask((IFEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((ILEN.uint32 shl 4).masked(4 .. 4))
  x.setMask((IREN.uint32 shl 3).masked(3 .. 3))
  x.setMask((IFS.uint32 shl 2).masked(2 .. 2))
  x.setMask((ILS.uint32 shl 1).masked(1 .. 1))
  x.setMask((IRS.uint32 shl 0).masked(0 .. 0))
  reg.write x.FMC_SR4_Fields

template modifyIt*(reg: FMC_SR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_PMEM4_Type): FMC_PMEM4_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_PMEM4_Fields](reg.loc))

proc write*(reg: FMC_PMEM4_Type, val: FMC_PMEM4_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_PMEM4_Fields](reg.loc), val)

proc write*(reg: FMC_PMEM4_Type, MEMHIZx: uint32 = 252, MEMHOLDx: uint32 = 252, MEMWAITx: uint32 = 252, MEMSETx: uint32 = 252) =
  var x: uint32
  x.setMask((MEMHIZx shl 24).masked(24 .. 31))
  x.setMask((MEMHOLDx shl 16).masked(16 .. 23))
  x.setMask((MEMWAITx shl 8).masked(8 .. 15))
  x.setMask((MEMSETx shl 0).masked(0 .. 7))
  reg.write x.FMC_PMEM4_Fields

template modifyIt*(reg: FMC_PMEM4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_PATT4_Type): FMC_PATT4_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_PATT4_Fields](reg.loc))

proc write*(reg: FMC_PATT4_Type, val: FMC_PATT4_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_PATT4_Fields](reg.loc), val)

proc write*(reg: FMC_PATT4_Type, ATTHIZx: uint32 = 252, ATTHOLDx: uint32 = 252, ATTWAITx: uint32 = 252, ATTSETx: uint32 = 252) =
  var x: uint32
  x.setMask((ATTHIZx shl 24).masked(24 .. 31))
  x.setMask((ATTHOLDx shl 16).masked(16 .. 23))
  x.setMask((ATTWAITx shl 8).masked(8 .. 15))
  x.setMask((ATTSETx shl 0).masked(0 .. 7))
  reg.write x.FMC_PATT4_Fields

template modifyIt*(reg: FMC_PATT4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_PIO4_Type): FMC_PIO4_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_PIO4_Fields](reg.loc))

proc write*(reg: FMC_PIO4_Type, val: FMC_PIO4_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_PIO4_Fields](reg.loc), val)

proc write*(reg: FMC_PIO4_Type, IOHIZx: uint32 = 252, IOHOLDx: uint32 = 252, IOWAITx: uint32 = 252, IOSETx: uint32 = 252) =
  var x: uint32
  x.setMask((IOHIZx shl 24).masked(24 .. 31))
  x.setMask((IOHOLDx shl 16).masked(16 .. 23))
  x.setMask((IOWAITx shl 8).masked(8 .. 15))
  x.setMask((IOSETx shl 0).masked(0 .. 7))
  reg.write x.FMC_PIO4_Fields

template modifyIt*(reg: FMC_PIO4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BWTR1_Type): FMC_BWTR1_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BWTR1_Fields](reg.loc))

proc write*(reg: FMC_BWTR1_Type, val: FMC_BWTR1_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BWTR1_Fields](reg.loc), val)

proc write*(reg: FMC_BWTR1_Type, ACCMOD: uint32 = 0, DATLAT: uint32 = 15, CLKDIV: uint32 = 15, DATAST: uint32 = 255, ADDHLD: uint32 = 15, ADDSET: uint32 = 15) =
  var x: uint32
  x.setMask((ACCMOD shl 28).masked(28 .. 29))
  x.setMask((DATLAT shl 24).masked(24 .. 27))
  x.setMask((CLKDIV shl 20).masked(20 .. 23))
  x.setMask((DATAST shl 8).masked(8 .. 15))
  x.setMask((ADDHLD shl 4).masked(4 .. 7))
  x.setMask((ADDSET shl 0).masked(0 .. 3))
  reg.write x.FMC_BWTR1_Fields

template modifyIt*(reg: FMC_BWTR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BWTR2_Type): FMC_BWTR2_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BWTR2_Fields](reg.loc))

proc write*(reg: FMC_BWTR2_Type, val: FMC_BWTR2_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BWTR2_Fields](reg.loc), val)

proc write*(reg: FMC_BWTR2_Type, ACCMOD: uint32 = 0, DATLAT: uint32 = 15, CLKDIV: uint32 = 15, DATAST: uint32 = 255, ADDHLD: uint32 = 15, ADDSET: uint32 = 15) =
  var x: uint32
  x.setMask((ACCMOD shl 28).masked(28 .. 29))
  x.setMask((DATLAT shl 24).masked(24 .. 27))
  x.setMask((CLKDIV shl 20).masked(20 .. 23))
  x.setMask((DATAST shl 8).masked(8 .. 15))
  x.setMask((ADDHLD shl 4).masked(4 .. 7))
  x.setMask((ADDSET shl 0).masked(0 .. 3))
  reg.write x.FMC_BWTR2_Fields

template modifyIt*(reg: FMC_BWTR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BWTR3_Type): FMC_BWTR3_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BWTR3_Fields](reg.loc))

proc write*(reg: FMC_BWTR3_Type, val: FMC_BWTR3_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BWTR3_Fields](reg.loc), val)

proc write*(reg: FMC_BWTR3_Type, ACCMOD: uint32 = 0, DATLAT: uint32 = 15, CLKDIV: uint32 = 15, DATAST: uint32 = 255, ADDHLD: uint32 = 15, ADDSET: uint32 = 15) =
  var x: uint32
  x.setMask((ACCMOD shl 28).masked(28 .. 29))
  x.setMask((DATLAT shl 24).masked(24 .. 27))
  x.setMask((CLKDIV shl 20).masked(20 .. 23))
  x.setMask((DATAST shl 8).masked(8 .. 15))
  x.setMask((ADDHLD shl 4).masked(4 .. 7))
  x.setMask((ADDSET shl 0).masked(0 .. 3))
  reg.write x.FMC_BWTR3_Fields

template modifyIt*(reg: FMC_BWTR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_BWTR4_Type): FMC_BWTR4_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_BWTR4_Fields](reg.loc))

proc write*(reg: FMC_BWTR4_Type, val: FMC_BWTR4_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_BWTR4_Fields](reg.loc), val)

proc write*(reg: FMC_BWTR4_Type, ACCMOD: uint32 = 0, DATLAT: uint32 = 15, CLKDIV: uint32 = 15, DATAST: uint32 = 255, ADDHLD: uint32 = 15, ADDSET: uint32 = 15) =
  var x: uint32
  x.setMask((ACCMOD shl 28).masked(28 .. 29))
  x.setMask((DATLAT shl 24).masked(24 .. 27))
  x.setMask((CLKDIV shl 20).masked(20 .. 23))
  x.setMask((DATAST shl 8).masked(8 .. 15))
  x.setMask((ADDHLD shl 4).masked(4 .. 7))
  x.setMask((ADDSET shl 0).masked(0 .. 3))
  reg.write x.FMC_BWTR4_Fields

template modifyIt*(reg: FMC_BWTR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_SDCR1_Type): FMC_SDCR1_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_SDCR1_Fields](reg.loc))

proc write*(reg: FMC_SDCR1_Type, val: FMC_SDCR1_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_SDCR1_Fields](reg.loc), val)

proc write*(reg: FMC_SDCR1_Type, NC: uint32 = 0, NR: uint32 = 0, MWID: uint32 = 1, NB: bool = true, CAS: uint32 = 1, WP: bool = true, SDCLK: uint32 = 0, RBURST: bool = false, RPIPE: uint32 = 0) =
  var x: uint32
  x.setMask((NC shl 0).masked(0 .. 1))
  x.setMask((NR shl 2).masked(2 .. 3))
  x.setMask((MWID shl 4).masked(4 .. 5))
  x.setMask((NB.uint32 shl 6).masked(6 .. 6))
  x.setMask((CAS shl 7).masked(7 .. 8))
  x.setMask((WP.uint32 shl 9).masked(9 .. 9))
  x.setMask((SDCLK shl 10).masked(10 .. 11))
  x.setMask((RBURST.uint32 shl 12).masked(12 .. 12))
  x.setMask((RPIPE shl 13).masked(13 .. 14))
  reg.write x.FMC_SDCR1_Fields

template modifyIt*(reg: FMC_SDCR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_SDCR2_Type): FMC_SDCR2_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_SDCR2_Fields](reg.loc))

proc write*(reg: FMC_SDCR2_Type, val: FMC_SDCR2_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_SDCR2_Fields](reg.loc), val)

proc write*(reg: FMC_SDCR2_Type, NC: uint32 = 0, NR: uint32 = 0, MWID: uint32 = 1, NB: bool = true, CAS: uint32 = 1, WP: bool = true, SDCLK: uint32 = 0, RBURST: bool = false, RPIPE: uint32 = 0) =
  var x: uint32
  x.setMask((NC shl 0).masked(0 .. 1))
  x.setMask((NR shl 2).masked(2 .. 3))
  x.setMask((MWID shl 4).masked(4 .. 5))
  x.setMask((NB.uint32 shl 6).masked(6 .. 6))
  x.setMask((CAS shl 7).masked(7 .. 8))
  x.setMask((WP.uint32 shl 9).masked(9 .. 9))
  x.setMask((SDCLK shl 10).masked(10 .. 11))
  x.setMask((RBURST.uint32 shl 12).masked(12 .. 12))
  x.setMask((RPIPE shl 13).masked(13 .. 14))
  reg.write x.FMC_SDCR2_Fields

template modifyIt*(reg: FMC_SDCR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_SDTR1_Type): FMC_SDTR1_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_SDTR1_Fields](reg.loc))

proc write*(reg: FMC_SDTR1_Type, val: FMC_SDTR1_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_SDTR1_Fields](reg.loc), val)

proc write*(reg: FMC_SDTR1_Type, TMRD: uint32 = 15, TXSR: uint32 = 15, TRAS: uint32 = 15, TRC: uint32 = 15, TWR: uint32 = 15, TRP: uint32 = 15, TRCD: uint32 = 15) =
  var x: uint32
  x.setMask((TMRD shl 0).masked(0 .. 3))
  x.setMask((TXSR shl 4).masked(4 .. 7))
  x.setMask((TRAS shl 8).masked(8 .. 11))
  x.setMask((TRC shl 12).masked(12 .. 15))
  x.setMask((TWR shl 16).masked(16 .. 19))
  x.setMask((TRP shl 20).masked(20 .. 23))
  x.setMask((TRCD shl 24).masked(24 .. 27))
  reg.write x.FMC_SDTR1_Fields

template modifyIt*(reg: FMC_SDTR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_SDTR2_Type): FMC_SDTR2_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_SDTR2_Fields](reg.loc))

proc write*(reg: FMC_SDTR2_Type, val: FMC_SDTR2_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_SDTR2_Fields](reg.loc), val)

proc write*(reg: FMC_SDTR2_Type, TMRD: uint32 = 15, TXSR: uint32 = 15, TRAS: uint32 = 15, TRC: uint32 = 15, TWR: uint32 = 15, TRP: uint32 = 15, TRCD: uint32 = 15) =
  var x: uint32
  x.setMask((TMRD shl 0).masked(0 .. 3))
  x.setMask((TXSR shl 4).masked(4 .. 7))
  x.setMask((TRAS shl 8).masked(8 .. 11))
  x.setMask((TRC shl 12).masked(12 .. 15))
  x.setMask((TWR shl 16).masked(16 .. 19))
  x.setMask((TRP shl 20).masked(20 .. 23))
  x.setMask((TRCD shl 24).masked(24 .. 27))
  reg.write x.FMC_SDTR2_Fields

template modifyIt*(reg: FMC_SDTR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_SDCMR_Type): FMC_SDCMR_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_SDCMR_Fields](reg.loc))

proc write*(reg: FMC_SDCMR_Type, val: FMC_SDCMR_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_SDCMR_Fields](reg.loc), val)

proc write*(reg: FMC_SDCMR_Type, MODE: uint32 = 0, CTB2: bool = false, CTB1: bool = false, NRFS: uint32 = 0, MRD: uint32 = 0) =
  var x: uint32
  x.setMask((MODE shl 0).masked(0 .. 2))
  x.setMask((CTB2.uint32 shl 3).masked(3 .. 3))
  x.setMask((CTB1.uint32 shl 4).masked(4 .. 4))
  x.setMask((NRFS shl 5).masked(5 .. 8))
  x.setMask((MRD shl 9).masked(9 .. 21))
  reg.write x.FMC_SDCMR_Fields

template modifyIt*(reg: FMC_SDCMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_SDRTR_Type): FMC_SDRTR_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_SDRTR_Fields](reg.loc))

proc write*(reg: FMC_SDRTR_Type, val: FMC_SDRTR_Fields) {.inline.} =
  volatileStore(cast[ptr FMC_SDRTR_Fields](reg.loc), val)

proc write*(reg: FMC_SDRTR_Type, CRE: bool = false, COUNT: uint32 = 0, REIE: bool = false) =
  var x: uint32
  x.setMask((CRE.uint32 shl 0).masked(0 .. 0))
  x.setMask((COUNT shl 1).masked(1 .. 13))
  x.setMask((REIE.uint32 shl 14).masked(14 .. 14))
  reg.write x.FMC_SDRTR_Fields

template modifyIt*(reg: FMC_SDRTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMC_SDSR_Type): FMC_SDSR_Fields {.inline.} =
  volatileLoad(cast[ptr FMC_SDSR_Fields](reg.loc))

func CCLKEN*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `CCLKEN=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.FMC_BCR1_Fields

func CBURSTRW*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CBURSTRW=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.FMC_BCR1_Fields

func ASYNCWAIT*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ASYNCWAIT=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.FMC_BCR1_Fields

func EXTMOD*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `EXTMOD=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.FMC_BCR1_Fields

func WAITEN*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `WAITEN=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.FMC_BCR1_Fields

func WREN*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `WREN=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FMC_BCR1_Fields

func WAITCFG*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WAITCFG=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.FMC_BCR1_Fields

func WAITPOL*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `WAITPOL=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.FMC_BCR1_Fields

func BURSTEN*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BURSTEN=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.FMC_BCR1_Fields

func FACCEN*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FACCEN=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FMC_BCR1_Fields

func MWID*(r: FMC_BCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MWID=`*(r: var FMC_BCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.FMC_BCR1_Fields

func MTYP*(r: FMC_BCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `MTYP=`*(r: var FMC_BCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.FMC_BCR1_Fields

func MUXEN*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MUXEN=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMC_BCR1_Fields

func MBKEN*(r: FMC_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `MBKEN=`*(r: var FMC_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMC_BCR1_Fields

func ACCMOD*(r: FMC_BTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `ACCMOD=`*(r: var FMC_BTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.FMC_BTR1_Fields

func DATLAT*(r: FMC_BTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `DATLAT=`*(r: var FMC_BTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.FMC_BTR1_Fields

func CLKDIV*(r: FMC_BTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `CLKDIV=`*(r: var FMC_BTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMC_BTR1_Fields

func BUSTURN*(r: FMC_BTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `BUSTURN=`*(r: var FMC_BTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.FMC_BTR1_Fields

func DATAST*(r: FMC_BTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATAST=`*(r: var FMC_BTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_BTR1_Fields

func ADDHLD*(r: FMC_BTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `ADDHLD=`*(r: var FMC_BTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.FMC_BTR1_Fields

func ADDSET*(r: FMC_BTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADDSET=`*(r: var FMC_BTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.FMC_BTR1_Fields

func CBURSTRW*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CBURSTRW=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.FMC_BCR2_Fields

func ASYNCWAIT*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ASYNCWAIT=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.FMC_BCR2_Fields

func EXTMOD*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `EXTMOD=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.FMC_BCR2_Fields

func WAITEN*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `WAITEN=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.FMC_BCR2_Fields

func WREN*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `WREN=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FMC_BCR2_Fields

func WAITCFG*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WAITCFG=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.FMC_BCR2_Fields

func WRAPMOD*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `WRAPMOD=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.FMC_BCR2_Fields

func WAITPOL*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `WAITPOL=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.FMC_BCR2_Fields

func BURSTEN*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BURSTEN=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.FMC_BCR2_Fields

func FACCEN*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FACCEN=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FMC_BCR2_Fields

func MWID*(r: FMC_BCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MWID=`*(r: var FMC_BCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.FMC_BCR2_Fields

func MTYP*(r: FMC_BCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `MTYP=`*(r: var FMC_BCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.FMC_BCR2_Fields

func MUXEN*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MUXEN=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMC_BCR2_Fields

func MBKEN*(r: FMC_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `MBKEN=`*(r: var FMC_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMC_BCR2_Fields

func ACCMOD*(r: FMC_BTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `ACCMOD=`*(r: var FMC_BTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.FMC_BTR2_Fields

func DATLAT*(r: FMC_BTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `DATLAT=`*(r: var FMC_BTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.FMC_BTR2_Fields

func CLKDIV*(r: FMC_BTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `CLKDIV=`*(r: var FMC_BTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMC_BTR2_Fields

func BUSTURN*(r: FMC_BTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `BUSTURN=`*(r: var FMC_BTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.FMC_BTR2_Fields

func DATAST*(r: FMC_BTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATAST=`*(r: var FMC_BTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_BTR2_Fields

func ADDHLD*(r: FMC_BTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `ADDHLD=`*(r: var FMC_BTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.FMC_BTR2_Fields

func ADDSET*(r: FMC_BTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADDSET=`*(r: var FMC_BTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.FMC_BTR2_Fields

func CBURSTRW*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CBURSTRW=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.FMC_BCR3_Fields

func ASYNCWAIT*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ASYNCWAIT=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.FMC_BCR3_Fields

func EXTMOD*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `EXTMOD=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.FMC_BCR3_Fields

func WAITEN*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `WAITEN=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.FMC_BCR3_Fields

func WREN*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `WREN=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FMC_BCR3_Fields

func WAITCFG*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WAITCFG=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.FMC_BCR3_Fields

func WRAPMOD*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `WRAPMOD=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.FMC_BCR3_Fields

func WAITPOL*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `WAITPOL=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.FMC_BCR3_Fields

func BURSTEN*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BURSTEN=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.FMC_BCR3_Fields

func FACCEN*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FACCEN=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FMC_BCR3_Fields

func MWID*(r: FMC_BCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MWID=`*(r: var FMC_BCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.FMC_BCR3_Fields

func MTYP*(r: FMC_BCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `MTYP=`*(r: var FMC_BCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.FMC_BCR3_Fields

func MUXEN*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MUXEN=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMC_BCR3_Fields

func MBKEN*(r: FMC_BCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `MBKEN=`*(r: var FMC_BCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMC_BCR3_Fields

func ACCMOD*(r: FMC_BTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `ACCMOD=`*(r: var FMC_BTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.FMC_BTR3_Fields

func DATLAT*(r: FMC_BTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `DATLAT=`*(r: var FMC_BTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.FMC_BTR3_Fields

func CLKDIV*(r: FMC_BTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `CLKDIV=`*(r: var FMC_BTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMC_BTR3_Fields

func BUSTURN*(r: FMC_BTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `BUSTURN=`*(r: var FMC_BTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.FMC_BTR3_Fields

func DATAST*(r: FMC_BTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATAST=`*(r: var FMC_BTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_BTR3_Fields

func ADDHLD*(r: FMC_BTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `ADDHLD=`*(r: var FMC_BTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.FMC_BTR3_Fields

func ADDSET*(r: FMC_BTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADDSET=`*(r: var FMC_BTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.FMC_BTR3_Fields

func CBURSTRW*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CBURSTRW=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.FMC_BCR4_Fields

func ASYNCWAIT*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ASYNCWAIT=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.FMC_BCR4_Fields

func EXTMOD*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `EXTMOD=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.FMC_BCR4_Fields

func WAITEN*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `WAITEN=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.FMC_BCR4_Fields

func WREN*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `WREN=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FMC_BCR4_Fields

func WAITCFG*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WAITCFG=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.FMC_BCR4_Fields

func WRAPMOD*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `WRAPMOD=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.FMC_BCR4_Fields

func WAITPOL*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `WAITPOL=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.FMC_BCR4_Fields

func BURSTEN*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BURSTEN=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.FMC_BCR4_Fields

func FACCEN*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FACCEN=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FMC_BCR4_Fields

func MWID*(r: FMC_BCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MWID=`*(r: var FMC_BCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.FMC_BCR4_Fields

func MTYP*(r: FMC_BCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `MTYP=`*(r: var FMC_BCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.FMC_BCR4_Fields

func MUXEN*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MUXEN=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMC_BCR4_Fields

func MBKEN*(r: FMC_BCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `MBKEN=`*(r: var FMC_BCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMC_BCR4_Fields

func ACCMOD*(r: FMC_BTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `ACCMOD=`*(r: var FMC_BTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.FMC_BTR4_Fields

func DATLAT*(r: FMC_BTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `DATLAT=`*(r: var FMC_BTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.FMC_BTR4_Fields

func CLKDIV*(r: FMC_BTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `CLKDIV=`*(r: var FMC_BTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMC_BTR4_Fields

func BUSTURN*(r: FMC_BTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `BUSTURN=`*(r: var FMC_BTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.FMC_BTR4_Fields

func DATAST*(r: FMC_BTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATAST=`*(r: var FMC_BTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_BTR4_Fields

func ADDHLD*(r: FMC_BTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `ADDHLD=`*(r: var FMC_BTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.FMC_BTR4_Fields

func ADDSET*(r: FMC_BTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADDSET=`*(r: var FMC_BTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.FMC_BTR4_Fields

func ECCPS*(r: FMC_PCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 19)

proc `ECCPS=`*(r: var FMC_PCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 19)
  tmp.setMask((val shl 17).masked(17 .. 19))
  r = tmp.FMC_PCR2_Fields

func TAR*(r: FMC_PCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 16)

proc `TAR=`*(r: var FMC_PCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 16)
  tmp.setMask((val shl 13).masked(13 .. 16))
  r = tmp.FMC_PCR2_Fields

func TCLR*(r: FMC_PCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(9 .. 12)

proc `TCLR=`*(r: var FMC_PCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 12)
  tmp.setMask((val shl 9).masked(9 .. 12))
  r = tmp.FMC_PCR2_Fields

func ECCEN*(r: FMC_PCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ECCEN=`*(r: var FMC_PCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FMC_PCR2_Fields

func PWID*(r: FMC_PCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `PWID=`*(r: var FMC_PCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.FMC_PCR2_Fields

func PTYP*(r: FMC_PCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PTYP=`*(r: var FMC_PCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.FMC_PCR2_Fields

func PBKEN*(r: FMC_PCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `PBKEN=`*(r: var FMC_PCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.FMC_PCR2_Fields

func PWAITEN*(r: FMC_PCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PWAITEN=`*(r: var FMC_PCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMC_PCR2_Fields

func FEMPT*(r: FMC_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func IFEN*(r: FMC_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `IFEN=`*(r: var FMC_SR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.FMC_SR2_Fields

func ILEN*(r: FMC_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ILEN=`*(r: var FMC_SR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.FMC_SR2_Fields

func IREN*(r: FMC_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `IREN=`*(r: var FMC_SR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.FMC_SR2_Fields

func IFS*(r: FMC_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IFS=`*(r: var FMC_SR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.FMC_SR2_Fields

func ILS*(r: FMC_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ILS=`*(r: var FMC_SR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMC_SR2_Fields

func IRS*(r: FMC_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `IRS=`*(r: var FMC_SR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMC_SR2_Fields

func MEMHIZx*(r: FMC_PMEM2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `MEMHIZx=`*(r: var FMC_PMEM2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.FMC_PMEM2_Fields

func MEMHOLDx*(r: FMC_PMEM2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `MEMHOLDx=`*(r: var FMC_PMEM2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.FMC_PMEM2_Fields

func MEMWAITx*(r: FMC_PMEM2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `MEMWAITx=`*(r: var FMC_PMEM2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_PMEM2_Fields

func MEMSETx*(r: FMC_PMEM2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `MEMSETx=`*(r: var FMC_PMEM2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.FMC_PMEM2_Fields

func ATTHIZx*(r: FMC_PATT2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `ATTHIZx=`*(r: var FMC_PATT2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.FMC_PATT2_Fields

func ATTHOLDx*(r: FMC_PATT2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `ATTHOLDx=`*(r: var FMC_PATT2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.FMC_PATT2_Fields

func ATTWAITx*(r: FMC_PATT2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `ATTWAITx=`*(r: var FMC_PATT2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_PATT2_Fields

func ATTSETx*(r: FMC_PATT2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `ATTSETx=`*(r: var FMC_PATT2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.FMC_PATT2_Fields

func ECCPS*(r: FMC_PCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 19)

proc `ECCPS=`*(r: var FMC_PCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 19)
  tmp.setMask((val shl 17).masked(17 .. 19))
  r = tmp.FMC_PCR3_Fields

func TAR*(r: FMC_PCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 16)

proc `TAR=`*(r: var FMC_PCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 16)
  tmp.setMask((val shl 13).masked(13 .. 16))
  r = tmp.FMC_PCR3_Fields

func TCLR*(r: FMC_PCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(9 .. 12)

proc `TCLR=`*(r: var FMC_PCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 12)
  tmp.setMask((val shl 9).masked(9 .. 12))
  r = tmp.FMC_PCR3_Fields

func ECCEN*(r: FMC_PCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ECCEN=`*(r: var FMC_PCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FMC_PCR3_Fields

func PWID*(r: FMC_PCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `PWID=`*(r: var FMC_PCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.FMC_PCR3_Fields

func PTYP*(r: FMC_PCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PTYP=`*(r: var FMC_PCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.FMC_PCR3_Fields

func PBKEN*(r: FMC_PCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `PBKEN=`*(r: var FMC_PCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.FMC_PCR3_Fields

func PWAITEN*(r: FMC_PCR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PWAITEN=`*(r: var FMC_PCR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMC_PCR3_Fields

func FEMPT*(r: FMC_SR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func IFEN*(r: FMC_SR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `IFEN=`*(r: var FMC_SR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.FMC_SR3_Fields

func ILEN*(r: FMC_SR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ILEN=`*(r: var FMC_SR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.FMC_SR3_Fields

func IREN*(r: FMC_SR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `IREN=`*(r: var FMC_SR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.FMC_SR3_Fields

func IFS*(r: FMC_SR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IFS=`*(r: var FMC_SR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.FMC_SR3_Fields

func ILS*(r: FMC_SR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ILS=`*(r: var FMC_SR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMC_SR3_Fields

func IRS*(r: FMC_SR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `IRS=`*(r: var FMC_SR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMC_SR3_Fields

func MEMHIZx*(r: FMC_PMEM3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `MEMHIZx=`*(r: var FMC_PMEM3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.FMC_PMEM3_Fields

func MEMHOLDx*(r: FMC_PMEM3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `MEMHOLDx=`*(r: var FMC_PMEM3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.FMC_PMEM3_Fields

func MEMWAITx*(r: FMC_PMEM3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `MEMWAITx=`*(r: var FMC_PMEM3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_PMEM3_Fields

func MEMSETx*(r: FMC_PMEM3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `MEMSETx=`*(r: var FMC_PMEM3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.FMC_PMEM3_Fields

func ATTHIZx*(r: FMC_PATT3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `ATTHIZx=`*(r: var FMC_PATT3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.FMC_PATT3_Fields

func ATTHOLDx*(r: FMC_PATT3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `ATTHOLDx=`*(r: var FMC_PATT3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.FMC_PATT3_Fields

func ATTWAITx*(r: FMC_PATT3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `ATTWAITx=`*(r: var FMC_PATT3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_PATT3_Fields

func ATTSETx*(r: FMC_PATT3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `ATTSETx=`*(r: var FMC_PATT3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.FMC_PATT3_Fields

func ECCPS*(r: FMC_PCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 19)

proc `ECCPS=`*(r: var FMC_PCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 19)
  tmp.setMask((val shl 17).masked(17 .. 19))
  r = tmp.FMC_PCR4_Fields

func TAR*(r: FMC_PCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 16)

proc `TAR=`*(r: var FMC_PCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 16)
  tmp.setMask((val shl 13).masked(13 .. 16))
  r = tmp.FMC_PCR4_Fields

func TCLR*(r: FMC_PCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(9 .. 12)

proc `TCLR=`*(r: var FMC_PCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 12)
  tmp.setMask((val shl 9).masked(9 .. 12))
  r = tmp.FMC_PCR4_Fields

func ECCEN*(r: FMC_PCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ECCEN=`*(r: var FMC_PCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FMC_PCR4_Fields

func PWID*(r: FMC_PCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `PWID=`*(r: var FMC_PCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.FMC_PCR4_Fields

func PTYP*(r: FMC_PCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PTYP=`*(r: var FMC_PCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.FMC_PCR4_Fields

func PBKEN*(r: FMC_PCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `PBKEN=`*(r: var FMC_PCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.FMC_PCR4_Fields

func PWAITEN*(r: FMC_PCR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PWAITEN=`*(r: var FMC_PCR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMC_PCR4_Fields

func FEMPT*(r: FMC_SR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func IFEN*(r: FMC_SR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `IFEN=`*(r: var FMC_SR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.FMC_SR4_Fields

func ILEN*(r: FMC_SR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ILEN=`*(r: var FMC_SR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.FMC_SR4_Fields

func IREN*(r: FMC_SR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `IREN=`*(r: var FMC_SR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.FMC_SR4_Fields

func IFS*(r: FMC_SR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IFS=`*(r: var FMC_SR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.FMC_SR4_Fields

func ILS*(r: FMC_SR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ILS=`*(r: var FMC_SR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMC_SR4_Fields

func IRS*(r: FMC_SR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `IRS=`*(r: var FMC_SR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMC_SR4_Fields

func MEMHIZx*(r: FMC_PMEM4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `MEMHIZx=`*(r: var FMC_PMEM4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.FMC_PMEM4_Fields

func MEMHOLDx*(r: FMC_PMEM4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `MEMHOLDx=`*(r: var FMC_PMEM4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.FMC_PMEM4_Fields

func MEMWAITx*(r: FMC_PMEM4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `MEMWAITx=`*(r: var FMC_PMEM4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_PMEM4_Fields

func MEMSETx*(r: FMC_PMEM4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `MEMSETx=`*(r: var FMC_PMEM4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.FMC_PMEM4_Fields

func ATTHIZx*(r: FMC_PATT4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `ATTHIZx=`*(r: var FMC_PATT4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.FMC_PATT4_Fields

func ATTHOLDx*(r: FMC_PATT4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `ATTHOLDx=`*(r: var FMC_PATT4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.FMC_PATT4_Fields

func ATTWAITx*(r: FMC_PATT4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `ATTWAITx=`*(r: var FMC_PATT4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_PATT4_Fields

func ATTSETx*(r: FMC_PATT4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `ATTSETx=`*(r: var FMC_PATT4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.FMC_PATT4_Fields

func IOHIZx*(r: FMC_PIO4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `IOHIZx=`*(r: var FMC_PIO4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.FMC_PIO4_Fields

func IOHOLDx*(r: FMC_PIO4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `IOHOLDx=`*(r: var FMC_PIO4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.FMC_PIO4_Fields

func IOWAITx*(r: FMC_PIO4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `IOWAITx=`*(r: var FMC_PIO4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_PIO4_Fields

func IOSETx*(r: FMC_PIO4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `IOSETx=`*(r: var FMC_PIO4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.FMC_PIO4_Fields

func ACCMOD*(r: FMC_BWTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `ACCMOD=`*(r: var FMC_BWTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.FMC_BWTR1_Fields

func DATLAT*(r: FMC_BWTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `DATLAT=`*(r: var FMC_BWTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.FMC_BWTR1_Fields

func CLKDIV*(r: FMC_BWTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `CLKDIV=`*(r: var FMC_BWTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMC_BWTR1_Fields

func DATAST*(r: FMC_BWTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATAST=`*(r: var FMC_BWTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_BWTR1_Fields

func ADDHLD*(r: FMC_BWTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `ADDHLD=`*(r: var FMC_BWTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.FMC_BWTR1_Fields

func ADDSET*(r: FMC_BWTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADDSET=`*(r: var FMC_BWTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.FMC_BWTR1_Fields

func ACCMOD*(r: FMC_BWTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `ACCMOD=`*(r: var FMC_BWTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.FMC_BWTR2_Fields

func DATLAT*(r: FMC_BWTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `DATLAT=`*(r: var FMC_BWTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.FMC_BWTR2_Fields

func CLKDIV*(r: FMC_BWTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `CLKDIV=`*(r: var FMC_BWTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMC_BWTR2_Fields

func DATAST*(r: FMC_BWTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATAST=`*(r: var FMC_BWTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_BWTR2_Fields

func ADDHLD*(r: FMC_BWTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `ADDHLD=`*(r: var FMC_BWTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.FMC_BWTR2_Fields

func ADDSET*(r: FMC_BWTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADDSET=`*(r: var FMC_BWTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.FMC_BWTR2_Fields

func ACCMOD*(r: FMC_BWTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `ACCMOD=`*(r: var FMC_BWTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.FMC_BWTR3_Fields

func DATLAT*(r: FMC_BWTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `DATLAT=`*(r: var FMC_BWTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.FMC_BWTR3_Fields

func CLKDIV*(r: FMC_BWTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `CLKDIV=`*(r: var FMC_BWTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMC_BWTR3_Fields

func DATAST*(r: FMC_BWTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATAST=`*(r: var FMC_BWTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_BWTR3_Fields

func ADDHLD*(r: FMC_BWTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `ADDHLD=`*(r: var FMC_BWTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.FMC_BWTR3_Fields

func ADDSET*(r: FMC_BWTR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADDSET=`*(r: var FMC_BWTR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.FMC_BWTR3_Fields

func ACCMOD*(r: FMC_BWTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `ACCMOD=`*(r: var FMC_BWTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.FMC_BWTR4_Fields

func DATLAT*(r: FMC_BWTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `DATLAT=`*(r: var FMC_BWTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.FMC_BWTR4_Fields

func CLKDIV*(r: FMC_BWTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `CLKDIV=`*(r: var FMC_BWTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMC_BWTR4_Fields

func DATAST*(r: FMC_BWTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATAST=`*(r: var FMC_BWTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMC_BWTR4_Fields

func ADDHLD*(r: FMC_BWTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `ADDHLD=`*(r: var FMC_BWTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.FMC_BWTR4_Fields

func ADDSET*(r: FMC_BWTR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADDSET=`*(r: var FMC_BWTR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.FMC_BWTR4_Fields

func NC*(r: FMC_SDCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `NC=`*(r: var FMC_SDCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.FMC_SDCR1_Fields

func NR*(r: FMC_SDCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `NR=`*(r: var FMC_SDCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.FMC_SDCR1_Fields

func MWID*(r: FMC_SDCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MWID=`*(r: var FMC_SDCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.FMC_SDCR1_Fields

func NB*(r: FMC_SDCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NB=`*(r: var FMC_SDCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FMC_SDCR1_Fields

func CAS*(r: FMC_SDCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 8)

proc `CAS=`*(r: var FMC_SDCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 8)
  tmp.setMask((val shl 7).masked(7 .. 8))
  r = tmp.FMC_SDCR1_Fields

func WP*(r: FMC_SDCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `WP=`*(r: var FMC_SDCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.FMC_SDCR1_Fields

func SDCLK*(r: FMC_SDCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `SDCLK=`*(r: var FMC_SDCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.FMC_SDCR1_Fields

func RBURST*(r: FMC_SDCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `RBURST=`*(r: var FMC_SDCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FMC_SDCR1_Fields

func RPIPE*(r: FMC_SDCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `RPIPE=`*(r: var FMC_SDCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.FMC_SDCR1_Fields

func NC*(r: FMC_SDCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `NC=`*(r: var FMC_SDCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.FMC_SDCR2_Fields

func NR*(r: FMC_SDCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `NR=`*(r: var FMC_SDCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.FMC_SDCR2_Fields

func MWID*(r: FMC_SDCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MWID=`*(r: var FMC_SDCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.FMC_SDCR2_Fields

func NB*(r: FMC_SDCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NB=`*(r: var FMC_SDCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FMC_SDCR2_Fields

func CAS*(r: FMC_SDCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 8)

proc `CAS=`*(r: var FMC_SDCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 8)
  tmp.setMask((val shl 7).masked(7 .. 8))
  r = tmp.FMC_SDCR2_Fields

func WP*(r: FMC_SDCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `WP=`*(r: var FMC_SDCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.FMC_SDCR2_Fields

func SDCLK*(r: FMC_SDCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `SDCLK=`*(r: var FMC_SDCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.FMC_SDCR2_Fields

func RBURST*(r: FMC_SDCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `RBURST=`*(r: var FMC_SDCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FMC_SDCR2_Fields

func RPIPE*(r: FMC_SDCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `RPIPE=`*(r: var FMC_SDCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.FMC_SDCR2_Fields

func TMRD*(r: FMC_SDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `TMRD=`*(r: var FMC_SDTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.FMC_SDTR1_Fields

func TXSR*(r: FMC_SDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `TXSR=`*(r: var FMC_SDTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.FMC_SDTR1_Fields

func TRAS*(r: FMC_SDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `TRAS=`*(r: var FMC_SDTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.FMC_SDTR1_Fields

func TRC*(r: FMC_SDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `TRC=`*(r: var FMC_SDTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.FMC_SDTR1_Fields

func TWR*(r: FMC_SDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `TWR=`*(r: var FMC_SDTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.FMC_SDTR1_Fields

func TRP*(r: FMC_SDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `TRP=`*(r: var FMC_SDTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMC_SDTR1_Fields

func TRCD*(r: FMC_SDTR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `TRCD=`*(r: var FMC_SDTR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.FMC_SDTR1_Fields

func TMRD*(r: FMC_SDTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `TMRD=`*(r: var FMC_SDTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.FMC_SDTR2_Fields

func TXSR*(r: FMC_SDTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `TXSR=`*(r: var FMC_SDTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.FMC_SDTR2_Fields

func TRAS*(r: FMC_SDTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `TRAS=`*(r: var FMC_SDTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.FMC_SDTR2_Fields

func TRC*(r: FMC_SDTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `TRC=`*(r: var FMC_SDTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.FMC_SDTR2_Fields

func TWR*(r: FMC_SDTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `TWR=`*(r: var FMC_SDTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.FMC_SDTR2_Fields

func TRP*(r: FMC_SDTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `TRP=`*(r: var FMC_SDTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMC_SDTR2_Fields

func TRCD*(r: FMC_SDTR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `TRCD=`*(r: var FMC_SDTR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.FMC_SDTR2_Fields

proc `MODE=`*(r: var FMC_SDCMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.FMC_SDCMR_Fields

proc `CTB2=`*(r: var FMC_SDCMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.FMC_SDCMR_Fields

proc `CTB1=`*(r: var FMC_SDCMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.FMC_SDCMR_Fields

func NRFS*(r: FMC_SDCMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 8)

proc `NRFS=`*(r: var FMC_SDCMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 8)
  tmp.setMask((val shl 5).masked(5 .. 8))
  r = tmp.FMC_SDCMR_Fields

func MRD*(r: FMC_SDCMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(9 .. 21)

proc `MRD=`*(r: var FMC_SDCMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 21)
  tmp.setMask((val shl 9).masked(9 .. 21))
  r = tmp.FMC_SDCMR_Fields

proc `CRE=`*(r: var FMC_SDRTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMC_SDRTR_Fields

func COUNT*(r: FMC_SDRTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 13)

proc `COUNT=`*(r: var FMC_SDRTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 13)
  tmp.setMask((val shl 1).masked(1 .. 13))
  r = tmp.FMC_SDRTR_Fields

func REIE*(r: FMC_SDRTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `REIE=`*(r: var FMC_SDRTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.FMC_SDRTR_Fields

func RE*(r: FMC_SDSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func MODES1*(r: FMC_SDSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 2)

func MODES2*(r: FMC_SDSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 4)

func BUSY*(r: FMC_SDSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

type
  DBG_DBGMCU_IDCODE_Fields* = distinct uint32
  DBG_DBGMCU_CR_Fields* = distinct uint32
  DBG_DBGMCU_APB1_FZ_Fields* = distinct uint32
  DBG_DBGMCU_APB2_FZ_Fields* = distinct uint32

proc read*(reg: DBG_DBGMCU_IDCODE_Type): DBG_DBGMCU_IDCODE_Fields {.inline.} =
  volatileLoad(cast[ptr DBG_DBGMCU_IDCODE_Fields](reg.loc))

proc read*(reg: DBG_DBGMCU_CR_Type): DBG_DBGMCU_CR_Fields {.inline.} =
  volatileLoad(cast[ptr DBG_DBGMCU_CR_Fields](reg.loc))

proc write*(reg: DBG_DBGMCU_CR_Type, val: DBG_DBGMCU_CR_Fields) {.inline.} =
  volatileStore(cast[ptr DBG_DBGMCU_CR_Fields](reg.loc), val)

proc write*(reg: DBG_DBGMCU_CR_Type, DBG_SLEEP: bool = false, DBG_STOP: bool = false, DBG_STANDBY: bool = false, TRACE_IOEN: bool = false, TRACE_MODE: uint32 = 0) =
  var x: uint32
  x.setMask((DBG_SLEEP.uint32 shl 0).masked(0 .. 0))
  x.setMask((DBG_STOP.uint32 shl 1).masked(1 .. 1))
  x.setMask((DBG_STANDBY.uint32 shl 2).masked(2 .. 2))
  x.setMask((TRACE_IOEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((TRACE_MODE shl 6).masked(6 .. 7))
  reg.write x.DBG_DBGMCU_CR_Fields

template modifyIt*(reg: DBG_DBGMCU_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DBG_DBGMCU_APB1_FZ_Type): DBG_DBGMCU_APB1_FZ_Fields {.inline.} =
  volatileLoad(cast[ptr DBG_DBGMCU_APB1_FZ_Fields](reg.loc))

proc write*(reg: DBG_DBGMCU_APB1_FZ_Type, val: DBG_DBGMCU_APB1_FZ_Fields) {.inline.} =
  volatileStore(cast[ptr DBG_DBGMCU_APB1_FZ_Fields](reg.loc), val)

proc write*(reg: DBG_DBGMCU_APB1_FZ_Type, DBG_TIM2_STOP: bool = false, DBG_TIM3_STOP: bool = false, DBG_TIM4_STOP: bool = false, DBG_TIM5_STOP: bool = false, DBG_TIM6_STOP: bool = false, DBG_TIM7_STOP: bool = false, DBG_TIM12_STOP: bool = false, DBG_TIM13_STOP: bool = false, DBG_TIM14_STOP: bool = false, DBG_RTC_STOP: bool = false, DBG_WWDG_STOP: bool = false, DBG_IWDEG_STOP: bool = false, DBG_J2C1_SMBUS_TIMEOUT: bool = false, DBG_J2C2_SMBUS_TIMEOUT: bool = false, DBG_J2C3SMBUS_TIMEOUT: bool = false, DBG_I2CFMP_SMBUS_TIMEOUT: bool = false, DBG_CAN1_STOP: bool = false, DBG_CAN2_STOP: bool = false) =
  var x: uint32
  x.setMask((DBG_TIM2_STOP.uint32 shl 0).masked(0 .. 0))
  x.setMask((DBG_TIM3_STOP.uint32 shl 1).masked(1 .. 1))
  x.setMask((DBG_TIM4_STOP.uint32 shl 2).masked(2 .. 2))
  x.setMask((DBG_TIM5_STOP.uint32 shl 3).masked(3 .. 3))
  x.setMask((DBG_TIM6_STOP.uint32 shl 4).masked(4 .. 4))
  x.setMask((DBG_TIM7_STOP.uint32 shl 5).masked(5 .. 5))
  x.setMask((DBG_TIM12_STOP.uint32 shl 6).masked(6 .. 6))
  x.setMask((DBG_TIM13_STOP.uint32 shl 7).masked(7 .. 7))
  x.setMask((DBG_TIM14_STOP.uint32 shl 8).masked(8 .. 8))
  x.setMask((DBG_RTC_STOP.uint32 shl 10).masked(10 .. 10))
  x.setMask((DBG_WWDG_STOP.uint32 shl 11).masked(11 .. 11))
  x.setMask((DBG_IWDEG_STOP.uint32 shl 12).masked(12 .. 12))
  x.setMask((DBG_J2C1_SMBUS_TIMEOUT.uint32 shl 21).masked(21 .. 21))
  x.setMask((DBG_J2C2_SMBUS_TIMEOUT.uint32 shl 22).masked(22 .. 22))
  x.setMask((DBG_J2C3SMBUS_TIMEOUT.uint32 shl 23).masked(23 .. 23))
  x.setMask((DBG_I2CFMP_SMBUS_TIMEOUT.uint32 shl 24).masked(24 .. 24))
  x.setMask((DBG_CAN1_STOP.uint32 shl 25).masked(25 .. 25))
  x.setMask((DBG_CAN2_STOP.uint32 shl 26).masked(26 .. 26))
  reg.write x.DBG_DBGMCU_APB1_FZ_Fields

template modifyIt*(reg: DBG_DBGMCU_APB1_FZ_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DBG_DBGMCU_APB2_FZ_Type): DBG_DBGMCU_APB2_FZ_Fields {.inline.} =
  volatileLoad(cast[ptr DBG_DBGMCU_APB2_FZ_Fields](reg.loc))

proc write*(reg: DBG_DBGMCU_APB2_FZ_Type, val: DBG_DBGMCU_APB2_FZ_Fields) {.inline.} =
  volatileStore(cast[ptr DBG_DBGMCU_APB2_FZ_Fields](reg.loc), val)

proc write*(reg: DBG_DBGMCU_APB2_FZ_Type, DBG_TIM1_STOP: bool = false, DBG_TIM8_STOP: bool = false, DBG_TIM9_STOP: bool = false, DBG_TIM10_STOP: bool = false, DBG_TIM11_STOP: bool = false) =
  var x: uint32
  x.setMask((DBG_TIM1_STOP.uint32 shl 0).masked(0 .. 0))
  x.setMask((DBG_TIM8_STOP.uint32 shl 1).masked(1 .. 1))
  x.setMask((DBG_TIM9_STOP.uint32 shl 16).masked(16 .. 16))
  x.setMask((DBG_TIM10_STOP.uint32 shl 17).masked(17 .. 17))
  x.setMask((DBG_TIM11_STOP.uint32 shl 18).masked(18 .. 18))
  reg.write x.DBG_DBGMCU_APB2_FZ_Fields

template modifyIt*(reg: DBG_DBGMCU_APB2_FZ_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func DEV_ID*(r: DBG_DBGMCU_IDCODE_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

func REV_ID*(r: DBG_DBGMCU_IDCODE_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

func DBG_SLEEP*(r: DBG_DBGMCU_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `DBG_SLEEP=`*(r: var DBG_DBGMCU_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DBG_DBGMCU_CR_Fields

func DBG_STOP*(r: DBG_DBGMCU_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DBG_STOP=`*(r: var DBG_DBGMCU_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DBG_DBGMCU_CR_Fields

func DBG_STANDBY*(r: DBG_DBGMCU_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DBG_STANDBY=`*(r: var DBG_DBGMCU_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DBG_DBGMCU_CR_Fields

func TRACE_IOEN*(r: DBG_DBGMCU_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TRACE_IOEN=`*(r: var DBG_DBGMCU_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DBG_DBGMCU_CR_Fields

func TRACE_MODE*(r: DBG_DBGMCU_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `TRACE_MODE=`*(r: var DBG_DBGMCU_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DBG_DBGMCU_CR_Fields

func DBG_TIM2_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `DBG_TIM2_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_TIM3_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DBG_TIM3_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_TIM4_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DBG_TIM4_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_TIM5_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `DBG_TIM5_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_TIM6_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DBG_TIM6_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_TIM7_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `DBG_TIM7_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_TIM12_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `DBG_TIM12_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_TIM13_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `DBG_TIM13_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_TIM14_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `DBG_TIM14_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_RTC_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DBG_RTC_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_WWDG_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DBG_WWDG_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_IWDEG_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `DBG_IWDEG_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_J2C1_SMBUS_TIMEOUT*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `DBG_J2C1_SMBUS_TIMEOUT=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_J2C2_SMBUS_TIMEOUT*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `DBG_J2C2_SMBUS_TIMEOUT=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_J2C3SMBUS_TIMEOUT*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `DBG_J2C3SMBUS_TIMEOUT=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_I2CFMP_SMBUS_TIMEOUT*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `DBG_I2CFMP_SMBUS_TIMEOUT=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_CAN1_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `DBG_CAN1_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_CAN2_STOP*(r: DBG_DBGMCU_APB1_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `DBG_CAN2_STOP=`*(r: var DBG_DBGMCU_APB1_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.DBG_DBGMCU_APB1_FZ_Fields

func DBG_TIM1_STOP*(r: DBG_DBGMCU_APB2_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `DBG_TIM1_STOP=`*(r: var DBG_DBGMCU_APB2_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DBG_DBGMCU_APB2_FZ_Fields

func DBG_TIM8_STOP*(r: DBG_DBGMCU_APB2_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DBG_TIM8_STOP=`*(r: var DBG_DBGMCU_APB2_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DBG_DBGMCU_APB2_FZ_Fields

func DBG_TIM9_STOP*(r: DBG_DBGMCU_APB2_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `DBG_TIM9_STOP=`*(r: var DBG_DBGMCU_APB2_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.DBG_DBGMCU_APB2_FZ_Fields

func DBG_TIM10_STOP*(r: DBG_DBGMCU_APB2_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `DBG_TIM10_STOP=`*(r: var DBG_DBGMCU_APB2_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.DBG_DBGMCU_APB2_FZ_Fields

func DBG_TIM11_STOP*(r: DBG_DBGMCU_APB2_FZ_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `DBG_TIM11_STOP=`*(r: var DBG_DBGMCU_APB2_FZ_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DBG_DBGMCU_APB2_FZ_Fields

type
  DMA2_LISR_Fields* = distinct uint32
  DMA2_HISR_Fields* = distinct uint32
  DMA2_LIFCR_Fields* = distinct uint32
  DMA2_HIFCR_Fields* = distinct uint32
  DMA2_S0CR_Fields* = distinct uint32
  DMA2_S0NDTR_Fields* = distinct uint32
  DMA2_S0FCR_Fields* = distinct uint32
  DMA2_S1CR_Fields* = distinct uint32
  DMA2_S1NDTR_Fields* = distinct uint32
  DMA2_S1FCR_Fields* = distinct uint32
  DMA2_S2CR_Fields* = distinct uint32
  DMA2_S2NDTR_Fields* = distinct uint32
  DMA2_S2FCR_Fields* = distinct uint32
  DMA2_S3CR_Fields* = distinct uint32
  DMA2_S3NDTR_Fields* = distinct uint32
  DMA2_S3FCR_Fields* = distinct uint32
  DMA2_S4CR_Fields* = distinct uint32
  DMA2_S4NDTR_Fields* = distinct uint32
  DMA2_S4FCR_Fields* = distinct uint32
  DMA2_S5CR_Fields* = distinct uint32
  DMA2_S5NDTR_Fields* = distinct uint32
  DMA2_S5FCR_Fields* = distinct uint32
  DMA2_S6CR_Fields* = distinct uint32
  DMA2_S6NDTR_Fields* = distinct uint32
  DMA2_S6FCR_Fields* = distinct uint32
  DMA2_S7CR_Fields* = distinct uint32
  DMA2_S7NDTR_Fields* = distinct uint32
  DMA2_S7FCR_Fields* = distinct uint32

proc read*(reg: DMA2_LISR_Type): DMA2_LISR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_LISR_Fields](reg.loc))

proc read*(reg: DMA2_HISR_Type): DMA2_HISR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_HISR_Fields](reg.loc))

proc read*(reg: DMA2_LIFCR_Type): DMA2_LIFCR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_LIFCR_Fields](reg.loc))

proc write*(reg: DMA2_LIFCR_Type, val: DMA2_LIFCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_LIFCR_Fields](reg.loc), val)

proc write*(reg: DMA2_LIFCR_Type, CTCIF3: bool = false, CHTIF3: bool = false, CTEIF3: bool = false, CDMEIF3: bool = false, CFEIF3: bool = false, CTCIF2: bool = false, CHTIF2: bool = false, CTEIF2: bool = false, CDMEIF2: bool = false, CFEIF2: bool = false, CTCIF1: bool = false, CHTIF1: bool = false, CTEIF1: bool = false, CDMEIF1: bool = false, CFEIF1: bool = false, CTCIF0: bool = false, CHTIF0: bool = false, CTEIF0: bool = false, CDMEIF0: bool = false, CFEIF0: bool = false) =
  var x: uint32
  x.setMask((CTCIF3.uint32 shl 27).masked(27 .. 27))
  x.setMask((CHTIF3.uint32 shl 26).masked(26 .. 26))
  x.setMask((CTEIF3.uint32 shl 25).masked(25 .. 25))
  x.setMask((CDMEIF3.uint32 shl 24).masked(24 .. 24))
  x.setMask((CFEIF3.uint32 shl 22).masked(22 .. 22))
  x.setMask((CTCIF2.uint32 shl 21).masked(21 .. 21))
  x.setMask((CHTIF2.uint32 shl 20).masked(20 .. 20))
  x.setMask((CTEIF2.uint32 shl 19).masked(19 .. 19))
  x.setMask((CDMEIF2.uint32 shl 18).masked(18 .. 18))
  x.setMask((CFEIF2.uint32 shl 16).masked(16 .. 16))
  x.setMask((CTCIF1.uint32 shl 11).masked(11 .. 11))
  x.setMask((CHTIF1.uint32 shl 10).masked(10 .. 10))
  x.setMask((CTEIF1.uint32 shl 9).masked(9 .. 9))
  x.setMask((CDMEIF1.uint32 shl 8).masked(8 .. 8))
  x.setMask((CFEIF1.uint32 shl 6).masked(6 .. 6))
  x.setMask((CTCIF0.uint32 shl 5).masked(5 .. 5))
  x.setMask((CHTIF0.uint32 shl 4).masked(4 .. 4))
  x.setMask((CTEIF0.uint32 shl 3).masked(3 .. 3))
  x.setMask((CDMEIF0.uint32 shl 2).masked(2 .. 2))
  x.setMask((CFEIF0.uint32 shl 0).masked(0 .. 0))
  reg.write x.DMA2_LIFCR_Fields

template modifyIt*(reg: DMA2_LIFCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_HIFCR_Type): DMA2_HIFCR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_HIFCR_Fields](reg.loc))

proc write*(reg: DMA2_HIFCR_Type, val: DMA2_HIFCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_HIFCR_Fields](reg.loc), val)

proc write*(reg: DMA2_HIFCR_Type, CTCIF7: bool = false, CHTIF7: bool = false, CTEIF7: bool = false, CDMEIF7: bool = false, CFEIF7: bool = false, CTCIF6: bool = false, CHTIF6: bool = false, CTEIF6: bool = false, CDMEIF6: bool = false, CFEIF6: bool = false, CTCIF5: bool = false, CHTIF5: bool = false, CTEIF5: bool = false, CDMEIF5: bool = false, CFEIF5: bool = false, CTCIF4: bool = false, CHTIF4: bool = false, CTEIF4: bool = false, CDMEIF4: bool = false, CFEIF4: bool = false) =
  var x: uint32
  x.setMask((CTCIF7.uint32 shl 27).masked(27 .. 27))
  x.setMask((CHTIF7.uint32 shl 26).masked(26 .. 26))
  x.setMask((CTEIF7.uint32 shl 25).masked(25 .. 25))
  x.setMask((CDMEIF7.uint32 shl 24).masked(24 .. 24))
  x.setMask((CFEIF7.uint32 shl 22).masked(22 .. 22))
  x.setMask((CTCIF6.uint32 shl 21).masked(21 .. 21))
  x.setMask((CHTIF6.uint32 shl 20).masked(20 .. 20))
  x.setMask((CTEIF6.uint32 shl 19).masked(19 .. 19))
  x.setMask((CDMEIF6.uint32 shl 18).masked(18 .. 18))
  x.setMask((CFEIF6.uint32 shl 16).masked(16 .. 16))
  x.setMask((CTCIF5.uint32 shl 11).masked(11 .. 11))
  x.setMask((CHTIF5.uint32 shl 10).masked(10 .. 10))
  x.setMask((CTEIF5.uint32 shl 9).masked(9 .. 9))
  x.setMask((CDMEIF5.uint32 shl 8).masked(8 .. 8))
  x.setMask((CFEIF5.uint32 shl 6).masked(6 .. 6))
  x.setMask((CTCIF4.uint32 shl 5).masked(5 .. 5))
  x.setMask((CHTIF4.uint32 shl 4).masked(4 .. 4))
  x.setMask((CTEIF4.uint32 shl 3).masked(3 .. 3))
  x.setMask((CDMEIF4.uint32 shl 2).masked(2 .. 2))
  x.setMask((CFEIF4.uint32 shl 0).masked(0 .. 0))
  reg.write x.DMA2_HIFCR_Fields

template modifyIt*(reg: DMA2_HIFCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S0CR_Type): DMA2_S0CR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S0CR_Fields](reg.loc))

proc write*(reg: DMA2_S0CR_Type, val: DMA2_S0CR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S0CR_Fields](reg.loc), val)

proc write*(reg: DMA2_S0CR_Type, CHSEL: uint32 = 0, MBURST: uint32 = 0, PBURST: uint32 = 0, CT: bool = false, DBM: bool = false, PL: uint32 = 0, PINCOS: bool = false, MSIZE: uint32 = 0, PSIZE: uint32 = 0, MINC: bool = false, PINC: bool = false, CIRC: bool = false, DIR: uint32 = 0, PFCTRL: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DMEIE: bool = false, EN: bool = false) =
  var x: uint32
  x.setMask((CHSEL shl 25).masked(25 .. 27))
  x.setMask((MBURST shl 23).masked(23 .. 24))
  x.setMask((PBURST shl 21).masked(21 .. 22))
  x.setMask((CT.uint32 shl 19).masked(19 .. 19))
  x.setMask((DBM.uint32 shl 18).masked(18 .. 18))
  x.setMask((PL shl 16).masked(16 .. 17))
  x.setMask((PINCOS.uint32 shl 15).masked(15 .. 15))
  x.setMask((MSIZE shl 13).masked(13 .. 14))
  x.setMask((PSIZE shl 11).masked(11 .. 12))
  x.setMask((MINC.uint32 shl 10).masked(10 .. 10))
  x.setMask((PINC.uint32 shl 9).masked(9 .. 9))
  x.setMask((CIRC.uint32 shl 8).masked(8 .. 8))
  x.setMask((DIR shl 6).masked(6 .. 7))
  x.setMask((PFCTRL.uint32 shl 5).masked(5 .. 5))
  x.setMask((TCIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((HTIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((TEIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((DMEIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  reg.write x.DMA2_S0CR_Fields

template modifyIt*(reg: DMA2_S0CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S0NDTR_Type): DMA2_S0NDTR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S0NDTR_Fields](reg.loc))

proc write*(reg: DMA2_S0NDTR_Type, val: DMA2_S0NDTR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S0NDTR_Fields](reg.loc), val)

proc write*(reg: DMA2_S0NDTR_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA2_S0NDTR_Fields

template modifyIt*(reg: DMA2_S0NDTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S0PAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S0PAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S0PAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S0M0AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S0M0AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S0M0AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S0M1AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S0M1AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S0M1AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S0FCR_Type): DMA2_S0FCR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S0FCR_Fields](reg.loc))

proc write*(reg: DMA2_S0FCR_Type, val: DMA2_S0FCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S0FCR_Fields](reg.loc), val)

proc write*(reg: DMA2_S0FCR_Type, FEIE: bool = false, DMDIS: bool = false, FTH: uint32 = 1) =
  var x: uint32
  x.setMask((FEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMDIS.uint32 shl 2).masked(2 .. 2))
  x.setMask((FTH shl 0).masked(0 .. 1))
  reg.write x.DMA2_S0FCR_Fields

template modifyIt*(reg: DMA2_S0FCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S1CR_Type): DMA2_S1CR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S1CR_Fields](reg.loc))

proc write*(reg: DMA2_S1CR_Type, val: DMA2_S1CR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S1CR_Fields](reg.loc), val)

proc write*(reg: DMA2_S1CR_Type, CHSEL: uint32 = 0, MBURST: uint32 = 0, PBURST: uint32 = 0, ACK: bool = false, CT: bool = false, DBM: bool = false, PL: uint32 = 0, PINCOS: bool = false, MSIZE: uint32 = 0, PSIZE: uint32 = 0, MINC: bool = false, PINC: bool = false, CIRC: bool = false, DIR: uint32 = 0, PFCTRL: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DMEIE: bool = false, EN: bool = false) =
  var x: uint32
  x.setMask((CHSEL shl 25).masked(25 .. 27))
  x.setMask((MBURST shl 23).masked(23 .. 24))
  x.setMask((PBURST shl 21).masked(21 .. 22))
  x.setMask((ACK.uint32 shl 20).masked(20 .. 20))
  x.setMask((CT.uint32 shl 19).masked(19 .. 19))
  x.setMask((DBM.uint32 shl 18).masked(18 .. 18))
  x.setMask((PL shl 16).masked(16 .. 17))
  x.setMask((PINCOS.uint32 shl 15).masked(15 .. 15))
  x.setMask((MSIZE shl 13).masked(13 .. 14))
  x.setMask((PSIZE shl 11).masked(11 .. 12))
  x.setMask((MINC.uint32 shl 10).masked(10 .. 10))
  x.setMask((PINC.uint32 shl 9).masked(9 .. 9))
  x.setMask((CIRC.uint32 shl 8).masked(8 .. 8))
  x.setMask((DIR shl 6).masked(6 .. 7))
  x.setMask((PFCTRL.uint32 shl 5).masked(5 .. 5))
  x.setMask((TCIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((HTIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((TEIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((DMEIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  reg.write x.DMA2_S1CR_Fields

template modifyIt*(reg: DMA2_S1CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S1NDTR_Type): DMA2_S1NDTR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S1NDTR_Fields](reg.loc))

proc write*(reg: DMA2_S1NDTR_Type, val: DMA2_S1NDTR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S1NDTR_Fields](reg.loc), val)

proc write*(reg: DMA2_S1NDTR_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA2_S1NDTR_Fields

template modifyIt*(reg: DMA2_S1NDTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S1PAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S1PAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S1PAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S1M0AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S1M0AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S1M0AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S1M1AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S1M1AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S1M1AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S1FCR_Type): DMA2_S1FCR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S1FCR_Fields](reg.loc))

proc write*(reg: DMA2_S1FCR_Type, val: DMA2_S1FCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S1FCR_Fields](reg.loc), val)

proc write*(reg: DMA2_S1FCR_Type, FEIE: bool = false, DMDIS: bool = false, FTH: uint32 = 1) =
  var x: uint32
  x.setMask((FEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMDIS.uint32 shl 2).masked(2 .. 2))
  x.setMask((FTH shl 0).masked(0 .. 1))
  reg.write x.DMA2_S1FCR_Fields

template modifyIt*(reg: DMA2_S1FCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S2CR_Type): DMA2_S2CR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S2CR_Fields](reg.loc))

proc write*(reg: DMA2_S2CR_Type, val: DMA2_S2CR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S2CR_Fields](reg.loc), val)

proc write*(reg: DMA2_S2CR_Type, CHSEL: uint32 = 0, MBURST: uint32 = 0, PBURST: uint32 = 0, ACK: bool = false, CT: bool = false, DBM: bool = false, PL: uint32 = 0, PINCOS: bool = false, MSIZE: uint32 = 0, PSIZE: uint32 = 0, MINC: bool = false, PINC: bool = false, CIRC: bool = false, DIR: uint32 = 0, PFCTRL: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DMEIE: bool = false, EN: bool = false) =
  var x: uint32
  x.setMask((CHSEL shl 25).masked(25 .. 27))
  x.setMask((MBURST shl 23).masked(23 .. 24))
  x.setMask((PBURST shl 21).masked(21 .. 22))
  x.setMask((ACK.uint32 shl 20).masked(20 .. 20))
  x.setMask((CT.uint32 shl 19).masked(19 .. 19))
  x.setMask((DBM.uint32 shl 18).masked(18 .. 18))
  x.setMask((PL shl 16).masked(16 .. 17))
  x.setMask((PINCOS.uint32 shl 15).masked(15 .. 15))
  x.setMask((MSIZE shl 13).masked(13 .. 14))
  x.setMask((PSIZE shl 11).masked(11 .. 12))
  x.setMask((MINC.uint32 shl 10).masked(10 .. 10))
  x.setMask((PINC.uint32 shl 9).masked(9 .. 9))
  x.setMask((CIRC.uint32 shl 8).masked(8 .. 8))
  x.setMask((DIR shl 6).masked(6 .. 7))
  x.setMask((PFCTRL.uint32 shl 5).masked(5 .. 5))
  x.setMask((TCIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((HTIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((TEIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((DMEIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  reg.write x.DMA2_S2CR_Fields

template modifyIt*(reg: DMA2_S2CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S2NDTR_Type): DMA2_S2NDTR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S2NDTR_Fields](reg.loc))

proc write*(reg: DMA2_S2NDTR_Type, val: DMA2_S2NDTR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S2NDTR_Fields](reg.loc), val)

proc write*(reg: DMA2_S2NDTR_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA2_S2NDTR_Fields

template modifyIt*(reg: DMA2_S2NDTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S2PAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S2PAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S2PAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S2M0AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S2M0AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S2M0AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S2M1AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S2M1AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S2M1AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S2FCR_Type): DMA2_S2FCR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S2FCR_Fields](reg.loc))

proc write*(reg: DMA2_S2FCR_Type, val: DMA2_S2FCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S2FCR_Fields](reg.loc), val)

proc write*(reg: DMA2_S2FCR_Type, FEIE: bool = false, DMDIS: bool = false, FTH: uint32 = 1) =
  var x: uint32
  x.setMask((FEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMDIS.uint32 shl 2).masked(2 .. 2))
  x.setMask((FTH shl 0).masked(0 .. 1))
  reg.write x.DMA2_S2FCR_Fields

template modifyIt*(reg: DMA2_S2FCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S3CR_Type): DMA2_S3CR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S3CR_Fields](reg.loc))

proc write*(reg: DMA2_S3CR_Type, val: DMA2_S3CR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S3CR_Fields](reg.loc), val)

proc write*(reg: DMA2_S3CR_Type, CHSEL: uint32 = 0, MBURST: uint32 = 0, PBURST: uint32 = 0, ACK: bool = false, CT: bool = false, DBM: bool = false, PL: uint32 = 0, PINCOS: bool = false, MSIZE: uint32 = 0, PSIZE: uint32 = 0, MINC: bool = false, PINC: bool = false, CIRC: bool = false, DIR: uint32 = 0, PFCTRL: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DMEIE: bool = false, EN: bool = false) =
  var x: uint32
  x.setMask((CHSEL shl 25).masked(25 .. 27))
  x.setMask((MBURST shl 23).masked(23 .. 24))
  x.setMask((PBURST shl 21).masked(21 .. 22))
  x.setMask((ACK.uint32 shl 20).masked(20 .. 20))
  x.setMask((CT.uint32 shl 19).masked(19 .. 19))
  x.setMask((DBM.uint32 shl 18).masked(18 .. 18))
  x.setMask((PL shl 16).masked(16 .. 17))
  x.setMask((PINCOS.uint32 shl 15).masked(15 .. 15))
  x.setMask((MSIZE shl 13).masked(13 .. 14))
  x.setMask((PSIZE shl 11).masked(11 .. 12))
  x.setMask((MINC.uint32 shl 10).masked(10 .. 10))
  x.setMask((PINC.uint32 shl 9).masked(9 .. 9))
  x.setMask((CIRC.uint32 shl 8).masked(8 .. 8))
  x.setMask((DIR shl 6).masked(6 .. 7))
  x.setMask((PFCTRL.uint32 shl 5).masked(5 .. 5))
  x.setMask((TCIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((HTIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((TEIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((DMEIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  reg.write x.DMA2_S3CR_Fields

template modifyIt*(reg: DMA2_S3CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S3NDTR_Type): DMA2_S3NDTR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S3NDTR_Fields](reg.loc))

proc write*(reg: DMA2_S3NDTR_Type, val: DMA2_S3NDTR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S3NDTR_Fields](reg.loc), val)

proc write*(reg: DMA2_S3NDTR_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA2_S3NDTR_Fields

template modifyIt*(reg: DMA2_S3NDTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S3PAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S3PAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S3PAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S3M0AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S3M0AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S3M0AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S3M1AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S3M1AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S3M1AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S3FCR_Type): DMA2_S3FCR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S3FCR_Fields](reg.loc))

proc write*(reg: DMA2_S3FCR_Type, val: DMA2_S3FCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S3FCR_Fields](reg.loc), val)

proc write*(reg: DMA2_S3FCR_Type, FEIE: bool = false, DMDIS: bool = false, FTH: uint32 = 1) =
  var x: uint32
  x.setMask((FEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMDIS.uint32 shl 2).masked(2 .. 2))
  x.setMask((FTH shl 0).masked(0 .. 1))
  reg.write x.DMA2_S3FCR_Fields

template modifyIt*(reg: DMA2_S3FCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S4CR_Type): DMA2_S4CR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S4CR_Fields](reg.loc))

proc write*(reg: DMA2_S4CR_Type, val: DMA2_S4CR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S4CR_Fields](reg.loc), val)

proc write*(reg: DMA2_S4CR_Type, CHSEL: uint32 = 0, MBURST: uint32 = 0, PBURST: uint32 = 0, ACK: bool = false, CT: bool = false, DBM: bool = false, PL: uint32 = 0, PINCOS: bool = false, MSIZE: uint32 = 0, PSIZE: uint32 = 0, MINC: bool = false, PINC: bool = false, CIRC: bool = false, DIR: uint32 = 0, PFCTRL: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DMEIE: bool = false, EN: bool = false) =
  var x: uint32
  x.setMask((CHSEL shl 25).masked(25 .. 27))
  x.setMask((MBURST shl 23).masked(23 .. 24))
  x.setMask((PBURST shl 21).masked(21 .. 22))
  x.setMask((ACK.uint32 shl 20).masked(20 .. 20))
  x.setMask((CT.uint32 shl 19).masked(19 .. 19))
  x.setMask((DBM.uint32 shl 18).masked(18 .. 18))
  x.setMask((PL shl 16).masked(16 .. 17))
  x.setMask((PINCOS.uint32 shl 15).masked(15 .. 15))
  x.setMask((MSIZE shl 13).masked(13 .. 14))
  x.setMask((PSIZE shl 11).masked(11 .. 12))
  x.setMask((MINC.uint32 shl 10).masked(10 .. 10))
  x.setMask((PINC.uint32 shl 9).masked(9 .. 9))
  x.setMask((CIRC.uint32 shl 8).masked(8 .. 8))
  x.setMask((DIR shl 6).masked(6 .. 7))
  x.setMask((PFCTRL.uint32 shl 5).masked(5 .. 5))
  x.setMask((TCIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((HTIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((TEIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((DMEIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  reg.write x.DMA2_S4CR_Fields

template modifyIt*(reg: DMA2_S4CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S4NDTR_Type): DMA2_S4NDTR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S4NDTR_Fields](reg.loc))

proc write*(reg: DMA2_S4NDTR_Type, val: DMA2_S4NDTR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S4NDTR_Fields](reg.loc), val)

proc write*(reg: DMA2_S4NDTR_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA2_S4NDTR_Fields

template modifyIt*(reg: DMA2_S4NDTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S4PAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S4PAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S4PAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S4M0AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S4M0AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S4M0AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S4M1AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S4M1AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S4M1AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S4FCR_Type): DMA2_S4FCR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S4FCR_Fields](reg.loc))

proc write*(reg: DMA2_S4FCR_Type, val: DMA2_S4FCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S4FCR_Fields](reg.loc), val)

proc write*(reg: DMA2_S4FCR_Type, FEIE: bool = false, DMDIS: bool = false, FTH: uint32 = 1) =
  var x: uint32
  x.setMask((FEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMDIS.uint32 shl 2).masked(2 .. 2))
  x.setMask((FTH shl 0).masked(0 .. 1))
  reg.write x.DMA2_S4FCR_Fields

template modifyIt*(reg: DMA2_S4FCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S5CR_Type): DMA2_S5CR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S5CR_Fields](reg.loc))

proc write*(reg: DMA2_S5CR_Type, val: DMA2_S5CR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S5CR_Fields](reg.loc), val)

proc write*(reg: DMA2_S5CR_Type, CHSEL: uint32 = 0, MBURST: uint32 = 0, PBURST: uint32 = 0, ACK: bool = false, CT: bool = false, DBM: bool = false, PL: uint32 = 0, PINCOS: bool = false, MSIZE: uint32 = 0, PSIZE: uint32 = 0, MINC: bool = false, PINC: bool = false, CIRC: bool = false, DIR: uint32 = 0, PFCTRL: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DMEIE: bool = false, EN: bool = false) =
  var x: uint32
  x.setMask((CHSEL shl 25).masked(25 .. 27))
  x.setMask((MBURST shl 23).masked(23 .. 24))
  x.setMask((PBURST shl 21).masked(21 .. 22))
  x.setMask((ACK.uint32 shl 20).masked(20 .. 20))
  x.setMask((CT.uint32 shl 19).masked(19 .. 19))
  x.setMask((DBM.uint32 shl 18).masked(18 .. 18))
  x.setMask((PL shl 16).masked(16 .. 17))
  x.setMask((PINCOS.uint32 shl 15).masked(15 .. 15))
  x.setMask((MSIZE shl 13).masked(13 .. 14))
  x.setMask((PSIZE shl 11).masked(11 .. 12))
  x.setMask((MINC.uint32 shl 10).masked(10 .. 10))
  x.setMask((PINC.uint32 shl 9).masked(9 .. 9))
  x.setMask((CIRC.uint32 shl 8).masked(8 .. 8))
  x.setMask((DIR shl 6).masked(6 .. 7))
  x.setMask((PFCTRL.uint32 shl 5).masked(5 .. 5))
  x.setMask((TCIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((HTIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((TEIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((DMEIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  reg.write x.DMA2_S5CR_Fields

template modifyIt*(reg: DMA2_S5CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S5NDTR_Type): DMA2_S5NDTR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S5NDTR_Fields](reg.loc))

proc write*(reg: DMA2_S5NDTR_Type, val: DMA2_S5NDTR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S5NDTR_Fields](reg.loc), val)

proc write*(reg: DMA2_S5NDTR_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA2_S5NDTR_Fields

template modifyIt*(reg: DMA2_S5NDTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S5PAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S5PAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S5PAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S5M0AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S5M0AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S5M0AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S5M1AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S5M1AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S5M1AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S5FCR_Type): DMA2_S5FCR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S5FCR_Fields](reg.loc))

proc write*(reg: DMA2_S5FCR_Type, val: DMA2_S5FCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S5FCR_Fields](reg.loc), val)

proc write*(reg: DMA2_S5FCR_Type, FEIE: bool = false, DMDIS: bool = false, FTH: uint32 = 1) =
  var x: uint32
  x.setMask((FEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMDIS.uint32 shl 2).masked(2 .. 2))
  x.setMask((FTH shl 0).masked(0 .. 1))
  reg.write x.DMA2_S5FCR_Fields

template modifyIt*(reg: DMA2_S5FCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S6CR_Type): DMA2_S6CR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S6CR_Fields](reg.loc))

proc write*(reg: DMA2_S6CR_Type, val: DMA2_S6CR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S6CR_Fields](reg.loc), val)

proc write*(reg: DMA2_S6CR_Type, CHSEL: uint32 = 0, MBURST: uint32 = 0, PBURST: uint32 = 0, ACK: bool = false, CT: bool = false, DBM: bool = false, PL: uint32 = 0, PINCOS: bool = false, MSIZE: uint32 = 0, PSIZE: uint32 = 0, MINC: bool = false, PINC: bool = false, CIRC: bool = false, DIR: uint32 = 0, PFCTRL: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DMEIE: bool = false, EN: bool = false) =
  var x: uint32
  x.setMask((CHSEL shl 25).masked(25 .. 27))
  x.setMask((MBURST shl 23).masked(23 .. 24))
  x.setMask((PBURST shl 21).masked(21 .. 22))
  x.setMask((ACK.uint32 shl 20).masked(20 .. 20))
  x.setMask((CT.uint32 shl 19).masked(19 .. 19))
  x.setMask((DBM.uint32 shl 18).masked(18 .. 18))
  x.setMask((PL shl 16).masked(16 .. 17))
  x.setMask((PINCOS.uint32 shl 15).masked(15 .. 15))
  x.setMask((MSIZE shl 13).masked(13 .. 14))
  x.setMask((PSIZE shl 11).masked(11 .. 12))
  x.setMask((MINC.uint32 shl 10).masked(10 .. 10))
  x.setMask((PINC.uint32 shl 9).masked(9 .. 9))
  x.setMask((CIRC.uint32 shl 8).masked(8 .. 8))
  x.setMask((DIR shl 6).masked(6 .. 7))
  x.setMask((PFCTRL.uint32 shl 5).masked(5 .. 5))
  x.setMask((TCIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((HTIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((TEIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((DMEIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  reg.write x.DMA2_S6CR_Fields

template modifyIt*(reg: DMA2_S6CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S6NDTR_Type): DMA2_S6NDTR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S6NDTR_Fields](reg.loc))

proc write*(reg: DMA2_S6NDTR_Type, val: DMA2_S6NDTR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S6NDTR_Fields](reg.loc), val)

proc write*(reg: DMA2_S6NDTR_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA2_S6NDTR_Fields

template modifyIt*(reg: DMA2_S6NDTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S6PAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S6PAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S6PAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S6M0AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S6M0AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S6M0AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S6M1AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S6M1AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S6M1AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S6FCR_Type): DMA2_S6FCR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S6FCR_Fields](reg.loc))

proc write*(reg: DMA2_S6FCR_Type, val: DMA2_S6FCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S6FCR_Fields](reg.loc), val)

proc write*(reg: DMA2_S6FCR_Type, FEIE: bool = false, DMDIS: bool = false, FTH: uint32 = 1) =
  var x: uint32
  x.setMask((FEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMDIS.uint32 shl 2).masked(2 .. 2))
  x.setMask((FTH shl 0).masked(0 .. 1))
  reg.write x.DMA2_S6FCR_Fields

template modifyIt*(reg: DMA2_S6FCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S7CR_Type): DMA2_S7CR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S7CR_Fields](reg.loc))

proc write*(reg: DMA2_S7CR_Type, val: DMA2_S7CR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S7CR_Fields](reg.loc), val)

proc write*(reg: DMA2_S7CR_Type, CHSEL: uint32 = 0, MBURST: uint32 = 0, PBURST: uint32 = 0, ACK: bool = false, CT: bool = false, DBM: bool = false, PL: uint32 = 0, PINCOS: bool = false, MSIZE: uint32 = 0, PSIZE: uint32 = 0, MINC: bool = false, PINC: bool = false, CIRC: bool = false, DIR: uint32 = 0, PFCTRL: bool = false, TCIE: bool = false, HTIE: bool = false, TEIE: bool = false, DMEIE: bool = false, EN: bool = false) =
  var x: uint32
  x.setMask((CHSEL shl 25).masked(25 .. 27))
  x.setMask((MBURST shl 23).masked(23 .. 24))
  x.setMask((PBURST shl 21).masked(21 .. 22))
  x.setMask((ACK.uint32 shl 20).masked(20 .. 20))
  x.setMask((CT.uint32 shl 19).masked(19 .. 19))
  x.setMask((DBM.uint32 shl 18).masked(18 .. 18))
  x.setMask((PL shl 16).masked(16 .. 17))
  x.setMask((PINCOS.uint32 shl 15).masked(15 .. 15))
  x.setMask((MSIZE shl 13).masked(13 .. 14))
  x.setMask((PSIZE shl 11).masked(11 .. 12))
  x.setMask((MINC.uint32 shl 10).masked(10 .. 10))
  x.setMask((PINC.uint32 shl 9).masked(9 .. 9))
  x.setMask((CIRC.uint32 shl 8).masked(8 .. 8))
  x.setMask((DIR shl 6).masked(6 .. 7))
  x.setMask((PFCTRL.uint32 shl 5).masked(5 .. 5))
  x.setMask((TCIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((HTIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((TEIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((DMEIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  reg.write x.DMA2_S7CR_Fields

template modifyIt*(reg: DMA2_S7CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S7NDTR_Type): DMA2_S7NDTR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S7NDTR_Fields](reg.loc))

proc write*(reg: DMA2_S7NDTR_Type, val: DMA2_S7NDTR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S7NDTR_Fields](reg.loc), val)

proc write*(reg: DMA2_S7NDTR_Type, NDT: uint32 = 0) =
  var x: uint32
  x.setMask((NDT shl 0).masked(0 .. 15))
  reg.write x.DMA2_S7NDTR_Fields

template modifyIt*(reg: DMA2_S7NDTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S7PAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S7PAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S7PAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S7M0AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S7M0AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S7M0AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S7M1AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: DMA2_S7M1AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: DMA2_S7M1AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DMA2_S7FCR_Type): DMA2_S7FCR_Fields {.inline.} =
  volatileLoad(cast[ptr DMA2_S7FCR_Fields](reg.loc))

proc write*(reg: DMA2_S7FCR_Type, val: DMA2_S7FCR_Fields) {.inline.} =
  volatileStore(cast[ptr DMA2_S7FCR_Fields](reg.loc), val)

proc write*(reg: DMA2_S7FCR_Type, FEIE: bool = false, DMDIS: bool = false, FTH: uint32 = 1) =
  var x: uint32
  x.setMask((FEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMDIS.uint32 shl 2).masked(2 .. 2))
  x.setMask((FTH shl 0).masked(0 .. 1))
  reg.write x.DMA2_S7FCR_Fields

template modifyIt*(reg: DMA2_S7FCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func TCIF3*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

func HTIF3*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

func TEIF3*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

func DMEIF3*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

func FEIF3*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

func TCIF2*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

func HTIF2*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

func TEIF2*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

func DMEIF2*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func FEIF2*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func TCIF1*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func HTIF1*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func TEIF1*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func DMEIF1*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func FEIF1*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func TCIF0*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func HTIF0*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func TEIF0*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func DMEIF0*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func FEIF0*(r: DMA2_LISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func TCIF7*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

func HTIF7*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

func TEIF7*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

func DMEIF7*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

func FEIF7*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

func TCIF6*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

func HTIF6*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

func TEIF6*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

func DMEIF6*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func FEIF6*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func TCIF5*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func HTIF5*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func TEIF5*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func DMEIF5*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func FEIF5*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func TCIF4*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func HTIF4*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func TEIF4*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func DMEIF4*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func FEIF4*(r: DMA2_HISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func CTCIF3*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `CTCIF3=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.DMA2_LIFCR_Fields

func CHTIF3*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `CHTIF3=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.DMA2_LIFCR_Fields

func CTEIF3*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `CTEIF3=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.DMA2_LIFCR_Fields

func CDMEIF3*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `CDMEIF3=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.DMA2_LIFCR_Fields

func CFEIF3*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `CFEIF3=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.DMA2_LIFCR_Fields

func CTCIF2*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `CTCIF2=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.DMA2_LIFCR_Fields

func CHTIF2*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `CHTIF2=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.DMA2_LIFCR_Fields

func CTEIF2*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CTEIF2=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA2_LIFCR_Fields

func CDMEIF2*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `CDMEIF2=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA2_LIFCR_Fields

func CFEIF2*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `CFEIF2=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.DMA2_LIFCR_Fields

func CTCIF1*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CTCIF1=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.DMA2_LIFCR_Fields

func CHTIF1*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CHTIF1=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA2_LIFCR_Fields

func CTEIF1*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CTEIF1=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA2_LIFCR_Fields

func CDMEIF1*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CDMEIF1=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA2_LIFCR_Fields

func CFEIF1*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `CFEIF1=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA2_LIFCR_Fields

func CTCIF0*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CTCIF0=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA2_LIFCR_Fields

func CHTIF0*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CHTIF0=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA2_LIFCR_Fields

func CTEIF0*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CTEIF0=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA2_LIFCR_Fields

func CDMEIF0*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CDMEIF0=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_LIFCR_Fields

func CFEIF0*(r: DMA2_LIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CFEIF0=`*(r: var DMA2_LIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA2_LIFCR_Fields

func CTCIF7*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `CTCIF7=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.DMA2_HIFCR_Fields

func CHTIF7*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `CHTIF7=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.DMA2_HIFCR_Fields

func CTEIF7*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `CTEIF7=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.DMA2_HIFCR_Fields

func CDMEIF7*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `CDMEIF7=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.DMA2_HIFCR_Fields

func CFEIF7*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `CFEIF7=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.DMA2_HIFCR_Fields

func CTCIF6*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `CTCIF6=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.DMA2_HIFCR_Fields

func CHTIF6*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `CHTIF6=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.DMA2_HIFCR_Fields

func CTEIF6*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CTEIF6=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA2_HIFCR_Fields

func CDMEIF6*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `CDMEIF6=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA2_HIFCR_Fields

func CFEIF6*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `CFEIF6=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.DMA2_HIFCR_Fields

func CTCIF5*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CTCIF5=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.DMA2_HIFCR_Fields

func CHTIF5*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CHTIF5=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA2_HIFCR_Fields

func CTEIF5*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CTEIF5=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA2_HIFCR_Fields

func CDMEIF5*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CDMEIF5=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA2_HIFCR_Fields

func CFEIF5*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `CFEIF5=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.DMA2_HIFCR_Fields

func CTCIF4*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CTCIF4=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA2_HIFCR_Fields

func CHTIF4*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CHTIF4=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA2_HIFCR_Fields

func CTEIF4*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CTEIF4=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA2_HIFCR_Fields

func CDMEIF4*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CDMEIF4=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_HIFCR_Fields

func CFEIF4*(r: DMA2_HIFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CFEIF4=`*(r: var DMA2_HIFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA2_HIFCR_Fields

func CHSEL*(r: DMA2_S0CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 27)

proc `CHSEL=`*(r: var DMA2_S0CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 27)
  tmp.setMask((val shl 25).masked(25 .. 27))
  r = tmp.DMA2_S0CR_Fields

func MBURST*(r: DMA2_S0CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(23 .. 24)

proc `MBURST=`*(r: var DMA2_S0CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 24)
  tmp.setMask((val shl 23).masked(23 .. 24))
  r = tmp.DMA2_S0CR_Fields

func PBURST*(r: DMA2_S0CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 22)

proc `PBURST=`*(r: var DMA2_S0CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 22)
  tmp.setMask((val shl 21).masked(21 .. 22))
  r = tmp.DMA2_S0CR_Fields

func CT*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CT=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA2_S0CR_Fields

func DBM*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `DBM=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA2_S0CR_Fields

func PL*(r: DMA2_S0CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PL=`*(r: var DMA2_S0CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.DMA2_S0CR_Fields

func PINCOS*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PINCOS=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.DMA2_S0CR_Fields

func MSIZE*(r: DMA2_S0CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `MSIZE=`*(r: var DMA2_S0CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.DMA2_S0CR_Fields

func PSIZE*(r: DMA2_S0CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `PSIZE=`*(r: var DMA2_S0CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.DMA2_S0CR_Fields

func MINC*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MINC=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA2_S0CR_Fields

func PINC*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PINC=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA2_S0CR_Fields

func CIRC*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CIRC=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA2_S0CR_Fields

func DIR*(r: DMA2_S0CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `DIR=`*(r: var DMA2_S0CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DMA2_S0CR_Fields

func PFCTRL*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PFCTRL=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA2_S0CR_Fields

func TCIE*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TCIE=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA2_S0CR_Fields

func HTIE*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HTIE=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA2_S0CR_Fields

func TEIE*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TEIE=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S0CR_Fields

func DMEIE*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DMEIE=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA2_S0CR_Fields

func EN*(r: DMA2_S0CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA2_S0CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA2_S0CR_Fields

func NDT*(r: DMA2_S0NDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA2_S0NDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA2_S0NDTR_Fields

func FEIE*(r: DMA2_S0FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FEIE=`*(r: var DMA2_S0FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA2_S0FCR_Fields

func FS*(r: DMA2_S0FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

func DMDIS*(r: DMA2_S0FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DMDIS=`*(r: var DMA2_S0FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S0FCR_Fields

func FTH*(r: DMA2_S0FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `FTH=`*(r: var DMA2_S0FCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.DMA2_S0FCR_Fields

func CHSEL*(r: DMA2_S1CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 27)

proc `CHSEL=`*(r: var DMA2_S1CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 27)
  tmp.setMask((val shl 25).masked(25 .. 27))
  r = tmp.DMA2_S1CR_Fields

func MBURST*(r: DMA2_S1CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(23 .. 24)

proc `MBURST=`*(r: var DMA2_S1CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 24)
  tmp.setMask((val shl 23).masked(23 .. 24))
  r = tmp.DMA2_S1CR_Fields

func PBURST*(r: DMA2_S1CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 22)

proc `PBURST=`*(r: var DMA2_S1CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 22)
  tmp.setMask((val shl 21).masked(21 .. 22))
  r = tmp.DMA2_S1CR_Fields

func ACK*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `ACK=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.DMA2_S1CR_Fields

func CT*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CT=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA2_S1CR_Fields

func DBM*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `DBM=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA2_S1CR_Fields

func PL*(r: DMA2_S1CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PL=`*(r: var DMA2_S1CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.DMA2_S1CR_Fields

func PINCOS*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PINCOS=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.DMA2_S1CR_Fields

func MSIZE*(r: DMA2_S1CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `MSIZE=`*(r: var DMA2_S1CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.DMA2_S1CR_Fields

func PSIZE*(r: DMA2_S1CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `PSIZE=`*(r: var DMA2_S1CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.DMA2_S1CR_Fields

func MINC*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MINC=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA2_S1CR_Fields

func PINC*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PINC=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA2_S1CR_Fields

func CIRC*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CIRC=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA2_S1CR_Fields

func DIR*(r: DMA2_S1CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `DIR=`*(r: var DMA2_S1CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DMA2_S1CR_Fields

func PFCTRL*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PFCTRL=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA2_S1CR_Fields

func TCIE*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TCIE=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA2_S1CR_Fields

func HTIE*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HTIE=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA2_S1CR_Fields

func TEIE*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TEIE=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S1CR_Fields

func DMEIE*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DMEIE=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA2_S1CR_Fields

func EN*(r: DMA2_S1CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA2_S1CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA2_S1CR_Fields

func NDT*(r: DMA2_S1NDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA2_S1NDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA2_S1NDTR_Fields

func FEIE*(r: DMA2_S1FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FEIE=`*(r: var DMA2_S1FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA2_S1FCR_Fields

func FS*(r: DMA2_S1FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

func DMDIS*(r: DMA2_S1FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DMDIS=`*(r: var DMA2_S1FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S1FCR_Fields

func FTH*(r: DMA2_S1FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `FTH=`*(r: var DMA2_S1FCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.DMA2_S1FCR_Fields

func CHSEL*(r: DMA2_S2CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 27)

proc `CHSEL=`*(r: var DMA2_S2CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 27)
  tmp.setMask((val shl 25).masked(25 .. 27))
  r = tmp.DMA2_S2CR_Fields

func MBURST*(r: DMA2_S2CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(23 .. 24)

proc `MBURST=`*(r: var DMA2_S2CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 24)
  tmp.setMask((val shl 23).masked(23 .. 24))
  r = tmp.DMA2_S2CR_Fields

func PBURST*(r: DMA2_S2CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 22)

proc `PBURST=`*(r: var DMA2_S2CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 22)
  tmp.setMask((val shl 21).masked(21 .. 22))
  r = tmp.DMA2_S2CR_Fields

func ACK*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `ACK=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.DMA2_S2CR_Fields

func CT*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CT=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA2_S2CR_Fields

func DBM*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `DBM=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA2_S2CR_Fields

func PL*(r: DMA2_S2CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PL=`*(r: var DMA2_S2CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.DMA2_S2CR_Fields

func PINCOS*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PINCOS=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.DMA2_S2CR_Fields

func MSIZE*(r: DMA2_S2CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `MSIZE=`*(r: var DMA2_S2CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.DMA2_S2CR_Fields

func PSIZE*(r: DMA2_S2CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `PSIZE=`*(r: var DMA2_S2CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.DMA2_S2CR_Fields

func MINC*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MINC=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA2_S2CR_Fields

func PINC*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PINC=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA2_S2CR_Fields

func CIRC*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CIRC=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA2_S2CR_Fields

func DIR*(r: DMA2_S2CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `DIR=`*(r: var DMA2_S2CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DMA2_S2CR_Fields

func PFCTRL*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PFCTRL=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA2_S2CR_Fields

func TCIE*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TCIE=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA2_S2CR_Fields

func HTIE*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HTIE=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA2_S2CR_Fields

func TEIE*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TEIE=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S2CR_Fields

func DMEIE*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DMEIE=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA2_S2CR_Fields

func EN*(r: DMA2_S2CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA2_S2CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA2_S2CR_Fields

func NDT*(r: DMA2_S2NDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA2_S2NDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA2_S2NDTR_Fields

func FEIE*(r: DMA2_S2FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FEIE=`*(r: var DMA2_S2FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA2_S2FCR_Fields

func FS*(r: DMA2_S2FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

func DMDIS*(r: DMA2_S2FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DMDIS=`*(r: var DMA2_S2FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S2FCR_Fields

func FTH*(r: DMA2_S2FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `FTH=`*(r: var DMA2_S2FCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.DMA2_S2FCR_Fields

func CHSEL*(r: DMA2_S3CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 27)

proc `CHSEL=`*(r: var DMA2_S3CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 27)
  tmp.setMask((val shl 25).masked(25 .. 27))
  r = tmp.DMA2_S3CR_Fields

func MBURST*(r: DMA2_S3CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(23 .. 24)

proc `MBURST=`*(r: var DMA2_S3CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 24)
  tmp.setMask((val shl 23).masked(23 .. 24))
  r = tmp.DMA2_S3CR_Fields

func PBURST*(r: DMA2_S3CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 22)

proc `PBURST=`*(r: var DMA2_S3CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 22)
  tmp.setMask((val shl 21).masked(21 .. 22))
  r = tmp.DMA2_S3CR_Fields

func ACK*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `ACK=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.DMA2_S3CR_Fields

func CT*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CT=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA2_S3CR_Fields

func DBM*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `DBM=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA2_S3CR_Fields

func PL*(r: DMA2_S3CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PL=`*(r: var DMA2_S3CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.DMA2_S3CR_Fields

func PINCOS*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PINCOS=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.DMA2_S3CR_Fields

func MSIZE*(r: DMA2_S3CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `MSIZE=`*(r: var DMA2_S3CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.DMA2_S3CR_Fields

func PSIZE*(r: DMA2_S3CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `PSIZE=`*(r: var DMA2_S3CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.DMA2_S3CR_Fields

func MINC*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MINC=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA2_S3CR_Fields

func PINC*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PINC=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA2_S3CR_Fields

func CIRC*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CIRC=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA2_S3CR_Fields

func DIR*(r: DMA2_S3CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `DIR=`*(r: var DMA2_S3CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DMA2_S3CR_Fields

func PFCTRL*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PFCTRL=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA2_S3CR_Fields

func TCIE*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TCIE=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA2_S3CR_Fields

func HTIE*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HTIE=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA2_S3CR_Fields

func TEIE*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TEIE=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S3CR_Fields

func DMEIE*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DMEIE=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA2_S3CR_Fields

func EN*(r: DMA2_S3CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA2_S3CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA2_S3CR_Fields

func NDT*(r: DMA2_S3NDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA2_S3NDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA2_S3NDTR_Fields

func FEIE*(r: DMA2_S3FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FEIE=`*(r: var DMA2_S3FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA2_S3FCR_Fields

func FS*(r: DMA2_S3FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

func DMDIS*(r: DMA2_S3FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DMDIS=`*(r: var DMA2_S3FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S3FCR_Fields

func FTH*(r: DMA2_S3FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `FTH=`*(r: var DMA2_S3FCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.DMA2_S3FCR_Fields

func CHSEL*(r: DMA2_S4CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 27)

proc `CHSEL=`*(r: var DMA2_S4CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 27)
  tmp.setMask((val shl 25).masked(25 .. 27))
  r = tmp.DMA2_S4CR_Fields

func MBURST*(r: DMA2_S4CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(23 .. 24)

proc `MBURST=`*(r: var DMA2_S4CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 24)
  tmp.setMask((val shl 23).masked(23 .. 24))
  r = tmp.DMA2_S4CR_Fields

func PBURST*(r: DMA2_S4CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 22)

proc `PBURST=`*(r: var DMA2_S4CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 22)
  tmp.setMask((val shl 21).masked(21 .. 22))
  r = tmp.DMA2_S4CR_Fields

func ACK*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `ACK=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.DMA2_S4CR_Fields

func CT*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CT=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA2_S4CR_Fields

func DBM*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `DBM=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA2_S4CR_Fields

func PL*(r: DMA2_S4CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PL=`*(r: var DMA2_S4CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.DMA2_S4CR_Fields

func PINCOS*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PINCOS=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.DMA2_S4CR_Fields

func MSIZE*(r: DMA2_S4CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `MSIZE=`*(r: var DMA2_S4CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.DMA2_S4CR_Fields

func PSIZE*(r: DMA2_S4CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `PSIZE=`*(r: var DMA2_S4CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.DMA2_S4CR_Fields

func MINC*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MINC=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA2_S4CR_Fields

func PINC*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PINC=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA2_S4CR_Fields

func CIRC*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CIRC=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA2_S4CR_Fields

func DIR*(r: DMA2_S4CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `DIR=`*(r: var DMA2_S4CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DMA2_S4CR_Fields

func PFCTRL*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PFCTRL=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA2_S4CR_Fields

func TCIE*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TCIE=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA2_S4CR_Fields

func HTIE*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HTIE=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA2_S4CR_Fields

func TEIE*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TEIE=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S4CR_Fields

func DMEIE*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DMEIE=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA2_S4CR_Fields

func EN*(r: DMA2_S4CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA2_S4CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA2_S4CR_Fields

func NDT*(r: DMA2_S4NDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA2_S4NDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA2_S4NDTR_Fields

func FEIE*(r: DMA2_S4FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FEIE=`*(r: var DMA2_S4FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA2_S4FCR_Fields

func FS*(r: DMA2_S4FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

func DMDIS*(r: DMA2_S4FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DMDIS=`*(r: var DMA2_S4FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S4FCR_Fields

func FTH*(r: DMA2_S4FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `FTH=`*(r: var DMA2_S4FCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.DMA2_S4FCR_Fields

func CHSEL*(r: DMA2_S5CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 27)

proc `CHSEL=`*(r: var DMA2_S5CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 27)
  tmp.setMask((val shl 25).masked(25 .. 27))
  r = tmp.DMA2_S5CR_Fields

func MBURST*(r: DMA2_S5CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(23 .. 24)

proc `MBURST=`*(r: var DMA2_S5CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 24)
  tmp.setMask((val shl 23).masked(23 .. 24))
  r = tmp.DMA2_S5CR_Fields

func PBURST*(r: DMA2_S5CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 22)

proc `PBURST=`*(r: var DMA2_S5CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 22)
  tmp.setMask((val shl 21).masked(21 .. 22))
  r = tmp.DMA2_S5CR_Fields

func ACK*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `ACK=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.DMA2_S5CR_Fields

func CT*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CT=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA2_S5CR_Fields

func DBM*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `DBM=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA2_S5CR_Fields

func PL*(r: DMA2_S5CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PL=`*(r: var DMA2_S5CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.DMA2_S5CR_Fields

func PINCOS*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PINCOS=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.DMA2_S5CR_Fields

func MSIZE*(r: DMA2_S5CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `MSIZE=`*(r: var DMA2_S5CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.DMA2_S5CR_Fields

func PSIZE*(r: DMA2_S5CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `PSIZE=`*(r: var DMA2_S5CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.DMA2_S5CR_Fields

func MINC*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MINC=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA2_S5CR_Fields

func PINC*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PINC=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA2_S5CR_Fields

func CIRC*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CIRC=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA2_S5CR_Fields

func DIR*(r: DMA2_S5CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `DIR=`*(r: var DMA2_S5CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DMA2_S5CR_Fields

func PFCTRL*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PFCTRL=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA2_S5CR_Fields

func TCIE*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TCIE=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA2_S5CR_Fields

func HTIE*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HTIE=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA2_S5CR_Fields

func TEIE*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TEIE=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S5CR_Fields

func DMEIE*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DMEIE=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA2_S5CR_Fields

func EN*(r: DMA2_S5CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA2_S5CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA2_S5CR_Fields

func NDT*(r: DMA2_S5NDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA2_S5NDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA2_S5NDTR_Fields

func FEIE*(r: DMA2_S5FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FEIE=`*(r: var DMA2_S5FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA2_S5FCR_Fields

func FS*(r: DMA2_S5FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

func DMDIS*(r: DMA2_S5FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DMDIS=`*(r: var DMA2_S5FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S5FCR_Fields

func FTH*(r: DMA2_S5FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `FTH=`*(r: var DMA2_S5FCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.DMA2_S5FCR_Fields

func CHSEL*(r: DMA2_S6CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 27)

proc `CHSEL=`*(r: var DMA2_S6CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 27)
  tmp.setMask((val shl 25).masked(25 .. 27))
  r = tmp.DMA2_S6CR_Fields

func MBURST*(r: DMA2_S6CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(23 .. 24)

proc `MBURST=`*(r: var DMA2_S6CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 24)
  tmp.setMask((val shl 23).masked(23 .. 24))
  r = tmp.DMA2_S6CR_Fields

func PBURST*(r: DMA2_S6CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 22)

proc `PBURST=`*(r: var DMA2_S6CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 22)
  tmp.setMask((val shl 21).masked(21 .. 22))
  r = tmp.DMA2_S6CR_Fields

func ACK*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `ACK=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.DMA2_S6CR_Fields

func CT*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CT=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA2_S6CR_Fields

func DBM*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `DBM=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA2_S6CR_Fields

func PL*(r: DMA2_S6CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PL=`*(r: var DMA2_S6CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.DMA2_S6CR_Fields

func PINCOS*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PINCOS=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.DMA2_S6CR_Fields

func MSIZE*(r: DMA2_S6CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `MSIZE=`*(r: var DMA2_S6CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.DMA2_S6CR_Fields

func PSIZE*(r: DMA2_S6CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `PSIZE=`*(r: var DMA2_S6CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.DMA2_S6CR_Fields

func MINC*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MINC=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA2_S6CR_Fields

func PINC*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PINC=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA2_S6CR_Fields

func CIRC*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CIRC=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA2_S6CR_Fields

func DIR*(r: DMA2_S6CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `DIR=`*(r: var DMA2_S6CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DMA2_S6CR_Fields

func PFCTRL*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PFCTRL=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA2_S6CR_Fields

func TCIE*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TCIE=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA2_S6CR_Fields

func HTIE*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HTIE=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA2_S6CR_Fields

func TEIE*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TEIE=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S6CR_Fields

func DMEIE*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DMEIE=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA2_S6CR_Fields

func EN*(r: DMA2_S6CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA2_S6CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA2_S6CR_Fields

func NDT*(r: DMA2_S6NDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA2_S6NDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA2_S6NDTR_Fields

func FEIE*(r: DMA2_S6FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FEIE=`*(r: var DMA2_S6FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA2_S6FCR_Fields

func FS*(r: DMA2_S6FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

func DMDIS*(r: DMA2_S6FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DMDIS=`*(r: var DMA2_S6FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S6FCR_Fields

func FTH*(r: DMA2_S6FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `FTH=`*(r: var DMA2_S6FCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.DMA2_S6FCR_Fields

func CHSEL*(r: DMA2_S7CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 27)

proc `CHSEL=`*(r: var DMA2_S7CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 27)
  tmp.setMask((val shl 25).masked(25 .. 27))
  r = tmp.DMA2_S7CR_Fields

func MBURST*(r: DMA2_S7CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(23 .. 24)

proc `MBURST=`*(r: var DMA2_S7CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 24)
  tmp.setMask((val shl 23).masked(23 .. 24))
  r = tmp.DMA2_S7CR_Fields

func PBURST*(r: DMA2_S7CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 22)

proc `PBURST=`*(r: var DMA2_S7CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 22)
  tmp.setMask((val shl 21).masked(21 .. 22))
  r = tmp.DMA2_S7CR_Fields

func ACK*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `ACK=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.DMA2_S7CR_Fields

func CT*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CT=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.DMA2_S7CR_Fields

func DBM*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `DBM=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DMA2_S7CR_Fields

func PL*(r: DMA2_S7CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PL=`*(r: var DMA2_S7CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.DMA2_S7CR_Fields

func PINCOS*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PINCOS=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.DMA2_S7CR_Fields

func MSIZE*(r: DMA2_S7CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `MSIZE=`*(r: var DMA2_S7CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.DMA2_S7CR_Fields

func PSIZE*(r: DMA2_S7CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `PSIZE=`*(r: var DMA2_S7CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.DMA2_S7CR_Fields

func MINC*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MINC=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.DMA2_S7CR_Fields

func PINC*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PINC=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.DMA2_S7CR_Fields

func CIRC*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CIRC=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.DMA2_S7CR_Fields

func DIR*(r: DMA2_S7CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `DIR=`*(r: var DMA2_S7CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DMA2_S7CR_Fields

func PFCTRL*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PFCTRL=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.DMA2_S7CR_Fields

func TCIE*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TCIE=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.DMA2_S7CR_Fields

func HTIE*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HTIE=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.DMA2_S7CR_Fields

func TEIE*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TEIE=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S7CR_Fields

func DMEIE*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DMEIE=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DMA2_S7CR_Fields

func EN*(r: DMA2_S7CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var DMA2_S7CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DMA2_S7CR_Fields

func NDT*(r: DMA2_S7NDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NDT=`*(r: var DMA2_S7NDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.DMA2_S7NDTR_Fields

func FEIE*(r: DMA2_S7FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FEIE=`*(r: var DMA2_S7FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.DMA2_S7FCR_Fields

func FS*(r: DMA2_S7FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

func DMDIS*(r: DMA2_S7FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DMDIS=`*(r: var DMA2_S7FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DMA2_S7FCR_Fields

func FTH*(r: DMA2_S7FCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `FTH=`*(r: var DMA2_S7FCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.DMA2_S7FCR_Fields

type
  RCC_CR_Fields* = distinct uint32
  RCC_PLLCFGR_Fields* = distinct uint32
  RCC_CFGR_Fields* = distinct uint32
  RCC_CIR_Fields* = distinct uint32
  RCC_AHB1RSTR_Fields* = distinct uint32
  RCC_AHB2RSTR_Fields* = distinct uint32
  RCC_AHB3RSTR_Fields* = distinct uint32
  RCC_APB1RSTR_Fields* = distinct uint32
  RCC_APB2RSTR_Fields* = distinct uint32
  RCC_AHB1ENR_Fields* = distinct uint32
  RCC_AHB2ENR_Fields* = distinct uint32
  RCC_AHB3ENR_Fields* = distinct uint32
  RCC_APB1ENR_Fields* = distinct uint32
  RCC_APB2ENR_Fields* = distinct uint32
  RCC_AHB1LPENR_Fields* = distinct uint32
  RCC_AHB2LPENR_Fields* = distinct uint32
  RCC_AHB3LPENR_Fields* = distinct uint32
  RCC_APB1LPENR_Fields* = distinct uint32
  RCC_APB2LPENR_Fields* = distinct uint32
  RCC_BDCR_Fields* = distinct uint32
  RCC_CSR_Fields* = distinct uint32
  RCC_SSCGR_Fields* = distinct uint32
  RCC_PLLI2SCFGR_Fields* = distinct uint32
  RCC_PLLSAICFGR_Fields* = distinct uint32
  RCC_DCKCFGR_Fields* = distinct uint32
  RCC_CKGATENR_Fields* = distinct uint32
  RCC_DCKCFGR2_Fields* = distinct uint32

proc read*(reg: RCC_CR_Type): RCC_CR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CR_Fields](reg.loc))

proc write*(reg: RCC_CR_Type, val: RCC_CR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_CR_Fields](reg.loc), val)

proc write*(reg: RCC_CR_Type, PLLI2SON: bool = false, PLLON: bool = false, CSSON: bool = false, HSEBYP: bool = false, HSEON: bool = false, HSITRIM: uint32 = 16, HSION: bool = true) =
  var x: uint32
  x.setMask((PLLI2SON.uint32 shl 26).masked(26 .. 26))
  x.setMask((PLLON.uint32 shl 24).masked(24 .. 24))
  x.setMask((CSSON.uint32 shl 19).masked(19 .. 19))
  x.setMask((HSEBYP.uint32 shl 18).masked(18 .. 18))
  x.setMask((HSEON.uint32 shl 16).masked(16 .. 16))
  x.setMask((HSITRIM shl 3).masked(3 .. 7))
  x.setMask((HSION.uint32 shl 0).masked(0 .. 0))
  reg.write x.RCC_CR_Fields

template modifyIt*(reg: RCC_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_PLLCFGR_Type): RCC_PLLCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_PLLCFGR_Fields](reg.loc))

proc write*(reg: RCC_PLLCFGR_Type, val: RCC_PLLCFGR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_PLLCFGR_Fields](reg.loc), val)

proc write*(reg: RCC_PLLCFGR_Type, PLLQ3: bool = false, PLLQ2: bool = true, PLLQ1: bool = false, PLLQ0: bool = false, PLLSRC: bool = false, PLLP1: bool = false, PLLP0: bool = false, PLLN8: bool = false, PLLN7: bool = true, PLLN6: bool = true, PLLN5: bool = false, PLLN4: bool = false, PLLN3: bool = false, PLLN2: bool = false, PLLN1: bool = false, PLLN0: bool = false, PLLM5: bool = false, PLLM4: bool = true, PLLM3: bool = false, PLLM2: bool = false, PLLM1: bool = false, PLLM0: bool = false) =
  var x: uint32
  x.setMask((PLLQ3.uint32 shl 27).masked(27 .. 27))
  x.setMask((PLLQ2.uint32 shl 26).masked(26 .. 26))
  x.setMask((PLLQ1.uint32 shl 25).masked(25 .. 25))
  x.setMask((PLLQ0.uint32 shl 24).masked(24 .. 24))
  x.setMask((PLLSRC.uint32 shl 22).masked(22 .. 22))
  x.setMask((PLLP1.uint32 shl 17).masked(17 .. 17))
  x.setMask((PLLP0.uint32 shl 16).masked(16 .. 16))
  x.setMask((PLLN8.uint32 shl 14).masked(14 .. 14))
  x.setMask((PLLN7.uint32 shl 13).masked(13 .. 13))
  x.setMask((PLLN6.uint32 shl 12).masked(12 .. 12))
  x.setMask((PLLN5.uint32 shl 11).masked(11 .. 11))
  x.setMask((PLLN4.uint32 shl 10).masked(10 .. 10))
  x.setMask((PLLN3.uint32 shl 9).masked(9 .. 9))
  x.setMask((PLLN2.uint32 shl 8).masked(8 .. 8))
  x.setMask((PLLN1.uint32 shl 7).masked(7 .. 7))
  x.setMask((PLLN0.uint32 shl 6).masked(6 .. 6))
  x.setMask((PLLM5.uint32 shl 5).masked(5 .. 5))
  x.setMask((PLLM4.uint32 shl 4).masked(4 .. 4))
  x.setMask((PLLM3.uint32 shl 3).masked(3 .. 3))
  x.setMask((PLLM2.uint32 shl 2).masked(2 .. 2))
  x.setMask((PLLM1.uint32 shl 1).masked(1 .. 1))
  x.setMask((PLLM0.uint32 shl 0).masked(0 .. 0))
  reg.write x.RCC_PLLCFGR_Fields

template modifyIt*(reg: RCC_PLLCFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_CFGR_Type): RCC_CFGR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CFGR_Fields](reg.loc))

proc write*(reg: RCC_CFGR_Type, val: RCC_CFGR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_CFGR_Fields](reg.loc), val)

proc write*(reg: RCC_CFGR_Type, MCO2: uint32 = 0, MCO2PRE: uint32 = 0, MCO1PRE: uint32 = 0, I2SSRC: bool = false, MCO1: uint32 = 0, RTCPRE: uint32 = 0, PPRE2: uint32 = 0, PPRE1: uint32 = 0, HPRE: uint32 = 0, SW1: bool = false, SW0: bool = false) =
  var x: uint32
  x.setMask((MCO2 shl 30).masked(30 .. 31))
  x.setMask((MCO2PRE shl 27).masked(27 .. 29))
  x.setMask((MCO1PRE shl 24).masked(24 .. 26))
  x.setMask((I2SSRC.uint32 shl 23).masked(23 .. 23))
  x.setMask((MCO1 shl 21).masked(21 .. 22))
  x.setMask((RTCPRE shl 16).masked(16 .. 20))
  x.setMask((PPRE2 shl 13).masked(13 .. 15))
  x.setMask((PPRE1 shl 10).masked(10 .. 12))
  x.setMask((HPRE shl 4).masked(4 .. 7))
  x.setMask((SW1.uint32 shl 1).masked(1 .. 1))
  x.setMask((SW0.uint32 shl 0).masked(0 .. 0))
  reg.write x.RCC_CFGR_Fields

template modifyIt*(reg: RCC_CFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_CIR_Type): RCC_CIR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CIR_Fields](reg.loc))

proc write*(reg: RCC_CIR_Type, val: RCC_CIR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_CIR_Fields](reg.loc), val)

proc write*(reg: RCC_CIR_Type, CSSC: bool = false, PLLSAIRDYC: bool = false, PLLI2SRDYC: bool = false, PLLRDYC: bool = false, HSERDYC: bool = false, HSIRDYC: bool = false, LSERDYC: bool = false, LSIRDYC: bool = false, PLLSAIRDYIE: bool = false, PLLI2SRDYIE: bool = false, PLLRDYIE: bool = false, HSERDYIE: bool = false, HSIRDYIE: bool = false, LSERDYIE: bool = false, LSIRDYIE: bool = false) =
  var x: uint32
  x.setMask((CSSC.uint32 shl 23).masked(23 .. 23))
  x.setMask((PLLSAIRDYC.uint32 shl 22).masked(22 .. 22))
  x.setMask((PLLI2SRDYC.uint32 shl 21).masked(21 .. 21))
  x.setMask((PLLRDYC.uint32 shl 20).masked(20 .. 20))
  x.setMask((HSERDYC.uint32 shl 19).masked(19 .. 19))
  x.setMask((HSIRDYC.uint32 shl 18).masked(18 .. 18))
  x.setMask((LSERDYC.uint32 shl 17).masked(17 .. 17))
  x.setMask((LSIRDYC.uint32 shl 16).masked(16 .. 16))
  x.setMask((PLLSAIRDYIE.uint32 shl 14).masked(14 .. 14))
  x.setMask((PLLI2SRDYIE.uint32 shl 13).masked(13 .. 13))
  x.setMask((PLLRDYIE.uint32 shl 12).masked(12 .. 12))
  x.setMask((HSERDYIE.uint32 shl 11).masked(11 .. 11))
  x.setMask((HSIRDYIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((LSERDYIE.uint32 shl 9).masked(9 .. 9))
  x.setMask((LSIRDYIE.uint32 shl 8).masked(8 .. 8))
  reg.write x.RCC_CIR_Fields

template modifyIt*(reg: RCC_CIR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHB1RSTR_Type): RCC_AHB1RSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHB1RSTR_Fields](reg.loc))

proc write*(reg: RCC_AHB1RSTR_Type, val: RCC_AHB1RSTR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHB1RSTR_Fields](reg.loc), val)

proc write*(reg: RCC_AHB1RSTR_Type, OTGHSRST: bool = false, DMA2RST: bool = false, DMA1RST: bool = false, CRCRST: bool = false, GPIOHRST: bool = false, GPIOGRST: bool = false, GPIOFRST: bool = false, GPIOERST: bool = false, GPIODRST: bool = false, GPIOCRST: bool = false, GPIOBRST: bool = false, GPIOARST: bool = false) =
  var x: uint32
  x.setMask((OTGHSRST.uint32 shl 29).masked(29 .. 29))
  x.setMask((DMA2RST.uint32 shl 22).masked(22 .. 22))
  x.setMask((DMA1RST.uint32 shl 21).masked(21 .. 21))
  x.setMask((CRCRST.uint32 shl 12).masked(12 .. 12))
  x.setMask((GPIOHRST.uint32 shl 7).masked(7 .. 7))
  x.setMask((GPIOGRST.uint32 shl 6).masked(6 .. 6))
  x.setMask((GPIOFRST.uint32 shl 5).masked(5 .. 5))
  x.setMask((GPIOERST.uint32 shl 4).masked(4 .. 4))
  x.setMask((GPIODRST.uint32 shl 3).masked(3 .. 3))
  x.setMask((GPIOCRST.uint32 shl 2).masked(2 .. 2))
  x.setMask((GPIOBRST.uint32 shl 1).masked(1 .. 1))
  x.setMask((GPIOARST.uint32 shl 0).masked(0 .. 0))
  reg.write x.RCC_AHB1RSTR_Fields

template modifyIt*(reg: RCC_AHB1RSTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHB2RSTR_Type): RCC_AHB2RSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHB2RSTR_Fields](reg.loc))

proc write*(reg: RCC_AHB2RSTR_Type, val: RCC_AHB2RSTR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHB2RSTR_Fields](reg.loc), val)

proc write*(reg: RCC_AHB2RSTR_Type, OTGFSRST: bool = false, DCMIRST: bool = false) =
  var x: uint32
  x.setMask((OTGFSRST.uint32 shl 7).masked(7 .. 7))
  x.setMask((DCMIRST.uint32 shl 0).masked(0 .. 0))
  reg.write x.RCC_AHB2RSTR_Fields

template modifyIt*(reg: RCC_AHB2RSTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHB3RSTR_Type): RCC_AHB3RSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHB3RSTR_Fields](reg.loc))

proc write*(reg: RCC_AHB3RSTR_Type, val: RCC_AHB3RSTR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHB3RSTR_Fields](reg.loc), val)

proc write*(reg: RCC_AHB3RSTR_Type, FMCRST: bool = false, QSPIRST: bool = false) =
  var x: uint32
  x.setMask((FMCRST.uint32 shl 0).masked(0 .. 0))
  x.setMask((QSPIRST.uint32 shl 1).masked(1 .. 1))
  reg.write x.RCC_AHB3RSTR_Fields

template modifyIt*(reg: RCC_AHB3RSTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_APB1RSTR_Type): RCC_APB1RSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB1RSTR_Fields](reg.loc))

proc write*(reg: RCC_APB1RSTR_Type, val: RCC_APB1RSTR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_APB1RSTR_Fields](reg.loc), val)

proc write*(reg: RCC_APB1RSTR_Type, TIM2RST: bool = false, TIM3RST: bool = false, TIM4RST: bool = false, TIM5RST: bool = false, TIM6RST: bool = false, TIM7RST: bool = false, TIM12RST: bool = false, TIM13RST: bool = false, TIM14RST: bool = false, WWDGRST: bool = false, SPI2RST: bool = false, SPI3RST: bool = false, SPDIFRST: bool = false, UART2RST: bool = false, UART3RST: bool = false, UART4RST: bool = false, UART5RST: bool = false, I2C1RST: bool = false, I2C2RST: bool = false, I2C3RST: bool = false, I2CFMP1RST: bool = false, CAN1RST: bool = false, CAN2RST: bool = false, PWRRST: bool = false, DACRST: bool = false) =
  var x: uint32
  x.setMask((TIM2RST.uint32 shl 0).masked(0 .. 0))
  x.setMask((TIM3RST.uint32 shl 1).masked(1 .. 1))
  x.setMask((TIM4RST.uint32 shl 2).masked(2 .. 2))
  x.setMask((TIM5RST.uint32 shl 3).masked(3 .. 3))
  x.setMask((TIM6RST.uint32 shl 4).masked(4 .. 4))
  x.setMask((TIM7RST.uint32 shl 5).masked(5 .. 5))
  x.setMask((TIM12RST.uint32 shl 6).masked(6 .. 6))
  x.setMask((TIM13RST.uint32 shl 7).masked(7 .. 7))
  x.setMask((TIM14RST.uint32 shl 8).masked(8 .. 8))
  x.setMask((WWDGRST.uint32 shl 11).masked(11 .. 11))
  x.setMask((SPI2RST.uint32 shl 14).masked(14 .. 14))
  x.setMask((SPI3RST.uint32 shl 15).masked(15 .. 15))
  x.setMask((SPDIFRST.uint32 shl 16).masked(16 .. 16))
  x.setMask((UART2RST.uint32 shl 17).masked(17 .. 17))
  x.setMask((UART3RST.uint32 shl 18).masked(18 .. 18))
  x.setMask((UART4RST.uint32 shl 19).masked(19 .. 19))
  x.setMask((UART5RST.uint32 shl 20).masked(20 .. 20))
  x.setMask((I2C1RST.uint32 shl 21).masked(21 .. 21))
  x.setMask((I2C2RST.uint32 shl 22).masked(22 .. 22))
  x.setMask((I2C3RST.uint32 shl 23).masked(23 .. 23))
  x.setMask((I2CFMP1RST.uint32 shl 24).masked(24 .. 24))
  x.setMask((CAN1RST.uint32 shl 25).masked(25 .. 25))
  x.setMask((CAN2RST.uint32 shl 26).masked(26 .. 26))
  x.setMask((PWRRST.uint32 shl 28).masked(28 .. 28))
  x.setMask((DACRST.uint32 shl 29).masked(29 .. 29))
  reg.write x.RCC_APB1RSTR_Fields

template modifyIt*(reg: RCC_APB1RSTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_APB2RSTR_Type): RCC_APB2RSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB2RSTR_Fields](reg.loc))

proc write*(reg: RCC_APB2RSTR_Type, val: RCC_APB2RSTR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_APB2RSTR_Fields](reg.loc), val)

proc write*(reg: RCC_APB2RSTR_Type, TIM1RST: bool = false, TIM8RST: bool = false, USART1RST: bool = false, USART6RST: bool = false, ADCRST: bool = false, SDIORST: bool = false, SPI1RST: bool = false, SPI4RST: bool = false, SYSCFGRST: bool = false, TIM9RST: bool = false, TIM10RST: bool = false, TIM11RST: bool = false, SAI1RST: bool = false, SAI2RST: bool = false) =
  var x: uint32
  x.setMask((TIM1RST.uint32 shl 0).masked(0 .. 0))
  x.setMask((TIM8RST.uint32 shl 1).masked(1 .. 1))
  x.setMask((USART1RST.uint32 shl 4).masked(4 .. 4))
  x.setMask((USART6RST.uint32 shl 5).masked(5 .. 5))
  x.setMask((ADCRST.uint32 shl 8).masked(8 .. 8))
  x.setMask((SDIORST.uint32 shl 11).masked(11 .. 11))
  x.setMask((SPI1RST.uint32 shl 12).masked(12 .. 12))
  x.setMask((SPI4RST.uint32 shl 13).masked(13 .. 13))
  x.setMask((SYSCFGRST.uint32 shl 14).masked(14 .. 14))
  x.setMask((TIM9RST.uint32 shl 16).masked(16 .. 16))
  x.setMask((TIM10RST.uint32 shl 17).masked(17 .. 17))
  x.setMask((TIM11RST.uint32 shl 18).masked(18 .. 18))
  x.setMask((SAI1RST.uint32 shl 22).masked(22 .. 22))
  x.setMask((SAI2RST.uint32 shl 23).masked(23 .. 23))
  reg.write x.RCC_APB2RSTR_Fields

template modifyIt*(reg: RCC_APB2RSTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHB1ENR_Type): RCC_AHB1ENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHB1ENR_Fields](reg.loc))

proc write*(reg: RCC_AHB1ENR_Type, val: RCC_AHB1ENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHB1ENR_Fields](reg.loc), val)

proc write*(reg: RCC_AHB1ENR_Type, OTGHSULPIEN: bool = false, OTGHSEN: bool = false, DMA2EN: bool = false, DMA1EN: bool = false, BKPSRAMEN: bool = false, CRCEN: bool = false, GPIOHEN: bool = false, GPIOGEN: bool = false, GPIOFEN: bool = false, GPIOEEN: bool = false, GPIODEN: bool = false, GPIOCEN: bool = false, GPIOBEN: bool = false, GPIOAEN: bool = false) =
  var x: uint32
  x.setMask((OTGHSULPIEN.uint32 shl 30).masked(30 .. 30))
  x.setMask((OTGHSEN.uint32 shl 29).masked(29 .. 29))
  x.setMask((DMA2EN.uint32 shl 22).masked(22 .. 22))
  x.setMask((DMA1EN.uint32 shl 21).masked(21 .. 21))
  x.setMask((BKPSRAMEN.uint32 shl 18).masked(18 .. 18))
  x.setMask((CRCEN.uint32 shl 12).masked(12 .. 12))
  x.setMask((GPIOHEN.uint32 shl 7).masked(7 .. 7))
  x.setMask((GPIOGEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((GPIOFEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((GPIOEEN.uint32 shl 4).masked(4 .. 4))
  x.setMask((GPIODEN.uint32 shl 3).masked(3 .. 3))
  x.setMask((GPIOCEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((GPIOBEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((GPIOAEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.RCC_AHB1ENR_Fields

template modifyIt*(reg: RCC_AHB1ENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHB2ENR_Type): RCC_AHB2ENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHB2ENR_Fields](reg.loc))

proc write*(reg: RCC_AHB2ENR_Type, val: RCC_AHB2ENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHB2ENR_Fields](reg.loc), val)

proc write*(reg: RCC_AHB2ENR_Type, OTGFSEN: bool = false, DCMIEN: bool = false) =
  var x: uint32
  x.setMask((OTGFSEN.uint32 shl 7).masked(7 .. 7))
  x.setMask((DCMIEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.RCC_AHB2ENR_Fields

template modifyIt*(reg: RCC_AHB2ENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHB3ENR_Type): RCC_AHB3ENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHB3ENR_Fields](reg.loc))

proc write*(reg: RCC_AHB3ENR_Type, val: RCC_AHB3ENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHB3ENR_Fields](reg.loc), val)

proc write*(reg: RCC_AHB3ENR_Type, FMCEN: bool = false, QSPIEN: bool = false) =
  var x: uint32
  x.setMask((FMCEN.uint32 shl 0).masked(0 .. 0))
  x.setMask((QSPIEN.uint32 shl 1).masked(1 .. 1))
  reg.write x.RCC_AHB3ENR_Fields

template modifyIt*(reg: RCC_AHB3ENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_APB1ENR_Type): RCC_APB1ENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB1ENR_Fields](reg.loc))

proc write*(reg: RCC_APB1ENR_Type, val: RCC_APB1ENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_APB1ENR_Fields](reg.loc), val)

proc write*(reg: RCC_APB1ENR_Type, TIM2EN: bool = false, TIM3EN: bool = false, TIM4EN: bool = false, TIM5EN: bool = false, TIM6EN: bool = false, TIM7EN: bool = false, TIM12EN: bool = false, TIM13EN: bool = false, TIM14EN: bool = false, WWDGEN: bool = false, SPI2EN: bool = false, SPI3EN: bool = false, SPDIFEN: bool = false, USART2EN: bool = false, USART3EN: bool = false, UART4EN: bool = false, UART5EN: bool = false, I2C1EN: bool = false, I2C2EN: bool = false, I2C3EN: bool = false, I2CFMP1EN: bool = false, CAN1EN: bool = false, CAN2EN: bool = false, CEC: bool = false, PWREN: bool = false, DACEN: bool = false) =
  var x: uint32
  x.setMask((TIM2EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TIM3EN.uint32 shl 1).masked(1 .. 1))
  x.setMask((TIM4EN.uint32 shl 2).masked(2 .. 2))
  x.setMask((TIM5EN.uint32 shl 3).masked(3 .. 3))
  x.setMask((TIM6EN.uint32 shl 4).masked(4 .. 4))
  x.setMask((TIM7EN.uint32 shl 5).masked(5 .. 5))
  x.setMask((TIM12EN.uint32 shl 6).masked(6 .. 6))
  x.setMask((TIM13EN.uint32 shl 7).masked(7 .. 7))
  x.setMask((TIM14EN.uint32 shl 8).masked(8 .. 8))
  x.setMask((WWDGEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((SPI2EN.uint32 shl 14).masked(14 .. 14))
  x.setMask((SPI3EN.uint32 shl 15).masked(15 .. 15))
  x.setMask((SPDIFEN.uint32 shl 16).masked(16 .. 16))
  x.setMask((USART2EN.uint32 shl 17).masked(17 .. 17))
  x.setMask((USART3EN.uint32 shl 18).masked(18 .. 18))
  x.setMask((UART4EN.uint32 shl 19).masked(19 .. 19))
  x.setMask((UART5EN.uint32 shl 20).masked(20 .. 20))
  x.setMask((I2C1EN.uint32 shl 21).masked(21 .. 21))
  x.setMask((I2C2EN.uint32 shl 22).masked(22 .. 22))
  x.setMask((I2C3EN.uint32 shl 23).masked(23 .. 23))
  x.setMask((I2CFMP1EN.uint32 shl 24).masked(24 .. 24))
  x.setMask((CAN1EN.uint32 shl 25).masked(25 .. 25))
  x.setMask((CAN2EN.uint32 shl 26).masked(26 .. 26))
  x.setMask((CEC.uint32 shl 27).masked(27 .. 27))
  x.setMask((PWREN.uint32 shl 28).masked(28 .. 28))
  x.setMask((DACEN.uint32 shl 29).masked(29 .. 29))
  reg.write x.RCC_APB1ENR_Fields

template modifyIt*(reg: RCC_APB1ENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_APB2ENR_Type): RCC_APB2ENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB2ENR_Fields](reg.loc))

proc write*(reg: RCC_APB2ENR_Type, val: RCC_APB2ENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_APB2ENR_Fields](reg.loc), val)

proc write*(reg: RCC_APB2ENR_Type, TIM1EN: bool = false, TIM8EN: bool = false, USART1EN: bool = false, USART6EN: bool = false, ADC1EN: bool = false, ADC2EN: bool = false, ADC3EN: bool = false, SDIOEN: bool = false, SPI1EN: bool = false, SPI4ENR: bool = false, SYSCFGEN: bool = false, TIM9EN: bool = false, TIM10EN: bool = false, TIM11EN: bool = false, SAI1EN: bool = false, SAI2EN: bool = false) =
  var x: uint32
  x.setMask((TIM1EN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TIM8EN.uint32 shl 1).masked(1 .. 1))
  x.setMask((USART1EN.uint32 shl 4).masked(4 .. 4))
  x.setMask((USART6EN.uint32 shl 5).masked(5 .. 5))
  x.setMask((ADC1EN.uint32 shl 8).masked(8 .. 8))
  x.setMask((ADC2EN.uint32 shl 9).masked(9 .. 9))
  x.setMask((ADC3EN.uint32 shl 10).masked(10 .. 10))
  x.setMask((SDIOEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((SPI1EN.uint32 shl 12).masked(12 .. 12))
  x.setMask((SPI4ENR.uint32 shl 13).masked(13 .. 13))
  x.setMask((SYSCFGEN.uint32 shl 14).masked(14 .. 14))
  x.setMask((TIM9EN.uint32 shl 16).masked(16 .. 16))
  x.setMask((TIM10EN.uint32 shl 17).masked(17 .. 17))
  x.setMask((TIM11EN.uint32 shl 18).masked(18 .. 18))
  x.setMask((SAI1EN.uint32 shl 22).masked(22 .. 22))
  x.setMask((SAI2EN.uint32 shl 23).masked(23 .. 23))
  reg.write x.RCC_APB2ENR_Fields

template modifyIt*(reg: RCC_APB2ENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHB1LPENR_Type): RCC_AHB1LPENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHB1LPENR_Fields](reg.loc))

proc write*(reg: RCC_AHB1LPENR_Type, val: RCC_AHB1LPENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHB1LPENR_Fields](reg.loc), val)

proc write*(reg: RCC_AHB1LPENR_Type, GPIOALPEN: bool = true, GPIOBLPEN: bool = true, GPIOCLPEN: bool = true, GPIODLPEN: bool = true, GPIOELPEN: bool = true, GPIOFLPEN: bool = true, GPIOGLPEN: bool = true, GPIOHLPEN: bool = true, CRCLPEN: bool = true, FLITFLPEN: bool = true, SRAM1LPEN: bool = true, SRAM2LPEN: bool = true, BKPSRAMLPEN: bool = true, DMA1LPEN: bool = true, DMA2LPEN: bool = true, OTGHSLPEN: bool = true, OTGHSULPILPEN: bool = true) =
  var x: uint32
  x.setMask((GPIOALPEN.uint32 shl 0).masked(0 .. 0))
  x.setMask((GPIOBLPEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((GPIOCLPEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((GPIODLPEN.uint32 shl 3).masked(3 .. 3))
  x.setMask((GPIOELPEN.uint32 shl 4).masked(4 .. 4))
  x.setMask((GPIOFLPEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((GPIOGLPEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((GPIOHLPEN.uint32 shl 7).masked(7 .. 7))
  x.setMask((CRCLPEN.uint32 shl 12).masked(12 .. 12))
  x.setMask((FLITFLPEN.uint32 shl 15).masked(15 .. 15))
  x.setMask((SRAM1LPEN.uint32 shl 16).masked(16 .. 16))
  x.setMask((SRAM2LPEN.uint32 shl 17).masked(17 .. 17))
  x.setMask((BKPSRAMLPEN.uint32 shl 18).masked(18 .. 18))
  x.setMask((DMA1LPEN.uint32 shl 21).masked(21 .. 21))
  x.setMask((DMA2LPEN.uint32 shl 22).masked(22 .. 22))
  x.setMask((OTGHSLPEN.uint32 shl 29).masked(29 .. 29))
  x.setMask((OTGHSULPILPEN.uint32 shl 30).masked(30 .. 30))
  reg.write x.RCC_AHB1LPENR_Fields

template modifyIt*(reg: RCC_AHB1LPENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHB2LPENR_Type): RCC_AHB2LPENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHB2LPENR_Fields](reg.loc))

proc write*(reg: RCC_AHB2LPENR_Type, val: RCC_AHB2LPENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHB2LPENR_Fields](reg.loc), val)

proc write*(reg: RCC_AHB2LPENR_Type, OTGFSLPEN: bool = true, DCMILPEN: bool = true) =
  var x: uint32
  x.setMask((OTGFSLPEN.uint32 shl 7).masked(7 .. 7))
  x.setMask((DCMILPEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.RCC_AHB2LPENR_Fields

template modifyIt*(reg: RCC_AHB2LPENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_AHB3LPENR_Type): RCC_AHB3LPENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_AHB3LPENR_Fields](reg.loc))

proc write*(reg: RCC_AHB3LPENR_Type, val: RCC_AHB3LPENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_AHB3LPENR_Fields](reg.loc), val)

proc write*(reg: RCC_AHB3LPENR_Type, FMCLPEN: bool = true, QSPILPEN: bool = false) =
  var x: uint32
  x.setMask((FMCLPEN.uint32 shl 0).masked(0 .. 0))
  x.setMask((QSPILPEN.uint32 shl 1).masked(1 .. 1))
  reg.write x.RCC_AHB3LPENR_Fields

template modifyIt*(reg: RCC_AHB3LPENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_APB1LPENR_Type): RCC_APB1LPENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB1LPENR_Fields](reg.loc))

proc write*(reg: RCC_APB1LPENR_Type, val: RCC_APB1LPENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_APB1LPENR_Fields](reg.loc), val)

proc write*(reg: RCC_APB1LPENR_Type, TIM2LPEN: bool = true, TIM3LPEN: bool = true, TIM4LPEN: bool = true, TIM5LPEN: bool = true, TIM6LPEN: bool = true, TIM7LPEN: bool = true, TIM12LPEN: bool = true, TIM13LPEN: bool = true, TIM14LPEN: bool = true, WWDGLPEN: bool = true, SPI2LPEN: bool = true, SPI3LPEN: bool = true, SPDIFLPEN: bool = false, USART2LPEN: bool = true, USART3LPEN: bool = true, UART4LPEN: bool = true, UART5LPEN: bool = true, I2C1LPEN: bool = true, I2C2LPEN: bool = true, I2C3LPEN: bool = true, I2CFMP1LPEN: bool = false, CAN1LPEN: bool = true, CAN2LPEN: bool = true, CECLPEN: bool = false, PWRLPEN: bool = true, DACLPEN: bool = true) =
  var x: uint32
  x.setMask((TIM2LPEN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TIM3LPEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((TIM4LPEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((TIM5LPEN.uint32 shl 3).masked(3 .. 3))
  x.setMask((TIM6LPEN.uint32 shl 4).masked(4 .. 4))
  x.setMask((TIM7LPEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((TIM12LPEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((TIM13LPEN.uint32 shl 7).masked(7 .. 7))
  x.setMask((TIM14LPEN.uint32 shl 8).masked(8 .. 8))
  x.setMask((WWDGLPEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((SPI2LPEN.uint32 shl 14).masked(14 .. 14))
  x.setMask((SPI3LPEN.uint32 shl 15).masked(15 .. 15))
  x.setMask((SPDIFLPEN.uint32 shl 16).masked(16 .. 16))
  x.setMask((USART2LPEN.uint32 shl 17).masked(17 .. 17))
  x.setMask((USART3LPEN.uint32 shl 18).masked(18 .. 18))
  x.setMask((UART4LPEN.uint32 shl 19).masked(19 .. 19))
  x.setMask((UART5LPEN.uint32 shl 20).masked(20 .. 20))
  x.setMask((I2C1LPEN.uint32 shl 21).masked(21 .. 21))
  x.setMask((I2C2LPEN.uint32 shl 22).masked(22 .. 22))
  x.setMask((I2C3LPEN.uint32 shl 23).masked(23 .. 23))
  x.setMask((I2CFMP1LPEN.uint32 shl 24).masked(24 .. 24))
  x.setMask((CAN1LPEN.uint32 shl 25).masked(25 .. 25))
  x.setMask((CAN2LPEN.uint32 shl 26).masked(26 .. 26))
  x.setMask((CECLPEN.uint32 shl 27).masked(27 .. 27))
  x.setMask((PWRLPEN.uint32 shl 28).masked(28 .. 28))
  x.setMask((DACLPEN.uint32 shl 29).masked(29 .. 29))
  reg.write x.RCC_APB1LPENR_Fields

template modifyIt*(reg: RCC_APB1LPENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_APB2LPENR_Type): RCC_APB2LPENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_APB2LPENR_Fields](reg.loc))

proc write*(reg: RCC_APB2LPENR_Type, val: RCC_APB2LPENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_APB2LPENR_Fields](reg.loc), val)

proc write*(reg: RCC_APB2LPENR_Type, TIM1LPEN: bool = true, TIM8LPEN: bool = true, USART1LPEN: bool = true, USART6LPEN: bool = true, ADC1LPEN: bool = true, ADC2LPEN: bool = true, ADC3LPEN: bool = true, SDIOLPEN: bool = true, SPI1LPEN: bool = true, SPI4LPEN: bool = false, SYSCFGLPEN: bool = true, TIM9LPEN: bool = true, TIM10LPEN: bool = true, TIM11LPEN: bool = true, SAI1LPEN: bool = false, SAI2LPEN: bool = false) =
  var x: uint32
  x.setMask((TIM1LPEN.uint32 shl 0).masked(0 .. 0))
  x.setMask((TIM8LPEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((USART1LPEN.uint32 shl 4).masked(4 .. 4))
  x.setMask((USART6LPEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((ADC1LPEN.uint32 shl 8).masked(8 .. 8))
  x.setMask((ADC2LPEN.uint32 shl 9).masked(9 .. 9))
  x.setMask((ADC3LPEN.uint32 shl 10).masked(10 .. 10))
  x.setMask((SDIOLPEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((SPI1LPEN.uint32 shl 12).masked(12 .. 12))
  x.setMask((SPI4LPEN.uint32 shl 13).masked(13 .. 13))
  x.setMask((SYSCFGLPEN.uint32 shl 14).masked(14 .. 14))
  x.setMask((TIM9LPEN.uint32 shl 16).masked(16 .. 16))
  x.setMask((TIM10LPEN.uint32 shl 17).masked(17 .. 17))
  x.setMask((TIM11LPEN.uint32 shl 18).masked(18 .. 18))
  x.setMask((SAI1LPEN.uint32 shl 22).masked(22 .. 22))
  x.setMask((SAI2LPEN.uint32 shl 23).masked(23 .. 23))
  reg.write x.RCC_APB2LPENR_Fields

template modifyIt*(reg: RCC_APB2LPENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_BDCR_Type): RCC_BDCR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_BDCR_Fields](reg.loc))

proc write*(reg: RCC_BDCR_Type, val: RCC_BDCR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_BDCR_Fields](reg.loc), val)

proc write*(reg: RCC_BDCR_Type, BDRST: bool = false, RTCEN: bool = false, RTCSEL: uint32 = 0, LSEMOD: bool = false, LSEBYP: bool = false, LSEON: bool = false) =
  var x: uint32
  x.setMask((BDRST.uint32 shl 16).masked(16 .. 16))
  x.setMask((RTCEN.uint32 shl 15).masked(15 .. 15))
  x.setMask((RTCSEL shl 8).masked(8 .. 9))
  x.setMask((LSEMOD.uint32 shl 3).masked(3 .. 3))
  x.setMask((LSEBYP.uint32 shl 2).masked(2 .. 2))
  x.setMask((LSEON.uint32 shl 0).masked(0 .. 0))
  reg.write x.RCC_BDCR_Fields

template modifyIt*(reg: RCC_BDCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_CSR_Type): RCC_CSR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CSR_Fields](reg.loc))

proc write*(reg: RCC_CSR_Type, val: RCC_CSR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_CSR_Fields](reg.loc), val)

proc write*(reg: RCC_CSR_Type, LPWRRSTF: bool = false, WWDGRSTF: bool = false, WDGRSTF: bool = false, SFTRSTF: bool = false, PORRSTF: bool = true, PADRSTF: bool = true, BORRSTF: bool = true, RMVF: bool = false, LSION: bool = false) =
  var x: uint32
  x.setMask((LPWRRSTF.uint32 shl 31).masked(31 .. 31))
  x.setMask((WWDGRSTF.uint32 shl 30).masked(30 .. 30))
  x.setMask((WDGRSTF.uint32 shl 29).masked(29 .. 29))
  x.setMask((SFTRSTF.uint32 shl 28).masked(28 .. 28))
  x.setMask((PORRSTF.uint32 shl 27).masked(27 .. 27))
  x.setMask((PADRSTF.uint32 shl 26).masked(26 .. 26))
  x.setMask((BORRSTF.uint32 shl 25).masked(25 .. 25))
  x.setMask((RMVF.uint32 shl 24).masked(24 .. 24))
  x.setMask((LSION.uint32 shl 0).masked(0 .. 0))
  reg.write x.RCC_CSR_Fields

template modifyIt*(reg: RCC_CSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_SSCGR_Type): RCC_SSCGR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_SSCGR_Fields](reg.loc))

proc write*(reg: RCC_SSCGR_Type, val: RCC_SSCGR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_SSCGR_Fields](reg.loc), val)

proc write*(reg: RCC_SSCGR_Type, SSCGEN: bool = false, SPREADSEL: bool = false, INCSTEP: uint32 = 0, MODPER: uint32 = 0) =
  var x: uint32
  x.setMask((SSCGEN.uint32 shl 31).masked(31 .. 31))
  x.setMask((SPREADSEL.uint32 shl 30).masked(30 .. 30))
  x.setMask((INCSTEP shl 13).masked(13 .. 27))
  x.setMask((MODPER shl 0).masked(0 .. 12))
  reg.write x.RCC_SSCGR_Fields

template modifyIt*(reg: RCC_SSCGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_PLLI2SCFGR_Type): RCC_PLLI2SCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_PLLI2SCFGR_Fields](reg.loc))

proc write*(reg: RCC_PLLI2SCFGR_Type, val: RCC_PLLI2SCFGR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_PLLI2SCFGR_Fields](reg.loc), val)

proc write*(reg: RCC_PLLI2SCFGR_Type, PLLI2SM: uint32 = 0, PLLI2SN: uint32 = 192, PLLI2SP: uint32 = 0, PLLI2SQ: uint32 = 0, PLLI2SR: uint32 = 2) =
  var x: uint32
  x.setMask((PLLI2SM shl 0).masked(0 .. 5))
  x.setMask((PLLI2SN shl 6).masked(6 .. 14))
  x.setMask((PLLI2SP shl 16).masked(16 .. 17))
  x.setMask((PLLI2SQ shl 24).masked(24 .. 27))
  x.setMask((PLLI2SR shl 28).masked(28 .. 30))
  reg.write x.RCC_PLLI2SCFGR_Fields

template modifyIt*(reg: RCC_PLLI2SCFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_PLLSAICFGR_Type): RCC_PLLSAICFGR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_PLLSAICFGR_Fields](reg.loc))

proc write*(reg: RCC_PLLSAICFGR_Type, val: RCC_PLLSAICFGR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_PLLSAICFGR_Fields](reg.loc), val)

proc write*(reg: RCC_PLLSAICFGR_Type, PLLSAIM: uint32 = 0, PLLSAIN: uint32 = 192, PLLSAIP: uint32 = 0, PLLSAIQ: uint32 = 4) =
  var x: uint32
  x.setMask((PLLSAIM shl 0).masked(0 .. 5))
  x.setMask((PLLSAIN shl 6).masked(6 .. 14))
  x.setMask((PLLSAIP shl 16).masked(16 .. 17))
  x.setMask((PLLSAIQ shl 24).masked(24 .. 27))
  reg.write x.RCC_PLLSAICFGR_Fields

template modifyIt*(reg: RCC_PLLSAICFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_DCKCFGR_Type): RCC_DCKCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_DCKCFGR_Fields](reg.loc))

proc write*(reg: RCC_DCKCFGR_Type, val: RCC_DCKCFGR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_DCKCFGR_Fields](reg.loc), val)

proc write*(reg: RCC_DCKCFGR_Type, PLLI2SDIVQ: uint32 = 0, PLLSAIDIVQ: uint32 = 0, SAI1SRC: uint32 = 0, SAI2SRC: uint32 = 0, TIMPRE: bool = false, I2S1SRC: uint32 = 0, I2S2SRC: uint32 = 0) =
  var x: uint32
  x.setMask((PLLI2SDIVQ shl 0).masked(0 .. 4))
  x.setMask((PLLSAIDIVQ shl 8).masked(8 .. 12))
  x.setMask((SAI1SRC shl 20).masked(20 .. 21))
  x.setMask((SAI2SRC shl 22).masked(22 .. 23))
  x.setMask((TIMPRE.uint32 shl 24).masked(24 .. 24))
  x.setMask((I2S1SRC shl 25).masked(25 .. 26))
  x.setMask((I2S2SRC shl 27).masked(27 .. 28))
  reg.write x.RCC_DCKCFGR_Fields

template modifyIt*(reg: RCC_DCKCFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_CKGATENR_Type): RCC_CKGATENR_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_CKGATENR_Fields](reg.loc))

proc write*(reg: RCC_CKGATENR_Type, val: RCC_CKGATENR_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_CKGATENR_Fields](reg.loc), val)

proc write*(reg: RCC_CKGATENR_Type, AHB2APB1_CKEN: bool = false, AHB2APB2_CKEN: bool = false, CM4DBG_CKEN: bool = false, SPARE_CKEN: bool = false, SRAM_CKEN: bool = false, FLITF_CKEN: bool = false, RCC_CKEN: bool = false) =
  var x: uint32
  x.setMask((AHB2APB1_CKEN.uint32 shl 0).masked(0 .. 0))
  x.setMask((AHB2APB2_CKEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((CM4DBG_CKEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((SPARE_CKEN.uint32 shl 3).masked(3 .. 3))
  x.setMask((SRAM_CKEN.uint32 shl 4).masked(4 .. 4))
  x.setMask((FLITF_CKEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((RCC_CKEN.uint32 shl 6).masked(6 .. 6))
  reg.write x.RCC_CKGATENR_Fields

template modifyIt*(reg: RCC_CKGATENR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RCC_DCKCFGR2_Type): RCC_DCKCFGR2_Fields {.inline.} =
  volatileLoad(cast[ptr RCC_DCKCFGR2_Fields](reg.loc))

proc write*(reg: RCC_DCKCFGR2_Type, val: RCC_DCKCFGR2_Fields) {.inline.} =
  volatileStore(cast[ptr RCC_DCKCFGR2_Fields](reg.loc), val)

proc write*(reg: RCC_DCKCFGR2_Type, FMPI2C1SEL: uint32 = 0, CECSEL: bool = false, CK48MSEL: bool = false, SDIOSEL: bool = false, SPDIFSEL: bool = false) =
  var x: uint32
  x.setMask((FMPI2C1SEL shl 22).masked(22 .. 23))
  x.setMask((CECSEL.uint32 shl 26).masked(26 .. 26))
  x.setMask((CK48MSEL.uint32 shl 27).masked(27 .. 27))
  x.setMask((SDIOSEL.uint32 shl 28).masked(28 .. 28))
  x.setMask((SPDIFSEL.uint32 shl 29).masked(29 .. 29))
  reg.write x.RCC_DCKCFGR2_Fields

template modifyIt*(reg: RCC_DCKCFGR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func PLLI2SRDY*(r: RCC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

func PLLI2SON*(r: RCC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `PLLI2SON=`*(r: var RCC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.RCC_CR_Fields

func PLLRDY*(r: RCC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

func PLLON*(r: RCC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `PLLON=`*(r: var RCC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.RCC_CR_Fields

func CSSON*(r: RCC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `CSSON=`*(r: var RCC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_CR_Fields

func HSEBYP*(r: RCC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `HSEBYP=`*(r: var RCC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_CR_Fields

func HSERDY*(r: RCC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func HSEON*(r: RCC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `HSEON=`*(r: var RCC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_CR_Fields

func HSICAL*(r: RCC_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func HSITRIM*(r: RCC_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 7)

proc `HSITRIM=`*(r: var RCC_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 7)
  tmp.setMask((val shl 3).masked(3 .. 7))
  r = tmp.RCC_CR_Fields

func HSIRDY*(r: RCC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func HSION*(r: RCC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `HSION=`*(r: var RCC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_CR_Fields

func PLLQ3*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `PLLQ3=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.RCC_PLLCFGR_Fields

func PLLQ2*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `PLLQ2=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.RCC_PLLCFGR_Fields

func PLLQ1*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `PLLQ1=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.RCC_PLLCFGR_Fields

func PLLQ0*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `PLLQ0=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.RCC_PLLCFGR_Fields

func PLLSRC*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `PLLSRC=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_PLLCFGR_Fields

func PLLP1*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `PLLP1=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_PLLCFGR_Fields

func PLLP0*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `PLLP0=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_PLLCFGR_Fields

func PLLN8*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `PLLN8=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_PLLCFGR_Fields

func PLLN7*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `PLLN7=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RCC_PLLCFGR_Fields

func PLLN6*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PLLN6=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_PLLCFGR_Fields

func PLLN5*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PLLN5=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_PLLCFGR_Fields

func PLLN4*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `PLLN4=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.RCC_PLLCFGR_Fields

func PLLN3*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PLLN3=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.RCC_PLLCFGR_Fields

func PLLN2*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PLLN2=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_PLLCFGR_Fields

func PLLN1*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `PLLN1=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_PLLCFGR_Fields

func PLLN0*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PLLN0=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_PLLCFGR_Fields

func PLLM5*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PLLM5=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_PLLCFGR_Fields

func PLLM4*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `PLLM4=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_PLLCFGR_Fields

func PLLM3*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PLLM3=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_PLLCFGR_Fields

func PLLM2*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `PLLM2=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_PLLCFGR_Fields

func PLLM1*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PLLM1=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_PLLCFGR_Fields

func PLLM0*(r: RCC_PLLCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `PLLM0=`*(r: var RCC_PLLCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_PLLCFGR_Fields

func MCO2*(r: RCC_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `MCO2=`*(r: var RCC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.RCC_CFGR_Fields

func MCO2PRE*(r: RCC_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(27 .. 29)

proc `MCO2PRE=`*(r: var RCC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 29)
  tmp.setMask((val shl 27).masked(27 .. 29))
  r = tmp.RCC_CFGR_Fields

func MCO1PRE*(r: RCC_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 26)

proc `MCO1PRE=`*(r: var RCC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 26)
  tmp.setMask((val shl 24).masked(24 .. 26))
  r = tmp.RCC_CFGR_Fields

func I2SSRC*(r: RCC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `I2SSRC=`*(r: var RCC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_CFGR_Fields

func MCO1*(r: RCC_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 22)

proc `MCO1=`*(r: var RCC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 22)
  tmp.setMask((val shl 21).masked(21 .. 22))
  r = tmp.RCC_CFGR_Fields

func RTCPRE*(r: RCC_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 20)

proc `RTCPRE=`*(r: var RCC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 20)
  tmp.setMask((val shl 16).masked(16 .. 20))
  r = tmp.RCC_CFGR_Fields

func PPRE2*(r: RCC_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 15)

proc `PPRE2=`*(r: var RCC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 15)
  tmp.setMask((val shl 13).masked(13 .. 15))
  r = tmp.RCC_CFGR_Fields

func PPRE1*(r: RCC_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 12)

proc `PPRE1=`*(r: var RCC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 12)
  tmp.setMask((val shl 10).masked(10 .. 12))
  r = tmp.RCC_CFGR_Fields

func HPRE*(r: RCC_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `HPRE=`*(r: var RCC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.RCC_CFGR_Fields

func SWS1*(r: RCC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func SWS0*(r: RCC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func SW1*(r: RCC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SW1=`*(r: var RCC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_CFGR_Fields

func SW0*(r: RCC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SW0=`*(r: var RCC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_CFGR_Fields

proc `CSSC=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_CIR_Fields

proc `PLLSAIRDYC=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_CIR_Fields

proc `PLLI2SRDYC=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.RCC_CIR_Fields

proc `PLLRDYC=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.RCC_CIR_Fields

proc `HSERDYC=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_CIR_Fields

proc `HSIRDYC=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_CIR_Fields

proc `LSERDYC=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_CIR_Fields

proc `LSIRDYC=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_CIR_Fields

func PLLSAIRDYIE*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `PLLSAIRDYIE=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_CIR_Fields

func PLLI2SRDYIE*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `PLLI2SRDYIE=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RCC_CIR_Fields

func PLLRDYIE*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PLLRDYIE=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_CIR_Fields

func HSERDYIE*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `HSERDYIE=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_CIR_Fields

func HSIRDYIE*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `HSIRDYIE=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.RCC_CIR_Fields

func LSERDYIE*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `LSERDYIE=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.RCC_CIR_Fields

func LSIRDYIE*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LSIRDYIE=`*(r: var RCC_CIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_CIR_Fields

func CSSF*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func PLLSAIRDYF*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func PLLI2SRDYF*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func PLLRDYF*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func HSERDYF*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func HSIRDYF*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func LSERDYF*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func LSIRDYF*(r: RCC_CIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func OTGHSRST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `OTGHSRST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_AHB1RSTR_Fields

func DMA2RST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `DMA2RST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_AHB1RSTR_Fields

func DMA1RST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `DMA1RST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.RCC_AHB1RSTR_Fields

func CRCRST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CRCRST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_AHB1RSTR_Fields

func GPIOHRST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `GPIOHRST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_AHB1RSTR_Fields

func GPIOGRST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `GPIOGRST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_AHB1RSTR_Fields

func GPIOFRST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `GPIOFRST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_AHB1RSTR_Fields

func GPIOERST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `GPIOERST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_AHB1RSTR_Fields

func GPIODRST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `GPIODRST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_AHB1RSTR_Fields

func GPIOCRST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `GPIOCRST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_AHB1RSTR_Fields

func GPIOBRST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `GPIOBRST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_AHB1RSTR_Fields

func GPIOARST*(r: RCC_AHB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `GPIOARST=`*(r: var RCC_AHB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_AHB1RSTR_Fields

func OTGFSRST*(r: RCC_AHB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OTGFSRST=`*(r: var RCC_AHB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_AHB2RSTR_Fields

func DCMIRST*(r: RCC_AHB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `DCMIRST=`*(r: var RCC_AHB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_AHB2RSTR_Fields

func FMCRST*(r: RCC_AHB3RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FMCRST=`*(r: var RCC_AHB3RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_AHB3RSTR_Fields

func QSPIRST*(r: RCC_AHB3RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `QSPIRST=`*(r: var RCC_AHB3RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_AHB3RSTR_Fields

func TIM2RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TIM2RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_APB1RSTR_Fields

func TIM3RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TIM3RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_APB1RSTR_Fields

func TIM4RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TIM4RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_APB1RSTR_Fields

func TIM5RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TIM5RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_APB1RSTR_Fields

func TIM6RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TIM6RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_APB1RSTR_Fields

func TIM7RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TIM7RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_APB1RSTR_Fields

func TIM12RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIM12RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_APB1RSTR_Fields

func TIM13RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TIM13RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_APB1RSTR_Fields

func TIM14RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TIM14RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_APB1RSTR_Fields

func WWDGRST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WWDGRST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_APB1RSTR_Fields

func SPI2RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `SPI2RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_APB1RSTR_Fields

func SPI3RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SPI3RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RCC_APB1RSTR_Fields

func SPDIFRST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `SPDIFRST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_APB1RSTR_Fields

func UART2RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `UART2RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_APB1RSTR_Fields

func UART3RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `UART3RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_APB1RSTR_Fields

func UART4RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `UART4RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_APB1RSTR_Fields

func UART5RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `UART5RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.RCC_APB1RSTR_Fields

func I2C1RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `I2C1RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.RCC_APB1RSTR_Fields

func I2C2RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `I2C2RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_APB1RSTR_Fields

func I2C3RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `I2C3RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_APB1RSTR_Fields

func I2CFMP1RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `I2CFMP1RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.RCC_APB1RSTR_Fields

func CAN1RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `CAN1RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.RCC_APB1RSTR_Fields

func CAN2RST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `CAN2RST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.RCC_APB1RSTR_Fields

func PWRRST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `PWRRST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.RCC_APB1RSTR_Fields

func DACRST*(r: RCC_APB1RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DACRST=`*(r: var RCC_APB1RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_APB1RSTR_Fields

func TIM1RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TIM1RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_APB2RSTR_Fields

func TIM8RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TIM8RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_APB2RSTR_Fields

func USART1RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `USART1RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_APB2RSTR_Fields

func USART6RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `USART6RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_APB2RSTR_Fields

func ADCRST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ADCRST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_APB2RSTR_Fields

func SDIORST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `SDIORST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_APB2RSTR_Fields

func SPI1RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `SPI1RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_APB2RSTR_Fields

func SPI4RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `SPI4RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RCC_APB2RSTR_Fields

func SYSCFGRST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `SYSCFGRST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_APB2RSTR_Fields

func TIM9RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TIM9RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_APB2RSTR_Fields

func TIM10RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TIM10RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_APB2RSTR_Fields

func TIM11RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `TIM11RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_APB2RSTR_Fields

func SAI1RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `SAI1RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_APB2RSTR_Fields

func SAI2RST*(r: RCC_APB2RSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `SAI2RST=`*(r: var RCC_APB2RSTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_APB2RSTR_Fields

func OTGHSULPIEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `OTGHSULPIEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.RCC_AHB1ENR_Fields

func OTGHSEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `OTGHSEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_AHB1ENR_Fields

func DMA2EN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `DMA2EN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_AHB1ENR_Fields

func DMA1EN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `DMA1EN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.RCC_AHB1ENR_Fields

func BKPSRAMEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `BKPSRAMEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_AHB1ENR_Fields

func CRCEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CRCEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_AHB1ENR_Fields

func GPIOHEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `GPIOHEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_AHB1ENR_Fields

func GPIOGEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `GPIOGEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_AHB1ENR_Fields

func GPIOFEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `GPIOFEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_AHB1ENR_Fields

func GPIOEEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `GPIOEEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_AHB1ENR_Fields

func GPIODEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `GPIODEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_AHB1ENR_Fields

func GPIOCEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `GPIOCEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_AHB1ENR_Fields

func GPIOBEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `GPIOBEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_AHB1ENR_Fields

func GPIOAEN*(r: RCC_AHB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `GPIOAEN=`*(r: var RCC_AHB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_AHB1ENR_Fields

func OTGFSEN*(r: RCC_AHB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OTGFSEN=`*(r: var RCC_AHB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_AHB2ENR_Fields

func DCMIEN*(r: RCC_AHB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `DCMIEN=`*(r: var RCC_AHB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_AHB2ENR_Fields

func FMCEN*(r: RCC_AHB3ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FMCEN=`*(r: var RCC_AHB3ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_AHB3ENR_Fields

func QSPIEN*(r: RCC_AHB3ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `QSPIEN=`*(r: var RCC_AHB3ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_AHB3ENR_Fields

func TIM2EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TIM2EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_APB1ENR_Fields

func TIM3EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TIM3EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_APB1ENR_Fields

func TIM4EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TIM4EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_APB1ENR_Fields

func TIM5EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TIM5EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_APB1ENR_Fields

func TIM6EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TIM6EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_APB1ENR_Fields

func TIM7EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TIM7EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_APB1ENR_Fields

func TIM12EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIM12EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_APB1ENR_Fields

func TIM13EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TIM13EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_APB1ENR_Fields

func TIM14EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TIM14EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_APB1ENR_Fields

func WWDGEN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WWDGEN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_APB1ENR_Fields

func SPI2EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `SPI2EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_APB1ENR_Fields

func SPI3EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SPI3EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RCC_APB1ENR_Fields

func SPDIFEN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `SPDIFEN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_APB1ENR_Fields

func USART2EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `USART2EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_APB1ENR_Fields

func USART3EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `USART3EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_APB1ENR_Fields

func UART4EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `UART4EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_APB1ENR_Fields

func UART5EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `UART5EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.RCC_APB1ENR_Fields

func I2C1EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `I2C1EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.RCC_APB1ENR_Fields

func I2C2EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `I2C2EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_APB1ENR_Fields

func I2C3EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `I2C3EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_APB1ENR_Fields

func I2CFMP1EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `I2CFMP1EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.RCC_APB1ENR_Fields

func CAN1EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `CAN1EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.RCC_APB1ENR_Fields

func CAN2EN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `CAN2EN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.RCC_APB1ENR_Fields

func CEC*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `CEC=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.RCC_APB1ENR_Fields

func PWREN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `PWREN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.RCC_APB1ENR_Fields

func DACEN*(r: RCC_APB1ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DACEN=`*(r: var RCC_APB1ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_APB1ENR_Fields

func TIM1EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TIM1EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_APB2ENR_Fields

func TIM8EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TIM8EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_APB2ENR_Fields

func USART1EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `USART1EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_APB2ENR_Fields

func USART6EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `USART6EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_APB2ENR_Fields

func ADC1EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ADC1EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_APB2ENR_Fields

func ADC2EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ADC2EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.RCC_APB2ENR_Fields

func ADC3EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ADC3EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.RCC_APB2ENR_Fields

func SDIOEN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `SDIOEN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_APB2ENR_Fields

func SPI1EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `SPI1EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_APB2ENR_Fields

func SPI4ENR*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `SPI4ENR=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RCC_APB2ENR_Fields

func SYSCFGEN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `SYSCFGEN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_APB2ENR_Fields

func TIM9EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TIM9EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_APB2ENR_Fields

func TIM10EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TIM10EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_APB2ENR_Fields

func TIM11EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `TIM11EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_APB2ENR_Fields

func SAI1EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `SAI1EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_APB2ENR_Fields

func SAI2EN*(r: RCC_APB2ENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `SAI2EN=`*(r: var RCC_APB2ENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_APB2ENR_Fields

func GPIOALPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `GPIOALPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_AHB1LPENR_Fields

func GPIOBLPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `GPIOBLPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_AHB1LPENR_Fields

func GPIOCLPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `GPIOCLPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_AHB1LPENR_Fields

func GPIODLPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `GPIODLPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_AHB1LPENR_Fields

func GPIOELPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `GPIOELPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_AHB1LPENR_Fields

func GPIOFLPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `GPIOFLPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_AHB1LPENR_Fields

func GPIOGLPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `GPIOGLPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_AHB1LPENR_Fields

func GPIOHLPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `GPIOHLPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_AHB1LPENR_Fields

func CRCLPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CRCLPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_AHB1LPENR_Fields

func FLITFLPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FLITFLPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RCC_AHB1LPENR_Fields

func SRAM1LPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `SRAM1LPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_AHB1LPENR_Fields

func SRAM2LPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `SRAM2LPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_AHB1LPENR_Fields

func BKPSRAMLPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `BKPSRAMLPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_AHB1LPENR_Fields

func DMA1LPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `DMA1LPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.RCC_AHB1LPENR_Fields

func DMA2LPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `DMA2LPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_AHB1LPENR_Fields

func OTGHSLPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `OTGHSLPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_AHB1LPENR_Fields

func OTGHSULPILPEN*(r: RCC_AHB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `OTGHSULPILPEN=`*(r: var RCC_AHB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.RCC_AHB1LPENR_Fields

func OTGFSLPEN*(r: RCC_AHB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OTGFSLPEN=`*(r: var RCC_AHB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_AHB2LPENR_Fields

func DCMILPEN*(r: RCC_AHB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `DCMILPEN=`*(r: var RCC_AHB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_AHB2LPENR_Fields

func FMCLPEN*(r: RCC_AHB3LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FMCLPEN=`*(r: var RCC_AHB3LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_AHB3LPENR_Fields

func QSPILPEN*(r: RCC_AHB3LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `QSPILPEN=`*(r: var RCC_AHB3LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_AHB3LPENR_Fields

func TIM2LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TIM2LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_APB1LPENR_Fields

func TIM3LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TIM3LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_APB1LPENR_Fields

func TIM4LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TIM4LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_APB1LPENR_Fields

func TIM5LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TIM5LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_APB1LPENR_Fields

func TIM6LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TIM6LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_APB1LPENR_Fields

func TIM7LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TIM7LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_APB1LPENR_Fields

func TIM12LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIM12LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_APB1LPENR_Fields

func TIM13LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TIM13LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RCC_APB1LPENR_Fields

func TIM14LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TIM14LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_APB1LPENR_Fields

func WWDGLPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WWDGLPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_APB1LPENR_Fields

func SPI2LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `SPI2LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_APB1LPENR_Fields

func SPI3LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SPI3LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RCC_APB1LPENR_Fields

func SPDIFLPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `SPDIFLPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_APB1LPENR_Fields

func USART2LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `USART2LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_APB1LPENR_Fields

func USART3LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `USART3LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_APB1LPENR_Fields

func UART4LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `UART4LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.RCC_APB1LPENR_Fields

func UART5LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `UART5LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.RCC_APB1LPENR_Fields

func I2C1LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `I2C1LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.RCC_APB1LPENR_Fields

func I2C2LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `I2C2LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_APB1LPENR_Fields

func I2C3LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `I2C3LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_APB1LPENR_Fields

func I2CFMP1LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `I2CFMP1LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.RCC_APB1LPENR_Fields

func CAN1LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `CAN1LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.RCC_APB1LPENR_Fields

func CAN2LPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `CAN2LPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.RCC_APB1LPENR_Fields

func CECLPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `CECLPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.RCC_APB1LPENR_Fields

func PWRLPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `PWRLPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.RCC_APB1LPENR_Fields

func DACLPEN*(r: RCC_APB1LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DACLPEN=`*(r: var RCC_APB1LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_APB1LPENR_Fields

func TIM1LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TIM1LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_APB2LPENR_Fields

func TIM8LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TIM8LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_APB2LPENR_Fields

func USART1LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `USART1LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_APB2LPENR_Fields

func USART6LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `USART6LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_APB2LPENR_Fields

func ADC1LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ADC1LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RCC_APB2LPENR_Fields

func ADC2LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ADC2LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.RCC_APB2LPENR_Fields

func ADC3LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ADC3LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.RCC_APB2LPENR_Fields

func SDIOLPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `SDIOLPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RCC_APB2LPENR_Fields

func SPI1LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `SPI1LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RCC_APB2LPENR_Fields

func SPI4LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `SPI4LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RCC_APB2LPENR_Fields

func SYSCFGLPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `SYSCFGLPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RCC_APB2LPENR_Fields

func TIM9LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TIM9LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_APB2LPENR_Fields

func TIM10LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TIM10LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RCC_APB2LPENR_Fields

func TIM11LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `TIM11LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RCC_APB2LPENR_Fields

func SAI1LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `SAI1LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RCC_APB2LPENR_Fields

func SAI2LPEN*(r: RCC_APB2LPENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `SAI2LPEN=`*(r: var RCC_APB2LPENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RCC_APB2LPENR_Fields

func BDRST*(r: RCC_BDCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `BDRST=`*(r: var RCC_BDCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RCC_BDCR_Fields

func RTCEN*(r: RCC_BDCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `RTCEN=`*(r: var RCC_BDCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RCC_BDCR_Fields

func RTCSEL*(r: RCC_BDCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `RTCSEL=`*(r: var RCC_BDCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.RCC_BDCR_Fields

func LSEMOD*(r: RCC_BDCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `LSEMOD=`*(r: var RCC_BDCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_BDCR_Fields

func LSEBYP*(r: RCC_BDCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `LSEBYP=`*(r: var RCC_BDCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_BDCR_Fields

func LSERDY*(r: RCC_BDCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func LSEON*(r: RCC_BDCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LSEON=`*(r: var RCC_BDCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_BDCR_Fields

func LPWRRSTF*(r: RCC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `LPWRRSTF=`*(r: var RCC_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.RCC_CSR_Fields

func WWDGRSTF*(r: RCC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `WWDGRSTF=`*(r: var RCC_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.RCC_CSR_Fields

func WDGRSTF*(r: RCC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `WDGRSTF=`*(r: var RCC_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_CSR_Fields

func SFTRSTF*(r: RCC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `SFTRSTF=`*(r: var RCC_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.RCC_CSR_Fields

func PORRSTF*(r: RCC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `PORRSTF=`*(r: var RCC_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.RCC_CSR_Fields

func PADRSTF*(r: RCC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `PADRSTF=`*(r: var RCC_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.RCC_CSR_Fields

func BORRSTF*(r: RCC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `BORRSTF=`*(r: var RCC_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.RCC_CSR_Fields

func RMVF*(r: RCC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `RMVF=`*(r: var RCC_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.RCC_CSR_Fields

func LSIRDY*(r: RCC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func LSION*(r: RCC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LSION=`*(r: var RCC_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_CSR_Fields

func SSCGEN*(r: RCC_SSCGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SSCGEN=`*(r: var RCC_SSCGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.RCC_SSCGR_Fields

func SPREADSEL*(r: RCC_SSCGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `SPREADSEL=`*(r: var RCC_SSCGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.RCC_SSCGR_Fields

func INCSTEP*(r: RCC_SSCGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 27)

proc `INCSTEP=`*(r: var RCC_SSCGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 27)
  tmp.setMask((val shl 13).masked(13 .. 27))
  r = tmp.RCC_SSCGR_Fields

func MODPER*(r: RCC_SSCGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 12)

proc `MODPER=`*(r: var RCC_SSCGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 12)
  tmp.setMask((val shl 0).masked(0 .. 12))
  r = tmp.RCC_SSCGR_Fields

func PLLI2SM*(r: RCC_PLLI2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 5)

proc `PLLI2SM=`*(r: var RCC_PLLI2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 5)
  tmp.setMask((val shl 0).masked(0 .. 5))
  r = tmp.RCC_PLLI2SCFGR_Fields

func PLLI2SN*(r: RCC_PLLI2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 14)

proc `PLLI2SN=`*(r: var RCC_PLLI2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 14)
  tmp.setMask((val shl 6).masked(6 .. 14))
  r = tmp.RCC_PLLI2SCFGR_Fields

func PLLI2SP*(r: RCC_PLLI2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PLLI2SP=`*(r: var RCC_PLLI2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.RCC_PLLI2SCFGR_Fields

func PLLI2SQ*(r: RCC_PLLI2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `PLLI2SQ=`*(r: var RCC_PLLI2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.RCC_PLLI2SCFGR_Fields

func PLLI2SR*(r: RCC_PLLI2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 30)

proc `PLLI2SR=`*(r: var RCC_PLLI2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 30)
  tmp.setMask((val shl 28).masked(28 .. 30))
  r = tmp.RCC_PLLI2SCFGR_Fields

func PLLSAIM*(r: RCC_PLLSAICFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 5)

proc `PLLSAIM=`*(r: var RCC_PLLSAICFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 5)
  tmp.setMask((val shl 0).masked(0 .. 5))
  r = tmp.RCC_PLLSAICFGR_Fields

func PLLSAIN*(r: RCC_PLLSAICFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 14)

proc `PLLSAIN=`*(r: var RCC_PLLSAICFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 14)
  tmp.setMask((val shl 6).masked(6 .. 14))
  r = tmp.RCC_PLLSAICFGR_Fields

func PLLSAIP*(r: RCC_PLLSAICFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PLLSAIP=`*(r: var RCC_PLLSAICFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.RCC_PLLSAICFGR_Fields

func PLLSAIQ*(r: RCC_PLLSAICFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `PLLSAIQ=`*(r: var RCC_PLLSAICFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.RCC_PLLSAICFGR_Fields

func PLLI2SDIVQ*(r: RCC_DCKCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `PLLI2SDIVQ=`*(r: var RCC_DCKCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.RCC_DCKCFGR_Fields

func PLLSAIDIVQ*(r: RCC_DCKCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 12)

proc `PLLSAIDIVQ=`*(r: var RCC_DCKCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 12)
  tmp.setMask((val shl 8).masked(8 .. 12))
  r = tmp.RCC_DCKCFGR_Fields

func SAI1SRC*(r: RCC_DCKCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `SAI1SRC=`*(r: var RCC_DCKCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.RCC_DCKCFGR_Fields

func SAI2SRC*(r: RCC_DCKCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `SAI2SRC=`*(r: var RCC_DCKCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.RCC_DCKCFGR_Fields

func TIMPRE*(r: RCC_DCKCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `TIMPRE=`*(r: var RCC_DCKCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.RCC_DCKCFGR_Fields

func I2S1SRC*(r: RCC_DCKCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 26)

proc `I2S1SRC=`*(r: var RCC_DCKCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 26)
  tmp.setMask((val shl 25).masked(25 .. 26))
  r = tmp.RCC_DCKCFGR_Fields

func I2S2SRC*(r: RCC_DCKCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(27 .. 28)

proc `I2S2SRC=`*(r: var RCC_DCKCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 28)
  tmp.setMask((val shl 27).masked(27 .. 28))
  r = tmp.RCC_DCKCFGR_Fields

func AHB2APB1_CKEN*(r: RCC_CKGATENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `AHB2APB1_CKEN=`*(r: var RCC_CKGATENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RCC_CKGATENR_Fields

func AHB2APB2_CKEN*(r: RCC_CKGATENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `AHB2APB2_CKEN=`*(r: var RCC_CKGATENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RCC_CKGATENR_Fields

func CM4DBG_CKEN*(r: RCC_CKGATENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CM4DBG_CKEN=`*(r: var RCC_CKGATENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RCC_CKGATENR_Fields

func SPARE_CKEN*(r: RCC_CKGATENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `SPARE_CKEN=`*(r: var RCC_CKGATENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RCC_CKGATENR_Fields

func SRAM_CKEN*(r: RCC_CKGATENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `SRAM_CKEN=`*(r: var RCC_CKGATENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RCC_CKGATENR_Fields

func FLITF_CKEN*(r: RCC_CKGATENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FLITF_CKEN=`*(r: var RCC_CKGATENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RCC_CKGATENR_Fields

func RCC_CKEN*(r: RCC_CKGATENR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `RCC_CKEN=`*(r: var RCC_CKGATENR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RCC_CKGATENR_Fields

func FMPI2C1SEL*(r: RCC_DCKCFGR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `FMPI2C1SEL=`*(r: var RCC_DCKCFGR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.RCC_DCKCFGR2_Fields

func CECSEL*(r: RCC_DCKCFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `CECSEL=`*(r: var RCC_DCKCFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.RCC_DCKCFGR2_Fields

func CK48MSEL*(r: RCC_DCKCFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `CK48MSEL=`*(r: var RCC_DCKCFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.RCC_DCKCFGR2_Fields

func SDIOSEL*(r: RCC_DCKCFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `SDIOSEL=`*(r: var RCC_DCKCFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.RCC_DCKCFGR2_Fields

func SPDIFSEL*(r: RCC_DCKCFGR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `SPDIFSEL=`*(r: var RCC_DCKCFGR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.RCC_DCKCFGR2_Fields

type
  GPIOH_MODER_Fields* = distinct uint32
  GPIOH_OTYPER_Fields* = distinct uint32
  GPIOH_OSPEEDR_Fields* = distinct uint32
  GPIOH_PUPDR_Fields* = distinct uint32
  GPIOH_IDR_Fields* = distinct uint32
  GPIOH_ODR_Fields* = distinct uint32
  GPIOH_BSRR_Fields* = distinct uint32
  GPIOH_LCKR_Fields* = distinct uint32
  GPIOH_AFRL_Fields* = distinct uint32
  GPIOH_AFRH_Fields* = distinct uint32

proc read*(reg: GPIOH_MODER_Type): GPIOH_MODER_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOH_MODER_Fields](reg.loc))

proc write*(reg: GPIOH_MODER_Type, val: GPIOH_MODER_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOH_MODER_Fields](reg.loc), val)

proc write*(reg: GPIOH_MODER_Type, MODER15: uint32 = 0, MODER14: uint32 = 0, MODER13: uint32 = 0, MODER12: uint32 = 0, MODER11: uint32 = 0, MODER10: uint32 = 0, MODER9: uint32 = 0, MODER8: uint32 = 0, MODER7: uint32 = 0, MODER6: uint32 = 0, MODER5: uint32 = 0, MODER4: uint32 = 0, MODER3: uint32 = 0, MODER2: uint32 = 0, MODER1: uint32 = 0, MODER0: uint32 = 0) =
  var x: uint32
  x.setMask((MODER15 shl 30).masked(30 .. 31))
  x.setMask((MODER14 shl 28).masked(28 .. 29))
  x.setMask((MODER13 shl 26).masked(26 .. 27))
  x.setMask((MODER12 shl 24).masked(24 .. 25))
  x.setMask((MODER11 shl 22).masked(22 .. 23))
  x.setMask((MODER10 shl 20).masked(20 .. 21))
  x.setMask((MODER9 shl 18).masked(18 .. 19))
  x.setMask((MODER8 shl 16).masked(16 .. 17))
  x.setMask((MODER7 shl 14).masked(14 .. 15))
  x.setMask((MODER6 shl 12).masked(12 .. 13))
  x.setMask((MODER5 shl 10).masked(10 .. 11))
  x.setMask((MODER4 shl 8).masked(8 .. 9))
  x.setMask((MODER3 shl 6).masked(6 .. 7))
  x.setMask((MODER2 shl 4).masked(4 .. 5))
  x.setMask((MODER1 shl 2).masked(2 .. 3))
  x.setMask((MODER0 shl 0).masked(0 .. 1))
  reg.write x.GPIOH_MODER_Fields

template modifyIt*(reg: GPIOH_MODER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOH_OTYPER_Type): GPIOH_OTYPER_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOH_OTYPER_Fields](reg.loc))

proc write*(reg: GPIOH_OTYPER_Type, val: GPIOH_OTYPER_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOH_OTYPER_Fields](reg.loc), val)

proc write*(reg: GPIOH_OTYPER_Type, OT15: bool = false, OT14: bool = false, OT13: bool = false, OT12: bool = false, OT11: bool = false, OT10: bool = false, OT9: bool = false, OT8: bool = false, OT7: bool = false, OT6: bool = false, OT5: bool = false, OT4: bool = false, OT3: bool = false, OT2: bool = false, OT1: bool = false, OT0: bool = false) =
  var x: uint32
  x.setMask((OT15.uint32 shl 15).masked(15 .. 15))
  x.setMask((OT14.uint32 shl 14).masked(14 .. 14))
  x.setMask((OT13.uint32 shl 13).masked(13 .. 13))
  x.setMask((OT12.uint32 shl 12).masked(12 .. 12))
  x.setMask((OT11.uint32 shl 11).masked(11 .. 11))
  x.setMask((OT10.uint32 shl 10).masked(10 .. 10))
  x.setMask((OT9.uint32 shl 9).masked(9 .. 9))
  x.setMask((OT8.uint32 shl 8).masked(8 .. 8))
  x.setMask((OT7.uint32 shl 7).masked(7 .. 7))
  x.setMask((OT6.uint32 shl 6).masked(6 .. 6))
  x.setMask((OT5.uint32 shl 5).masked(5 .. 5))
  x.setMask((OT4.uint32 shl 4).masked(4 .. 4))
  x.setMask((OT3.uint32 shl 3).masked(3 .. 3))
  x.setMask((OT2.uint32 shl 2).masked(2 .. 2))
  x.setMask((OT1.uint32 shl 1).masked(1 .. 1))
  x.setMask((OT0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOH_OTYPER_Fields

template modifyIt*(reg: GPIOH_OTYPER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOH_OSPEEDR_Type): GPIOH_OSPEEDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOH_OSPEEDR_Fields](reg.loc))

proc write*(reg: GPIOH_OSPEEDR_Type, val: GPIOH_OSPEEDR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOH_OSPEEDR_Fields](reg.loc), val)

proc write*(reg: GPIOH_OSPEEDR_Type, OSPEEDR15: uint32 = 0, OSPEEDR14: uint32 = 0, OSPEEDR13: uint32 = 0, OSPEEDR12: uint32 = 0, OSPEEDR11: uint32 = 0, OSPEEDR10: uint32 = 0, OSPEEDR9: uint32 = 0, OSPEEDR8: uint32 = 0, OSPEEDR7: uint32 = 0, OSPEEDR6: uint32 = 0, OSPEEDR5: uint32 = 0, OSPEEDR4: uint32 = 0, OSPEEDR3: uint32 = 0, OSPEEDR2: uint32 = 0, OSPEEDR1: uint32 = 0, OSPEEDR0: uint32 = 0) =
  var x: uint32
  x.setMask((OSPEEDR15 shl 30).masked(30 .. 31))
  x.setMask((OSPEEDR14 shl 28).masked(28 .. 29))
  x.setMask((OSPEEDR13 shl 26).masked(26 .. 27))
  x.setMask((OSPEEDR12 shl 24).masked(24 .. 25))
  x.setMask((OSPEEDR11 shl 22).masked(22 .. 23))
  x.setMask((OSPEEDR10 shl 20).masked(20 .. 21))
  x.setMask((OSPEEDR9 shl 18).masked(18 .. 19))
  x.setMask((OSPEEDR8 shl 16).masked(16 .. 17))
  x.setMask((OSPEEDR7 shl 14).masked(14 .. 15))
  x.setMask((OSPEEDR6 shl 12).masked(12 .. 13))
  x.setMask((OSPEEDR5 shl 10).masked(10 .. 11))
  x.setMask((OSPEEDR4 shl 8).masked(8 .. 9))
  x.setMask((OSPEEDR3 shl 6).masked(6 .. 7))
  x.setMask((OSPEEDR2 shl 4).masked(4 .. 5))
  x.setMask((OSPEEDR1 shl 2).masked(2 .. 3))
  x.setMask((OSPEEDR0 shl 0).masked(0 .. 1))
  reg.write x.GPIOH_OSPEEDR_Fields

template modifyIt*(reg: GPIOH_OSPEEDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOH_PUPDR_Type): GPIOH_PUPDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOH_PUPDR_Fields](reg.loc))

proc write*(reg: GPIOH_PUPDR_Type, val: GPIOH_PUPDR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOH_PUPDR_Fields](reg.loc), val)

proc write*(reg: GPIOH_PUPDR_Type, PUPDR15: uint32 = 0, PUPDR14: uint32 = 0, PUPDR13: uint32 = 0, PUPDR12: uint32 = 0, PUPDR11: uint32 = 0, PUPDR10: uint32 = 0, PUPDR9: uint32 = 0, PUPDR8: uint32 = 0, PUPDR7: uint32 = 0, PUPDR6: uint32 = 0, PUPDR5: uint32 = 0, PUPDR4: uint32 = 0, PUPDR3: uint32 = 0, PUPDR2: uint32 = 0, PUPDR1: uint32 = 0, PUPDR0: uint32 = 0) =
  var x: uint32
  x.setMask((PUPDR15 shl 30).masked(30 .. 31))
  x.setMask((PUPDR14 shl 28).masked(28 .. 29))
  x.setMask((PUPDR13 shl 26).masked(26 .. 27))
  x.setMask((PUPDR12 shl 24).masked(24 .. 25))
  x.setMask((PUPDR11 shl 22).masked(22 .. 23))
  x.setMask((PUPDR10 shl 20).masked(20 .. 21))
  x.setMask((PUPDR9 shl 18).masked(18 .. 19))
  x.setMask((PUPDR8 shl 16).masked(16 .. 17))
  x.setMask((PUPDR7 shl 14).masked(14 .. 15))
  x.setMask((PUPDR6 shl 12).masked(12 .. 13))
  x.setMask((PUPDR5 shl 10).masked(10 .. 11))
  x.setMask((PUPDR4 shl 8).masked(8 .. 9))
  x.setMask((PUPDR3 shl 6).masked(6 .. 7))
  x.setMask((PUPDR2 shl 4).masked(4 .. 5))
  x.setMask((PUPDR1 shl 2).masked(2 .. 3))
  x.setMask((PUPDR0 shl 0).masked(0 .. 1))
  reg.write x.GPIOH_PUPDR_Fields

template modifyIt*(reg: GPIOH_PUPDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOH_IDR_Type): GPIOH_IDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOH_IDR_Fields](reg.loc))

proc read*(reg: GPIOH_ODR_Type): GPIOH_ODR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOH_ODR_Fields](reg.loc))

proc write*(reg: GPIOH_ODR_Type, val: GPIOH_ODR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOH_ODR_Fields](reg.loc), val)

proc write*(reg: GPIOH_ODR_Type, ODR15: bool = false, ODR14: bool = false, ODR13: bool = false, ODR12: bool = false, ODR11: bool = false, ODR10: bool = false, ODR9: bool = false, ODR8: bool = false, ODR7: bool = false, ODR6: bool = false, ODR5: bool = false, ODR4: bool = false, ODR3: bool = false, ODR2: bool = false, ODR1: bool = false, ODR0: bool = false) =
  var x: uint32
  x.setMask((ODR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((ODR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((ODR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((ODR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((ODR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((ODR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((ODR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((ODR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((ODR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((ODR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((ODR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((ODR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((ODR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((ODR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((ODR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((ODR0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOH_ODR_Fields

template modifyIt*(reg: GPIOH_ODR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: GPIOH_BSRR_Type, val: GPIOH_BSRR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOH_BSRR_Fields](reg.loc), val)

proc write*(reg: GPIOH_BSRR_Type, BR15: bool = false, BR14: bool = false, BR13: bool = false, BR12: bool = false, BR11: bool = false, BR10: bool = false, BR9: bool = false, BR8: bool = false, BR7: bool = false, BR6: bool = false, BR5: bool = false, BR4: bool = false, BR3: bool = false, BR2: bool = false, BR1: bool = false, BR0: bool = false, BS15: bool = false, BS14: bool = false, BS13: bool = false, BS12: bool = false, BS11: bool = false, BS10: bool = false, BS9: bool = false, BS8: bool = false, BS7: bool = false, BS6: bool = false, BS5: bool = false, BS4: bool = false, BS3: bool = false, BS2: bool = false, BS1: bool = false, BS0: bool = false) =
  var x: uint32
  x.setMask((BR15.uint32 shl 31).masked(31 .. 31))
  x.setMask((BR14.uint32 shl 30).masked(30 .. 30))
  x.setMask((BR13.uint32 shl 29).masked(29 .. 29))
  x.setMask((BR12.uint32 shl 28).masked(28 .. 28))
  x.setMask((BR11.uint32 shl 27).masked(27 .. 27))
  x.setMask((BR10.uint32 shl 26).masked(26 .. 26))
  x.setMask((BR9.uint32 shl 25).masked(25 .. 25))
  x.setMask((BR8.uint32 shl 24).masked(24 .. 24))
  x.setMask((BR7.uint32 shl 23).masked(23 .. 23))
  x.setMask((BR6.uint32 shl 22).masked(22 .. 22))
  x.setMask((BR5.uint32 shl 21).masked(21 .. 21))
  x.setMask((BR4.uint32 shl 20).masked(20 .. 20))
  x.setMask((BR3.uint32 shl 19).masked(19 .. 19))
  x.setMask((BR2.uint32 shl 18).masked(18 .. 18))
  x.setMask((BR1.uint32 shl 17).masked(17 .. 17))
  x.setMask((BR0.uint32 shl 16).masked(16 .. 16))
  x.setMask((BS15.uint32 shl 15).masked(15 .. 15))
  x.setMask((BS14.uint32 shl 14).masked(14 .. 14))
  x.setMask((BS13.uint32 shl 13).masked(13 .. 13))
  x.setMask((BS12.uint32 shl 12).masked(12 .. 12))
  x.setMask((BS11.uint32 shl 11).masked(11 .. 11))
  x.setMask((BS10.uint32 shl 10).masked(10 .. 10))
  x.setMask((BS9.uint32 shl 9).masked(9 .. 9))
  x.setMask((BS8.uint32 shl 8).masked(8 .. 8))
  x.setMask((BS7.uint32 shl 7).masked(7 .. 7))
  x.setMask((BS6.uint32 shl 6).masked(6 .. 6))
  x.setMask((BS5.uint32 shl 5).masked(5 .. 5))
  x.setMask((BS4.uint32 shl 4).masked(4 .. 4))
  x.setMask((BS3.uint32 shl 3).masked(3 .. 3))
  x.setMask((BS2.uint32 shl 2).masked(2 .. 2))
  x.setMask((BS1.uint32 shl 1).masked(1 .. 1))
  x.setMask((BS0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOH_BSRR_Fields

proc read*(reg: GPIOH_LCKR_Type): GPIOH_LCKR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOH_LCKR_Fields](reg.loc))

proc write*(reg: GPIOH_LCKR_Type, val: GPIOH_LCKR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOH_LCKR_Fields](reg.loc), val)

proc write*(reg: GPIOH_LCKR_Type, LCKK: bool = false, LCK15: bool = false, LCK14: bool = false, LCK13: bool = false, LCK12: bool = false, LCK11: bool = false, LCK10: bool = false, LCK9: bool = false, LCK8: bool = false, LCK7: bool = false, LCK6: bool = false, LCK5: bool = false, LCK4: bool = false, LCK3: bool = false, LCK2: bool = false, LCK1: bool = false, LCK0: bool = false) =
  var x: uint32
  x.setMask((LCKK.uint32 shl 16).masked(16 .. 16))
  x.setMask((LCK15.uint32 shl 15).masked(15 .. 15))
  x.setMask((LCK14.uint32 shl 14).masked(14 .. 14))
  x.setMask((LCK13.uint32 shl 13).masked(13 .. 13))
  x.setMask((LCK12.uint32 shl 12).masked(12 .. 12))
  x.setMask((LCK11.uint32 shl 11).masked(11 .. 11))
  x.setMask((LCK10.uint32 shl 10).masked(10 .. 10))
  x.setMask((LCK9.uint32 shl 9).masked(9 .. 9))
  x.setMask((LCK8.uint32 shl 8).masked(8 .. 8))
  x.setMask((LCK7.uint32 shl 7).masked(7 .. 7))
  x.setMask((LCK6.uint32 shl 6).masked(6 .. 6))
  x.setMask((LCK5.uint32 shl 5).masked(5 .. 5))
  x.setMask((LCK4.uint32 shl 4).masked(4 .. 4))
  x.setMask((LCK3.uint32 shl 3).masked(3 .. 3))
  x.setMask((LCK2.uint32 shl 2).masked(2 .. 2))
  x.setMask((LCK1.uint32 shl 1).masked(1 .. 1))
  x.setMask((LCK0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOH_LCKR_Fields

template modifyIt*(reg: GPIOH_LCKR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOH_AFRL_Type): GPIOH_AFRL_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOH_AFRL_Fields](reg.loc))

proc write*(reg: GPIOH_AFRL_Type, val: GPIOH_AFRL_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOH_AFRL_Fields](reg.loc), val)

proc write*(reg: GPIOH_AFRL_Type, AFRL7: uint32 = 0, AFRL6: uint32 = 0, AFRL5: uint32 = 0, AFRL4: uint32 = 0, AFRL3: uint32 = 0, AFRL2: uint32 = 0, AFRL1: uint32 = 0, AFRL0: uint32 = 0) =
  var x: uint32
  x.setMask((AFRL7 shl 28).masked(28 .. 31))
  x.setMask((AFRL6 shl 24).masked(24 .. 27))
  x.setMask((AFRL5 shl 20).masked(20 .. 23))
  x.setMask((AFRL4 shl 16).masked(16 .. 19))
  x.setMask((AFRL3 shl 12).masked(12 .. 15))
  x.setMask((AFRL2 shl 8).masked(8 .. 11))
  x.setMask((AFRL1 shl 4).masked(4 .. 7))
  x.setMask((AFRL0 shl 0).masked(0 .. 3))
  reg.write x.GPIOH_AFRL_Fields

template modifyIt*(reg: GPIOH_AFRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOH_AFRH_Type): GPIOH_AFRH_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOH_AFRH_Fields](reg.loc))

proc write*(reg: GPIOH_AFRH_Type, val: GPIOH_AFRH_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOH_AFRH_Fields](reg.loc), val)

proc write*(reg: GPIOH_AFRH_Type, AFRH15: uint32 = 0, AFRH14: uint32 = 0, AFRH13: uint32 = 0, AFRH12: uint32 = 0, AFRH11: uint32 = 0, AFRH10: uint32 = 0, AFRH9: uint32 = 0, AFRH8: uint32 = 0) =
  var x: uint32
  x.setMask((AFRH15 shl 28).masked(28 .. 31))
  x.setMask((AFRH14 shl 24).masked(24 .. 27))
  x.setMask((AFRH13 shl 20).masked(20 .. 23))
  x.setMask((AFRH12 shl 16).masked(16 .. 19))
  x.setMask((AFRH11 shl 12).masked(12 .. 15))
  x.setMask((AFRH10 shl 8).masked(8 .. 11))
  x.setMask((AFRH9 shl 4).masked(4 .. 7))
  x.setMask((AFRH8 shl 0).masked(0 .. 3))
  reg.write x.GPIOH_AFRH_Fields

template modifyIt*(reg: GPIOH_AFRH_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func MODER15*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `MODER15=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOH_MODER_Fields

func MODER14*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `MODER14=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOH_MODER_Fields

func MODER13*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `MODER13=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOH_MODER_Fields

func MODER12*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `MODER12=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOH_MODER_Fields

func MODER11*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `MODER11=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOH_MODER_Fields

func MODER10*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MODER10=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOH_MODER_Fields

func MODER9*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `MODER9=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOH_MODER_Fields

func MODER8*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `MODER8=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOH_MODER_Fields

func MODER7*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `MODER7=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOH_MODER_Fields

func MODER6*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `MODER6=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOH_MODER_Fields

func MODER5*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MODER5=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOH_MODER_Fields

func MODER4*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `MODER4=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOH_MODER_Fields

func MODER3*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `MODER3=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOH_MODER_Fields

func MODER2*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MODER2=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOH_MODER_Fields

func MODER1*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `MODER1=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOH_MODER_Fields

func MODER0*(r: GPIOH_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `MODER0=`*(r: var GPIOH_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOH_MODER_Fields

func OT15*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OT15=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOH_OTYPER_Fields

func OT14*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `OT14=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOH_OTYPER_Fields

func OT13*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `OT13=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOH_OTYPER_Fields

func OT12*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `OT12=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOH_OTYPER_Fields

func OT11*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OT11=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOH_OTYPER_Fields

func OT10*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OT10=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOH_OTYPER_Fields

func OT9*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `OT9=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOH_OTYPER_Fields

func OT8*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `OT8=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOH_OTYPER_Fields

func OT7*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OT7=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOH_OTYPER_Fields

func OT6*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `OT6=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOH_OTYPER_Fields

func OT5*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `OT5=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOH_OTYPER_Fields

func OT4*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OT4=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOH_OTYPER_Fields

func OT3*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OT3=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOH_OTYPER_Fields

func OT2*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OT2=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOH_OTYPER_Fields

func OT1*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `OT1=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOH_OTYPER_Fields

func OT0*(r: GPIOH_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `OT0=`*(r: var GPIOH_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOH_OTYPER_Fields

func OSPEEDR15*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `OSPEEDR15=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR14*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `OSPEEDR14=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR13*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `OSPEEDR13=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR12*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `OSPEEDR12=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR11*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `OSPEEDR11=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR10*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `OSPEEDR10=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR9*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `OSPEEDR9=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR8*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `OSPEEDR8=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR7*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `OSPEEDR7=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR6*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `OSPEEDR6=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR5*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `OSPEEDR5=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR4*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `OSPEEDR4=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR3*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `OSPEEDR3=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR2*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `OSPEEDR2=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR1*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `OSPEEDR1=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOH_OSPEEDR_Fields

func OSPEEDR0*(r: GPIOH_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `OSPEEDR0=`*(r: var GPIOH_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOH_OSPEEDR_Fields

func PUPDR15*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `PUPDR15=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR14*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `PUPDR14=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR13*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `PUPDR13=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR12*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `PUPDR12=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR11*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `PUPDR11=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR10*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `PUPDR10=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR9*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `PUPDR9=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR8*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PUPDR8=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR7*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `PUPDR7=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR6*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PUPDR6=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR5*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `PUPDR5=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR4*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PUPDR4=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR3*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `PUPDR3=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR2*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `PUPDR2=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR1*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `PUPDR1=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOH_PUPDR_Fields

func PUPDR0*(r: GPIOH_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `PUPDR0=`*(r: var GPIOH_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOH_PUPDR_Fields

func IDR15*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

func IDR14*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

func IDR13*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

func IDR12*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

func IDR11*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func IDR10*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func IDR9*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func IDR8*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func IDR7*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func IDR6*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func IDR5*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func IDR4*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func IDR3*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func IDR2*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func IDR1*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func IDR0*(r: GPIOH_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func ODR15*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ODR15=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOH_ODR_Fields

func ODR14*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ODR14=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOH_ODR_Fields

func ODR13*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ODR13=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOH_ODR_Fields

func ODR12*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `ODR12=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOH_ODR_Fields

func ODR11*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `ODR11=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOH_ODR_Fields

func ODR10*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ODR10=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOH_ODR_Fields

func ODR9*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ODR9=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOH_ODR_Fields

func ODR8*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ODR8=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOH_ODR_Fields

func ODR7*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ODR7=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOH_ODR_Fields

func ODR6*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ODR6=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOH_ODR_Fields

func ODR5*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ODR5=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOH_ODR_Fields

func ODR4*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ODR4=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOH_ODR_Fields

func ODR3*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `ODR3=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOH_ODR_Fields

func ODR2*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ODR2=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOH_ODR_Fields

func ODR1*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ODR1=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOH_ODR_Fields

func ODR0*(r: GPIOH_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ODR0=`*(r: var GPIOH_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOH_ODR_Fields

proc `BR15=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.GPIOH_BSRR_Fields

proc `BR14=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.GPIOH_BSRR_Fields

proc `BR13=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.GPIOH_BSRR_Fields

proc `BR12=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.GPIOH_BSRR_Fields

proc `BR11=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.GPIOH_BSRR_Fields

proc `BR10=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.GPIOH_BSRR_Fields

proc `BR9=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.GPIOH_BSRR_Fields

proc `BR8=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.GPIOH_BSRR_Fields

proc `BR7=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.GPIOH_BSRR_Fields

proc `BR6=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.GPIOH_BSRR_Fields

proc `BR5=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.GPIOH_BSRR_Fields

proc `BR4=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.GPIOH_BSRR_Fields

proc `BR3=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.GPIOH_BSRR_Fields

proc `BR2=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.GPIOH_BSRR_Fields

proc `BR1=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.GPIOH_BSRR_Fields

proc `BR0=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.GPIOH_BSRR_Fields

proc `BS15=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOH_BSRR_Fields

proc `BS14=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOH_BSRR_Fields

proc `BS13=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOH_BSRR_Fields

proc `BS12=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOH_BSRR_Fields

proc `BS11=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOH_BSRR_Fields

proc `BS10=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOH_BSRR_Fields

proc `BS9=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOH_BSRR_Fields

proc `BS8=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOH_BSRR_Fields

proc `BS7=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOH_BSRR_Fields

proc `BS6=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOH_BSRR_Fields

proc `BS5=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOH_BSRR_Fields

proc `BS4=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOH_BSRR_Fields

proc `BS3=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOH_BSRR_Fields

proc `BS2=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOH_BSRR_Fields

proc `BS1=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOH_BSRR_Fields

proc `BS0=`*(r: var GPIOH_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOH_BSRR_Fields

func LCKK*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `LCKK=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.GPIOH_LCKR_Fields

func LCK15*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `LCK15=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOH_LCKR_Fields

func LCK14*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `LCK14=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOH_LCKR_Fields

func LCK13*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `LCK13=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOH_LCKR_Fields

func LCK12*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `LCK12=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOH_LCKR_Fields

func LCK11*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `LCK11=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOH_LCKR_Fields

func LCK10*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `LCK10=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOH_LCKR_Fields

func LCK9*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `LCK9=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOH_LCKR_Fields

func LCK8*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LCK8=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOH_LCKR_Fields

func LCK7*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `LCK7=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOH_LCKR_Fields

func LCK6*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LCK6=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOH_LCKR_Fields

func LCK5*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `LCK5=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOH_LCKR_Fields

func LCK4*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `LCK4=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOH_LCKR_Fields

func LCK3*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `LCK3=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOH_LCKR_Fields

func LCK2*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `LCK2=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOH_LCKR_Fields

func LCK1*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `LCK1=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOH_LCKR_Fields

func LCK0*(r: GPIOH_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LCK0=`*(r: var GPIOH_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOH_LCKR_Fields

func AFRL7*(r: GPIOH_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 31)

proc `AFRL7=`*(r: var GPIOH_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 31)
  tmp.setMask((val shl 28).masked(28 .. 31))
  r = tmp.GPIOH_AFRL_Fields

func AFRL6*(r: GPIOH_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `AFRL6=`*(r: var GPIOH_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.GPIOH_AFRL_Fields

func AFRL5*(r: GPIOH_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `AFRL5=`*(r: var GPIOH_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.GPIOH_AFRL_Fields

func AFRL4*(r: GPIOH_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `AFRL4=`*(r: var GPIOH_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.GPIOH_AFRL_Fields

func AFRL3*(r: GPIOH_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `AFRL3=`*(r: var GPIOH_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.GPIOH_AFRL_Fields

func AFRL2*(r: GPIOH_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `AFRL2=`*(r: var GPIOH_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.GPIOH_AFRL_Fields

func AFRL1*(r: GPIOH_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `AFRL1=`*(r: var GPIOH_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.GPIOH_AFRL_Fields

func AFRL0*(r: GPIOH_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `AFRL0=`*(r: var GPIOH_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.GPIOH_AFRL_Fields

func AFRH15*(r: GPIOH_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 31)

proc `AFRH15=`*(r: var GPIOH_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 31)
  tmp.setMask((val shl 28).masked(28 .. 31))
  r = tmp.GPIOH_AFRH_Fields

func AFRH14*(r: GPIOH_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `AFRH14=`*(r: var GPIOH_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.GPIOH_AFRH_Fields

func AFRH13*(r: GPIOH_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `AFRH13=`*(r: var GPIOH_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.GPIOH_AFRH_Fields

func AFRH12*(r: GPIOH_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `AFRH12=`*(r: var GPIOH_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.GPIOH_AFRH_Fields

func AFRH11*(r: GPIOH_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `AFRH11=`*(r: var GPIOH_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.GPIOH_AFRH_Fields

func AFRH10*(r: GPIOH_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `AFRH10=`*(r: var GPIOH_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.GPIOH_AFRH_Fields

func AFRH9*(r: GPIOH_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `AFRH9=`*(r: var GPIOH_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.GPIOH_AFRH_Fields

func AFRH8*(r: GPIOH_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `AFRH8=`*(r: var GPIOH_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.GPIOH_AFRH_Fields

type
  GPIOB_MODER_Fields* = distinct uint32
  GPIOB_OTYPER_Fields* = distinct uint32
  GPIOB_OSPEEDR_Fields* = distinct uint32
  GPIOB_PUPDR_Fields* = distinct uint32
  GPIOB_IDR_Fields* = distinct uint32
  GPIOB_ODR_Fields* = distinct uint32
  GPIOB_BSRR_Fields* = distinct uint32
  GPIOB_LCKR_Fields* = distinct uint32
  GPIOB_AFRL_Fields* = distinct uint32
  GPIOB_AFRH_Fields* = distinct uint32

proc read*(reg: GPIOB_MODER_Type): GPIOB_MODER_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOB_MODER_Fields](reg.loc))

proc write*(reg: GPIOB_MODER_Type, val: GPIOB_MODER_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOB_MODER_Fields](reg.loc), val)

proc write*(reg: GPIOB_MODER_Type, MODER15: uint32 = 0, MODER14: uint32 = 0, MODER13: uint32 = 0, MODER12: uint32 = 0, MODER11: uint32 = 0, MODER10: uint32 = 0, MODER9: uint32 = 0, MODER8: uint32 = 0, MODER7: uint32 = 0, MODER6: uint32 = 0, MODER5: uint32 = 0, MODER4: uint32 = 2, MODER3: uint32 = 2, MODER2: uint32 = 0, MODER1: uint32 = 0, MODER0: uint32 = 0) =
  var x: uint32
  x.setMask((MODER15 shl 30).masked(30 .. 31))
  x.setMask((MODER14 shl 28).masked(28 .. 29))
  x.setMask((MODER13 shl 26).masked(26 .. 27))
  x.setMask((MODER12 shl 24).masked(24 .. 25))
  x.setMask((MODER11 shl 22).masked(22 .. 23))
  x.setMask((MODER10 shl 20).masked(20 .. 21))
  x.setMask((MODER9 shl 18).masked(18 .. 19))
  x.setMask((MODER8 shl 16).masked(16 .. 17))
  x.setMask((MODER7 shl 14).masked(14 .. 15))
  x.setMask((MODER6 shl 12).masked(12 .. 13))
  x.setMask((MODER5 shl 10).masked(10 .. 11))
  x.setMask((MODER4 shl 8).masked(8 .. 9))
  x.setMask((MODER3 shl 6).masked(6 .. 7))
  x.setMask((MODER2 shl 4).masked(4 .. 5))
  x.setMask((MODER1 shl 2).masked(2 .. 3))
  x.setMask((MODER0 shl 0).masked(0 .. 1))
  reg.write x.GPIOB_MODER_Fields

template modifyIt*(reg: GPIOB_MODER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOB_OTYPER_Type): GPIOB_OTYPER_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOB_OTYPER_Fields](reg.loc))

proc write*(reg: GPIOB_OTYPER_Type, val: GPIOB_OTYPER_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOB_OTYPER_Fields](reg.loc), val)

proc write*(reg: GPIOB_OTYPER_Type, OT15: bool = false, OT14: bool = false, OT13: bool = false, OT12: bool = false, OT11: bool = false, OT10: bool = false, OT9: bool = false, OT8: bool = false, OT7: bool = false, OT6: bool = false, OT5: bool = false, OT4: bool = false, OT3: bool = false, OT2: bool = false, OT1: bool = false, OT0: bool = false) =
  var x: uint32
  x.setMask((OT15.uint32 shl 15).masked(15 .. 15))
  x.setMask((OT14.uint32 shl 14).masked(14 .. 14))
  x.setMask((OT13.uint32 shl 13).masked(13 .. 13))
  x.setMask((OT12.uint32 shl 12).masked(12 .. 12))
  x.setMask((OT11.uint32 shl 11).masked(11 .. 11))
  x.setMask((OT10.uint32 shl 10).masked(10 .. 10))
  x.setMask((OT9.uint32 shl 9).masked(9 .. 9))
  x.setMask((OT8.uint32 shl 8).masked(8 .. 8))
  x.setMask((OT7.uint32 shl 7).masked(7 .. 7))
  x.setMask((OT6.uint32 shl 6).masked(6 .. 6))
  x.setMask((OT5.uint32 shl 5).masked(5 .. 5))
  x.setMask((OT4.uint32 shl 4).masked(4 .. 4))
  x.setMask((OT3.uint32 shl 3).masked(3 .. 3))
  x.setMask((OT2.uint32 shl 2).masked(2 .. 2))
  x.setMask((OT1.uint32 shl 1).masked(1 .. 1))
  x.setMask((OT0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOB_OTYPER_Fields

template modifyIt*(reg: GPIOB_OTYPER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOB_OSPEEDR_Type): GPIOB_OSPEEDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOB_OSPEEDR_Fields](reg.loc))

proc write*(reg: GPIOB_OSPEEDR_Type, val: GPIOB_OSPEEDR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOB_OSPEEDR_Fields](reg.loc), val)

proc write*(reg: GPIOB_OSPEEDR_Type, OSPEEDR15: uint32 = 0, OSPEEDR14: uint32 = 0, OSPEEDR13: uint32 = 0, OSPEEDR12: uint32 = 0, OSPEEDR11: uint32 = 0, OSPEEDR10: uint32 = 0, OSPEEDR9: uint32 = 0, OSPEEDR8: uint32 = 0, OSPEEDR7: uint32 = 0, OSPEEDR6: uint32 = 0, OSPEEDR5: uint32 = 0, OSPEEDR4: uint32 = 0, OSPEEDR3: uint32 = 3, OSPEEDR2: uint32 = 0, OSPEEDR1: uint32 = 0, OSPEEDR0: uint32 = 0) =
  var x: uint32
  x.setMask((OSPEEDR15 shl 30).masked(30 .. 31))
  x.setMask((OSPEEDR14 shl 28).masked(28 .. 29))
  x.setMask((OSPEEDR13 shl 26).masked(26 .. 27))
  x.setMask((OSPEEDR12 shl 24).masked(24 .. 25))
  x.setMask((OSPEEDR11 shl 22).masked(22 .. 23))
  x.setMask((OSPEEDR10 shl 20).masked(20 .. 21))
  x.setMask((OSPEEDR9 shl 18).masked(18 .. 19))
  x.setMask((OSPEEDR8 shl 16).masked(16 .. 17))
  x.setMask((OSPEEDR7 shl 14).masked(14 .. 15))
  x.setMask((OSPEEDR6 shl 12).masked(12 .. 13))
  x.setMask((OSPEEDR5 shl 10).masked(10 .. 11))
  x.setMask((OSPEEDR4 shl 8).masked(8 .. 9))
  x.setMask((OSPEEDR3 shl 6).masked(6 .. 7))
  x.setMask((OSPEEDR2 shl 4).masked(4 .. 5))
  x.setMask((OSPEEDR1 shl 2).masked(2 .. 3))
  x.setMask((OSPEEDR0 shl 0).masked(0 .. 1))
  reg.write x.GPIOB_OSPEEDR_Fields

template modifyIt*(reg: GPIOB_OSPEEDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOB_PUPDR_Type): GPIOB_PUPDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOB_PUPDR_Fields](reg.loc))

proc write*(reg: GPIOB_PUPDR_Type, val: GPIOB_PUPDR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOB_PUPDR_Fields](reg.loc), val)

proc write*(reg: GPIOB_PUPDR_Type, PUPDR15: uint32 = 0, PUPDR14: uint32 = 0, PUPDR13: uint32 = 0, PUPDR12: uint32 = 0, PUPDR11: uint32 = 0, PUPDR10: uint32 = 0, PUPDR9: uint32 = 0, PUPDR8: uint32 = 0, PUPDR7: uint32 = 0, PUPDR6: uint32 = 0, PUPDR5: uint32 = 0, PUPDR4: uint32 = 1, PUPDR3: uint32 = 0, PUPDR2: uint32 = 0, PUPDR1: uint32 = 0, PUPDR0: uint32 = 0) =
  var x: uint32
  x.setMask((PUPDR15 shl 30).masked(30 .. 31))
  x.setMask((PUPDR14 shl 28).masked(28 .. 29))
  x.setMask((PUPDR13 shl 26).masked(26 .. 27))
  x.setMask((PUPDR12 shl 24).masked(24 .. 25))
  x.setMask((PUPDR11 shl 22).masked(22 .. 23))
  x.setMask((PUPDR10 shl 20).masked(20 .. 21))
  x.setMask((PUPDR9 shl 18).masked(18 .. 19))
  x.setMask((PUPDR8 shl 16).masked(16 .. 17))
  x.setMask((PUPDR7 shl 14).masked(14 .. 15))
  x.setMask((PUPDR6 shl 12).masked(12 .. 13))
  x.setMask((PUPDR5 shl 10).masked(10 .. 11))
  x.setMask((PUPDR4 shl 8).masked(8 .. 9))
  x.setMask((PUPDR3 shl 6).masked(6 .. 7))
  x.setMask((PUPDR2 shl 4).masked(4 .. 5))
  x.setMask((PUPDR1 shl 2).masked(2 .. 3))
  x.setMask((PUPDR0 shl 0).masked(0 .. 1))
  reg.write x.GPIOB_PUPDR_Fields

template modifyIt*(reg: GPIOB_PUPDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOB_IDR_Type): GPIOB_IDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOB_IDR_Fields](reg.loc))

proc read*(reg: GPIOB_ODR_Type): GPIOB_ODR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOB_ODR_Fields](reg.loc))

proc write*(reg: GPIOB_ODR_Type, val: GPIOB_ODR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOB_ODR_Fields](reg.loc), val)

proc write*(reg: GPIOB_ODR_Type, ODR15: bool = false, ODR14: bool = false, ODR13: bool = false, ODR12: bool = false, ODR11: bool = false, ODR10: bool = false, ODR9: bool = false, ODR8: bool = false, ODR7: bool = false, ODR6: bool = false, ODR5: bool = false, ODR4: bool = false, ODR3: bool = false, ODR2: bool = false, ODR1: bool = false, ODR0: bool = false) =
  var x: uint32
  x.setMask((ODR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((ODR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((ODR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((ODR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((ODR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((ODR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((ODR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((ODR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((ODR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((ODR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((ODR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((ODR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((ODR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((ODR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((ODR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((ODR0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOB_ODR_Fields

template modifyIt*(reg: GPIOB_ODR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: GPIOB_BSRR_Type, val: GPIOB_BSRR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOB_BSRR_Fields](reg.loc), val)

proc write*(reg: GPIOB_BSRR_Type, BR15: bool = false, BR14: bool = false, BR13: bool = false, BR12: bool = false, BR11: bool = false, BR10: bool = false, BR9: bool = false, BR8: bool = false, BR7: bool = false, BR6: bool = false, BR5: bool = false, BR4: bool = false, BR3: bool = false, BR2: bool = false, BR1: bool = false, BR0: bool = false, BS15: bool = false, BS14: bool = false, BS13: bool = false, BS12: bool = false, BS11: bool = false, BS10: bool = false, BS9: bool = false, BS8: bool = false, BS7: bool = false, BS6: bool = false, BS5: bool = false, BS4: bool = false, BS3: bool = false, BS2: bool = false, BS1: bool = false, BS0: bool = false) =
  var x: uint32
  x.setMask((BR15.uint32 shl 31).masked(31 .. 31))
  x.setMask((BR14.uint32 shl 30).masked(30 .. 30))
  x.setMask((BR13.uint32 shl 29).masked(29 .. 29))
  x.setMask((BR12.uint32 shl 28).masked(28 .. 28))
  x.setMask((BR11.uint32 shl 27).masked(27 .. 27))
  x.setMask((BR10.uint32 shl 26).masked(26 .. 26))
  x.setMask((BR9.uint32 shl 25).masked(25 .. 25))
  x.setMask((BR8.uint32 shl 24).masked(24 .. 24))
  x.setMask((BR7.uint32 shl 23).masked(23 .. 23))
  x.setMask((BR6.uint32 shl 22).masked(22 .. 22))
  x.setMask((BR5.uint32 shl 21).masked(21 .. 21))
  x.setMask((BR4.uint32 shl 20).masked(20 .. 20))
  x.setMask((BR3.uint32 shl 19).masked(19 .. 19))
  x.setMask((BR2.uint32 shl 18).masked(18 .. 18))
  x.setMask((BR1.uint32 shl 17).masked(17 .. 17))
  x.setMask((BR0.uint32 shl 16).masked(16 .. 16))
  x.setMask((BS15.uint32 shl 15).masked(15 .. 15))
  x.setMask((BS14.uint32 shl 14).masked(14 .. 14))
  x.setMask((BS13.uint32 shl 13).masked(13 .. 13))
  x.setMask((BS12.uint32 shl 12).masked(12 .. 12))
  x.setMask((BS11.uint32 shl 11).masked(11 .. 11))
  x.setMask((BS10.uint32 shl 10).masked(10 .. 10))
  x.setMask((BS9.uint32 shl 9).masked(9 .. 9))
  x.setMask((BS8.uint32 shl 8).masked(8 .. 8))
  x.setMask((BS7.uint32 shl 7).masked(7 .. 7))
  x.setMask((BS6.uint32 shl 6).masked(6 .. 6))
  x.setMask((BS5.uint32 shl 5).masked(5 .. 5))
  x.setMask((BS4.uint32 shl 4).masked(4 .. 4))
  x.setMask((BS3.uint32 shl 3).masked(3 .. 3))
  x.setMask((BS2.uint32 shl 2).masked(2 .. 2))
  x.setMask((BS1.uint32 shl 1).masked(1 .. 1))
  x.setMask((BS0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOB_BSRR_Fields

proc read*(reg: GPIOB_LCKR_Type): GPIOB_LCKR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOB_LCKR_Fields](reg.loc))

proc write*(reg: GPIOB_LCKR_Type, val: GPIOB_LCKR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOB_LCKR_Fields](reg.loc), val)

proc write*(reg: GPIOB_LCKR_Type, LCKK: bool = false, LCK15: bool = false, LCK14: bool = false, LCK13: bool = false, LCK12: bool = false, LCK11: bool = false, LCK10: bool = false, LCK9: bool = false, LCK8: bool = false, LCK7: bool = false, LCK6: bool = false, LCK5: bool = false, LCK4: bool = false, LCK3: bool = false, LCK2: bool = false, LCK1: bool = false, LCK0: bool = false) =
  var x: uint32
  x.setMask((LCKK.uint32 shl 16).masked(16 .. 16))
  x.setMask((LCK15.uint32 shl 15).masked(15 .. 15))
  x.setMask((LCK14.uint32 shl 14).masked(14 .. 14))
  x.setMask((LCK13.uint32 shl 13).masked(13 .. 13))
  x.setMask((LCK12.uint32 shl 12).masked(12 .. 12))
  x.setMask((LCK11.uint32 shl 11).masked(11 .. 11))
  x.setMask((LCK10.uint32 shl 10).masked(10 .. 10))
  x.setMask((LCK9.uint32 shl 9).masked(9 .. 9))
  x.setMask((LCK8.uint32 shl 8).masked(8 .. 8))
  x.setMask((LCK7.uint32 shl 7).masked(7 .. 7))
  x.setMask((LCK6.uint32 shl 6).masked(6 .. 6))
  x.setMask((LCK5.uint32 shl 5).masked(5 .. 5))
  x.setMask((LCK4.uint32 shl 4).masked(4 .. 4))
  x.setMask((LCK3.uint32 shl 3).masked(3 .. 3))
  x.setMask((LCK2.uint32 shl 2).masked(2 .. 2))
  x.setMask((LCK1.uint32 shl 1).masked(1 .. 1))
  x.setMask((LCK0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOB_LCKR_Fields

template modifyIt*(reg: GPIOB_LCKR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOB_AFRL_Type): GPIOB_AFRL_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOB_AFRL_Fields](reg.loc))

proc write*(reg: GPIOB_AFRL_Type, val: GPIOB_AFRL_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOB_AFRL_Fields](reg.loc), val)

proc write*(reg: GPIOB_AFRL_Type, AFRL7: uint32 = 0, AFRL6: uint32 = 0, AFRL5: uint32 = 0, AFRL4: uint32 = 0, AFRL3: uint32 = 0, AFRL2: uint32 = 0, AFRL1: uint32 = 0, AFRL0: uint32 = 0) =
  var x: uint32
  x.setMask((AFRL7 shl 28).masked(28 .. 31))
  x.setMask((AFRL6 shl 24).masked(24 .. 27))
  x.setMask((AFRL5 shl 20).masked(20 .. 23))
  x.setMask((AFRL4 shl 16).masked(16 .. 19))
  x.setMask((AFRL3 shl 12).masked(12 .. 15))
  x.setMask((AFRL2 shl 8).masked(8 .. 11))
  x.setMask((AFRL1 shl 4).masked(4 .. 7))
  x.setMask((AFRL0 shl 0).masked(0 .. 3))
  reg.write x.GPIOB_AFRL_Fields

template modifyIt*(reg: GPIOB_AFRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOB_AFRH_Type): GPIOB_AFRH_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOB_AFRH_Fields](reg.loc))

proc write*(reg: GPIOB_AFRH_Type, val: GPIOB_AFRH_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOB_AFRH_Fields](reg.loc), val)

proc write*(reg: GPIOB_AFRH_Type, AFRH15: uint32 = 0, AFRH14: uint32 = 0, AFRH13: uint32 = 0, AFRH12: uint32 = 0, AFRH11: uint32 = 0, AFRH10: uint32 = 0, AFRH9: uint32 = 0, AFRH8: uint32 = 0) =
  var x: uint32
  x.setMask((AFRH15 shl 28).masked(28 .. 31))
  x.setMask((AFRH14 shl 24).masked(24 .. 27))
  x.setMask((AFRH13 shl 20).masked(20 .. 23))
  x.setMask((AFRH12 shl 16).masked(16 .. 19))
  x.setMask((AFRH11 shl 12).masked(12 .. 15))
  x.setMask((AFRH10 shl 8).masked(8 .. 11))
  x.setMask((AFRH9 shl 4).masked(4 .. 7))
  x.setMask((AFRH8 shl 0).masked(0 .. 3))
  reg.write x.GPIOB_AFRH_Fields

template modifyIt*(reg: GPIOB_AFRH_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func MODER15*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `MODER15=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOB_MODER_Fields

func MODER14*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `MODER14=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOB_MODER_Fields

func MODER13*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `MODER13=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOB_MODER_Fields

func MODER12*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `MODER12=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOB_MODER_Fields

func MODER11*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `MODER11=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOB_MODER_Fields

func MODER10*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MODER10=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOB_MODER_Fields

func MODER9*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `MODER9=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOB_MODER_Fields

func MODER8*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `MODER8=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOB_MODER_Fields

func MODER7*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `MODER7=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOB_MODER_Fields

func MODER6*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `MODER6=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOB_MODER_Fields

func MODER5*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MODER5=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOB_MODER_Fields

func MODER4*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `MODER4=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOB_MODER_Fields

func MODER3*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `MODER3=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOB_MODER_Fields

func MODER2*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MODER2=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOB_MODER_Fields

func MODER1*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `MODER1=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOB_MODER_Fields

func MODER0*(r: GPIOB_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `MODER0=`*(r: var GPIOB_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOB_MODER_Fields

func OT15*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OT15=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOB_OTYPER_Fields

func OT14*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `OT14=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOB_OTYPER_Fields

func OT13*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `OT13=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOB_OTYPER_Fields

func OT12*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `OT12=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOB_OTYPER_Fields

func OT11*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OT11=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOB_OTYPER_Fields

func OT10*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OT10=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOB_OTYPER_Fields

func OT9*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `OT9=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOB_OTYPER_Fields

func OT8*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `OT8=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOB_OTYPER_Fields

func OT7*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OT7=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOB_OTYPER_Fields

func OT6*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `OT6=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOB_OTYPER_Fields

func OT5*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `OT5=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOB_OTYPER_Fields

func OT4*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OT4=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOB_OTYPER_Fields

func OT3*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OT3=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOB_OTYPER_Fields

func OT2*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OT2=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOB_OTYPER_Fields

func OT1*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `OT1=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOB_OTYPER_Fields

func OT0*(r: GPIOB_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `OT0=`*(r: var GPIOB_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOB_OTYPER_Fields

func OSPEEDR15*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `OSPEEDR15=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR14*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `OSPEEDR14=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR13*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `OSPEEDR13=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR12*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `OSPEEDR12=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR11*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `OSPEEDR11=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR10*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `OSPEEDR10=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR9*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `OSPEEDR9=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR8*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `OSPEEDR8=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR7*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `OSPEEDR7=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR6*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `OSPEEDR6=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR5*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `OSPEEDR5=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR4*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `OSPEEDR4=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR3*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `OSPEEDR3=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR2*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `OSPEEDR2=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR1*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `OSPEEDR1=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOB_OSPEEDR_Fields

func OSPEEDR0*(r: GPIOB_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `OSPEEDR0=`*(r: var GPIOB_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOB_OSPEEDR_Fields

func PUPDR15*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `PUPDR15=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR14*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `PUPDR14=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR13*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `PUPDR13=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR12*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `PUPDR12=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR11*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `PUPDR11=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR10*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `PUPDR10=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR9*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `PUPDR9=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR8*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PUPDR8=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR7*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `PUPDR7=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR6*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PUPDR6=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR5*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `PUPDR5=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR4*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PUPDR4=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR3*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `PUPDR3=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR2*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `PUPDR2=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR1*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `PUPDR1=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOB_PUPDR_Fields

func PUPDR0*(r: GPIOB_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `PUPDR0=`*(r: var GPIOB_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOB_PUPDR_Fields

func IDR15*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

func IDR14*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

func IDR13*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

func IDR12*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

func IDR11*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func IDR10*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func IDR9*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func IDR8*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func IDR7*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func IDR6*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func IDR5*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func IDR4*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func IDR3*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func IDR2*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func IDR1*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func IDR0*(r: GPIOB_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func ODR15*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ODR15=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOB_ODR_Fields

func ODR14*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ODR14=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOB_ODR_Fields

func ODR13*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ODR13=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOB_ODR_Fields

func ODR12*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `ODR12=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOB_ODR_Fields

func ODR11*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `ODR11=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOB_ODR_Fields

func ODR10*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ODR10=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOB_ODR_Fields

func ODR9*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ODR9=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOB_ODR_Fields

func ODR8*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ODR8=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOB_ODR_Fields

func ODR7*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ODR7=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOB_ODR_Fields

func ODR6*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ODR6=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOB_ODR_Fields

func ODR5*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ODR5=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOB_ODR_Fields

func ODR4*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ODR4=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOB_ODR_Fields

func ODR3*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `ODR3=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOB_ODR_Fields

func ODR2*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ODR2=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOB_ODR_Fields

func ODR1*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ODR1=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOB_ODR_Fields

func ODR0*(r: GPIOB_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ODR0=`*(r: var GPIOB_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOB_ODR_Fields

proc `BR15=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.GPIOB_BSRR_Fields

proc `BR14=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.GPIOB_BSRR_Fields

proc `BR13=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.GPIOB_BSRR_Fields

proc `BR12=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.GPIOB_BSRR_Fields

proc `BR11=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.GPIOB_BSRR_Fields

proc `BR10=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.GPIOB_BSRR_Fields

proc `BR9=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.GPIOB_BSRR_Fields

proc `BR8=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.GPIOB_BSRR_Fields

proc `BR7=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.GPIOB_BSRR_Fields

proc `BR6=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.GPIOB_BSRR_Fields

proc `BR5=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.GPIOB_BSRR_Fields

proc `BR4=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.GPIOB_BSRR_Fields

proc `BR3=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.GPIOB_BSRR_Fields

proc `BR2=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.GPIOB_BSRR_Fields

proc `BR1=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.GPIOB_BSRR_Fields

proc `BR0=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.GPIOB_BSRR_Fields

proc `BS15=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOB_BSRR_Fields

proc `BS14=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOB_BSRR_Fields

proc `BS13=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOB_BSRR_Fields

proc `BS12=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOB_BSRR_Fields

proc `BS11=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOB_BSRR_Fields

proc `BS10=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOB_BSRR_Fields

proc `BS9=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOB_BSRR_Fields

proc `BS8=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOB_BSRR_Fields

proc `BS7=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOB_BSRR_Fields

proc `BS6=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOB_BSRR_Fields

proc `BS5=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOB_BSRR_Fields

proc `BS4=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOB_BSRR_Fields

proc `BS3=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOB_BSRR_Fields

proc `BS2=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOB_BSRR_Fields

proc `BS1=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOB_BSRR_Fields

proc `BS0=`*(r: var GPIOB_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOB_BSRR_Fields

func LCKK*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `LCKK=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.GPIOB_LCKR_Fields

func LCK15*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `LCK15=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOB_LCKR_Fields

func LCK14*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `LCK14=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOB_LCKR_Fields

func LCK13*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `LCK13=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOB_LCKR_Fields

func LCK12*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `LCK12=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOB_LCKR_Fields

func LCK11*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `LCK11=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOB_LCKR_Fields

func LCK10*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `LCK10=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOB_LCKR_Fields

func LCK9*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `LCK9=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOB_LCKR_Fields

func LCK8*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LCK8=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOB_LCKR_Fields

func LCK7*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `LCK7=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOB_LCKR_Fields

func LCK6*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LCK6=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOB_LCKR_Fields

func LCK5*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `LCK5=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOB_LCKR_Fields

func LCK4*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `LCK4=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOB_LCKR_Fields

func LCK3*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `LCK3=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOB_LCKR_Fields

func LCK2*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `LCK2=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOB_LCKR_Fields

func LCK1*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `LCK1=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOB_LCKR_Fields

func LCK0*(r: GPIOB_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LCK0=`*(r: var GPIOB_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOB_LCKR_Fields

func AFRL7*(r: GPIOB_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 31)

proc `AFRL7=`*(r: var GPIOB_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 31)
  tmp.setMask((val shl 28).masked(28 .. 31))
  r = tmp.GPIOB_AFRL_Fields

func AFRL6*(r: GPIOB_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `AFRL6=`*(r: var GPIOB_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.GPIOB_AFRL_Fields

func AFRL5*(r: GPIOB_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `AFRL5=`*(r: var GPIOB_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.GPIOB_AFRL_Fields

func AFRL4*(r: GPIOB_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `AFRL4=`*(r: var GPIOB_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.GPIOB_AFRL_Fields

func AFRL3*(r: GPIOB_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `AFRL3=`*(r: var GPIOB_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.GPIOB_AFRL_Fields

func AFRL2*(r: GPIOB_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `AFRL2=`*(r: var GPIOB_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.GPIOB_AFRL_Fields

func AFRL1*(r: GPIOB_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `AFRL1=`*(r: var GPIOB_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.GPIOB_AFRL_Fields

func AFRL0*(r: GPIOB_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `AFRL0=`*(r: var GPIOB_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.GPIOB_AFRL_Fields

func AFRH15*(r: GPIOB_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 31)

proc `AFRH15=`*(r: var GPIOB_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 31)
  tmp.setMask((val shl 28).masked(28 .. 31))
  r = tmp.GPIOB_AFRH_Fields

func AFRH14*(r: GPIOB_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `AFRH14=`*(r: var GPIOB_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.GPIOB_AFRH_Fields

func AFRH13*(r: GPIOB_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `AFRH13=`*(r: var GPIOB_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.GPIOB_AFRH_Fields

func AFRH12*(r: GPIOB_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `AFRH12=`*(r: var GPIOB_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.GPIOB_AFRH_Fields

func AFRH11*(r: GPIOB_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `AFRH11=`*(r: var GPIOB_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.GPIOB_AFRH_Fields

func AFRH10*(r: GPIOB_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `AFRH10=`*(r: var GPIOB_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.GPIOB_AFRH_Fields

func AFRH9*(r: GPIOB_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `AFRH9=`*(r: var GPIOB_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.GPIOB_AFRH_Fields

func AFRH8*(r: GPIOB_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `AFRH8=`*(r: var GPIOB_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.GPIOB_AFRH_Fields

type
  GPIOA_MODER_Fields* = distinct uint32
  GPIOA_OTYPER_Fields* = distinct uint32
  GPIOA_OSPEEDR_Fields* = distinct uint32
  GPIOA_PUPDR_Fields* = distinct uint32
  GPIOA_IDR_Fields* = distinct uint32
  GPIOA_ODR_Fields* = distinct uint32
  GPIOA_BSRR_Fields* = distinct uint32
  GPIOA_LCKR_Fields* = distinct uint32
  GPIOA_AFRL_Fields* = distinct uint32
  GPIOA_AFRH_Fields* = distinct uint32

proc read*(reg: GPIOA_MODER_Type): GPIOA_MODER_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_MODER_Fields](reg.loc))

proc write*(reg: GPIOA_MODER_Type, val: GPIOA_MODER_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_MODER_Fields](reg.loc), val)

proc write*(reg: GPIOA_MODER_Type, MODER15: uint32 = 2, MODER14: uint32 = 2, MODER13: uint32 = 2, MODER12: uint32 = 0, MODER11: uint32 = 0, MODER10: uint32 = 0, MODER9: uint32 = 0, MODER8: uint32 = 0, MODER7: uint32 = 0, MODER6: uint32 = 0, MODER5: uint32 = 0, MODER4: uint32 = 0, MODER3: uint32 = 0, MODER2: uint32 = 0, MODER1: uint32 = 0, MODER0: uint32 = 0) =
  var x: uint32
  x.setMask((MODER15 shl 30).masked(30 .. 31))
  x.setMask((MODER14 shl 28).masked(28 .. 29))
  x.setMask((MODER13 shl 26).masked(26 .. 27))
  x.setMask((MODER12 shl 24).masked(24 .. 25))
  x.setMask((MODER11 shl 22).masked(22 .. 23))
  x.setMask((MODER10 shl 20).masked(20 .. 21))
  x.setMask((MODER9 shl 18).masked(18 .. 19))
  x.setMask((MODER8 shl 16).masked(16 .. 17))
  x.setMask((MODER7 shl 14).masked(14 .. 15))
  x.setMask((MODER6 shl 12).masked(12 .. 13))
  x.setMask((MODER5 shl 10).masked(10 .. 11))
  x.setMask((MODER4 shl 8).masked(8 .. 9))
  x.setMask((MODER3 shl 6).masked(6 .. 7))
  x.setMask((MODER2 shl 4).masked(4 .. 5))
  x.setMask((MODER1 shl 2).masked(2 .. 3))
  x.setMask((MODER0 shl 0).masked(0 .. 1))
  reg.write x.GPIOA_MODER_Fields

template modifyIt*(reg: GPIOA_MODER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOA_OTYPER_Type): GPIOA_OTYPER_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_OTYPER_Fields](reg.loc))

proc write*(reg: GPIOA_OTYPER_Type, val: GPIOA_OTYPER_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_OTYPER_Fields](reg.loc), val)

proc write*(reg: GPIOA_OTYPER_Type, OT15: bool = false, OT14: bool = false, OT13: bool = false, OT12: bool = false, OT11: bool = false, OT10: bool = false, OT9: bool = false, OT8: bool = false, OT7: bool = false, OT6: bool = false, OT5: bool = false, OT4: bool = false, OT3: bool = false, OT2: bool = false, OT1: bool = false, OT0: bool = false) =
  var x: uint32
  x.setMask((OT15.uint32 shl 15).masked(15 .. 15))
  x.setMask((OT14.uint32 shl 14).masked(14 .. 14))
  x.setMask((OT13.uint32 shl 13).masked(13 .. 13))
  x.setMask((OT12.uint32 shl 12).masked(12 .. 12))
  x.setMask((OT11.uint32 shl 11).masked(11 .. 11))
  x.setMask((OT10.uint32 shl 10).masked(10 .. 10))
  x.setMask((OT9.uint32 shl 9).masked(9 .. 9))
  x.setMask((OT8.uint32 shl 8).masked(8 .. 8))
  x.setMask((OT7.uint32 shl 7).masked(7 .. 7))
  x.setMask((OT6.uint32 shl 6).masked(6 .. 6))
  x.setMask((OT5.uint32 shl 5).masked(5 .. 5))
  x.setMask((OT4.uint32 shl 4).masked(4 .. 4))
  x.setMask((OT3.uint32 shl 3).masked(3 .. 3))
  x.setMask((OT2.uint32 shl 2).masked(2 .. 2))
  x.setMask((OT1.uint32 shl 1).masked(1 .. 1))
  x.setMask((OT0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOA_OTYPER_Fields

template modifyIt*(reg: GPIOA_OTYPER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOA_OSPEEDR_Type): GPIOA_OSPEEDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_OSPEEDR_Fields](reg.loc))

proc write*(reg: GPIOA_OSPEEDR_Type, val: GPIOA_OSPEEDR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_OSPEEDR_Fields](reg.loc), val)

proc write*(reg: GPIOA_OSPEEDR_Type, OSPEEDR15: uint32 = 0, OSPEEDR14: uint32 = 0, OSPEEDR13: uint32 = 0, OSPEEDR12: uint32 = 0, OSPEEDR11: uint32 = 0, OSPEEDR10: uint32 = 0, OSPEEDR9: uint32 = 0, OSPEEDR8: uint32 = 0, OSPEEDR7: uint32 = 0, OSPEEDR6: uint32 = 0, OSPEEDR5: uint32 = 0, OSPEEDR4: uint32 = 0, OSPEEDR3: uint32 = 0, OSPEEDR2: uint32 = 0, OSPEEDR1: uint32 = 0, OSPEEDR0: uint32 = 0) =
  var x: uint32
  x.setMask((OSPEEDR15 shl 30).masked(30 .. 31))
  x.setMask((OSPEEDR14 shl 28).masked(28 .. 29))
  x.setMask((OSPEEDR13 shl 26).masked(26 .. 27))
  x.setMask((OSPEEDR12 shl 24).masked(24 .. 25))
  x.setMask((OSPEEDR11 shl 22).masked(22 .. 23))
  x.setMask((OSPEEDR10 shl 20).masked(20 .. 21))
  x.setMask((OSPEEDR9 shl 18).masked(18 .. 19))
  x.setMask((OSPEEDR8 shl 16).masked(16 .. 17))
  x.setMask((OSPEEDR7 shl 14).masked(14 .. 15))
  x.setMask((OSPEEDR6 shl 12).masked(12 .. 13))
  x.setMask((OSPEEDR5 shl 10).masked(10 .. 11))
  x.setMask((OSPEEDR4 shl 8).masked(8 .. 9))
  x.setMask((OSPEEDR3 shl 6).masked(6 .. 7))
  x.setMask((OSPEEDR2 shl 4).masked(4 .. 5))
  x.setMask((OSPEEDR1 shl 2).masked(2 .. 3))
  x.setMask((OSPEEDR0 shl 0).masked(0 .. 1))
  reg.write x.GPIOA_OSPEEDR_Fields

template modifyIt*(reg: GPIOA_OSPEEDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOA_PUPDR_Type): GPIOA_PUPDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_PUPDR_Fields](reg.loc))

proc write*(reg: GPIOA_PUPDR_Type, val: GPIOA_PUPDR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_PUPDR_Fields](reg.loc), val)

proc write*(reg: GPIOA_PUPDR_Type, PUPDR15: uint32 = 1, PUPDR14: uint32 = 2, PUPDR13: uint32 = 1, PUPDR12: uint32 = 0, PUPDR11: uint32 = 0, PUPDR10: uint32 = 0, PUPDR9: uint32 = 0, PUPDR8: uint32 = 0, PUPDR7: uint32 = 0, PUPDR6: uint32 = 0, PUPDR5: uint32 = 0, PUPDR4: uint32 = 0, PUPDR3: uint32 = 0, PUPDR2: uint32 = 0, PUPDR1: uint32 = 0, PUPDR0: uint32 = 0) =
  var x: uint32
  x.setMask((PUPDR15 shl 30).masked(30 .. 31))
  x.setMask((PUPDR14 shl 28).masked(28 .. 29))
  x.setMask((PUPDR13 shl 26).masked(26 .. 27))
  x.setMask((PUPDR12 shl 24).masked(24 .. 25))
  x.setMask((PUPDR11 shl 22).masked(22 .. 23))
  x.setMask((PUPDR10 shl 20).masked(20 .. 21))
  x.setMask((PUPDR9 shl 18).masked(18 .. 19))
  x.setMask((PUPDR8 shl 16).masked(16 .. 17))
  x.setMask((PUPDR7 shl 14).masked(14 .. 15))
  x.setMask((PUPDR6 shl 12).masked(12 .. 13))
  x.setMask((PUPDR5 shl 10).masked(10 .. 11))
  x.setMask((PUPDR4 shl 8).masked(8 .. 9))
  x.setMask((PUPDR3 shl 6).masked(6 .. 7))
  x.setMask((PUPDR2 shl 4).masked(4 .. 5))
  x.setMask((PUPDR1 shl 2).masked(2 .. 3))
  x.setMask((PUPDR0 shl 0).masked(0 .. 1))
  reg.write x.GPIOA_PUPDR_Fields

template modifyIt*(reg: GPIOA_PUPDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOA_IDR_Type): GPIOA_IDR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_IDR_Fields](reg.loc))

proc read*(reg: GPIOA_ODR_Type): GPIOA_ODR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_ODR_Fields](reg.loc))

proc write*(reg: GPIOA_ODR_Type, val: GPIOA_ODR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_ODR_Fields](reg.loc), val)

proc write*(reg: GPIOA_ODR_Type, ODR15: bool = false, ODR14: bool = false, ODR13: bool = false, ODR12: bool = false, ODR11: bool = false, ODR10: bool = false, ODR9: bool = false, ODR8: bool = false, ODR7: bool = false, ODR6: bool = false, ODR5: bool = false, ODR4: bool = false, ODR3: bool = false, ODR2: bool = false, ODR1: bool = false, ODR0: bool = false) =
  var x: uint32
  x.setMask((ODR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((ODR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((ODR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((ODR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((ODR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((ODR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((ODR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((ODR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((ODR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((ODR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((ODR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((ODR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((ODR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((ODR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((ODR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((ODR0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOA_ODR_Fields

template modifyIt*(reg: GPIOA_ODR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: GPIOA_BSRR_Type, val: GPIOA_BSRR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_BSRR_Fields](reg.loc), val)

proc write*(reg: GPIOA_BSRR_Type, BR15: bool = false, BR14: bool = false, BR13: bool = false, BR12: bool = false, BR11: bool = false, BR10: bool = false, BR9: bool = false, BR8: bool = false, BR7: bool = false, BR6: bool = false, BR5: bool = false, BR4: bool = false, BR3: bool = false, BR2: bool = false, BR1: bool = false, BR0: bool = false, BS15: bool = false, BS14: bool = false, BS13: bool = false, BS12: bool = false, BS11: bool = false, BS10: bool = false, BS9: bool = false, BS8: bool = false, BS7: bool = false, BS6: bool = false, BS5: bool = false, BS4: bool = false, BS3: bool = false, BS2: bool = false, BS1: bool = false, BS0: bool = false) =
  var x: uint32
  x.setMask((BR15.uint32 shl 31).masked(31 .. 31))
  x.setMask((BR14.uint32 shl 30).masked(30 .. 30))
  x.setMask((BR13.uint32 shl 29).masked(29 .. 29))
  x.setMask((BR12.uint32 shl 28).masked(28 .. 28))
  x.setMask((BR11.uint32 shl 27).masked(27 .. 27))
  x.setMask((BR10.uint32 shl 26).masked(26 .. 26))
  x.setMask((BR9.uint32 shl 25).masked(25 .. 25))
  x.setMask((BR8.uint32 shl 24).masked(24 .. 24))
  x.setMask((BR7.uint32 shl 23).masked(23 .. 23))
  x.setMask((BR6.uint32 shl 22).masked(22 .. 22))
  x.setMask((BR5.uint32 shl 21).masked(21 .. 21))
  x.setMask((BR4.uint32 shl 20).masked(20 .. 20))
  x.setMask((BR3.uint32 shl 19).masked(19 .. 19))
  x.setMask((BR2.uint32 shl 18).masked(18 .. 18))
  x.setMask((BR1.uint32 shl 17).masked(17 .. 17))
  x.setMask((BR0.uint32 shl 16).masked(16 .. 16))
  x.setMask((BS15.uint32 shl 15).masked(15 .. 15))
  x.setMask((BS14.uint32 shl 14).masked(14 .. 14))
  x.setMask((BS13.uint32 shl 13).masked(13 .. 13))
  x.setMask((BS12.uint32 shl 12).masked(12 .. 12))
  x.setMask((BS11.uint32 shl 11).masked(11 .. 11))
  x.setMask((BS10.uint32 shl 10).masked(10 .. 10))
  x.setMask((BS9.uint32 shl 9).masked(9 .. 9))
  x.setMask((BS8.uint32 shl 8).masked(8 .. 8))
  x.setMask((BS7.uint32 shl 7).masked(7 .. 7))
  x.setMask((BS6.uint32 shl 6).masked(6 .. 6))
  x.setMask((BS5.uint32 shl 5).masked(5 .. 5))
  x.setMask((BS4.uint32 shl 4).masked(4 .. 4))
  x.setMask((BS3.uint32 shl 3).masked(3 .. 3))
  x.setMask((BS2.uint32 shl 2).masked(2 .. 2))
  x.setMask((BS1.uint32 shl 1).masked(1 .. 1))
  x.setMask((BS0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOA_BSRR_Fields

proc read*(reg: GPIOA_LCKR_Type): GPIOA_LCKR_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_LCKR_Fields](reg.loc))

proc write*(reg: GPIOA_LCKR_Type, val: GPIOA_LCKR_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_LCKR_Fields](reg.loc), val)

proc write*(reg: GPIOA_LCKR_Type, LCKK: bool = false, LCK15: bool = false, LCK14: bool = false, LCK13: bool = false, LCK12: bool = false, LCK11: bool = false, LCK10: bool = false, LCK9: bool = false, LCK8: bool = false, LCK7: bool = false, LCK6: bool = false, LCK5: bool = false, LCK4: bool = false, LCK3: bool = false, LCK2: bool = false, LCK1: bool = false, LCK0: bool = false) =
  var x: uint32
  x.setMask((LCKK.uint32 shl 16).masked(16 .. 16))
  x.setMask((LCK15.uint32 shl 15).masked(15 .. 15))
  x.setMask((LCK14.uint32 shl 14).masked(14 .. 14))
  x.setMask((LCK13.uint32 shl 13).masked(13 .. 13))
  x.setMask((LCK12.uint32 shl 12).masked(12 .. 12))
  x.setMask((LCK11.uint32 shl 11).masked(11 .. 11))
  x.setMask((LCK10.uint32 shl 10).masked(10 .. 10))
  x.setMask((LCK9.uint32 shl 9).masked(9 .. 9))
  x.setMask((LCK8.uint32 shl 8).masked(8 .. 8))
  x.setMask((LCK7.uint32 shl 7).masked(7 .. 7))
  x.setMask((LCK6.uint32 shl 6).masked(6 .. 6))
  x.setMask((LCK5.uint32 shl 5).masked(5 .. 5))
  x.setMask((LCK4.uint32 shl 4).masked(4 .. 4))
  x.setMask((LCK3.uint32 shl 3).masked(3 .. 3))
  x.setMask((LCK2.uint32 shl 2).masked(2 .. 2))
  x.setMask((LCK1.uint32 shl 1).masked(1 .. 1))
  x.setMask((LCK0.uint32 shl 0).masked(0 .. 0))
  reg.write x.GPIOA_LCKR_Fields

template modifyIt*(reg: GPIOA_LCKR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOA_AFRL_Type): GPIOA_AFRL_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_AFRL_Fields](reg.loc))

proc write*(reg: GPIOA_AFRL_Type, val: GPIOA_AFRL_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_AFRL_Fields](reg.loc), val)

proc write*(reg: GPIOA_AFRL_Type, AFRL7: uint32 = 0, AFRL6: uint32 = 0, AFRL5: uint32 = 0, AFRL4: uint32 = 0, AFRL3: uint32 = 0, AFRL2: uint32 = 0, AFRL1: uint32 = 0, AFRL0: uint32 = 0) =
  var x: uint32
  x.setMask((AFRL7 shl 28).masked(28 .. 31))
  x.setMask((AFRL6 shl 24).masked(24 .. 27))
  x.setMask((AFRL5 shl 20).masked(20 .. 23))
  x.setMask((AFRL4 shl 16).masked(16 .. 19))
  x.setMask((AFRL3 shl 12).masked(12 .. 15))
  x.setMask((AFRL2 shl 8).masked(8 .. 11))
  x.setMask((AFRL1 shl 4).masked(4 .. 7))
  x.setMask((AFRL0 shl 0).masked(0 .. 3))
  reg.write x.GPIOA_AFRL_Fields

template modifyIt*(reg: GPIOA_AFRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: GPIOA_AFRH_Type): GPIOA_AFRH_Fields {.inline.} =
  volatileLoad(cast[ptr GPIOA_AFRH_Fields](reg.loc))

proc write*(reg: GPIOA_AFRH_Type, val: GPIOA_AFRH_Fields) {.inline.} =
  volatileStore(cast[ptr GPIOA_AFRH_Fields](reg.loc), val)

proc write*(reg: GPIOA_AFRH_Type, AFRH15: uint32 = 0, AFRH14: uint32 = 0, AFRH13: uint32 = 0, AFRH12: uint32 = 0, AFRH11: uint32 = 0, AFRH10: uint32 = 0, AFRH9: uint32 = 0, AFRH8: uint32 = 0) =
  var x: uint32
  x.setMask((AFRH15 shl 28).masked(28 .. 31))
  x.setMask((AFRH14 shl 24).masked(24 .. 27))
  x.setMask((AFRH13 shl 20).masked(20 .. 23))
  x.setMask((AFRH12 shl 16).masked(16 .. 19))
  x.setMask((AFRH11 shl 12).masked(12 .. 15))
  x.setMask((AFRH10 shl 8).masked(8 .. 11))
  x.setMask((AFRH9 shl 4).masked(4 .. 7))
  x.setMask((AFRH8 shl 0).masked(0 .. 3))
  reg.write x.GPIOA_AFRH_Fields

template modifyIt*(reg: GPIOA_AFRH_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func MODER15*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `MODER15=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOA_MODER_Fields

func MODER14*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `MODER14=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOA_MODER_Fields

func MODER13*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `MODER13=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOA_MODER_Fields

func MODER12*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `MODER12=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOA_MODER_Fields

func MODER11*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `MODER11=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOA_MODER_Fields

func MODER10*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MODER10=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOA_MODER_Fields

func MODER9*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `MODER9=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOA_MODER_Fields

func MODER8*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `MODER8=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOA_MODER_Fields

func MODER7*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `MODER7=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOA_MODER_Fields

func MODER6*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `MODER6=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOA_MODER_Fields

func MODER5*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `MODER5=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOA_MODER_Fields

func MODER4*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `MODER4=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOA_MODER_Fields

func MODER3*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `MODER3=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOA_MODER_Fields

func MODER2*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `MODER2=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOA_MODER_Fields

func MODER1*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `MODER1=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOA_MODER_Fields

func MODER0*(r: GPIOA_MODER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `MODER0=`*(r: var GPIOA_MODER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOA_MODER_Fields

func OT15*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OT15=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOA_OTYPER_Fields

func OT14*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `OT14=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOA_OTYPER_Fields

func OT13*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `OT13=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOA_OTYPER_Fields

func OT12*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `OT12=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOA_OTYPER_Fields

func OT11*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OT11=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOA_OTYPER_Fields

func OT10*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OT10=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOA_OTYPER_Fields

func OT9*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `OT9=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOA_OTYPER_Fields

func OT8*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `OT8=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOA_OTYPER_Fields

func OT7*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OT7=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOA_OTYPER_Fields

func OT6*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `OT6=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOA_OTYPER_Fields

func OT5*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `OT5=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOA_OTYPER_Fields

func OT4*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OT4=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOA_OTYPER_Fields

func OT3*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OT3=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOA_OTYPER_Fields

func OT2*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OT2=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOA_OTYPER_Fields

func OT1*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `OT1=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOA_OTYPER_Fields

func OT0*(r: GPIOA_OTYPER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `OT0=`*(r: var GPIOA_OTYPER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOA_OTYPER_Fields

func OSPEEDR15*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `OSPEEDR15=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR14*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `OSPEEDR14=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR13*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `OSPEEDR13=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR12*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `OSPEEDR12=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR11*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `OSPEEDR11=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR10*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `OSPEEDR10=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR9*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `OSPEEDR9=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR8*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `OSPEEDR8=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR7*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `OSPEEDR7=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR6*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `OSPEEDR6=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR5*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `OSPEEDR5=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR4*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `OSPEEDR4=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR3*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `OSPEEDR3=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR2*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `OSPEEDR2=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR1*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `OSPEEDR1=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOA_OSPEEDR_Fields

func OSPEEDR0*(r: GPIOA_OSPEEDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `OSPEEDR0=`*(r: var GPIOA_OSPEEDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOA_OSPEEDR_Fields

func PUPDR15*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(30 .. 31)

proc `PUPDR15=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 31)
  tmp.setMask((val shl 30).masked(30 .. 31))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR14*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `PUPDR14=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR13*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `PUPDR13=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR12*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `PUPDR12=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR11*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `PUPDR11=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR10*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `PUPDR10=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR9*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `PUPDR9=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR8*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `PUPDR8=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR7*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `PUPDR7=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR6*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `PUPDR6=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR5*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `PUPDR5=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR4*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PUPDR4=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR3*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `PUPDR3=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR2*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `PUPDR2=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR1*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `PUPDR1=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.GPIOA_PUPDR_Fields

func PUPDR0*(r: GPIOA_PUPDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `PUPDR0=`*(r: var GPIOA_PUPDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.GPIOA_PUPDR_Fields

func IDR15*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

func IDR14*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

func IDR13*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

func IDR12*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

func IDR11*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func IDR10*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func IDR9*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func IDR8*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func IDR7*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func IDR6*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func IDR5*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func IDR4*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func IDR3*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func IDR2*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func IDR1*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func IDR0*(r: GPIOA_IDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func ODR15*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ODR15=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOA_ODR_Fields

func ODR14*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ODR14=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOA_ODR_Fields

func ODR13*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ODR13=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOA_ODR_Fields

func ODR12*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `ODR12=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOA_ODR_Fields

func ODR11*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `ODR11=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOA_ODR_Fields

func ODR10*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ODR10=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOA_ODR_Fields

func ODR9*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ODR9=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOA_ODR_Fields

func ODR8*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ODR8=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOA_ODR_Fields

func ODR7*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ODR7=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOA_ODR_Fields

func ODR6*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ODR6=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOA_ODR_Fields

func ODR5*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ODR5=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOA_ODR_Fields

func ODR4*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ODR4=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOA_ODR_Fields

func ODR3*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `ODR3=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOA_ODR_Fields

func ODR2*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ODR2=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOA_ODR_Fields

func ODR1*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ODR1=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOA_ODR_Fields

func ODR0*(r: GPIOA_ODR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ODR0=`*(r: var GPIOA_ODR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOA_ODR_Fields

proc `BR15=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.GPIOA_BSRR_Fields

proc `BR14=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.GPIOA_BSRR_Fields

proc `BR13=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.GPIOA_BSRR_Fields

proc `BR12=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.GPIOA_BSRR_Fields

proc `BR11=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.GPIOA_BSRR_Fields

proc `BR10=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.GPIOA_BSRR_Fields

proc `BR9=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.GPIOA_BSRR_Fields

proc `BR8=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.GPIOA_BSRR_Fields

proc `BR7=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.GPIOA_BSRR_Fields

proc `BR6=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.GPIOA_BSRR_Fields

proc `BR5=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.GPIOA_BSRR_Fields

proc `BR4=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.GPIOA_BSRR_Fields

proc `BR3=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.GPIOA_BSRR_Fields

proc `BR2=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.GPIOA_BSRR_Fields

proc `BR1=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.GPIOA_BSRR_Fields

proc `BR0=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.GPIOA_BSRR_Fields

proc `BS15=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOA_BSRR_Fields

proc `BS14=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOA_BSRR_Fields

proc `BS13=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOA_BSRR_Fields

proc `BS12=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOA_BSRR_Fields

proc `BS11=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOA_BSRR_Fields

proc `BS10=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOA_BSRR_Fields

proc `BS9=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOA_BSRR_Fields

proc `BS8=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOA_BSRR_Fields

proc `BS7=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOA_BSRR_Fields

proc `BS6=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOA_BSRR_Fields

proc `BS5=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOA_BSRR_Fields

proc `BS4=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOA_BSRR_Fields

proc `BS3=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOA_BSRR_Fields

proc `BS2=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOA_BSRR_Fields

proc `BS1=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOA_BSRR_Fields

proc `BS0=`*(r: var GPIOA_BSRR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOA_BSRR_Fields

func LCKK*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `LCKK=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.GPIOA_LCKR_Fields

func LCK15*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `LCK15=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.GPIOA_LCKR_Fields

func LCK14*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `LCK14=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.GPIOA_LCKR_Fields

func LCK13*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `LCK13=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.GPIOA_LCKR_Fields

func LCK12*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `LCK12=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.GPIOA_LCKR_Fields

func LCK11*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `LCK11=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.GPIOA_LCKR_Fields

func LCK10*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `LCK10=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.GPIOA_LCKR_Fields

func LCK9*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `LCK9=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.GPIOA_LCKR_Fields

func LCK8*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LCK8=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.GPIOA_LCKR_Fields

func LCK7*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `LCK7=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.GPIOA_LCKR_Fields

func LCK6*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LCK6=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.GPIOA_LCKR_Fields

func LCK5*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `LCK5=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.GPIOA_LCKR_Fields

func LCK4*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `LCK4=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.GPIOA_LCKR_Fields

func LCK3*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `LCK3=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.GPIOA_LCKR_Fields

func LCK2*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `LCK2=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.GPIOA_LCKR_Fields

func LCK1*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `LCK1=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.GPIOA_LCKR_Fields

func LCK0*(r: GPIOA_LCKR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LCK0=`*(r: var GPIOA_LCKR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.GPIOA_LCKR_Fields

func AFRL7*(r: GPIOA_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 31)

proc `AFRL7=`*(r: var GPIOA_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 31)
  tmp.setMask((val shl 28).masked(28 .. 31))
  r = tmp.GPIOA_AFRL_Fields

func AFRL6*(r: GPIOA_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `AFRL6=`*(r: var GPIOA_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.GPIOA_AFRL_Fields

func AFRL5*(r: GPIOA_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `AFRL5=`*(r: var GPIOA_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.GPIOA_AFRL_Fields

func AFRL4*(r: GPIOA_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `AFRL4=`*(r: var GPIOA_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.GPIOA_AFRL_Fields

func AFRL3*(r: GPIOA_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `AFRL3=`*(r: var GPIOA_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.GPIOA_AFRL_Fields

func AFRL2*(r: GPIOA_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `AFRL2=`*(r: var GPIOA_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.GPIOA_AFRL_Fields

func AFRL1*(r: GPIOA_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `AFRL1=`*(r: var GPIOA_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.GPIOA_AFRL_Fields

func AFRL0*(r: GPIOA_AFRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `AFRL0=`*(r: var GPIOA_AFRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.GPIOA_AFRL_Fields

func AFRH15*(r: GPIOA_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 31)

proc `AFRH15=`*(r: var GPIOA_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 31)
  tmp.setMask((val shl 28).masked(28 .. 31))
  r = tmp.GPIOA_AFRH_Fields

func AFRH14*(r: GPIOA_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `AFRH14=`*(r: var GPIOA_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.GPIOA_AFRH_Fields

func AFRH13*(r: GPIOA_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `AFRH13=`*(r: var GPIOA_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.GPIOA_AFRH_Fields

func AFRH12*(r: GPIOA_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `AFRH12=`*(r: var GPIOA_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.GPIOA_AFRH_Fields

func AFRH11*(r: GPIOA_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `AFRH11=`*(r: var GPIOA_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.GPIOA_AFRH_Fields

func AFRH10*(r: GPIOA_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `AFRH10=`*(r: var GPIOA_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.GPIOA_AFRH_Fields

func AFRH9*(r: GPIOA_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `AFRH9=`*(r: var GPIOA_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.GPIOA_AFRH_Fields

func AFRH8*(r: GPIOA_AFRH_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `AFRH8=`*(r: var GPIOA_AFRH_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.GPIOA_AFRH_Fields

type
  SYSCFG_MEMRM_Fields* = distinct uint32
  SYSCFG_PMC_Fields* = distinct uint32
  SYSCFG_EXTICR1_Fields* = distinct uint32
  SYSCFG_EXTICR2_Fields* = distinct uint32
  SYSCFG_EXTICR3_Fields* = distinct uint32
  SYSCFG_EXTICR4_Fields* = distinct uint32
  SYSCFG_CMPCR_Fields* = distinct uint32

proc read*(reg: SYSCFG_MEMRM_Type): SYSCFG_MEMRM_Fields {.inline.} =
  volatileLoad(cast[ptr SYSCFG_MEMRM_Fields](reg.loc))

proc write*(reg: SYSCFG_MEMRM_Type, val: SYSCFG_MEMRM_Fields) {.inline.} =
  volatileStore(cast[ptr SYSCFG_MEMRM_Fields](reg.loc), val)

proc write*(reg: SYSCFG_MEMRM_Type, MEM_MODE: uint32 = 0, FB_MODE: bool = false, SWP_FMC: uint32 = 0) =
  var x: uint32
  x.setMask((MEM_MODE shl 0).masked(0 .. 2))
  x.setMask((FB_MODE.uint32 shl 8).masked(8 .. 8))
  x.setMask((SWP_FMC shl 10).masked(10 .. 11))
  reg.write x.SYSCFG_MEMRM_Fields

template modifyIt*(reg: SYSCFG_MEMRM_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SYSCFG_PMC_Type): SYSCFG_PMC_Fields {.inline.} =
  volatileLoad(cast[ptr SYSCFG_PMC_Fields](reg.loc))

proc write*(reg: SYSCFG_PMC_Type, val: SYSCFG_PMC_Fields) {.inline.} =
  volatileStore(cast[ptr SYSCFG_PMC_Fields](reg.loc), val)

proc write*(reg: SYSCFG_PMC_Type, MII_RMII_SEL: bool = false, ADC1DC2: bool = false, ADC2DC2: bool = false, ADC3DC2: bool = false) =
  var x: uint32
  x.setMask((MII_RMII_SEL.uint32 shl 23).masked(23 .. 23))
  x.setMask((ADC1DC2.uint32 shl 16).masked(16 .. 16))
  x.setMask((ADC2DC2.uint32 shl 17).masked(17 .. 17))
  x.setMask((ADC3DC2.uint32 shl 18).masked(18 .. 18))
  reg.write x.SYSCFG_PMC_Fields

template modifyIt*(reg: SYSCFG_PMC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SYSCFG_EXTICR1_Type): SYSCFG_EXTICR1_Fields {.inline.} =
  volatileLoad(cast[ptr SYSCFG_EXTICR1_Fields](reg.loc))

proc write*(reg: SYSCFG_EXTICR1_Type, val: SYSCFG_EXTICR1_Fields) {.inline.} =
  volatileStore(cast[ptr SYSCFG_EXTICR1_Fields](reg.loc), val)

proc write*(reg: SYSCFG_EXTICR1_Type, EXTI3: uint32 = 0, EXTI2: uint32 = 0, EXTI1: uint32 = 0, EXTI0: uint32 = 0) =
  var x: uint32
  x.setMask((EXTI3 shl 12).masked(12 .. 15))
  x.setMask((EXTI2 shl 8).masked(8 .. 11))
  x.setMask((EXTI1 shl 4).masked(4 .. 7))
  x.setMask((EXTI0 shl 0).masked(0 .. 3))
  reg.write x.SYSCFG_EXTICR1_Fields

template modifyIt*(reg: SYSCFG_EXTICR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SYSCFG_EXTICR2_Type): SYSCFG_EXTICR2_Fields {.inline.} =
  volatileLoad(cast[ptr SYSCFG_EXTICR2_Fields](reg.loc))

proc write*(reg: SYSCFG_EXTICR2_Type, val: SYSCFG_EXTICR2_Fields) {.inline.} =
  volatileStore(cast[ptr SYSCFG_EXTICR2_Fields](reg.loc), val)

proc write*(reg: SYSCFG_EXTICR2_Type, EXTI7: uint32 = 0, EXTI6: uint32 = 0, EXTI5: uint32 = 0, EXTI4: uint32 = 0) =
  var x: uint32
  x.setMask((EXTI7 shl 12).masked(12 .. 15))
  x.setMask((EXTI6 shl 8).masked(8 .. 11))
  x.setMask((EXTI5 shl 4).masked(4 .. 7))
  x.setMask((EXTI4 shl 0).masked(0 .. 3))
  reg.write x.SYSCFG_EXTICR2_Fields

template modifyIt*(reg: SYSCFG_EXTICR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SYSCFG_EXTICR3_Type): SYSCFG_EXTICR3_Fields {.inline.} =
  volatileLoad(cast[ptr SYSCFG_EXTICR3_Fields](reg.loc))

proc write*(reg: SYSCFG_EXTICR3_Type, val: SYSCFG_EXTICR3_Fields) {.inline.} =
  volatileStore(cast[ptr SYSCFG_EXTICR3_Fields](reg.loc), val)

proc write*(reg: SYSCFG_EXTICR3_Type, EXTI11: uint32 = 0, EXTI10: uint32 = 0, EXTI9: uint32 = 0, EXTI8: uint32 = 0) =
  var x: uint32
  x.setMask((EXTI11 shl 12).masked(12 .. 15))
  x.setMask((EXTI10 shl 8).masked(8 .. 11))
  x.setMask((EXTI9 shl 4).masked(4 .. 7))
  x.setMask((EXTI8 shl 0).masked(0 .. 3))
  reg.write x.SYSCFG_EXTICR3_Fields

template modifyIt*(reg: SYSCFG_EXTICR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SYSCFG_EXTICR4_Type): SYSCFG_EXTICR4_Fields {.inline.} =
  volatileLoad(cast[ptr SYSCFG_EXTICR4_Fields](reg.loc))

proc write*(reg: SYSCFG_EXTICR4_Type, val: SYSCFG_EXTICR4_Fields) {.inline.} =
  volatileStore(cast[ptr SYSCFG_EXTICR4_Fields](reg.loc), val)

proc write*(reg: SYSCFG_EXTICR4_Type, EXTI15: uint32 = 0, EXTI14: uint32 = 0, EXTI13: uint32 = 0, EXTI12: uint32 = 0) =
  var x: uint32
  x.setMask((EXTI15 shl 12).masked(12 .. 15))
  x.setMask((EXTI14 shl 8).masked(8 .. 11))
  x.setMask((EXTI13 shl 4).masked(4 .. 7))
  x.setMask((EXTI12 shl 0).masked(0 .. 3))
  reg.write x.SYSCFG_EXTICR4_Fields

template modifyIt*(reg: SYSCFG_EXTICR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SYSCFG_CMPCR_Type): SYSCFG_CMPCR_Fields {.inline.} =
  volatileLoad(cast[ptr SYSCFG_CMPCR_Fields](reg.loc))

func MEM_MODE*(r: SYSCFG_MEMRM_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `MEM_MODE=`*(r: var SYSCFG_MEMRM_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.SYSCFG_MEMRM_Fields

func FB_MODE*(r: SYSCFG_MEMRM_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB_MODE=`*(r: var SYSCFG_MEMRM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SYSCFG_MEMRM_Fields

func SWP_FMC*(r: SYSCFG_MEMRM_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `SWP_FMC=`*(r: var SYSCFG_MEMRM_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.SYSCFG_MEMRM_Fields

func MII_RMII_SEL*(r: SYSCFG_PMC_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `MII_RMII_SEL=`*(r: var SYSCFG_PMC_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.SYSCFG_PMC_Fields

func ADC1DC2*(r: SYSCFG_PMC_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `ADC1DC2=`*(r: var SYSCFG_PMC_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.SYSCFG_PMC_Fields

func ADC2DC2*(r: SYSCFG_PMC_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `ADC2DC2=`*(r: var SYSCFG_PMC_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.SYSCFG_PMC_Fields

func ADC3DC2*(r: SYSCFG_PMC_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `ADC3DC2=`*(r: var SYSCFG_PMC_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.SYSCFG_PMC_Fields

func EXTI3*(r: SYSCFG_EXTICR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `EXTI3=`*(r: var SYSCFG_EXTICR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.SYSCFG_EXTICR1_Fields

func EXTI2*(r: SYSCFG_EXTICR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `EXTI2=`*(r: var SYSCFG_EXTICR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.SYSCFG_EXTICR1_Fields

func EXTI1*(r: SYSCFG_EXTICR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `EXTI1=`*(r: var SYSCFG_EXTICR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.SYSCFG_EXTICR1_Fields

func EXTI0*(r: SYSCFG_EXTICR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `EXTI0=`*(r: var SYSCFG_EXTICR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.SYSCFG_EXTICR1_Fields

func EXTI7*(r: SYSCFG_EXTICR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `EXTI7=`*(r: var SYSCFG_EXTICR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.SYSCFG_EXTICR2_Fields

func EXTI6*(r: SYSCFG_EXTICR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `EXTI6=`*(r: var SYSCFG_EXTICR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.SYSCFG_EXTICR2_Fields

func EXTI5*(r: SYSCFG_EXTICR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `EXTI5=`*(r: var SYSCFG_EXTICR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.SYSCFG_EXTICR2_Fields

func EXTI4*(r: SYSCFG_EXTICR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `EXTI4=`*(r: var SYSCFG_EXTICR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.SYSCFG_EXTICR2_Fields

func EXTI11*(r: SYSCFG_EXTICR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `EXTI11=`*(r: var SYSCFG_EXTICR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.SYSCFG_EXTICR3_Fields

func EXTI10*(r: SYSCFG_EXTICR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `EXTI10=`*(r: var SYSCFG_EXTICR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.SYSCFG_EXTICR3_Fields

func EXTI9*(r: SYSCFG_EXTICR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `EXTI9=`*(r: var SYSCFG_EXTICR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.SYSCFG_EXTICR3_Fields

func EXTI8*(r: SYSCFG_EXTICR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `EXTI8=`*(r: var SYSCFG_EXTICR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.SYSCFG_EXTICR3_Fields

func EXTI15*(r: SYSCFG_EXTICR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `EXTI15=`*(r: var SYSCFG_EXTICR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.SYSCFG_EXTICR4_Fields

func EXTI14*(r: SYSCFG_EXTICR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `EXTI14=`*(r: var SYSCFG_EXTICR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.SYSCFG_EXTICR4_Fields

func EXTI13*(r: SYSCFG_EXTICR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `EXTI13=`*(r: var SYSCFG_EXTICR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.SYSCFG_EXTICR4_Fields

func EXTI12*(r: SYSCFG_EXTICR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `EXTI12=`*(r: var SYSCFG_EXTICR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.SYSCFG_EXTICR4_Fields

func READY*(r: SYSCFG_CMPCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func CMP_PD*(r: SYSCFG_CMPCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

type
  SPI1_CR1_Fields* = distinct uint32
  SPI1_CR2_Fields* = distinct uint32
  SPI1_SR_Fields* = distinct uint32
  SPI1_DR_Fields* = distinct uint32
  SPI1_CRCPR_Fields* = distinct uint32
  SPI1_RXCRCR_Fields* = distinct uint32
  SPI1_TXCRCR_Fields* = distinct uint32
  SPI1_I2SCFGR_Fields* = distinct uint32
  SPI1_I2SPR_Fields* = distinct uint32

proc read*(reg: SPI1_CR1_Type): SPI1_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_CR1_Fields](reg.loc))

proc write*(reg: SPI1_CR1_Type, val: SPI1_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_CR1_Fields](reg.loc), val)

proc write*(reg: SPI1_CR1_Type, BIDIMODE: bool = false, BIDIOE: bool = false, CRCEN: bool = false, CRCNEXT: bool = false, DFF: bool = false, RXONLY: bool = false, SSM: bool = false, SSI: bool = false, LSBFIRST: bool = false, SPE: bool = false, BR: uint32 = 0, MSTR: bool = false, CPOL: bool = false, CPHA: bool = false) =
  var x: uint32
  x.setMask((BIDIMODE.uint32 shl 15).masked(15 .. 15))
  x.setMask((BIDIOE.uint32 shl 14).masked(14 .. 14))
  x.setMask((CRCEN.uint32 shl 13).masked(13 .. 13))
  x.setMask((CRCNEXT.uint32 shl 12).masked(12 .. 12))
  x.setMask((DFF.uint32 shl 11).masked(11 .. 11))
  x.setMask((RXONLY.uint32 shl 10).masked(10 .. 10))
  x.setMask((SSM.uint32 shl 9).masked(9 .. 9))
  x.setMask((SSI.uint32 shl 8).masked(8 .. 8))
  x.setMask((LSBFIRST.uint32 shl 7).masked(7 .. 7))
  x.setMask((SPE.uint32 shl 6).masked(6 .. 6))
  x.setMask((BR shl 3).masked(3 .. 5))
  x.setMask((MSTR.uint32 shl 2).masked(2 .. 2))
  x.setMask((CPOL.uint32 shl 1).masked(1 .. 1))
  x.setMask((CPHA.uint32 shl 0).masked(0 .. 0))
  reg.write x.SPI1_CR1_Fields

template modifyIt*(reg: SPI1_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_CR2_Type): SPI1_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_CR2_Fields](reg.loc))

proc write*(reg: SPI1_CR2_Type, val: SPI1_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_CR2_Fields](reg.loc), val)

proc write*(reg: SPI1_CR2_Type, TXEIE: bool = false, RXNEIE: bool = false, ERRIE: bool = false, FRF: bool = false, SSOE: bool = false, TXDMAEN: bool = false, RXDMAEN: bool = false) =
  var x: uint32
  x.setMask((TXEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((RXNEIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((ERRIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((FRF.uint32 shl 4).masked(4 .. 4))
  x.setMask((SSOE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TXDMAEN.uint32 shl 1).masked(1 .. 1))
  x.setMask((RXDMAEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.SPI1_CR2_Fields

template modifyIt*(reg: SPI1_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_SR_Type): SPI1_SR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_SR_Fields](reg.loc))

proc write*(reg: SPI1_SR_Type, val: SPI1_SR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_SR_Fields](reg.loc), val)

proc write*(reg: SPI1_SR_Type, CRCERR: bool = false) =
  var x: uint32
  x.setMask((CRCERR.uint32 shl 4).masked(4 .. 4))
  reg.write x.SPI1_SR_Fields

template modifyIt*(reg: SPI1_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_DR_Type): SPI1_DR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_DR_Fields](reg.loc))

proc write*(reg: SPI1_DR_Type, val: SPI1_DR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_DR_Fields](reg.loc), val)

proc write*(reg: SPI1_DR_Type, DR: uint32 = 0) =
  var x: uint32
  x.setMask((DR shl 0).masked(0 .. 15))
  reg.write x.SPI1_DR_Fields

template modifyIt*(reg: SPI1_DR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_CRCPR_Type): SPI1_CRCPR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_CRCPR_Fields](reg.loc))

proc write*(reg: SPI1_CRCPR_Type, val: SPI1_CRCPR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_CRCPR_Fields](reg.loc), val)

proc write*(reg: SPI1_CRCPR_Type, CRCPOLY: uint32 = 7) =
  var x: uint32
  x.setMask((CRCPOLY shl 0).masked(0 .. 15))
  reg.write x.SPI1_CRCPR_Fields

template modifyIt*(reg: SPI1_CRCPR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_RXCRCR_Type): SPI1_RXCRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_RXCRCR_Fields](reg.loc))

proc read*(reg: SPI1_TXCRCR_Type): SPI1_TXCRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_TXCRCR_Fields](reg.loc))

proc read*(reg: SPI1_I2SCFGR_Type): SPI1_I2SCFGR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_I2SCFGR_Fields](reg.loc))

proc write*(reg: SPI1_I2SCFGR_Type, val: SPI1_I2SCFGR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_I2SCFGR_Fields](reg.loc), val)

proc write*(reg: SPI1_I2SCFGR_Type, I2SMOD: bool = false, I2SE: bool = false, I2SCFG: uint32 = 0, PCMSYNC: bool = false, I2SSTD: uint32 = 0, CKPOL: bool = false, DATLEN: uint32 = 0, CHLEN: bool = false) =
  var x: uint32
  x.setMask((I2SMOD.uint32 shl 11).masked(11 .. 11))
  x.setMask((I2SE.uint32 shl 10).masked(10 .. 10))
  x.setMask((I2SCFG shl 8).masked(8 .. 9))
  x.setMask((PCMSYNC.uint32 shl 7).masked(7 .. 7))
  x.setMask((I2SSTD shl 4).masked(4 .. 5))
  x.setMask((CKPOL.uint32 shl 3).masked(3 .. 3))
  x.setMask((DATLEN shl 1).masked(1 .. 2))
  x.setMask((CHLEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.SPI1_I2SCFGR_Fields

template modifyIt*(reg: SPI1_I2SCFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPI1_I2SPR_Type): SPI1_I2SPR_Fields {.inline.} =
  volatileLoad(cast[ptr SPI1_I2SPR_Fields](reg.loc))

proc write*(reg: SPI1_I2SPR_Type, val: SPI1_I2SPR_Fields) {.inline.} =
  volatileStore(cast[ptr SPI1_I2SPR_Fields](reg.loc), val)

proc write*(reg: SPI1_I2SPR_Type, MCKOE: bool = false, ODD: bool = false, I2SDIV: uint32 = 10) =
  var x: uint32
  x.setMask((MCKOE.uint32 shl 9).masked(9 .. 9))
  x.setMask((ODD.uint32 shl 8).masked(8 .. 8))
  x.setMask((I2SDIV shl 0).masked(0 .. 7))
  reg.write x.SPI1_I2SPR_Fields

template modifyIt*(reg: SPI1_I2SPR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func BIDIMODE*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `BIDIMODE=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.SPI1_CR1_Fields

func BIDIOE*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `BIDIOE=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.SPI1_CR1_Fields

func CRCEN*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CRCEN=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.SPI1_CR1_Fields

func CRCNEXT*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CRCNEXT=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.SPI1_CR1_Fields

func DFF*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DFF=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.SPI1_CR1_Fields

func RXONLY*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `RXONLY=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SPI1_CR1_Fields

func SSM*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `SSM=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SPI1_CR1_Fields

func SSI*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SSI=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SPI1_CR1_Fields

func LSBFIRST*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `LSBFIRST=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SPI1_CR1_Fields

func SPE*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `SPE=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SPI1_CR1_Fields

func BR*(r: SPI1_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

proc `BR=`*(r: var SPI1_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 5)
  tmp.setMask((val shl 3).masked(3 .. 5))
  r = tmp.SPI1_CR1_Fields

func MSTR*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `MSTR=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SPI1_CR1_Fields

func CPOL*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CPOL=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SPI1_CR1_Fields

func CPHA*(r: SPI1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CPHA=`*(r: var SPI1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI1_CR1_Fields

func TXEIE*(r: SPI1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXEIE=`*(r: var SPI1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SPI1_CR2_Fields

func RXNEIE*(r: SPI1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `RXNEIE=`*(r: var SPI1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SPI1_CR2_Fields

func ERRIE*(r: SPI1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ERRIE=`*(r: var SPI1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SPI1_CR2_Fields

func FRF*(r: SPI1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FRF=`*(r: var SPI1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SPI1_CR2_Fields

func SSOE*(r: SPI1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `SSOE=`*(r: var SPI1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SPI1_CR2_Fields

func TXDMAEN*(r: SPI1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TXDMAEN=`*(r: var SPI1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SPI1_CR2_Fields

func RXDMAEN*(r: SPI1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `RXDMAEN=`*(r: var SPI1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI1_CR2_Fields

func TIFRFE*(r: SPI1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func BSY*(r: SPI1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func OVR*(r: SPI1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func MODF*(r: SPI1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func CRCERR*(r: SPI1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CRCERR=`*(r: var SPI1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SPI1_SR_Fields

func UDR*(r: SPI1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func CHSIDE*(r: SPI1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func TXE*(r: SPI1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func RXNE*(r: SPI1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func DR*(r: SPI1_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DR=`*(r: var SPI1_DR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.SPI1_DR_Fields

func CRCPOLY*(r: SPI1_CRCPR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CRCPOLY=`*(r: var SPI1_CRCPR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.SPI1_CRCPR_Fields

func RxCRC*(r: SPI1_RXCRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func TxCRC*(r: SPI1_TXCRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func I2SMOD*(r: SPI1_I2SCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `I2SMOD=`*(r: var SPI1_I2SCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.SPI1_I2SCFGR_Fields

func I2SE*(r: SPI1_I2SCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `I2SE=`*(r: var SPI1_I2SCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SPI1_I2SCFGR_Fields

func I2SCFG*(r: SPI1_I2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `I2SCFG=`*(r: var SPI1_I2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.SPI1_I2SCFGR_Fields

func PCMSYNC*(r: SPI1_I2SCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `PCMSYNC=`*(r: var SPI1_I2SCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SPI1_I2SCFGR_Fields

func I2SSTD*(r: SPI1_I2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `I2SSTD=`*(r: var SPI1_I2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.SPI1_I2SCFGR_Fields

func CKPOL*(r: SPI1_I2SCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CKPOL=`*(r: var SPI1_I2SCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SPI1_I2SCFGR_Fields

func DATLEN*(r: SPI1_I2SCFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 2)

proc `DATLEN=`*(r: var SPI1_I2SCFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 2)
  tmp.setMask((val shl 1).masked(1 .. 2))
  r = tmp.SPI1_I2SCFGR_Fields

func CHLEN*(r: SPI1_I2SCFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CHLEN=`*(r: var SPI1_I2SCFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPI1_I2SCFGR_Fields

func MCKOE*(r: SPI1_I2SPR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `MCKOE=`*(r: var SPI1_I2SPR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SPI1_I2SPR_Fields

func ODD*(r: SPI1_I2SPR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ODD=`*(r: var SPI1_I2SPR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SPI1_I2SPR_Fields

func I2SDIV*(r: SPI1_I2SPR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `I2SDIV=`*(r: var SPI1_I2SPR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.SPI1_I2SPR_Fields

type
  ADC1_SR_Fields* = distinct uint32
  ADC1_CR1_Fields* = distinct uint32
  ADC1_CR2_Fields* = distinct uint32
  ADC1_JOFR1_Fields* = distinct uint32
  ADC1_JOFR2_Fields* = distinct uint32
  ADC1_JOFR3_Fields* = distinct uint32
  ADC1_JOFR4_Fields* = distinct uint32
  ADC1_HTR_Fields* = distinct uint32
  ADC1_LTR_Fields* = distinct uint32
  ADC1_SQR1_Fields* = distinct uint32
  ADC1_SQR2_Fields* = distinct uint32
  ADC1_SQR3_Fields* = distinct uint32
  ADC1_JSQR_Fields* = distinct uint32
  ADC1_JDR1_Fields* = distinct uint32
  ADC1_JDR2_Fields* = distinct uint32
  ADC1_JDR3_Fields* = distinct uint32
  ADC1_JDR4_Fields* = distinct uint32
  ADC1_DR_Fields* = distinct uint32

proc read*(reg: ADC1_SR_Type): ADC1_SR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_SR_Fields](reg.loc))

proc write*(reg: ADC1_SR_Type, val: ADC1_SR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_SR_Fields](reg.loc), val)

proc write*(reg: ADC1_SR_Type, OVR: bool = false, STRT: bool = false, JSTRT: bool = false, JEOC: bool = false, EOC: bool = false, AWD: bool = false) =
  var x: uint32
  x.setMask((OVR.uint32 shl 5).masked(5 .. 5))
  x.setMask((STRT.uint32 shl 4).masked(4 .. 4))
  x.setMask((JSTRT.uint32 shl 3).masked(3 .. 3))
  x.setMask((JEOC.uint32 shl 2).masked(2 .. 2))
  x.setMask((EOC.uint32 shl 1).masked(1 .. 1))
  x.setMask((AWD.uint32 shl 0).masked(0 .. 0))
  reg.write x.ADC1_SR_Fields

template modifyIt*(reg: ADC1_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_CR1_Type): ADC1_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_CR1_Fields](reg.loc))

proc write*(reg: ADC1_CR1_Type, val: ADC1_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_CR1_Fields](reg.loc), val)

proc write*(reg: ADC1_CR1_Type, OVRIE: bool = false, RES: uint32 = 0, AWDEN: bool = false, JAWDEN: bool = false, DISCNUM: uint32 = 0, JDISCEN: bool = false, DISCEN: bool = false, JAUTO: bool = false, AWDSGL: bool = false, SCAN: bool = false, JEOCIE: bool = false, AWDIE: bool = false, EOCIE: bool = false, AWDCH: uint32 = 0) =
  var x: uint32
  x.setMask((OVRIE.uint32 shl 26).masked(26 .. 26))
  x.setMask((RES shl 24).masked(24 .. 25))
  x.setMask((AWDEN.uint32 shl 23).masked(23 .. 23))
  x.setMask((JAWDEN.uint32 shl 22).masked(22 .. 22))
  x.setMask((DISCNUM shl 13).masked(13 .. 15))
  x.setMask((JDISCEN.uint32 shl 12).masked(12 .. 12))
  x.setMask((DISCEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((JAUTO.uint32 shl 10).masked(10 .. 10))
  x.setMask((AWDSGL.uint32 shl 9).masked(9 .. 9))
  x.setMask((SCAN.uint32 shl 8).masked(8 .. 8))
  x.setMask((JEOCIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((AWDIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((EOCIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((AWDCH shl 0).masked(0 .. 4))
  reg.write x.ADC1_CR1_Fields

template modifyIt*(reg: ADC1_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_CR2_Type): ADC1_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_CR2_Fields](reg.loc))

proc write*(reg: ADC1_CR2_Type, val: ADC1_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_CR2_Fields](reg.loc), val)

proc write*(reg: ADC1_CR2_Type, SWSTART: bool = false, EXTEN: uint32 = 0, EXTSEL: uint32 = 0, JSWSTART: bool = false, JEXTEN: uint32 = 0, JEXTSEL: uint32 = 0, ALIGN: bool = false, EOCS: bool = false, DDS: bool = false, DMA: bool = false, CONT: bool = false, ADON: bool = false) =
  var x: uint32
  x.setMask((SWSTART.uint32 shl 30).masked(30 .. 30))
  x.setMask((EXTEN shl 28).masked(28 .. 29))
  x.setMask((EXTSEL shl 24).masked(24 .. 27))
  x.setMask((JSWSTART.uint32 shl 22).masked(22 .. 22))
  x.setMask((JEXTEN shl 20).masked(20 .. 21))
  x.setMask((JEXTSEL shl 16).masked(16 .. 19))
  x.setMask((ALIGN.uint32 shl 11).masked(11 .. 11))
  x.setMask((EOCS.uint32 shl 10).masked(10 .. 10))
  x.setMask((DDS.uint32 shl 9).masked(9 .. 9))
  x.setMask((DMA.uint32 shl 8).masked(8 .. 8))
  x.setMask((CONT.uint32 shl 1).masked(1 .. 1))
  x.setMask((ADON.uint32 shl 0).masked(0 .. 0))
  reg.write x.ADC1_CR2_Fields

template modifyIt*(reg: ADC1_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_SMPR1_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ADC1_SMPR1_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ADC1_SMPR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_SMPR2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: ADC1_SMPR2_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: ADC1_SMPR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_JOFR1_Type): ADC1_JOFR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_JOFR1_Fields](reg.loc))

proc write*(reg: ADC1_JOFR1_Type, val: ADC1_JOFR1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_JOFR1_Fields](reg.loc), val)

proc write*(reg: ADC1_JOFR1_Type, JOFFSET1: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET1 shl 0).masked(0 .. 11))
  reg.write x.ADC1_JOFR1_Fields

template modifyIt*(reg: ADC1_JOFR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_JOFR2_Type): ADC1_JOFR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_JOFR2_Fields](reg.loc))

proc write*(reg: ADC1_JOFR2_Type, val: ADC1_JOFR2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_JOFR2_Fields](reg.loc), val)

proc write*(reg: ADC1_JOFR2_Type, JOFFSET2: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET2 shl 0).masked(0 .. 11))
  reg.write x.ADC1_JOFR2_Fields

template modifyIt*(reg: ADC1_JOFR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_JOFR3_Type): ADC1_JOFR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_JOFR3_Fields](reg.loc))

proc write*(reg: ADC1_JOFR3_Type, val: ADC1_JOFR3_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_JOFR3_Fields](reg.loc), val)

proc write*(reg: ADC1_JOFR3_Type, JOFFSET3: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET3 shl 0).masked(0 .. 11))
  reg.write x.ADC1_JOFR3_Fields

template modifyIt*(reg: ADC1_JOFR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_JOFR4_Type): ADC1_JOFR4_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_JOFR4_Fields](reg.loc))

proc write*(reg: ADC1_JOFR4_Type, val: ADC1_JOFR4_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_JOFR4_Fields](reg.loc), val)

proc write*(reg: ADC1_JOFR4_Type, JOFFSET4: uint32 = 0) =
  var x: uint32
  x.setMask((JOFFSET4 shl 0).masked(0 .. 11))
  reg.write x.ADC1_JOFR4_Fields

template modifyIt*(reg: ADC1_JOFR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_HTR_Type): ADC1_HTR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_HTR_Fields](reg.loc))

proc write*(reg: ADC1_HTR_Type, val: ADC1_HTR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_HTR_Fields](reg.loc), val)

proc write*(reg: ADC1_HTR_Type, HT: uint32 = 4095) =
  var x: uint32
  x.setMask((HT shl 0).masked(0 .. 11))
  reg.write x.ADC1_HTR_Fields

template modifyIt*(reg: ADC1_HTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_LTR_Type): ADC1_LTR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_LTR_Fields](reg.loc))

proc write*(reg: ADC1_LTR_Type, val: ADC1_LTR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_LTR_Fields](reg.loc), val)

proc write*(reg: ADC1_LTR_Type, LT: uint32 = 0) =
  var x: uint32
  x.setMask((LT shl 0).masked(0 .. 11))
  reg.write x.ADC1_LTR_Fields

template modifyIt*(reg: ADC1_LTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_SQR1_Type): ADC1_SQR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_SQR1_Fields](reg.loc))

proc write*(reg: ADC1_SQR1_Type, val: ADC1_SQR1_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_SQR1_Fields](reg.loc), val)

proc write*(reg: ADC1_SQR1_Type, L: uint32 = 0, SQ16: uint32 = 0, SQ15: uint32 = 0, SQ14: uint32 = 0, SQ13: uint32 = 0) =
  var x: uint32
  x.setMask((L shl 20).masked(20 .. 23))
  x.setMask((SQ16 shl 15).masked(15 .. 19))
  x.setMask((SQ15 shl 10).masked(10 .. 14))
  x.setMask((SQ14 shl 5).masked(5 .. 9))
  x.setMask((SQ13 shl 0).masked(0 .. 4))
  reg.write x.ADC1_SQR1_Fields

template modifyIt*(reg: ADC1_SQR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_SQR2_Type): ADC1_SQR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_SQR2_Fields](reg.loc))

proc write*(reg: ADC1_SQR2_Type, val: ADC1_SQR2_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_SQR2_Fields](reg.loc), val)

proc write*(reg: ADC1_SQR2_Type, SQ12: uint32 = 0, SQ11: uint32 = 0, SQ10: uint32 = 0, SQ9: uint32 = 0, SQ8: uint32 = 0, SQ7: uint32 = 0) =
  var x: uint32
  x.setMask((SQ12 shl 25).masked(25 .. 29))
  x.setMask((SQ11 shl 20).masked(20 .. 24))
  x.setMask((SQ10 shl 15).masked(15 .. 19))
  x.setMask((SQ9 shl 10).masked(10 .. 14))
  x.setMask((SQ8 shl 5).masked(5 .. 9))
  x.setMask((SQ7 shl 0).masked(0 .. 4))
  reg.write x.ADC1_SQR2_Fields

template modifyIt*(reg: ADC1_SQR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_SQR3_Type): ADC1_SQR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_SQR3_Fields](reg.loc))

proc write*(reg: ADC1_SQR3_Type, val: ADC1_SQR3_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_SQR3_Fields](reg.loc), val)

proc write*(reg: ADC1_SQR3_Type, SQ6: uint32 = 0, SQ5: uint32 = 0, SQ4: uint32 = 0, SQ3: uint32 = 0, SQ2: uint32 = 0, SQ1: uint32 = 0) =
  var x: uint32
  x.setMask((SQ6 shl 25).masked(25 .. 29))
  x.setMask((SQ5 shl 20).masked(20 .. 24))
  x.setMask((SQ4 shl 15).masked(15 .. 19))
  x.setMask((SQ3 shl 10).masked(10 .. 14))
  x.setMask((SQ2 shl 5).masked(5 .. 9))
  x.setMask((SQ1 shl 0).masked(0 .. 4))
  reg.write x.ADC1_SQR3_Fields

template modifyIt*(reg: ADC1_SQR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_JSQR_Type): ADC1_JSQR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_JSQR_Fields](reg.loc))

proc write*(reg: ADC1_JSQR_Type, val: ADC1_JSQR_Fields) {.inline.} =
  volatileStore(cast[ptr ADC1_JSQR_Fields](reg.loc), val)

proc write*(reg: ADC1_JSQR_Type, JL: uint32 = 0, JSQ4: uint32 = 0, JSQ3: uint32 = 0, JSQ2: uint32 = 0, JSQ1: uint32 = 0) =
  var x: uint32
  x.setMask((JL shl 20).masked(20 .. 21))
  x.setMask((JSQ4 shl 15).masked(15 .. 19))
  x.setMask((JSQ3 shl 10).masked(10 .. 14))
  x.setMask((JSQ2 shl 5).masked(5 .. 9))
  x.setMask((JSQ1 shl 0).masked(0 .. 4))
  reg.write x.ADC1_JSQR_Fields

template modifyIt*(reg: ADC1_JSQR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: ADC1_JDR1_Type): ADC1_JDR1_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_JDR1_Fields](reg.loc))

proc read*(reg: ADC1_JDR2_Type): ADC1_JDR2_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_JDR2_Fields](reg.loc))

proc read*(reg: ADC1_JDR3_Type): ADC1_JDR3_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_JDR3_Fields](reg.loc))

proc read*(reg: ADC1_JDR4_Type): ADC1_JDR4_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_JDR4_Fields](reg.loc))

proc read*(reg: ADC1_DR_Type): ADC1_DR_Fields {.inline.} =
  volatileLoad(cast[ptr ADC1_DR_Fields](reg.loc))

func OVR*(r: ADC1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `OVR=`*(r: var ADC1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ADC1_SR_Fields

func STRT*(r: ADC1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `STRT=`*(r: var ADC1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.ADC1_SR_Fields

func JSTRT*(r: ADC1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `JSTRT=`*(r: var ADC1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.ADC1_SR_Fields

func JEOC*(r: ADC1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `JEOC=`*(r: var ADC1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.ADC1_SR_Fields

func EOC*(r: ADC1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EOC=`*(r: var ADC1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ADC1_SR_Fields

func AWD*(r: ADC1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `AWD=`*(r: var ADC1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ADC1_SR_Fields

func OVRIE*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `OVRIE=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.ADC1_CR1_Fields

func RES*(r: ADC1_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `RES=`*(r: var ADC1_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.ADC1_CR1_Fields

func AWDEN*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `AWDEN=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.ADC1_CR1_Fields

func JAWDEN*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `JAWDEN=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.ADC1_CR1_Fields

func DISCNUM*(r: ADC1_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 15)

proc `DISCNUM=`*(r: var ADC1_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 15)
  tmp.setMask((val shl 13).masked(13 .. 15))
  r = tmp.ADC1_CR1_Fields

func JDISCEN*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `JDISCEN=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.ADC1_CR1_Fields

func DISCEN*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DISCEN=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.ADC1_CR1_Fields

func JAUTO*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `JAUTO=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.ADC1_CR1_Fields

func AWDSGL*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `AWDSGL=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ADC1_CR1_Fields

func SCAN*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SCAN=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.ADC1_CR1_Fields

func JEOCIE*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `JEOCIE=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.ADC1_CR1_Fields

func AWDIE*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `AWDIE=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.ADC1_CR1_Fields

func EOCIE*(r: ADC1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `EOCIE=`*(r: var ADC1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.ADC1_CR1_Fields

func AWDCH*(r: ADC1_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `AWDCH=`*(r: var ADC1_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC1_CR1_Fields

func SWSTART*(r: ADC1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `SWSTART=`*(r: var ADC1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.ADC1_CR2_Fields

func EXTEN*(r: ADC1_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `EXTEN=`*(r: var ADC1_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.ADC1_CR2_Fields

func EXTSEL*(r: ADC1_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `EXTSEL=`*(r: var ADC1_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.ADC1_CR2_Fields

func JSWSTART*(r: ADC1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `JSWSTART=`*(r: var ADC1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.ADC1_CR2_Fields

func JEXTEN*(r: ADC1_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `JEXTEN=`*(r: var ADC1_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.ADC1_CR2_Fields

func JEXTSEL*(r: ADC1_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `JEXTSEL=`*(r: var ADC1_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.ADC1_CR2_Fields

func ALIGN*(r: ADC1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `ALIGN=`*(r: var ADC1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.ADC1_CR2_Fields

func EOCS*(r: ADC1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `EOCS=`*(r: var ADC1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.ADC1_CR2_Fields

func DDS*(r: ADC1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `DDS=`*(r: var ADC1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.ADC1_CR2_Fields

func DMA*(r: ADC1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `DMA=`*(r: var ADC1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.ADC1_CR2_Fields

func CONT*(r: ADC1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CONT=`*(r: var ADC1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.ADC1_CR2_Fields

func ADON*(r: ADC1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ADON=`*(r: var ADC1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.ADC1_CR2_Fields

func JOFFSET1*(r: ADC1_JOFR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET1=`*(r: var ADC1_JOFR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_JOFR1_Fields

func JOFFSET2*(r: ADC1_JOFR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET2=`*(r: var ADC1_JOFR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_JOFR2_Fields

func JOFFSET3*(r: ADC1_JOFR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET3=`*(r: var ADC1_JOFR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_JOFR3_Fields

func JOFFSET4*(r: ADC1_JOFR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `JOFFSET4=`*(r: var ADC1_JOFR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_JOFR4_Fields

func HT*(r: ADC1_HTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `HT=`*(r: var ADC1_HTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_HTR_Fields

func LT*(r: ADC1_LTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `LT=`*(r: var ADC1_LTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.ADC1_LTR_Fields

func L*(r: ADC1_SQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `L=`*(r: var ADC1_SQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.ADC1_SQR1_Fields

func SQ16*(r: ADC1_SQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `SQ16=`*(r: var ADC1_SQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC1_SQR1_Fields

func SQ15*(r: ADC1_SQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `SQ15=`*(r: var ADC1_SQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC1_SQR1_Fields

func SQ14*(r: ADC1_SQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `SQ14=`*(r: var ADC1_SQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC1_SQR1_Fields

func SQ13*(r: ADC1_SQR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `SQ13=`*(r: var ADC1_SQR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC1_SQR1_Fields

func SQ12*(r: ADC1_SQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 29)

proc `SQ12=`*(r: var ADC1_SQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 29)
  tmp.setMask((val shl 25).masked(25 .. 29))
  r = tmp.ADC1_SQR2_Fields

func SQ11*(r: ADC1_SQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 24)

proc `SQ11=`*(r: var ADC1_SQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 24)
  tmp.setMask((val shl 20).masked(20 .. 24))
  r = tmp.ADC1_SQR2_Fields

func SQ10*(r: ADC1_SQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `SQ10=`*(r: var ADC1_SQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC1_SQR2_Fields

func SQ9*(r: ADC1_SQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `SQ9=`*(r: var ADC1_SQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC1_SQR2_Fields

func SQ8*(r: ADC1_SQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `SQ8=`*(r: var ADC1_SQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC1_SQR2_Fields

func SQ7*(r: ADC1_SQR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `SQ7=`*(r: var ADC1_SQR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC1_SQR2_Fields

func SQ6*(r: ADC1_SQR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(25 .. 29)

proc `SQ6=`*(r: var ADC1_SQR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 29)
  tmp.setMask((val shl 25).masked(25 .. 29))
  r = tmp.ADC1_SQR3_Fields

func SQ5*(r: ADC1_SQR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 24)

proc `SQ5=`*(r: var ADC1_SQR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 24)
  tmp.setMask((val shl 20).masked(20 .. 24))
  r = tmp.ADC1_SQR3_Fields

func SQ4*(r: ADC1_SQR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `SQ4=`*(r: var ADC1_SQR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC1_SQR3_Fields

func SQ3*(r: ADC1_SQR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `SQ3=`*(r: var ADC1_SQR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC1_SQR3_Fields

func SQ2*(r: ADC1_SQR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `SQ2=`*(r: var ADC1_SQR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC1_SQR3_Fields

func SQ1*(r: ADC1_SQR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `SQ1=`*(r: var ADC1_SQR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC1_SQR3_Fields

func JL*(r: ADC1_JSQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `JL=`*(r: var ADC1_JSQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.ADC1_JSQR_Fields

func JSQ4*(r: ADC1_JSQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 19)

proc `JSQ4=`*(r: var ADC1_JSQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 19)
  tmp.setMask((val shl 15).masked(15 .. 19))
  r = tmp.ADC1_JSQR_Fields

func JSQ3*(r: ADC1_JSQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 14)

proc `JSQ3=`*(r: var ADC1_JSQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 14)
  tmp.setMask((val shl 10).masked(10 .. 14))
  r = tmp.ADC1_JSQR_Fields

func JSQ2*(r: ADC1_JSQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 9)

proc `JSQ2=`*(r: var ADC1_JSQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 9)
  tmp.setMask((val shl 5).masked(5 .. 9))
  r = tmp.ADC1_JSQR_Fields

func JSQ1*(r: ADC1_JSQR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `JSQ1=`*(r: var ADC1_JSQR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.ADC1_JSQR_Fields

func JDATA*(r: ADC1_JDR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func JDATA*(r: ADC1_JDR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func JDATA*(r: ADC1_JDR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func JDATA*(r: ADC1_JDR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func DATA*(r: ADC1_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

type
  USART6_SR_Fields* = distinct uint32
  USART6_DR_Fields* = distinct uint32
  USART6_BRR_Fields* = distinct uint32
  USART6_CR1_Fields* = distinct uint32
  USART6_CR2_Fields* = distinct uint32
  USART6_CR3_Fields* = distinct uint32
  USART6_GTPR_Fields* = distinct uint32

proc read*(reg: USART6_SR_Type): USART6_SR_Fields {.inline.} =
  volatileLoad(cast[ptr USART6_SR_Fields](reg.loc))

proc write*(reg: USART6_SR_Type, val: USART6_SR_Fields) {.inline.} =
  volatileStore(cast[ptr USART6_SR_Fields](reg.loc), val)

proc write*(reg: USART6_SR_Type, CTS: bool = false, LBD: bool = false, TC: bool = false, RXNE: bool = false) =
  var x: uint32
  x.setMask((CTS.uint32 shl 9).masked(9 .. 9))
  x.setMask((LBD.uint32 shl 8).masked(8 .. 8))
  x.setMask((TC.uint32 shl 6).masked(6 .. 6))
  x.setMask((RXNE.uint32 shl 5).masked(5 .. 5))
  reg.write x.USART6_SR_Fields

template modifyIt*(reg: USART6_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART6_DR_Type): USART6_DR_Fields {.inline.} =
  volatileLoad(cast[ptr USART6_DR_Fields](reg.loc))

proc write*(reg: USART6_DR_Type, val: USART6_DR_Fields) {.inline.} =
  volatileStore(cast[ptr USART6_DR_Fields](reg.loc), val)

proc write*(reg: USART6_DR_Type, DR: uint32 = 0) =
  var x: uint32
  x.setMask((DR shl 0).masked(0 .. 8))
  reg.write x.USART6_DR_Fields

template modifyIt*(reg: USART6_DR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART6_BRR_Type): USART6_BRR_Fields {.inline.} =
  volatileLoad(cast[ptr USART6_BRR_Fields](reg.loc))

proc write*(reg: USART6_BRR_Type, val: USART6_BRR_Fields) {.inline.} =
  volatileStore(cast[ptr USART6_BRR_Fields](reg.loc), val)

proc write*(reg: USART6_BRR_Type, DIV_Mantissa: uint32 = 0, DIV_Fraction: uint32 = 0) =
  var x: uint32
  x.setMask((DIV_Mantissa shl 4).masked(4 .. 15))
  x.setMask((DIV_Fraction shl 0).masked(0 .. 3))
  reg.write x.USART6_BRR_Fields

template modifyIt*(reg: USART6_BRR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART6_CR1_Type): USART6_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr USART6_CR1_Fields](reg.loc))

proc write*(reg: USART6_CR1_Type, val: USART6_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr USART6_CR1_Fields](reg.loc), val)

proc write*(reg: USART6_CR1_Type, OVER8: bool = false, UE: bool = false, M: bool = false, WAKE: bool = false, PCE: bool = false, PS: bool = false, PEIE: bool = false, TXEIE: bool = false, TCIE: bool = false, RXNEIE: bool = false, IDLEIE: bool = false, TE: bool = false, RE: bool = false, RWU: bool = false, SBK: bool = false) =
  var x: uint32
  x.setMask((OVER8.uint32 shl 15).masked(15 .. 15))
  x.setMask((UE.uint32 shl 13).masked(13 .. 13))
  x.setMask((M.uint32 shl 12).masked(12 .. 12))
  x.setMask((WAKE.uint32 shl 11).masked(11 .. 11))
  x.setMask((PCE.uint32 shl 10).masked(10 .. 10))
  x.setMask((PS.uint32 shl 9).masked(9 .. 9))
  x.setMask((PEIE.uint32 shl 8).masked(8 .. 8))
  x.setMask((TXEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((TCIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((RXNEIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((IDLEIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((TE.uint32 shl 3).masked(3 .. 3))
  x.setMask((RE.uint32 shl 2).masked(2 .. 2))
  x.setMask((RWU.uint32 shl 1).masked(1 .. 1))
  x.setMask((SBK.uint32 shl 0).masked(0 .. 0))
  reg.write x.USART6_CR1_Fields

template modifyIt*(reg: USART6_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART6_CR2_Type): USART6_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr USART6_CR2_Fields](reg.loc))

proc write*(reg: USART6_CR2_Type, val: USART6_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr USART6_CR2_Fields](reg.loc), val)

proc write*(reg: USART6_CR2_Type, LINEN: bool = false, STOP: uint32 = 0, CLKEN: bool = false, CPOL: bool = false, CPHA: bool = false, LBCL: bool = false, LBDIE: bool = false, LBDL: bool = false, ADD: uint32 = 0) =
  var x: uint32
  x.setMask((LINEN.uint32 shl 14).masked(14 .. 14))
  x.setMask((STOP shl 12).masked(12 .. 13))
  x.setMask((CLKEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((CPOL.uint32 shl 10).masked(10 .. 10))
  x.setMask((CPHA.uint32 shl 9).masked(9 .. 9))
  x.setMask((LBCL.uint32 shl 8).masked(8 .. 8))
  x.setMask((LBDIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((LBDL.uint32 shl 5).masked(5 .. 5))
  x.setMask((ADD shl 0).masked(0 .. 3))
  reg.write x.USART6_CR2_Fields

template modifyIt*(reg: USART6_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART6_CR3_Type): USART6_CR3_Fields {.inline.} =
  volatileLoad(cast[ptr USART6_CR3_Fields](reg.loc))

proc write*(reg: USART6_CR3_Type, val: USART6_CR3_Fields) {.inline.} =
  volatileStore(cast[ptr USART6_CR3_Fields](reg.loc), val)

proc write*(reg: USART6_CR3_Type, ONEBIT: bool = false, CTSIE: bool = false, CTSE: bool = false, RTSE: bool = false, DMAT: bool = false, DMAR: bool = false, SCEN: bool = false, NACK: bool = false, HDSEL: bool = false, IRLP: bool = false, IREN: bool = false, EIE: bool = false) =
  var x: uint32
  x.setMask((ONEBIT.uint32 shl 11).masked(11 .. 11))
  x.setMask((CTSIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CTSE.uint32 shl 9).masked(9 .. 9))
  x.setMask((RTSE.uint32 shl 8).masked(8 .. 8))
  x.setMask((DMAT.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMAR.uint32 shl 6).masked(6 .. 6))
  x.setMask((SCEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((NACK.uint32 shl 4).masked(4 .. 4))
  x.setMask((HDSEL.uint32 shl 3).masked(3 .. 3))
  x.setMask((IRLP.uint32 shl 2).masked(2 .. 2))
  x.setMask((IREN.uint32 shl 1).masked(1 .. 1))
  x.setMask((EIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.USART6_CR3_Fields

template modifyIt*(reg: USART6_CR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: USART6_GTPR_Type): USART6_GTPR_Fields {.inline.} =
  volatileLoad(cast[ptr USART6_GTPR_Fields](reg.loc))

proc write*(reg: USART6_GTPR_Type, val: USART6_GTPR_Fields) {.inline.} =
  volatileStore(cast[ptr USART6_GTPR_Fields](reg.loc), val)

proc write*(reg: USART6_GTPR_Type, GT: uint32 = 0, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((GT shl 8).masked(8 .. 15))
  x.setMask((PSC shl 0).masked(0 .. 7))
  reg.write x.USART6_GTPR_Fields

template modifyIt*(reg: USART6_GTPR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CTS*(r: USART6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CTS=`*(r: var USART6_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.USART6_SR_Fields

func LBD*(r: USART6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LBD=`*(r: var USART6_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.USART6_SR_Fields

func TXE*(r: USART6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TC*(r: USART6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TC=`*(r: var USART6_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.USART6_SR_Fields

func RXNE*(r: USART6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RXNE=`*(r: var USART6_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.USART6_SR_Fields

func IDLE*(r: USART6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func ORE*(r: USART6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func NF*(r: USART6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func FE*(r: USART6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func PE*(r: USART6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func DR*(r: USART6_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 8)

proc `DR=`*(r: var USART6_DR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 8)
  tmp.setMask((val shl 0).masked(0 .. 8))
  r = tmp.USART6_DR_Fields

func DIV_Mantissa*(r: USART6_BRR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 15)

proc `DIV_Mantissa=`*(r: var USART6_BRR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 15)
  tmp.setMask((val shl 4).masked(4 .. 15))
  r = tmp.USART6_BRR_Fields

func DIV_Fraction*(r: USART6_BRR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DIV_Fraction=`*(r: var USART6_BRR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USART6_BRR_Fields

func OVER8*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OVER8=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.USART6_CR1_Fields

func UE*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `UE=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.USART6_CR1_Fields

func M*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `M=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.USART6_CR1_Fields

func WAKE*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WAKE=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.USART6_CR1_Fields

func PCE*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `PCE=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.USART6_CR1_Fields

func PS*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PS=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.USART6_CR1_Fields

func PEIE*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PEIE=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.USART6_CR1_Fields

func TXEIE*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXEIE=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.USART6_CR1_Fields

func TCIE*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TCIE=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.USART6_CR1_Fields

func RXNEIE*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RXNEIE=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.USART6_CR1_Fields

func IDLEIE*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `IDLEIE=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.USART6_CR1_Fields

func TE*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TE=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.USART6_CR1_Fields

func RE*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `RE=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.USART6_CR1_Fields

func RWU*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RWU=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.USART6_CR1_Fields

func SBK*(r: USART6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SBK=`*(r: var USART6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.USART6_CR1_Fields

func LINEN*(r: USART6_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `LINEN=`*(r: var USART6_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.USART6_CR2_Fields

func STOP*(r: USART6_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `STOP=`*(r: var USART6_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.USART6_CR2_Fields

func CLKEN*(r: USART6_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CLKEN=`*(r: var USART6_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.USART6_CR2_Fields

func CPOL*(r: USART6_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CPOL=`*(r: var USART6_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.USART6_CR2_Fields

func CPHA*(r: USART6_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CPHA=`*(r: var USART6_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.USART6_CR2_Fields

func LBCL*(r: USART6_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LBCL=`*(r: var USART6_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.USART6_CR2_Fields

func LBDIE*(r: USART6_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LBDIE=`*(r: var USART6_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.USART6_CR2_Fields

func LBDL*(r: USART6_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `LBDL=`*(r: var USART6_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.USART6_CR2_Fields

func ADD*(r: USART6_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADD=`*(r: var USART6_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.USART6_CR2_Fields

func ONEBIT*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `ONEBIT=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.USART6_CR3_Fields

func CTSIE*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CTSIE=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.USART6_CR3_Fields

func CTSE*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CTSE=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.USART6_CR3_Fields

func RTSE*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `RTSE=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.USART6_CR3_Fields

func DMAT*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `DMAT=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.USART6_CR3_Fields

func DMAR*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `DMAR=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.USART6_CR3_Fields

func SCEN*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `SCEN=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.USART6_CR3_Fields

func NACK*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NACK=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.USART6_CR3_Fields

func HDSEL*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HDSEL=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.USART6_CR3_Fields

func IRLP*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IRLP=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.USART6_CR3_Fields

func IREN*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `IREN=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.USART6_CR3_Fields

func EIE*(r: USART6_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EIE=`*(r: var USART6_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.USART6_CR3_Fields

func GT*(r: USART6_GTPR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `GT=`*(r: var USART6_GTPR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.USART6_GTPR_Fields

func PSC*(r: USART6_GTPR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `PSC=`*(r: var USART6_GTPR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.USART6_GTPR_Fields

type
  DAC_CR_Fields* = distinct uint32
  DAC_SWTRIGR_Fields* = distinct uint32
  DAC_DHR12R1_Fields* = distinct uint32
  DAC_DHR12L1_Fields* = distinct uint32
  DAC_DHR8R1_Fields* = distinct uint32
  DAC_DHR12R2_Fields* = distinct uint32
  DAC_DHR12L2_Fields* = distinct uint32
  DAC_DHR8R2_Fields* = distinct uint32
  DAC_DHR12RD_Fields* = distinct uint32
  DAC_DHR12LD_Fields* = distinct uint32
  DAC_DHR8RD_Fields* = distinct uint32
  DAC_DOR1_Fields* = distinct uint32
  DAC_DOR2_Fields* = distinct uint32
  DAC_SR_Fields* = distinct uint32

proc read*(reg: DAC_CR_Type): DAC_CR_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_CR_Fields](reg.loc))

proc write*(reg: DAC_CR_Type, val: DAC_CR_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_CR_Fields](reg.loc), val)

proc write*(reg: DAC_CR_Type, DMAUDRIE2: bool = false, DMAEN2: bool = false, MAMP2: uint32 = 0, WAVE2: uint32 = 0, TSEL2: uint32 = 0, TEN2: bool = false, BOFF2: bool = false, EN2: bool = false, DMAUDRIE1: bool = false, DMAEN1: bool = false, MAMP1: uint32 = 0, WAVE1: uint32 = 0, TSEL1: uint32 = 0, TEN1: bool = false, BOFF1: bool = false, EN1: bool = false) =
  var x: uint32
  x.setMask((DMAUDRIE2.uint32 shl 29).masked(29 .. 29))
  x.setMask((DMAEN2.uint32 shl 28).masked(28 .. 28))
  x.setMask((MAMP2 shl 24).masked(24 .. 27))
  x.setMask((WAVE2 shl 22).masked(22 .. 23))
  x.setMask((TSEL2 shl 19).masked(19 .. 21))
  x.setMask((TEN2.uint32 shl 18).masked(18 .. 18))
  x.setMask((BOFF2.uint32 shl 17).masked(17 .. 17))
  x.setMask((EN2.uint32 shl 16).masked(16 .. 16))
  x.setMask((DMAUDRIE1.uint32 shl 13).masked(13 .. 13))
  x.setMask((DMAEN1.uint32 shl 12).masked(12 .. 12))
  x.setMask((MAMP1 shl 8).masked(8 .. 11))
  x.setMask((WAVE1 shl 6).masked(6 .. 7))
  x.setMask((TSEL1 shl 3).masked(3 .. 5))
  x.setMask((TEN1.uint32 shl 2).masked(2 .. 2))
  x.setMask((BOFF1.uint32 shl 1).masked(1 .. 1))
  x.setMask((EN1.uint32 shl 0).masked(0 .. 0))
  reg.write x.DAC_CR_Fields

template modifyIt*(reg: DAC_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: DAC_SWTRIGR_Type, val: DAC_SWTRIGR_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_SWTRIGR_Fields](reg.loc), val)

proc write*(reg: DAC_SWTRIGR_Type, SWTRIG2: bool = false, SWTRIG1: bool = false) =
  var x: uint32
  x.setMask((SWTRIG2.uint32 shl 1).masked(1 .. 1))
  x.setMask((SWTRIG1.uint32 shl 0).masked(0 .. 0))
  reg.write x.DAC_SWTRIGR_Fields

proc read*(reg: DAC_DHR12R1_Type): DAC_DHR12R1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DHR12R1_Fields](reg.loc))

proc write*(reg: DAC_DHR12R1_Type, val: DAC_DHR12R1_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_DHR12R1_Fields](reg.loc), val)

proc write*(reg: DAC_DHR12R1_Type, DACC1DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC1DHR shl 0).masked(0 .. 11))
  reg.write x.DAC_DHR12R1_Fields

template modifyIt*(reg: DAC_DHR12R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_DHR12L1_Type): DAC_DHR12L1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DHR12L1_Fields](reg.loc))

proc write*(reg: DAC_DHR12L1_Type, val: DAC_DHR12L1_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_DHR12L1_Fields](reg.loc), val)

proc write*(reg: DAC_DHR12L1_Type, DACC1DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC1DHR shl 4).masked(4 .. 15))
  reg.write x.DAC_DHR12L1_Fields

template modifyIt*(reg: DAC_DHR12L1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_DHR8R1_Type): DAC_DHR8R1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DHR8R1_Fields](reg.loc))

proc write*(reg: DAC_DHR8R1_Type, val: DAC_DHR8R1_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_DHR8R1_Fields](reg.loc), val)

proc write*(reg: DAC_DHR8R1_Type, DACC1DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC1DHR shl 0).masked(0 .. 7))
  reg.write x.DAC_DHR8R1_Fields

template modifyIt*(reg: DAC_DHR8R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_DHR12R2_Type): DAC_DHR12R2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DHR12R2_Fields](reg.loc))

proc write*(reg: DAC_DHR12R2_Type, val: DAC_DHR12R2_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_DHR12R2_Fields](reg.loc), val)

proc write*(reg: DAC_DHR12R2_Type, DACC2DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC2DHR shl 0).masked(0 .. 11))
  reg.write x.DAC_DHR12R2_Fields

template modifyIt*(reg: DAC_DHR12R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_DHR12L2_Type): DAC_DHR12L2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DHR12L2_Fields](reg.loc))

proc write*(reg: DAC_DHR12L2_Type, val: DAC_DHR12L2_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_DHR12L2_Fields](reg.loc), val)

proc write*(reg: DAC_DHR12L2_Type, DACC2DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC2DHR shl 4).masked(4 .. 15))
  reg.write x.DAC_DHR12L2_Fields

template modifyIt*(reg: DAC_DHR12L2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_DHR8R2_Type): DAC_DHR8R2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DHR8R2_Fields](reg.loc))

proc write*(reg: DAC_DHR8R2_Type, val: DAC_DHR8R2_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_DHR8R2_Fields](reg.loc), val)

proc write*(reg: DAC_DHR8R2_Type, DACC2DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC2DHR shl 0).masked(0 .. 7))
  reg.write x.DAC_DHR8R2_Fields

template modifyIt*(reg: DAC_DHR8R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_DHR12RD_Type): DAC_DHR12RD_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DHR12RD_Fields](reg.loc))

proc write*(reg: DAC_DHR12RD_Type, val: DAC_DHR12RD_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_DHR12RD_Fields](reg.loc), val)

proc write*(reg: DAC_DHR12RD_Type, DACC2DHR: uint32 = 0, DACC1DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC2DHR shl 16).masked(16 .. 27))
  x.setMask((DACC1DHR shl 0).masked(0 .. 11))
  reg.write x.DAC_DHR12RD_Fields

template modifyIt*(reg: DAC_DHR12RD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_DHR12LD_Type): DAC_DHR12LD_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DHR12LD_Fields](reg.loc))

proc write*(reg: DAC_DHR12LD_Type, val: DAC_DHR12LD_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_DHR12LD_Fields](reg.loc), val)

proc write*(reg: DAC_DHR12LD_Type, DACC2DHR: uint32 = 0, DACC1DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC2DHR shl 20).masked(20 .. 31))
  x.setMask((DACC1DHR shl 4).masked(4 .. 15))
  reg.write x.DAC_DHR12LD_Fields

template modifyIt*(reg: DAC_DHR12LD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_DHR8RD_Type): DAC_DHR8RD_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DHR8RD_Fields](reg.loc))

proc write*(reg: DAC_DHR8RD_Type, val: DAC_DHR8RD_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_DHR8RD_Fields](reg.loc), val)

proc write*(reg: DAC_DHR8RD_Type, DACC2DHR: uint32 = 0, DACC1DHR: uint32 = 0) =
  var x: uint32
  x.setMask((DACC2DHR shl 8).masked(8 .. 15))
  x.setMask((DACC1DHR shl 0).masked(0 .. 7))
  reg.write x.DAC_DHR8RD_Fields

template modifyIt*(reg: DAC_DHR8RD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: DAC_DOR1_Type): DAC_DOR1_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DOR1_Fields](reg.loc))

proc read*(reg: DAC_DOR2_Type): DAC_DOR2_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_DOR2_Fields](reg.loc))

proc read*(reg: DAC_SR_Type): DAC_SR_Fields {.inline.} =
  volatileLoad(cast[ptr DAC_SR_Fields](reg.loc))

proc write*(reg: DAC_SR_Type, val: DAC_SR_Fields) {.inline.} =
  volatileStore(cast[ptr DAC_SR_Fields](reg.loc), val)

proc write*(reg: DAC_SR_Type, DMAUDR2: bool = false, DMAUDR1: bool = false) =
  var x: uint32
  x.setMask((DMAUDR2.uint32 shl 29).masked(29 .. 29))
  x.setMask((DMAUDR1.uint32 shl 13).masked(13 .. 13))
  reg.write x.DAC_SR_Fields

template modifyIt*(reg: DAC_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func DMAUDRIE2*(r: DAC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DMAUDRIE2=`*(r: var DAC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.DAC_CR_Fields

func DMAEN2*(r: DAC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `DMAEN2=`*(r: var DAC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.DAC_CR_Fields

func MAMP2*(r: DAC_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `MAMP2=`*(r: var DAC_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.DAC_CR_Fields

func WAVE2*(r: DAC_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 23)

proc `WAVE2=`*(r: var DAC_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 23)
  tmp.setMask((val shl 22).masked(22 .. 23))
  r = tmp.DAC_CR_Fields

func TSEL2*(r: DAC_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 21)

proc `TSEL2=`*(r: var DAC_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 21)
  tmp.setMask((val shl 19).masked(19 .. 21))
  r = tmp.DAC_CR_Fields

func TEN2*(r: DAC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `TEN2=`*(r: var DAC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.DAC_CR_Fields

func BOFF2*(r: DAC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `BOFF2=`*(r: var DAC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.DAC_CR_Fields

func EN2*(r: DAC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `EN2=`*(r: var DAC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.DAC_CR_Fields

func DMAUDRIE1*(r: DAC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `DMAUDRIE1=`*(r: var DAC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.DAC_CR_Fields

func DMAEN1*(r: DAC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `DMAEN1=`*(r: var DAC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.DAC_CR_Fields

func MAMP1*(r: DAC_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `MAMP1=`*(r: var DAC_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.DAC_CR_Fields

func WAVE1*(r: DAC_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `WAVE1=`*(r: var DAC_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.DAC_CR_Fields

func TSEL1*(r: DAC_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 5)

proc `TSEL1=`*(r: var DAC_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 5)
  tmp.setMask((val shl 3).masked(3 .. 5))
  r = tmp.DAC_CR_Fields

func TEN1*(r: DAC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TEN1=`*(r: var DAC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.DAC_CR_Fields

func BOFF1*(r: DAC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `BOFF1=`*(r: var DAC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DAC_CR_Fields

func EN1*(r: DAC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN1=`*(r: var DAC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DAC_CR_Fields

proc `SWTRIG2=`*(r: var DAC_SWTRIGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.DAC_SWTRIGR_Fields

proc `SWTRIG1=`*(r: var DAC_SWTRIGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.DAC_SWTRIGR_Fields

func DACC1DHR*(r: DAC_DHR12R1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `DACC1DHR=`*(r: var DAC_DHR12R1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.DAC_DHR12R1_Fields

func DACC1DHR*(r: DAC_DHR12L1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 15)

proc `DACC1DHR=`*(r: var DAC_DHR12L1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 15)
  tmp.setMask((val shl 4).masked(4 .. 15))
  r = tmp.DAC_DHR12L1_Fields

func DACC1DHR*(r: DAC_DHR8R1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DACC1DHR=`*(r: var DAC_DHR8R1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.DAC_DHR8R1_Fields

func DACC2DHR*(r: DAC_DHR12R2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `DACC2DHR=`*(r: var DAC_DHR12R2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.DAC_DHR12R2_Fields

func DACC2DHR*(r: DAC_DHR12L2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 15)

proc `DACC2DHR=`*(r: var DAC_DHR12L2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 15)
  tmp.setMask((val shl 4).masked(4 .. 15))
  r = tmp.DAC_DHR12L2_Fields

func DACC2DHR*(r: DAC_DHR8R2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DACC2DHR=`*(r: var DAC_DHR8R2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.DAC_DHR8R2_Fields

func DACC2DHR*(r: DAC_DHR12RD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 27)

proc `DACC2DHR=`*(r: var DAC_DHR12RD_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 27)
  tmp.setMask((val shl 16).masked(16 .. 27))
  r = tmp.DAC_DHR12RD_Fields

func DACC1DHR*(r: DAC_DHR12RD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `DACC1DHR=`*(r: var DAC_DHR12RD_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.DAC_DHR12RD_Fields

func DACC2DHR*(r: DAC_DHR12LD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 31)

proc `DACC2DHR=`*(r: var DAC_DHR12LD_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 31)
  tmp.setMask((val shl 20).masked(20 .. 31))
  r = tmp.DAC_DHR12LD_Fields

func DACC1DHR*(r: DAC_DHR12LD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 15)

proc `DACC1DHR=`*(r: var DAC_DHR12LD_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 15)
  tmp.setMask((val shl 4).masked(4 .. 15))
  r = tmp.DAC_DHR12LD_Fields

func DACC2DHR*(r: DAC_DHR8RD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DACC2DHR=`*(r: var DAC_DHR8RD_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.DAC_DHR8RD_Fields

func DACC1DHR*(r: DAC_DHR8RD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DACC1DHR=`*(r: var DAC_DHR8RD_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.DAC_DHR8RD_Fields

func DACC1DOR*(r: DAC_DOR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

func DACC2DOR*(r: DAC_DOR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

func DMAUDR2*(r: DAC_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DMAUDR2=`*(r: var DAC_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.DAC_SR_Fields

func DMAUDR1*(r: DAC_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `DMAUDR1=`*(r: var DAC_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.DAC_SR_Fields

type
  FMPI2C_CR1_Fields* = distinct uint32
  FMPI2C_CR2_Fields* = distinct uint32
  FMPI2C_OAR1_Fields* = distinct uint32
  FMPI2C_OAR2_Fields* = distinct uint32
  FMPI2C_TIMINGR_Fields* = distinct uint32
  FMPI2C_TIMEOUTR_Fields* = distinct uint32
  FMPI2C_ISR_Fields* = distinct uint32
  FMPI2C_ICR_Fields* = distinct uint32
  FMPI2C_PECR_Fields* = distinct uint32
  FMPI2C_RXDR_Fields* = distinct uint32
  FMPI2C_TXDR_Fields* = distinct uint32

proc read*(reg: FMPI2C_CR1_Type): FMPI2C_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr FMPI2C_CR1_Fields](reg.loc))

proc write*(reg: FMPI2C_CR1_Type, val: FMPI2C_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr FMPI2C_CR1_Fields](reg.loc), val)

proc write*(reg: FMPI2C_CR1_Type, PECEN: bool = false, ALERTEN: bool = false, SMBDEN: bool = false, SMBHEN: bool = false, GCEN: bool = false, NOSTRETCH: bool = false, SBC: bool = false, RXDMAEN: bool = false, TXDMAEN: bool = false, ANFOFF: bool = false, DNF: uint32 = 0, ERRIE: bool = false, TCIE: bool = false, STOPIE: bool = false, NACKIE: bool = false, ADDRIE: bool = false, RXIE: bool = false, TXIE: bool = false, PE: bool = false) =
  var x: uint32
  x.setMask((PECEN.uint32 shl 23).masked(23 .. 23))
  x.setMask((ALERTEN.uint32 shl 22).masked(22 .. 22))
  x.setMask((SMBDEN.uint32 shl 21).masked(21 .. 21))
  x.setMask((SMBHEN.uint32 shl 20).masked(20 .. 20))
  x.setMask((GCEN.uint32 shl 19).masked(19 .. 19))
  x.setMask((NOSTRETCH.uint32 shl 17).masked(17 .. 17))
  x.setMask((SBC.uint32 shl 16).masked(16 .. 16))
  x.setMask((RXDMAEN.uint32 shl 15).masked(15 .. 15))
  x.setMask((TXDMAEN.uint32 shl 14).masked(14 .. 14))
  x.setMask((ANFOFF.uint32 shl 12).masked(12 .. 12))
  x.setMask((DNF shl 8).masked(8 .. 11))
  x.setMask((ERRIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((TCIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((STOPIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((NACKIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((ADDRIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((RXIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TXIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((PE.uint32 shl 0).masked(0 .. 0))
  reg.write x.FMPI2C_CR1_Fields

template modifyIt*(reg: FMPI2C_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMPI2C_CR2_Type): FMPI2C_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr FMPI2C_CR2_Fields](reg.loc))

proc write*(reg: FMPI2C_CR2_Type, val: FMPI2C_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr FMPI2C_CR2_Fields](reg.loc), val)

proc write*(reg: FMPI2C_CR2_Type, SADD0: bool = false, SADD7_1: uint32 = 0, SADD9_8: uint32 = 0, RD_WRN: bool = false, ADD10: bool = false, HEAD10R: bool = false, START: bool = false, STOP: bool = false, NACK: bool = false, NBYTES: uint32 = 0, RELOAD: bool = false, AUTOEND: bool = false, PECBYTE: bool = false) =
  var x: uint32
  x.setMask((SADD0.uint32 shl 0).masked(0 .. 0))
  x.setMask((SADD7_1 shl 1).masked(1 .. 7))
  x.setMask((SADD9_8 shl 8).masked(8 .. 9))
  x.setMask((RD_WRN.uint32 shl 10).masked(10 .. 10))
  x.setMask((ADD10.uint32 shl 11).masked(11 .. 11))
  x.setMask((HEAD10R.uint32 shl 12).masked(12 .. 12))
  x.setMask((START.uint32 shl 13).masked(13 .. 13))
  x.setMask((STOP.uint32 shl 14).masked(14 .. 14))
  x.setMask((NACK.uint32 shl 15).masked(15 .. 15))
  x.setMask((NBYTES shl 16).masked(16 .. 23))
  x.setMask((RELOAD.uint32 shl 24).masked(24 .. 24))
  x.setMask((AUTOEND.uint32 shl 25).masked(25 .. 25))
  x.setMask((PECBYTE.uint32 shl 26).masked(26 .. 26))
  reg.write x.FMPI2C_CR2_Fields

template modifyIt*(reg: FMPI2C_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMPI2C_OAR1_Type): FMPI2C_OAR1_Fields {.inline.} =
  volatileLoad(cast[ptr FMPI2C_OAR1_Fields](reg.loc))

proc write*(reg: FMPI2C_OAR1_Type, val: FMPI2C_OAR1_Fields) {.inline.} =
  volatileStore(cast[ptr FMPI2C_OAR1_Fields](reg.loc), val)

proc write*(reg: FMPI2C_OAR1_Type, OA1_0: bool = false, OA1_7_1: uint32 = 0, OA1_9_8: uint32 = 0, OA1MODE: bool = false, OA1EN: bool = false) =
  var x: uint32
  x.setMask((OA1_0.uint32 shl 0).masked(0 .. 0))
  x.setMask((OA1_7_1 shl 1).masked(1 .. 7))
  x.setMask((OA1_9_8 shl 8).masked(8 .. 9))
  x.setMask((OA1MODE.uint32 shl 10).masked(10 .. 10))
  x.setMask((OA1EN.uint32 shl 15).masked(15 .. 15))
  reg.write x.FMPI2C_OAR1_Fields

template modifyIt*(reg: FMPI2C_OAR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMPI2C_OAR2_Type): FMPI2C_OAR2_Fields {.inline.} =
  volatileLoad(cast[ptr FMPI2C_OAR2_Fields](reg.loc))

proc write*(reg: FMPI2C_OAR2_Type, val: FMPI2C_OAR2_Fields) {.inline.} =
  volatileStore(cast[ptr FMPI2C_OAR2_Fields](reg.loc), val)

proc write*(reg: FMPI2C_OAR2_Type, OA2: uint32 = 0, OA2MSK: uint32 = 0, OA2EN: bool = false) =
  var x: uint32
  x.setMask((OA2 shl 1).masked(1 .. 7))
  x.setMask((OA2MSK shl 8).masked(8 .. 10))
  x.setMask((OA2EN.uint32 shl 15).masked(15 .. 15))
  reg.write x.FMPI2C_OAR2_Fields

template modifyIt*(reg: FMPI2C_OAR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMPI2C_TIMINGR_Type): FMPI2C_TIMINGR_Fields {.inline.} =
  volatileLoad(cast[ptr FMPI2C_TIMINGR_Fields](reg.loc))

proc write*(reg: FMPI2C_TIMINGR_Type, val: FMPI2C_TIMINGR_Fields) {.inline.} =
  volatileStore(cast[ptr FMPI2C_TIMINGR_Fields](reg.loc), val)

proc write*(reg: FMPI2C_TIMINGR_Type, SCLL: uint32 = 0, SCLH: uint32 = 0, SDADEL: uint32 = 0, SCLDEL: uint32 = 0, PRESC: uint32 = 0) =
  var x: uint32
  x.setMask((SCLL shl 0).masked(0 .. 7))
  x.setMask((SCLH shl 8).masked(8 .. 15))
  x.setMask((SDADEL shl 16).masked(16 .. 19))
  x.setMask((SCLDEL shl 20).masked(20 .. 23))
  x.setMask((PRESC shl 28).masked(28 .. 31))
  reg.write x.FMPI2C_TIMINGR_Fields

template modifyIt*(reg: FMPI2C_TIMINGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMPI2C_TIMEOUTR_Type): FMPI2C_TIMEOUTR_Fields {.inline.} =
  volatileLoad(cast[ptr FMPI2C_TIMEOUTR_Fields](reg.loc))

proc write*(reg: FMPI2C_TIMEOUTR_Type, val: FMPI2C_TIMEOUTR_Fields) {.inline.} =
  volatileStore(cast[ptr FMPI2C_TIMEOUTR_Fields](reg.loc), val)

proc write*(reg: FMPI2C_TIMEOUTR_Type, TIMEOUTA: uint32 = 0, TIDLE: bool = false, TIMOUTEN: bool = false, TIMEOUTB: uint32 = 0, TEXTEN: bool = false) =
  var x: uint32
  x.setMask((TIMEOUTA shl 0).masked(0 .. 11))
  x.setMask((TIDLE.uint32 shl 12).masked(12 .. 12))
  x.setMask((TIMOUTEN.uint32 shl 15).masked(15 .. 15))
  x.setMask((TIMEOUTB shl 16).masked(16 .. 27))
  x.setMask((TEXTEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.FMPI2C_TIMEOUTR_Fields

template modifyIt*(reg: FMPI2C_TIMEOUTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FMPI2C_ISR_Type): FMPI2C_ISR_Fields {.inline.} =
  volatileLoad(cast[ptr FMPI2C_ISR_Fields](reg.loc))

proc write*(reg: FMPI2C_ICR_Type, val: FMPI2C_ICR_Fields) {.inline.} =
  volatileStore(cast[ptr FMPI2C_ICR_Fields](reg.loc), val)

proc write*(reg: FMPI2C_ICR_Type, ADDRCF: bool = false, NACKCF: bool = false, STOPCF: bool = false, BERRCF: bool = false, ARLOCF: bool = false, OVRCF: bool = false, PECCF: bool = false, TIMOUTCF: bool = false, ALERTCF: bool = false) =
  var x: uint32
  x.setMask((ADDRCF.uint32 shl 3).masked(3 .. 3))
  x.setMask((NACKCF.uint32 shl 4).masked(4 .. 4))
  x.setMask((STOPCF.uint32 shl 5).masked(5 .. 5))
  x.setMask((BERRCF.uint32 shl 8).masked(8 .. 8))
  x.setMask((ARLOCF.uint32 shl 9).masked(9 .. 9))
  x.setMask((OVRCF.uint32 shl 10).masked(10 .. 10))
  x.setMask((PECCF.uint32 shl 11).masked(11 .. 11))
  x.setMask((TIMOUTCF.uint32 shl 12).masked(12 .. 12))
  x.setMask((ALERTCF.uint32 shl 13).masked(13 .. 13))
  reg.write x.FMPI2C_ICR_Fields

proc read*(reg: FMPI2C_PECR_Type): FMPI2C_PECR_Fields {.inline.} =
  volatileLoad(cast[ptr FMPI2C_PECR_Fields](reg.loc))

proc read*(reg: FMPI2C_RXDR_Type): FMPI2C_RXDR_Fields {.inline.} =
  volatileLoad(cast[ptr FMPI2C_RXDR_Fields](reg.loc))

proc read*(reg: FMPI2C_TXDR_Type): FMPI2C_TXDR_Fields {.inline.} =
  volatileLoad(cast[ptr FMPI2C_TXDR_Fields](reg.loc))

func PECEN*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `PECEN=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.FMPI2C_CR1_Fields

func ALERTEN*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `ALERTEN=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.FMPI2C_CR1_Fields

func SMBDEN*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `SMBDEN=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.FMPI2C_CR1_Fields

func SMBHEN*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SMBHEN=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.FMPI2C_CR1_Fields

func GCEN*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `GCEN=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.FMPI2C_CR1_Fields

func NOSTRETCH*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `NOSTRETCH=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.FMPI2C_CR1_Fields

func SBC*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `SBC=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.FMPI2C_CR1_Fields

func RXDMAEN*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `RXDMAEN=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.FMPI2C_CR1_Fields

func TXDMAEN*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TXDMAEN=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.FMPI2C_CR1_Fields

func ANFOFF*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `ANFOFF=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FMPI2C_CR1_Fields

func DNF*(r: FMPI2C_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `DNF=`*(r: var FMPI2C_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.FMPI2C_CR1_Fields

func ERRIE*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ERRIE=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.FMPI2C_CR1_Fields

func TCIE*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TCIE=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FMPI2C_CR1_Fields

func STOPIE*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `STOPIE=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.FMPI2C_CR1_Fields

func NACKIE*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NACKIE=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.FMPI2C_CR1_Fields

func ADDRIE*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `ADDRIE=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.FMPI2C_CR1_Fields

func RXIE*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `RXIE=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.FMPI2C_CR1_Fields

func TXIE*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TXIE=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FMPI2C_CR1_Fields

func PE*(r: FMPI2C_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `PE=`*(r: var FMPI2C_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMPI2C_CR1_Fields

func SADD0*(r: FMPI2C_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SADD0=`*(r: var FMPI2C_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMPI2C_CR2_Fields

func SADD7_1*(r: FMPI2C_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 7)

proc `SADD7_1=`*(r: var FMPI2C_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 7)
  tmp.setMask((val shl 1).masked(1 .. 7))
  r = tmp.FMPI2C_CR2_Fields

func SADD9_8*(r: FMPI2C_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `SADD9_8=`*(r: var FMPI2C_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.FMPI2C_CR2_Fields

func RD_WRN*(r: FMPI2C_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `RD_WRN=`*(r: var FMPI2C_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.FMPI2C_CR2_Fields

func ADD10*(r: FMPI2C_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `ADD10=`*(r: var FMPI2C_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.FMPI2C_CR2_Fields

func HEAD10R*(r: FMPI2C_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `HEAD10R=`*(r: var FMPI2C_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FMPI2C_CR2_Fields

func START*(r: FMPI2C_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `START=`*(r: var FMPI2C_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.FMPI2C_CR2_Fields

func STOP*(r: FMPI2C_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `STOP=`*(r: var FMPI2C_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.FMPI2C_CR2_Fields

func NACK*(r: FMPI2C_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `NACK=`*(r: var FMPI2C_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.FMPI2C_CR2_Fields

func NBYTES*(r: FMPI2C_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `NBYTES=`*(r: var FMPI2C_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.FMPI2C_CR2_Fields

func RELOAD*(r: FMPI2C_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `RELOAD=`*(r: var FMPI2C_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.FMPI2C_CR2_Fields

func AUTOEND*(r: FMPI2C_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `AUTOEND=`*(r: var FMPI2C_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.FMPI2C_CR2_Fields

func PECBYTE*(r: FMPI2C_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `PECBYTE=`*(r: var FMPI2C_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.FMPI2C_CR2_Fields

func OA1_0*(r: FMPI2C_OAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `OA1_0=`*(r: var FMPI2C_OAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FMPI2C_OAR1_Fields

func OA1_7_1*(r: FMPI2C_OAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 7)

proc `OA1_7_1=`*(r: var FMPI2C_OAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 7)
  tmp.setMask((val shl 1).masked(1 .. 7))
  r = tmp.FMPI2C_OAR1_Fields

func OA1_9_8*(r: FMPI2C_OAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `OA1_9_8=`*(r: var FMPI2C_OAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.FMPI2C_OAR1_Fields

func OA1MODE*(r: FMPI2C_OAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OA1MODE=`*(r: var FMPI2C_OAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.FMPI2C_OAR1_Fields

func OA1EN*(r: FMPI2C_OAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OA1EN=`*(r: var FMPI2C_OAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.FMPI2C_OAR1_Fields

func OA2*(r: FMPI2C_OAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 7)

proc `OA2=`*(r: var FMPI2C_OAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 7)
  tmp.setMask((val shl 1).masked(1 .. 7))
  r = tmp.FMPI2C_OAR2_Fields

func OA2MSK*(r: FMPI2C_OAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 10)

proc `OA2MSK=`*(r: var FMPI2C_OAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 10)
  tmp.setMask((val shl 8).masked(8 .. 10))
  r = tmp.FMPI2C_OAR2_Fields

func OA2EN*(r: FMPI2C_OAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OA2EN=`*(r: var FMPI2C_OAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.FMPI2C_OAR2_Fields

func SCLL*(r: FMPI2C_TIMINGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `SCLL=`*(r: var FMPI2C_TIMINGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.FMPI2C_TIMINGR_Fields

func SCLH*(r: FMPI2C_TIMINGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `SCLH=`*(r: var FMPI2C_TIMINGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FMPI2C_TIMINGR_Fields

func SDADEL*(r: FMPI2C_TIMINGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `SDADEL=`*(r: var FMPI2C_TIMINGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.FMPI2C_TIMINGR_Fields

func SCLDEL*(r: FMPI2C_TIMINGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `SCLDEL=`*(r: var FMPI2C_TIMINGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.FMPI2C_TIMINGR_Fields

func PRESC*(r: FMPI2C_TIMINGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 31)

proc `PRESC=`*(r: var FMPI2C_TIMINGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 31)
  tmp.setMask((val shl 28).masked(28 .. 31))
  r = tmp.FMPI2C_TIMINGR_Fields

func TIMEOUTA*(r: FMPI2C_TIMEOUTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `TIMEOUTA=`*(r: var FMPI2C_TIMEOUTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.FMPI2C_TIMEOUTR_Fields

func TIDLE*(r: FMPI2C_TIMEOUTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `TIDLE=`*(r: var FMPI2C_TIMEOUTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FMPI2C_TIMEOUTR_Fields

func TIMOUTEN*(r: FMPI2C_TIMEOUTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `TIMOUTEN=`*(r: var FMPI2C_TIMEOUTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.FMPI2C_TIMEOUTR_Fields

func TIMEOUTB*(r: FMPI2C_TIMEOUTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 27)

proc `TIMEOUTB=`*(r: var FMPI2C_TIMEOUTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 27)
  tmp.setMask((val shl 16).masked(16 .. 27))
  r = tmp.FMPI2C_TIMEOUTR_Fields

func TEXTEN*(r: FMPI2C_TIMEOUTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `TEXTEN=`*(r: var FMPI2C_TIMEOUTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.FMPI2C_TIMEOUTR_Fields

func TXE*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func TXIS*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func RXNE*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func ADDRx*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func NACKF*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func STOPF*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func TC*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func TCR*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func BERR*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func ARLO*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func OVR*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func PECERR*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func TIMEOUT*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

func ALERT*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

func BUSY*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

func DIR*(r: FMPI2C_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func ADDCODE*(r: FMPI2C_ISR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 23)

proc `ADDRCF=`*(r: var FMPI2C_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.FMPI2C_ICR_Fields

proc `NACKCF=`*(r: var FMPI2C_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.FMPI2C_ICR_Fields

proc `STOPCF=`*(r: var FMPI2C_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.FMPI2C_ICR_Fields

proc `BERRCF=`*(r: var FMPI2C_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.FMPI2C_ICR_Fields

proc `ARLOCF=`*(r: var FMPI2C_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.FMPI2C_ICR_Fields

proc `OVRCF=`*(r: var FMPI2C_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.FMPI2C_ICR_Fields

proc `PECCF=`*(r: var FMPI2C_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.FMPI2C_ICR_Fields

proc `TIMOUTCF=`*(r: var FMPI2C_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FMPI2C_ICR_Fields

proc `ALERTCF=`*(r: var FMPI2C_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.FMPI2C_ICR_Fields

func PEC*(r: FMPI2C_PECR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func RXDATA*(r: FMPI2C_RXDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func TXDATA*(r: FMPI2C_TXDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

type
  I2C3_CR1_Fields* = distinct uint32
  I2C3_CR2_Fields* = distinct uint32
  I2C3_OAR1_Fields* = distinct uint32
  I2C3_OAR2_Fields* = distinct uint32
  I2C3_DR_Fields* = distinct uint32
  I2C3_SR1_Fields* = distinct uint32
  I2C3_SR2_Fields* = distinct uint32
  I2C3_CCR_Fields* = distinct uint32
  I2C3_TRISE_Fields* = distinct uint32
  I2C3_FLTR_Fields* = distinct uint32

proc read*(reg: I2C3_CR1_Type): I2C3_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr I2C3_CR1_Fields](reg.loc))

proc write*(reg: I2C3_CR1_Type, val: I2C3_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr I2C3_CR1_Fields](reg.loc), val)

proc write*(reg: I2C3_CR1_Type, SWRST: bool = false, ALERT: bool = false, PEC: bool = false, POS: bool = false, ACK: bool = false, STOP: bool = false, START: bool = false, NOSTRETCH: bool = false, ENGC: bool = false, ENPEC: bool = false, ENARP: bool = false, SMBTYPE: bool = false, SMBUS: bool = false, PE: bool = false) =
  var x: uint32
  x.setMask((SWRST.uint32 shl 15).masked(15 .. 15))
  x.setMask((ALERT.uint32 shl 13).masked(13 .. 13))
  x.setMask((PEC.uint32 shl 12).masked(12 .. 12))
  x.setMask((POS.uint32 shl 11).masked(11 .. 11))
  x.setMask((ACK.uint32 shl 10).masked(10 .. 10))
  x.setMask((STOP.uint32 shl 9).masked(9 .. 9))
  x.setMask((START.uint32 shl 8).masked(8 .. 8))
  x.setMask((NOSTRETCH.uint32 shl 7).masked(7 .. 7))
  x.setMask((ENGC.uint32 shl 6).masked(6 .. 6))
  x.setMask((ENPEC.uint32 shl 5).masked(5 .. 5))
  x.setMask((ENARP.uint32 shl 4).masked(4 .. 4))
  x.setMask((SMBTYPE.uint32 shl 3).masked(3 .. 3))
  x.setMask((SMBUS.uint32 shl 1).masked(1 .. 1))
  x.setMask((PE.uint32 shl 0).masked(0 .. 0))
  reg.write x.I2C3_CR1_Fields

template modifyIt*(reg: I2C3_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C3_CR2_Type): I2C3_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr I2C3_CR2_Fields](reg.loc))

proc write*(reg: I2C3_CR2_Type, val: I2C3_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr I2C3_CR2_Fields](reg.loc), val)

proc write*(reg: I2C3_CR2_Type, LAST: bool = false, DMAEN: bool = false, ITBUFEN: bool = false, ITEVTEN: bool = false, ITERREN: bool = false, FREQ: uint32 = 0) =
  var x: uint32
  x.setMask((LAST.uint32 shl 12).masked(12 .. 12))
  x.setMask((DMAEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((ITBUFEN.uint32 shl 10).masked(10 .. 10))
  x.setMask((ITEVTEN.uint32 shl 9).masked(9 .. 9))
  x.setMask((ITERREN.uint32 shl 8).masked(8 .. 8))
  x.setMask((FREQ shl 0).masked(0 .. 5))
  reg.write x.I2C3_CR2_Fields

template modifyIt*(reg: I2C3_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C3_OAR1_Type): I2C3_OAR1_Fields {.inline.} =
  volatileLoad(cast[ptr I2C3_OAR1_Fields](reg.loc))

proc write*(reg: I2C3_OAR1_Type, val: I2C3_OAR1_Fields) {.inline.} =
  volatileStore(cast[ptr I2C3_OAR1_Fields](reg.loc), val)

proc write*(reg: I2C3_OAR1_Type, ADDMODE: bool = false, ADD10: uint32 = 0, ADD7: uint32 = 0, ADD0: bool = false) =
  var x: uint32
  x.setMask((ADDMODE.uint32 shl 15).masked(15 .. 15))
  x.setMask((ADD10 shl 8).masked(8 .. 9))
  x.setMask((ADD7 shl 1).masked(1 .. 7))
  x.setMask((ADD0.uint32 shl 0).masked(0 .. 0))
  reg.write x.I2C3_OAR1_Fields

template modifyIt*(reg: I2C3_OAR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C3_OAR2_Type): I2C3_OAR2_Fields {.inline.} =
  volatileLoad(cast[ptr I2C3_OAR2_Fields](reg.loc))

proc write*(reg: I2C3_OAR2_Type, val: I2C3_OAR2_Fields) {.inline.} =
  volatileStore(cast[ptr I2C3_OAR2_Fields](reg.loc), val)

proc write*(reg: I2C3_OAR2_Type, ADD2: uint32 = 0, ENDUAL: bool = false) =
  var x: uint32
  x.setMask((ADD2 shl 1).masked(1 .. 7))
  x.setMask((ENDUAL.uint32 shl 0).masked(0 .. 0))
  reg.write x.I2C3_OAR2_Fields

template modifyIt*(reg: I2C3_OAR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C3_DR_Type): I2C3_DR_Fields {.inline.} =
  volatileLoad(cast[ptr I2C3_DR_Fields](reg.loc))

proc write*(reg: I2C3_DR_Type, val: I2C3_DR_Fields) {.inline.} =
  volatileStore(cast[ptr I2C3_DR_Fields](reg.loc), val)

proc write*(reg: I2C3_DR_Type, DR: uint32 = 0) =
  var x: uint32
  x.setMask((DR shl 0).masked(0 .. 7))
  reg.write x.I2C3_DR_Fields

template modifyIt*(reg: I2C3_DR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C3_SR1_Type): I2C3_SR1_Fields {.inline.} =
  volatileLoad(cast[ptr I2C3_SR1_Fields](reg.loc))

proc write*(reg: I2C3_SR1_Type, val: I2C3_SR1_Fields) {.inline.} =
  volatileStore(cast[ptr I2C3_SR1_Fields](reg.loc), val)

proc write*(reg: I2C3_SR1_Type, SMBALERT: bool = false, TIMEOUT: bool = false, PECERR: bool = false, OVR: bool = false, AF: bool = false, ARLO: bool = false, BERR: bool = false) =
  var x: uint32
  x.setMask((SMBALERT.uint32 shl 15).masked(15 .. 15))
  x.setMask((TIMEOUT.uint32 shl 14).masked(14 .. 14))
  x.setMask((PECERR.uint32 shl 12).masked(12 .. 12))
  x.setMask((OVR.uint32 shl 11).masked(11 .. 11))
  x.setMask((AF.uint32 shl 10).masked(10 .. 10))
  x.setMask((ARLO.uint32 shl 9).masked(9 .. 9))
  x.setMask((BERR.uint32 shl 8).masked(8 .. 8))
  reg.write x.I2C3_SR1_Fields

template modifyIt*(reg: I2C3_SR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C3_SR2_Type): I2C3_SR2_Fields {.inline.} =
  volatileLoad(cast[ptr I2C3_SR2_Fields](reg.loc))

proc read*(reg: I2C3_CCR_Type): I2C3_CCR_Fields {.inline.} =
  volatileLoad(cast[ptr I2C3_CCR_Fields](reg.loc))

proc write*(reg: I2C3_CCR_Type, val: I2C3_CCR_Fields) {.inline.} =
  volatileStore(cast[ptr I2C3_CCR_Fields](reg.loc), val)

proc write*(reg: I2C3_CCR_Type, F_S: bool = false, DUTY: bool = false, CCR: uint32 = 0) =
  var x: uint32
  x.setMask((F_S.uint32 shl 15).masked(15 .. 15))
  x.setMask((DUTY.uint32 shl 14).masked(14 .. 14))
  x.setMask((CCR shl 0).masked(0 .. 11))
  reg.write x.I2C3_CCR_Fields

template modifyIt*(reg: I2C3_CCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C3_TRISE_Type): I2C3_TRISE_Fields {.inline.} =
  volatileLoad(cast[ptr I2C3_TRISE_Fields](reg.loc))

proc write*(reg: I2C3_TRISE_Type, val: I2C3_TRISE_Fields) {.inline.} =
  volatileStore(cast[ptr I2C3_TRISE_Fields](reg.loc), val)

proc write*(reg: I2C3_TRISE_Type, TRISE: uint32 = 2) =
  var x: uint32
  x.setMask((TRISE shl 0).masked(0 .. 5))
  reg.write x.I2C3_TRISE_Fields

template modifyIt*(reg: I2C3_TRISE_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: I2C3_FLTR_Type): I2C3_FLTR_Fields {.inline.} =
  volatileLoad(cast[ptr I2C3_FLTR_Fields](reg.loc))

proc write*(reg: I2C3_FLTR_Type, val: I2C3_FLTR_Fields) {.inline.} =
  volatileStore(cast[ptr I2C3_FLTR_Fields](reg.loc), val)

proc write*(reg: I2C3_FLTR_Type, DNF: uint32 = 0, ANOFF: bool = false) =
  var x: uint32
  x.setMask((DNF shl 0).masked(0 .. 3))
  x.setMask((ANOFF.uint32 shl 4).masked(4 .. 4))
  reg.write x.I2C3_FLTR_Fields

template modifyIt*(reg: I2C3_FLTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func SWRST*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SWRST=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.I2C3_CR1_Fields

func ALERT*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ALERT=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.I2C3_CR1_Fields

func PEC*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PEC=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.I2C3_CR1_Fields

func POS*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `POS=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.I2C3_CR1_Fields

func ACK*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ACK=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.I2C3_CR1_Fields

func STOP*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `STOP=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.I2C3_CR1_Fields

func START*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `START=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.I2C3_CR1_Fields

func NOSTRETCH*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `NOSTRETCH=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.I2C3_CR1_Fields

func ENGC*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ENGC=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.I2C3_CR1_Fields

func ENPEC*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ENPEC=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.I2C3_CR1_Fields

func ENARP*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ENARP=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.I2C3_CR1_Fields

func SMBTYPE*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `SMBTYPE=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.I2C3_CR1_Fields

func SMBUS*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SMBUS=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.I2C3_CR1_Fields

func PE*(r: I2C3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `PE=`*(r: var I2C3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.I2C3_CR1_Fields

func LAST*(r: I2C3_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `LAST=`*(r: var I2C3_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.I2C3_CR2_Fields

func DMAEN*(r: I2C3_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DMAEN=`*(r: var I2C3_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.I2C3_CR2_Fields

func ITBUFEN*(r: I2C3_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ITBUFEN=`*(r: var I2C3_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.I2C3_CR2_Fields

func ITEVTEN*(r: I2C3_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ITEVTEN=`*(r: var I2C3_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.I2C3_CR2_Fields

func ITERREN*(r: I2C3_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ITERREN=`*(r: var I2C3_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.I2C3_CR2_Fields

func FREQ*(r: I2C3_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 5)

proc `FREQ=`*(r: var I2C3_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 5)
  tmp.setMask((val shl 0).masked(0 .. 5))
  r = tmp.I2C3_CR2_Fields

func ADDMODE*(r: I2C3_OAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ADDMODE=`*(r: var I2C3_OAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.I2C3_OAR1_Fields

func ADD10*(r: I2C3_OAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `ADD10=`*(r: var I2C3_OAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.I2C3_OAR1_Fields

func ADD7*(r: I2C3_OAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 7)

proc `ADD7=`*(r: var I2C3_OAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 7)
  tmp.setMask((val shl 1).masked(1 .. 7))
  r = tmp.I2C3_OAR1_Fields

func ADD0*(r: I2C3_OAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ADD0=`*(r: var I2C3_OAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.I2C3_OAR1_Fields

func ADD2*(r: I2C3_OAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 7)

proc `ADD2=`*(r: var I2C3_OAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 7)
  tmp.setMask((val shl 1).masked(1 .. 7))
  r = tmp.I2C3_OAR2_Fields

func ENDUAL*(r: I2C3_OAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `ENDUAL=`*(r: var I2C3_OAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.I2C3_OAR2_Fields

func DR*(r: I2C3_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DR=`*(r: var I2C3_DR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.I2C3_DR_Fields

func SMBALERT*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SMBALERT=`*(r: var I2C3_SR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.I2C3_SR1_Fields

func TIMEOUT*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TIMEOUT=`*(r: var I2C3_SR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.I2C3_SR1_Fields

func PECERR*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PECERR=`*(r: var I2C3_SR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.I2C3_SR1_Fields

func OVR*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OVR=`*(r: var I2C3_SR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.I2C3_SR1_Fields

func AF*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `AF=`*(r: var I2C3_SR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.I2C3_SR1_Fields

func ARLO*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ARLO=`*(r: var I2C3_SR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.I2C3_SR1_Fields

func BERR*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BERR=`*(r: var I2C3_SR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.I2C3_SR1_Fields

func TxE*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func RxNE*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func STOPF*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func ADD10*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func BTF*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func ADDRx*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func SB*(r: I2C3_SR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func PEC*(r: I2C3_SR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DUALF*(r: I2C3_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func SMBHOST*(r: I2C3_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func SMBDEFAULT*(r: I2C3_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func GENCALL*(r: I2C3_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func TRA*(r: I2C3_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func BUSY*(r: I2C3_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func MSL*(r: I2C3_SR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func F_S*(r: I2C3_CCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `F_S=`*(r: var I2C3_CCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.I2C3_CCR_Fields

func DUTY*(r: I2C3_CCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `DUTY=`*(r: var I2C3_CCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.I2C3_CCR_Fields

func CCR*(r: I2C3_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `CCR=`*(r: var I2C3_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.I2C3_CCR_Fields

func TRISE*(r: I2C3_TRISE_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 5)

proc `TRISE=`*(r: var I2C3_TRISE_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 5)
  tmp.setMask((val shl 0).masked(0 .. 5))
  r = tmp.I2C3_TRISE_Fields

func DNF*(r: I2C3_FLTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DNF=`*(r: var I2C3_FLTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.I2C3_FLTR_Fields

func ANOFF*(r: I2C3_FLTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ANOFF=`*(r: var I2C3_FLTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.I2C3_FLTR_Fields

type
  IWDG_KR_Fields* = distinct uint32
  IWDG_PR_Fields* = distinct uint32
  IWDG_RLR_Fields* = distinct uint32
  IWDG_SR_Fields* = distinct uint32

proc write*(reg: IWDG_KR_Type, val: IWDG_KR_Fields) {.inline.} =
  volatileStore(cast[ptr IWDG_KR_Fields](reg.loc), val)

proc write*(reg: IWDG_KR_Type, KEY: uint32 = 0) =
  var x: uint32
  x.setMask((KEY shl 0).masked(0 .. 15))
  reg.write x.IWDG_KR_Fields

proc read*(reg: IWDG_PR_Type): IWDG_PR_Fields {.inline.} =
  volatileLoad(cast[ptr IWDG_PR_Fields](reg.loc))

proc write*(reg: IWDG_PR_Type, val: IWDG_PR_Fields) {.inline.} =
  volatileStore(cast[ptr IWDG_PR_Fields](reg.loc), val)

proc write*(reg: IWDG_PR_Type, PR: uint32 = 0) =
  var x: uint32
  x.setMask((PR shl 0).masked(0 .. 2))
  reg.write x.IWDG_PR_Fields

template modifyIt*(reg: IWDG_PR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: IWDG_RLR_Type): IWDG_RLR_Fields {.inline.} =
  volatileLoad(cast[ptr IWDG_RLR_Fields](reg.loc))

proc write*(reg: IWDG_RLR_Type, val: IWDG_RLR_Fields) {.inline.} =
  volatileStore(cast[ptr IWDG_RLR_Fields](reg.loc), val)

proc write*(reg: IWDG_RLR_Type, RL: uint32 = 4095) =
  var x: uint32
  x.setMask((RL shl 0).masked(0 .. 11))
  reg.write x.IWDG_RLR_Fields

template modifyIt*(reg: IWDG_RLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: IWDG_SR_Type): IWDG_SR_Fields {.inline.} =
  volatileLoad(cast[ptr IWDG_SR_Fields](reg.loc))

proc `KEY=`*(r: var IWDG_KR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.IWDG_KR_Fields

func PR*(r: IWDG_PR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `PR=`*(r: var IWDG_PR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.IWDG_PR_Fields

func RL*(r: IWDG_RLR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `RL=`*(r: var IWDG_RLR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.IWDG_RLR_Fields

func RVU*(r: IWDG_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func PVU*(r: IWDG_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

type
  WWDG_CR_Fields* = distinct uint32
  WWDG_CFR_Fields* = distinct uint32
  WWDG_SR_Fields* = distinct uint32

proc read*(reg: WWDG_CR_Type): WWDG_CR_Fields {.inline.} =
  volatileLoad(cast[ptr WWDG_CR_Fields](reg.loc))

proc write*(reg: WWDG_CR_Type, val: WWDG_CR_Fields) {.inline.} =
  volatileStore(cast[ptr WWDG_CR_Fields](reg.loc), val)

proc write*(reg: WWDG_CR_Type, WDGA: bool = false, T: uint32 = 127) =
  var x: uint32
  x.setMask((WDGA.uint32 shl 7).masked(7 .. 7))
  x.setMask((T shl 0).masked(0 .. 6))
  reg.write x.WWDG_CR_Fields

template modifyIt*(reg: WWDG_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: WWDG_CFR_Type): WWDG_CFR_Fields {.inline.} =
  volatileLoad(cast[ptr WWDG_CFR_Fields](reg.loc))

proc write*(reg: WWDG_CFR_Type, val: WWDG_CFR_Fields) {.inline.} =
  volatileStore(cast[ptr WWDG_CFR_Fields](reg.loc), val)

proc write*(reg: WWDG_CFR_Type, EWI: bool = false, WDGTB1: bool = false, WDGTB0: bool = false, W: uint32 = 127) =
  var x: uint32
  x.setMask((EWI.uint32 shl 9).masked(9 .. 9))
  x.setMask((WDGTB1.uint32 shl 8).masked(8 .. 8))
  x.setMask((WDGTB0.uint32 shl 7).masked(7 .. 7))
  x.setMask((W shl 0).masked(0 .. 6))
  reg.write x.WWDG_CFR_Fields

template modifyIt*(reg: WWDG_CFR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: WWDG_SR_Type): WWDG_SR_Fields {.inline.} =
  volatileLoad(cast[ptr WWDG_SR_Fields](reg.loc))

proc write*(reg: WWDG_SR_Type, val: WWDG_SR_Fields) {.inline.} =
  volatileStore(cast[ptr WWDG_SR_Fields](reg.loc), val)

proc write*(reg: WWDG_SR_Type, EWIF: bool = false) =
  var x: uint32
  x.setMask((EWIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.WWDG_SR_Fields

template modifyIt*(reg: WWDG_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func WDGA*(r: WWDG_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `WDGA=`*(r: var WWDG_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.WWDG_CR_Fields

func T*(r: WWDG_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `T=`*(r: var WWDG_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.WWDG_CR_Fields

func EWI*(r: WWDG_CFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `EWI=`*(r: var WWDG_CFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.WWDG_CFR_Fields

func WDGTB1*(r: WWDG_CFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `WDGTB1=`*(r: var WWDG_CFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.WWDG_CFR_Fields

func WDGTB0*(r: WWDG_CFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `WDGTB0=`*(r: var WWDG_CFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.WWDG_CFR_Fields

func W*(r: WWDG_CFR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `W=`*(r: var WWDG_CFR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.WWDG_CFR_Fields

func EWIF*(r: WWDG_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EWIF=`*(r: var WWDG_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.WWDG_SR_Fields

type
  RTC_TR_Fields* = distinct uint32
  RTC_DR_Fields* = distinct uint32
  RTC_CR_Fields* = distinct uint32
  RTC_ISR_Fields* = distinct uint32
  RTC_PRER_Fields* = distinct uint32
  RTC_WUTR_Fields* = distinct uint32
  RTC_CALIBR_Fields* = distinct uint32
  RTC_ALRMAR_Fields* = distinct uint32
  RTC_ALRMBR_Fields* = distinct uint32
  RTC_WPR_Fields* = distinct uint32
  RTC_SSR_Fields* = distinct uint32
  RTC_SHIFTR_Fields* = distinct uint32
  RTC_TSTR_Fields* = distinct uint32
  RTC_TSDR_Fields* = distinct uint32
  RTC_TSSSR_Fields* = distinct uint32
  RTC_CALR_Fields* = distinct uint32
  RTC_TAFCR_Fields* = distinct uint32
  RTC_ALRMASSR_Fields* = distinct uint32
  RTC_ALRMBSSR_Fields* = distinct uint32

proc read*(reg: RTC_TR_Type): RTC_TR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_TR_Fields](reg.loc))

proc write*(reg: RTC_TR_Type, val: RTC_TR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_TR_Fields](reg.loc), val)

proc write*(reg: RTC_TR_Type, PM: bool = false, HT: uint32 = 0, HU: uint32 = 0, MNT: uint32 = 0, MNU: uint32 = 0, ST: uint32 = 0, SU: uint32 = 0) =
  var x: uint32
  x.setMask((PM.uint32 shl 22).masked(22 .. 22))
  x.setMask((HT shl 20).masked(20 .. 21))
  x.setMask((HU shl 16).masked(16 .. 19))
  x.setMask((MNT shl 12).masked(12 .. 14))
  x.setMask((MNU shl 8).masked(8 .. 11))
  x.setMask((ST shl 4).masked(4 .. 6))
  x.setMask((SU shl 0).masked(0 .. 3))
  reg.write x.RTC_TR_Fields

template modifyIt*(reg: RTC_TR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_DR_Type): RTC_DR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_DR_Fields](reg.loc))

proc write*(reg: RTC_DR_Type, val: RTC_DR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_DR_Fields](reg.loc), val)

proc write*(reg: RTC_DR_Type, YT: uint32 = 0, YU: uint32 = 0, WDU: uint32 = 1, MT: bool = false, MU: uint32 = 1, DT: uint32 = 0, DU: uint32 = 1) =
  var x: uint32
  x.setMask((YT shl 20).masked(20 .. 23))
  x.setMask((YU shl 16).masked(16 .. 19))
  x.setMask((WDU shl 13).masked(13 .. 15))
  x.setMask((MT.uint32 shl 12).masked(12 .. 12))
  x.setMask((MU shl 8).masked(8 .. 11))
  x.setMask((DT shl 4).masked(4 .. 5))
  x.setMask((DU shl 0).masked(0 .. 3))
  reg.write x.RTC_DR_Fields

template modifyIt*(reg: RTC_DR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_CR_Type): RTC_CR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CR_Fields](reg.loc))

proc write*(reg: RTC_CR_Type, val: RTC_CR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_CR_Fields](reg.loc), val)

proc write*(reg: RTC_CR_Type, COE: bool = false, OSEL: uint32 = 0, POL: bool = false, BKP: bool = false, SUB1H: bool = false, ADD1H: bool = false, TSIE: bool = false, WUTIE: bool = false, ALRBIE: bool = false, ALRAIE: bool = false, TSE: bool = false, WUTE: bool = false, ALRBE: bool = false, ALRAE: bool = false, DCE: bool = false, FMT: bool = false, REFCKON: bool = false, TSEDGE: bool = false, WCKSEL: uint32 = 0) =
  var x: uint32
  x.setMask((COE.uint32 shl 23).masked(23 .. 23))
  x.setMask((OSEL shl 21).masked(21 .. 22))
  x.setMask((POL.uint32 shl 20).masked(20 .. 20))
  x.setMask((BKP.uint32 shl 18).masked(18 .. 18))
  x.setMask((SUB1H.uint32 shl 17).masked(17 .. 17))
  x.setMask((ADD1H.uint32 shl 16).masked(16 .. 16))
  x.setMask((TSIE.uint32 shl 15).masked(15 .. 15))
  x.setMask((WUTIE.uint32 shl 14).masked(14 .. 14))
  x.setMask((ALRBIE.uint32 shl 13).masked(13 .. 13))
  x.setMask((ALRAIE.uint32 shl 12).masked(12 .. 12))
  x.setMask((TSE.uint32 shl 11).masked(11 .. 11))
  x.setMask((WUTE.uint32 shl 10).masked(10 .. 10))
  x.setMask((ALRBE.uint32 shl 9).masked(9 .. 9))
  x.setMask((ALRAE.uint32 shl 8).masked(8 .. 8))
  x.setMask((DCE.uint32 shl 7).masked(7 .. 7))
  x.setMask((FMT.uint32 shl 6).masked(6 .. 6))
  x.setMask((REFCKON.uint32 shl 4).masked(4 .. 4))
  x.setMask((TSEDGE.uint32 shl 3).masked(3 .. 3))
  x.setMask((WCKSEL shl 0).masked(0 .. 2))
  reg.write x.RTC_CR_Fields

template modifyIt*(reg: RTC_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_ISR_Type): RTC_ISR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_ISR_Fields](reg.loc))

proc write*(reg: RTC_ISR_Type, val: RTC_ISR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_ISR_Fields](reg.loc), val)

proc write*(reg: RTC_ISR_Type, SHPF: bool = false, RSF: bool = false, INIT: bool = false, ALRAF: bool = false, ALRBF: bool = false, WUTF: bool = false, TSF: bool = false, TSOVF: bool = false, TAMP1F: bool = false, TAMP2F: bool = false) =
  var x: uint32
  x.setMask((SHPF.uint32 shl 3).masked(3 .. 3))
  x.setMask((RSF.uint32 shl 5).masked(5 .. 5))
  x.setMask((INIT.uint32 shl 7).masked(7 .. 7))
  x.setMask((ALRAF.uint32 shl 8).masked(8 .. 8))
  x.setMask((ALRBF.uint32 shl 9).masked(9 .. 9))
  x.setMask((WUTF.uint32 shl 10).masked(10 .. 10))
  x.setMask((TSF.uint32 shl 11).masked(11 .. 11))
  x.setMask((TSOVF.uint32 shl 12).masked(12 .. 12))
  x.setMask((TAMP1F.uint32 shl 13).masked(13 .. 13))
  x.setMask((TAMP2F.uint32 shl 14).masked(14 .. 14))
  reg.write x.RTC_ISR_Fields

template modifyIt*(reg: RTC_ISR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_PRER_Type): RTC_PRER_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_PRER_Fields](reg.loc))

proc write*(reg: RTC_PRER_Type, val: RTC_PRER_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_PRER_Fields](reg.loc), val)

proc write*(reg: RTC_PRER_Type, PREDIV_A: uint32 = 127, PREDIV_S: uint32 = 255) =
  var x: uint32
  x.setMask((PREDIV_A shl 16).masked(16 .. 22))
  x.setMask((PREDIV_S shl 0).masked(0 .. 14))
  reg.write x.RTC_PRER_Fields

template modifyIt*(reg: RTC_PRER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_WUTR_Type): RTC_WUTR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_WUTR_Fields](reg.loc))

proc write*(reg: RTC_WUTR_Type, val: RTC_WUTR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_WUTR_Fields](reg.loc), val)

proc write*(reg: RTC_WUTR_Type, WUT: uint32 = 65535) =
  var x: uint32
  x.setMask((WUT shl 0).masked(0 .. 15))
  reg.write x.RTC_WUTR_Fields

template modifyIt*(reg: RTC_WUTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_CALIBR_Type): RTC_CALIBR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CALIBR_Fields](reg.loc))

proc write*(reg: RTC_CALIBR_Type, val: RTC_CALIBR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_CALIBR_Fields](reg.loc), val)

proc write*(reg: RTC_CALIBR_Type, DCS: bool = false, DC: uint32 = 0) =
  var x: uint32
  x.setMask((DCS.uint32 shl 7).masked(7 .. 7))
  x.setMask((DC shl 0).masked(0 .. 4))
  reg.write x.RTC_CALIBR_Fields

template modifyIt*(reg: RTC_CALIBR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_ALRMAR_Type): RTC_ALRMAR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_ALRMAR_Fields](reg.loc))

proc write*(reg: RTC_ALRMAR_Type, val: RTC_ALRMAR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_ALRMAR_Fields](reg.loc), val)

proc write*(reg: RTC_ALRMAR_Type, MSK4: bool = false, WDSEL: bool = false, DT: uint32 = 0, DU: uint32 = 0, MSK3: bool = false, PM: bool = false, HT: uint32 = 0, HU: uint32 = 0, MSK2: bool = false, MNT: uint32 = 0, MNU: uint32 = 0, MSK1: bool = false, ST: uint32 = 0, SU: uint32 = 0) =
  var x: uint32
  x.setMask((MSK4.uint32 shl 31).masked(31 .. 31))
  x.setMask((WDSEL.uint32 shl 30).masked(30 .. 30))
  x.setMask((DT shl 28).masked(28 .. 29))
  x.setMask((DU shl 24).masked(24 .. 27))
  x.setMask((MSK3.uint32 shl 23).masked(23 .. 23))
  x.setMask((PM.uint32 shl 22).masked(22 .. 22))
  x.setMask((HT shl 20).masked(20 .. 21))
  x.setMask((HU shl 16).masked(16 .. 19))
  x.setMask((MSK2.uint32 shl 15).masked(15 .. 15))
  x.setMask((MNT shl 12).masked(12 .. 14))
  x.setMask((MNU shl 8).masked(8 .. 11))
  x.setMask((MSK1.uint32 shl 7).masked(7 .. 7))
  x.setMask((ST shl 4).masked(4 .. 6))
  x.setMask((SU shl 0).masked(0 .. 3))
  reg.write x.RTC_ALRMAR_Fields

template modifyIt*(reg: RTC_ALRMAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_ALRMBR_Type): RTC_ALRMBR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_ALRMBR_Fields](reg.loc))

proc write*(reg: RTC_ALRMBR_Type, val: RTC_ALRMBR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_ALRMBR_Fields](reg.loc), val)

proc write*(reg: RTC_ALRMBR_Type, MSK4: bool = false, WDSEL: bool = false, DT: uint32 = 0, DU: uint32 = 0, MSK3: bool = false, PM: bool = false, HT: uint32 = 0, HU: uint32 = 0, MSK2: bool = false, MNT: uint32 = 0, MNU: uint32 = 0, MSK1: bool = false, ST: uint32 = 0, SU: uint32 = 0) =
  var x: uint32
  x.setMask((MSK4.uint32 shl 31).masked(31 .. 31))
  x.setMask((WDSEL.uint32 shl 30).masked(30 .. 30))
  x.setMask((DT shl 28).masked(28 .. 29))
  x.setMask((DU shl 24).masked(24 .. 27))
  x.setMask((MSK3.uint32 shl 23).masked(23 .. 23))
  x.setMask((PM.uint32 shl 22).masked(22 .. 22))
  x.setMask((HT shl 20).masked(20 .. 21))
  x.setMask((HU shl 16).masked(16 .. 19))
  x.setMask((MSK2.uint32 shl 15).masked(15 .. 15))
  x.setMask((MNT shl 12).masked(12 .. 14))
  x.setMask((MNU shl 8).masked(8 .. 11))
  x.setMask((MSK1.uint32 shl 7).masked(7 .. 7))
  x.setMask((ST shl 4).masked(4 .. 6))
  x.setMask((SU shl 0).masked(0 .. 3))
  reg.write x.RTC_ALRMBR_Fields

template modifyIt*(reg: RTC_ALRMBR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: RTC_WPR_Type, val: RTC_WPR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_WPR_Fields](reg.loc), val)

proc write*(reg: RTC_WPR_Type, KEY: uint32 = 0) =
  var x: uint32
  x.setMask((KEY shl 0).masked(0 .. 7))
  reg.write x.RTC_WPR_Fields

proc read*(reg: RTC_SSR_Type): RTC_SSR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_SSR_Fields](reg.loc))

proc write*(reg: RTC_SHIFTR_Type, val: RTC_SHIFTR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_SHIFTR_Fields](reg.loc), val)

proc write*(reg: RTC_SHIFTR_Type, ADD1S: bool = false, SUBFS: uint32 = 0) =
  var x: uint32
  x.setMask((ADD1S.uint32 shl 31).masked(31 .. 31))
  x.setMask((SUBFS shl 0).masked(0 .. 14))
  reg.write x.RTC_SHIFTR_Fields

proc read*(reg: RTC_TSTR_Type): RTC_TSTR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_TSTR_Fields](reg.loc))

proc read*(reg: RTC_TSDR_Type): RTC_TSDR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_TSDR_Fields](reg.loc))

proc read*(reg: RTC_TSSSR_Type): RTC_TSSSR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_TSSSR_Fields](reg.loc))

proc read*(reg: RTC_CALR_Type): RTC_CALR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_CALR_Fields](reg.loc))

proc write*(reg: RTC_CALR_Type, val: RTC_CALR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_CALR_Fields](reg.loc), val)

proc write*(reg: RTC_CALR_Type, CALP: bool = false, CALW8: bool = false, CALW16: bool = false, CALM: uint32 = 0) =
  var x: uint32
  x.setMask((CALP.uint32 shl 15).masked(15 .. 15))
  x.setMask((CALW8.uint32 shl 14).masked(14 .. 14))
  x.setMask((CALW16.uint32 shl 13).masked(13 .. 13))
  x.setMask((CALM shl 0).masked(0 .. 8))
  reg.write x.RTC_CALR_Fields

template modifyIt*(reg: RTC_CALR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_TAFCR_Type): RTC_TAFCR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_TAFCR_Fields](reg.loc))

proc write*(reg: RTC_TAFCR_Type, val: RTC_TAFCR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_TAFCR_Fields](reg.loc), val)

proc write*(reg: RTC_TAFCR_Type, ALARMOUTTYPE: bool = false, TSINSEL: bool = false, TAMP1INSEL: bool = false, TAMPPUDIS: bool = false, TAMPPRCH: uint32 = 0, TAMPFLT: uint32 = 0, TAMPFREQ: uint32 = 0, TAMPTS: bool = false, TAMP2TRG: bool = false, TAMP2E: bool = false, TAMPIE: bool = false, TAMP1TRG: bool = false, TAMP1E: bool = false) =
  var x: uint32
  x.setMask((ALARMOUTTYPE.uint32 shl 18).masked(18 .. 18))
  x.setMask((TSINSEL.uint32 shl 17).masked(17 .. 17))
  x.setMask((TAMP1INSEL.uint32 shl 16).masked(16 .. 16))
  x.setMask((TAMPPUDIS.uint32 shl 15).masked(15 .. 15))
  x.setMask((TAMPPRCH shl 13).masked(13 .. 14))
  x.setMask((TAMPFLT shl 11).masked(11 .. 12))
  x.setMask((TAMPFREQ shl 8).masked(8 .. 10))
  x.setMask((TAMPTS.uint32 shl 7).masked(7 .. 7))
  x.setMask((TAMP2TRG.uint32 shl 4).masked(4 .. 4))
  x.setMask((TAMP2E.uint32 shl 3).masked(3 .. 3))
  x.setMask((TAMPIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((TAMP1TRG.uint32 shl 1).masked(1 .. 1))
  x.setMask((TAMP1E.uint32 shl 0).masked(0 .. 0))
  reg.write x.RTC_TAFCR_Fields

template modifyIt*(reg: RTC_TAFCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_ALRMASSR_Type): RTC_ALRMASSR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_ALRMASSR_Fields](reg.loc))

proc write*(reg: RTC_ALRMASSR_Type, val: RTC_ALRMASSR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_ALRMASSR_Fields](reg.loc), val)

proc write*(reg: RTC_ALRMASSR_Type, MASKSS: uint32 = 0, SS: uint32 = 0) =
  var x: uint32
  x.setMask((MASKSS shl 24).masked(24 .. 27))
  x.setMask((SS shl 0).masked(0 .. 14))
  reg.write x.RTC_ALRMASSR_Fields

template modifyIt*(reg: RTC_ALRMASSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_ALRMBSSR_Type): RTC_ALRMBSSR_Fields {.inline.} =
  volatileLoad(cast[ptr RTC_ALRMBSSR_Fields](reg.loc))

proc write*(reg: RTC_ALRMBSSR_Type, val: RTC_ALRMBSSR_Fields) {.inline.} =
  volatileStore(cast[ptr RTC_ALRMBSSR_Fields](reg.loc), val)

proc write*(reg: RTC_ALRMBSSR_Type, MASKSS: uint32 = 0, SS: uint32 = 0) =
  var x: uint32
  x.setMask((MASKSS shl 24).masked(24 .. 27))
  x.setMask((SS shl 0).masked(0 .. 14))
  reg.write x.RTC_ALRMBSSR_Fields

template modifyIt*(reg: RTC_ALRMBSSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP0R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP0R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP0R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP1R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP1R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP2R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP2R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP2R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP3R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP3R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP3R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP4R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP4R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP4R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP5R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP5R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP5R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP6R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP6R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP6R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP7R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP7R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP7R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP8R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP8R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP8R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP9R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP9R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP9R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP10R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP10R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP10R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP11R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP11R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP11R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP12R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP12R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP12R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP13R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP13R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP13R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP14R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP14R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP14R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP15R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP15R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP15R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP16R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP16R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP16R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP17R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP17R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP17R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP18R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP18R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP18R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: RTC_BKP19R_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: RTC_BKP19R_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: RTC_BKP19R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func PM*(r: RTC_TR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `PM=`*(r: var RTC_TR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RTC_TR_Fields

func HT*(r: RTC_TR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `HT=`*(r: var RTC_TR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.RTC_TR_Fields

func HU*(r: RTC_TR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `HU=`*(r: var RTC_TR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.RTC_TR_Fields

func MNT*(r: RTC_TR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `MNT=`*(r: var RTC_TR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.RTC_TR_Fields

func MNU*(r: RTC_TR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `MNU=`*(r: var RTC_TR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.RTC_TR_Fields

func ST*(r: RTC_TR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `ST=`*(r: var RTC_TR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.RTC_TR_Fields

func SU*(r: RTC_TR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `SU=`*(r: var RTC_TR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.RTC_TR_Fields

func YT*(r: RTC_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `YT=`*(r: var RTC_DR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.RTC_DR_Fields

func YU*(r: RTC_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `YU=`*(r: var RTC_DR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.RTC_DR_Fields

func WDU*(r: RTC_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 15)

proc `WDU=`*(r: var RTC_DR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 15)
  tmp.setMask((val shl 13).masked(13 .. 15))
  r = tmp.RTC_DR_Fields

func MT*(r: RTC_DR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `MT=`*(r: var RTC_DR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RTC_DR_Fields

func MU*(r: RTC_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `MU=`*(r: var RTC_DR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.RTC_DR_Fields

func DT*(r: RTC_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `DT=`*(r: var RTC_DR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.RTC_DR_Fields

func DU*(r: RTC_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DU=`*(r: var RTC_DR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.RTC_DR_Fields

func COE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `COE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RTC_CR_Fields

func OSEL*(r: RTC_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 22)

proc `OSEL=`*(r: var RTC_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 22)
  tmp.setMask((val shl 21).masked(21 .. 22))
  r = tmp.RTC_CR_Fields

func POL*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `POL=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.RTC_CR_Fields

func BKP*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `BKP=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RTC_CR_Fields

func SUB1H*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `SUB1H=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RTC_CR_Fields

func ADD1H*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `ADD1H=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RTC_CR_Fields

func TSIE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `TSIE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RTC_CR_Fields

func WUTIE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `WUTIE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RTC_CR_Fields

func ALRBIE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ALRBIE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RTC_CR_Fields

func ALRAIE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `ALRAIE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RTC_CR_Fields

func TSE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TSE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RTC_CR_Fields

func WUTE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `WUTE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.RTC_CR_Fields

func ALRBE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ALRBE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.RTC_CR_Fields

func ALRAE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ALRAE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RTC_CR_Fields

func DCE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `DCE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RTC_CR_Fields

func FMT*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FMT=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.RTC_CR_Fields

func REFCKON*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `REFCKON=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RTC_CR_Fields

func TSEDGE*(r: RTC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TSEDGE=`*(r: var RTC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RTC_CR_Fields

func WCKSEL*(r: RTC_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `WCKSEL=`*(r: var RTC_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.RTC_CR_Fields

func ALRAWF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func ALRBWF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func WUTWF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func SHPF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `SHPF=`*(r: var RTC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RTC_ISR_Fields

func INITS*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func RSF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RSF=`*(r: var RTC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.RTC_ISR_Fields

func INITF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func INIT*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `INIT=`*(r: var RTC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RTC_ISR_Fields

func ALRAF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `ALRAF=`*(r: var RTC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.RTC_ISR_Fields

func ALRBF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ALRBF=`*(r: var RTC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.RTC_ISR_Fields

func WUTF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `WUTF=`*(r: var RTC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.RTC_ISR_Fields

func TSF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TSF=`*(r: var RTC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.RTC_ISR_Fields

func TSOVF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `TSOVF=`*(r: var RTC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.RTC_ISR_Fields

func TAMP1F*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `TAMP1F=`*(r: var RTC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RTC_ISR_Fields

func TAMP2F*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TAMP2F=`*(r: var RTC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RTC_ISR_Fields

func RECALPF*(r: RTC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func PREDIV_A*(r: RTC_PRER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 22)

proc `PREDIV_A=`*(r: var RTC_PRER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 22)
  tmp.setMask((val shl 16).masked(16 .. 22))
  r = tmp.RTC_PRER_Fields

func PREDIV_S*(r: RTC_PRER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 14)

proc `PREDIV_S=`*(r: var RTC_PRER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 14)
  tmp.setMask((val shl 0).masked(0 .. 14))
  r = tmp.RTC_PRER_Fields

func WUT*(r: RTC_WUTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `WUT=`*(r: var RTC_WUTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.RTC_WUTR_Fields

func DCS*(r: RTC_CALIBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `DCS=`*(r: var RTC_CALIBR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RTC_CALIBR_Fields

func DC*(r: RTC_CALIBR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `DC=`*(r: var RTC_CALIBR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.RTC_CALIBR_Fields

func MSK4*(r: RTC_ALRMAR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `MSK4=`*(r: var RTC_ALRMAR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.RTC_ALRMAR_Fields

func WDSEL*(r: RTC_ALRMAR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `WDSEL=`*(r: var RTC_ALRMAR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.RTC_ALRMAR_Fields

func DT*(r: RTC_ALRMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `DT=`*(r: var RTC_ALRMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.RTC_ALRMAR_Fields

func DU*(r: RTC_ALRMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `DU=`*(r: var RTC_ALRMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.RTC_ALRMAR_Fields

func MSK3*(r: RTC_ALRMAR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `MSK3=`*(r: var RTC_ALRMAR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RTC_ALRMAR_Fields

func PM*(r: RTC_ALRMAR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `PM=`*(r: var RTC_ALRMAR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RTC_ALRMAR_Fields

func HT*(r: RTC_ALRMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `HT=`*(r: var RTC_ALRMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.RTC_ALRMAR_Fields

func HU*(r: RTC_ALRMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `HU=`*(r: var RTC_ALRMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.RTC_ALRMAR_Fields

func MSK2*(r: RTC_ALRMAR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `MSK2=`*(r: var RTC_ALRMAR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RTC_ALRMAR_Fields

func MNT*(r: RTC_ALRMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `MNT=`*(r: var RTC_ALRMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.RTC_ALRMAR_Fields

func MNU*(r: RTC_ALRMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `MNU=`*(r: var RTC_ALRMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.RTC_ALRMAR_Fields

func MSK1*(r: RTC_ALRMAR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MSK1=`*(r: var RTC_ALRMAR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RTC_ALRMAR_Fields

func ST*(r: RTC_ALRMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `ST=`*(r: var RTC_ALRMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.RTC_ALRMAR_Fields

func SU*(r: RTC_ALRMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `SU=`*(r: var RTC_ALRMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.RTC_ALRMAR_Fields

func MSK4*(r: RTC_ALRMBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `MSK4=`*(r: var RTC_ALRMBR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.RTC_ALRMBR_Fields

func WDSEL*(r: RTC_ALRMBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `WDSEL=`*(r: var RTC_ALRMBR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.RTC_ALRMBR_Fields

func DT*(r: RTC_ALRMBR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

proc `DT=`*(r: var RTC_ALRMBR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 29)
  tmp.setMask((val shl 28).masked(28 .. 29))
  r = tmp.RTC_ALRMBR_Fields

func DU*(r: RTC_ALRMBR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `DU=`*(r: var RTC_ALRMBR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.RTC_ALRMBR_Fields

func MSK3*(r: RTC_ALRMBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `MSK3=`*(r: var RTC_ALRMBR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.RTC_ALRMBR_Fields

func PM*(r: RTC_ALRMBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `PM=`*(r: var RTC_ALRMBR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.RTC_ALRMBR_Fields

func HT*(r: RTC_ALRMBR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `HT=`*(r: var RTC_ALRMBR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.RTC_ALRMBR_Fields

func HU*(r: RTC_ALRMBR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `HU=`*(r: var RTC_ALRMBR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.RTC_ALRMBR_Fields

func MSK2*(r: RTC_ALRMBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `MSK2=`*(r: var RTC_ALRMBR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RTC_ALRMBR_Fields

func MNT*(r: RTC_ALRMBR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `MNT=`*(r: var RTC_ALRMBR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.RTC_ALRMBR_Fields

func MNU*(r: RTC_ALRMBR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `MNU=`*(r: var RTC_ALRMBR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.RTC_ALRMBR_Fields

func MSK1*(r: RTC_ALRMBR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MSK1=`*(r: var RTC_ALRMBR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RTC_ALRMBR_Fields

func ST*(r: RTC_ALRMBR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `ST=`*(r: var RTC_ALRMBR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.RTC_ALRMBR_Fields

func SU*(r: RTC_ALRMBR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `SU=`*(r: var RTC_ALRMBR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.RTC_ALRMBR_Fields

proc `KEY=`*(r: var RTC_WPR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.RTC_WPR_Fields

func SS*(r: RTC_SSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ADD1S=`*(r: var RTC_SHIFTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.RTC_SHIFTR_Fields

proc `SUBFS=`*(r: var RTC_SHIFTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 14)
  tmp.setMask((val shl 0).masked(0 .. 14))
  r = tmp.RTC_SHIFTR_Fields

func ALARMOUTTYPE*(r: RTC_TSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func TSINSEL*(r: RTC_TSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func TAMP1INSEL*(r: RTC_TSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func TAMPIE*(r: RTC_TSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func TAMP1TRG*(r: RTC_TSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func TAMP1E*(r: RTC_TSTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func WDU*(r: RTC_TSDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 15)

func MT*(r: RTC_TSDR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

func MU*(r: RTC_TSDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

func DT*(r: RTC_TSDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

func DU*(r: RTC_TSDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func SS*(r: RTC_TSSSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func CALP*(r: RTC_CALR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `CALP=`*(r: var RTC_CALR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RTC_CALR_Fields

func CALW8*(r: RTC_CALR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `CALW8=`*(r: var RTC_CALR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.RTC_CALR_Fields

func CALW16*(r: RTC_CALR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CALW16=`*(r: var RTC_CALR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.RTC_CALR_Fields

func CALM*(r: RTC_CALR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 8)

proc `CALM=`*(r: var RTC_CALR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 8)
  tmp.setMask((val shl 0).masked(0 .. 8))
  r = tmp.RTC_CALR_Fields

func ALARMOUTTYPE*(r: RTC_TAFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `ALARMOUTTYPE=`*(r: var RTC_TAFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.RTC_TAFCR_Fields

func TSINSEL*(r: RTC_TAFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TSINSEL=`*(r: var RTC_TAFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.RTC_TAFCR_Fields

func TAMP1INSEL*(r: RTC_TAFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TAMP1INSEL=`*(r: var RTC_TAFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.RTC_TAFCR_Fields

func TAMPPUDIS*(r: RTC_TAFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `TAMPPUDIS=`*(r: var RTC_TAFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.RTC_TAFCR_Fields

func TAMPPRCH*(r: RTC_TAFCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 14)

proc `TAMPPRCH=`*(r: var RTC_TAFCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 14)
  tmp.setMask((val shl 13).masked(13 .. 14))
  r = tmp.RTC_TAFCR_Fields

func TAMPFLT*(r: RTC_TAFCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `TAMPFLT=`*(r: var RTC_TAFCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.RTC_TAFCR_Fields

func TAMPFREQ*(r: RTC_TAFCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 10)

proc `TAMPFREQ=`*(r: var RTC_TAFCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 10)
  tmp.setMask((val shl 8).masked(8 .. 10))
  r = tmp.RTC_TAFCR_Fields

func TAMPTS*(r: RTC_TAFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TAMPTS=`*(r: var RTC_TAFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.RTC_TAFCR_Fields

func TAMP2TRG*(r: RTC_TAFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TAMP2TRG=`*(r: var RTC_TAFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.RTC_TAFCR_Fields

func TAMP2E*(r: RTC_TAFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TAMP2E=`*(r: var RTC_TAFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.RTC_TAFCR_Fields

func TAMPIE*(r: RTC_TAFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TAMPIE=`*(r: var RTC_TAFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.RTC_TAFCR_Fields

func TAMP1TRG*(r: RTC_TAFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TAMP1TRG=`*(r: var RTC_TAFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.RTC_TAFCR_Fields

func TAMP1E*(r: RTC_TAFCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TAMP1E=`*(r: var RTC_TAFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.RTC_TAFCR_Fields

func MASKSS*(r: RTC_ALRMASSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `MASKSS=`*(r: var RTC_ALRMASSR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.RTC_ALRMASSR_Fields

func SS*(r: RTC_ALRMASSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 14)

proc `SS=`*(r: var RTC_ALRMASSR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 14)
  tmp.setMask((val shl 0).masked(0 .. 14))
  r = tmp.RTC_ALRMASSR_Fields

func MASKSS*(r: RTC_ALRMBSSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 27)

proc `MASKSS=`*(r: var RTC_ALRMBSSR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 27)
  tmp.setMask((val shl 24).masked(24 .. 27))
  r = tmp.RTC_ALRMBSSR_Fields

func SS*(r: RTC_ALRMBSSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 14)

proc `SS=`*(r: var RTC_ALRMBSSR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 14)
  tmp.setMask((val shl 0).masked(0 .. 14))
  r = tmp.RTC_ALRMBSSR_Fields

type
  UART4_SR_Fields* = distinct uint32
  UART4_DR_Fields* = distinct uint32
  UART4_BRR_Fields* = distinct uint32
  UART4_CR1_Fields* = distinct uint32
  UART4_CR2_Fields* = distinct uint32
  UART4_CR3_Fields* = distinct uint32

proc read*(reg: UART4_SR_Type): UART4_SR_Fields {.inline.} =
  volatileLoad(cast[ptr UART4_SR_Fields](reg.loc))

proc write*(reg: UART4_SR_Type, val: UART4_SR_Fields) {.inline.} =
  volatileStore(cast[ptr UART4_SR_Fields](reg.loc), val)

proc write*(reg: UART4_SR_Type, LBD: bool = false, TC: bool = false, RXNE: bool = false) =
  var x: uint32
  x.setMask((LBD.uint32 shl 8).masked(8 .. 8))
  x.setMask((TC.uint32 shl 6).masked(6 .. 6))
  x.setMask((RXNE.uint32 shl 5).masked(5 .. 5))
  reg.write x.UART4_SR_Fields

template modifyIt*(reg: UART4_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: UART4_DR_Type): UART4_DR_Fields {.inline.} =
  volatileLoad(cast[ptr UART4_DR_Fields](reg.loc))

proc write*(reg: UART4_DR_Type, val: UART4_DR_Fields) {.inline.} =
  volatileStore(cast[ptr UART4_DR_Fields](reg.loc), val)

proc write*(reg: UART4_DR_Type, DR: uint32 = 0) =
  var x: uint32
  x.setMask((DR shl 0).masked(0 .. 8))
  reg.write x.UART4_DR_Fields

template modifyIt*(reg: UART4_DR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: UART4_BRR_Type): UART4_BRR_Fields {.inline.} =
  volatileLoad(cast[ptr UART4_BRR_Fields](reg.loc))

proc write*(reg: UART4_BRR_Type, val: UART4_BRR_Fields) {.inline.} =
  volatileStore(cast[ptr UART4_BRR_Fields](reg.loc), val)

proc write*(reg: UART4_BRR_Type, DIV_Mantissa: uint32 = 0, DIV_Fraction: uint32 = 0) =
  var x: uint32
  x.setMask((DIV_Mantissa shl 4).masked(4 .. 15))
  x.setMask((DIV_Fraction shl 0).masked(0 .. 3))
  reg.write x.UART4_BRR_Fields

template modifyIt*(reg: UART4_BRR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: UART4_CR1_Type): UART4_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr UART4_CR1_Fields](reg.loc))

proc write*(reg: UART4_CR1_Type, val: UART4_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr UART4_CR1_Fields](reg.loc), val)

proc write*(reg: UART4_CR1_Type, OVER8: bool = false, UE: bool = false, M: bool = false, WAKE: bool = false, PCE: bool = false, PS: bool = false, PEIE: bool = false, TXEIE: bool = false, TCIE: bool = false, RXNEIE: bool = false, IDLEIE: bool = false, TE: bool = false, RE: bool = false, RWU: bool = false, SBK: bool = false) =
  var x: uint32
  x.setMask((OVER8.uint32 shl 15).masked(15 .. 15))
  x.setMask((UE.uint32 shl 13).masked(13 .. 13))
  x.setMask((M.uint32 shl 12).masked(12 .. 12))
  x.setMask((WAKE.uint32 shl 11).masked(11 .. 11))
  x.setMask((PCE.uint32 shl 10).masked(10 .. 10))
  x.setMask((PS.uint32 shl 9).masked(9 .. 9))
  x.setMask((PEIE.uint32 shl 8).masked(8 .. 8))
  x.setMask((TXEIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((TCIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((RXNEIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((IDLEIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((TE.uint32 shl 3).masked(3 .. 3))
  x.setMask((RE.uint32 shl 2).masked(2 .. 2))
  x.setMask((RWU.uint32 shl 1).masked(1 .. 1))
  x.setMask((SBK.uint32 shl 0).masked(0 .. 0))
  reg.write x.UART4_CR1_Fields

template modifyIt*(reg: UART4_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: UART4_CR2_Type): UART4_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr UART4_CR2_Fields](reg.loc))

proc write*(reg: UART4_CR2_Type, val: UART4_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr UART4_CR2_Fields](reg.loc), val)

proc write*(reg: UART4_CR2_Type, LINEN: bool = false, STOP: uint32 = 0, LBDIE: bool = false, LBDL: bool = false, ADD: uint32 = 0) =
  var x: uint32
  x.setMask((LINEN.uint32 shl 14).masked(14 .. 14))
  x.setMask((STOP shl 12).masked(12 .. 13))
  x.setMask((LBDIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((LBDL.uint32 shl 5).masked(5 .. 5))
  x.setMask((ADD shl 0).masked(0 .. 3))
  reg.write x.UART4_CR2_Fields

template modifyIt*(reg: UART4_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: UART4_CR3_Type): UART4_CR3_Fields {.inline.} =
  volatileLoad(cast[ptr UART4_CR3_Fields](reg.loc))

proc write*(reg: UART4_CR3_Type, val: UART4_CR3_Fields) {.inline.} =
  volatileStore(cast[ptr UART4_CR3_Fields](reg.loc), val)

proc write*(reg: UART4_CR3_Type, ONEBIT: bool = false, CTSIE: bool = false, CTSE: bool = false, RTSE: bool = false, DMAT: bool = false, DMAR: bool = false, HDSEL: bool = false, IRLP: bool = false, IREN: bool = false, EIE: bool = false) =
  var x: uint32
  x.setMask((ONEBIT.uint32 shl 11).masked(11 .. 11))
  x.setMask((CTSIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CTSE.uint32 shl 9).masked(9 .. 9))
  x.setMask((RTSE.uint32 shl 8).masked(8 .. 8))
  x.setMask((DMAT.uint32 shl 7).masked(7 .. 7))
  x.setMask((DMAR.uint32 shl 6).masked(6 .. 6))
  x.setMask((HDSEL.uint32 shl 3).masked(3 .. 3))
  x.setMask((IRLP.uint32 shl 2).masked(2 .. 2))
  x.setMask((IREN.uint32 shl 1).masked(1 .. 1))
  x.setMask((EIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.UART4_CR3_Fields

template modifyIt*(reg: UART4_CR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func LBD*(r: UART4_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LBD=`*(r: var UART4_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.UART4_SR_Fields

func TXE*(r: UART4_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TC*(r: UART4_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TC=`*(r: var UART4_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.UART4_SR_Fields

func RXNE*(r: UART4_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RXNE=`*(r: var UART4_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.UART4_SR_Fields

func IDLE*(r: UART4_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func ORE*(r: UART4_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func NF*(r: UART4_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func FE*(r: UART4_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func PE*(r: UART4_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func DR*(r: UART4_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 8)

proc `DR=`*(r: var UART4_DR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 8)
  tmp.setMask((val shl 0).masked(0 .. 8))
  r = tmp.UART4_DR_Fields

func DIV_Mantissa*(r: UART4_BRR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 15)

proc `DIV_Mantissa=`*(r: var UART4_BRR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 15)
  tmp.setMask((val shl 4).masked(4 .. 15))
  r = tmp.UART4_BRR_Fields

func DIV_Fraction*(r: UART4_BRR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DIV_Fraction=`*(r: var UART4_BRR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.UART4_BRR_Fields

func OVER8*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OVER8=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.UART4_CR1_Fields

func UE*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `UE=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.UART4_CR1_Fields

func M*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `M=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.UART4_CR1_Fields

func WAKE*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `WAKE=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.UART4_CR1_Fields

func PCE*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `PCE=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.UART4_CR1_Fields

func PS*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PS=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.UART4_CR1_Fields

func PEIE*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PEIE=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.UART4_CR1_Fields

func TXEIE*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXEIE=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.UART4_CR1_Fields

func TCIE*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TCIE=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.UART4_CR1_Fields

func RXNEIE*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RXNEIE=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.UART4_CR1_Fields

func IDLEIE*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `IDLEIE=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.UART4_CR1_Fields

func TE*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TE=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.UART4_CR1_Fields

func RE*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `RE=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.UART4_CR1_Fields

func RWU*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RWU=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.UART4_CR1_Fields

func SBK*(r: UART4_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SBK=`*(r: var UART4_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.UART4_CR1_Fields

func LINEN*(r: UART4_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `LINEN=`*(r: var UART4_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.UART4_CR2_Fields

func STOP*(r: UART4_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `STOP=`*(r: var UART4_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.UART4_CR2_Fields

func LBDIE*(r: UART4_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LBDIE=`*(r: var UART4_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.UART4_CR2_Fields

func LBDL*(r: UART4_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `LBDL=`*(r: var UART4_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.UART4_CR2_Fields

func ADD*(r: UART4_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `ADD=`*(r: var UART4_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.UART4_CR2_Fields

func ONEBIT*(r: UART4_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `ONEBIT=`*(r: var UART4_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.UART4_CR3_Fields

func CTSIE*(r: UART4_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CTSIE=`*(r: var UART4_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.UART4_CR3_Fields

func CTSE*(r: UART4_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CTSE=`*(r: var UART4_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.UART4_CR3_Fields

func RTSE*(r: UART4_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `RTSE=`*(r: var UART4_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.UART4_CR3_Fields

func DMAT*(r: UART4_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `DMAT=`*(r: var UART4_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.UART4_CR3_Fields

func DMAR*(r: UART4_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `DMAR=`*(r: var UART4_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.UART4_CR3_Fields

func HDSEL*(r: UART4_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `HDSEL=`*(r: var UART4_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.UART4_CR3_Fields

func IRLP*(r: UART4_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IRLP=`*(r: var UART4_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.UART4_CR3_Fields

func IREN*(r: UART4_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `IREN=`*(r: var UART4_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.UART4_CR3_Fields

func EIE*(r: UART4_CR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EIE=`*(r: var UART4_CR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.UART4_CR3_Fields

type
  C_ADC_CSR_Fields* = distinct uint32
  C_ADC_CCR_Fields* = distinct uint32
  C_ADC_CDR_Fields* = distinct uint32

proc read*(reg: C_ADC_CSR_Type): C_ADC_CSR_Fields {.inline.} =
  volatileLoad(cast[ptr C_ADC_CSR_Fields](reg.loc))

proc read*(reg: C_ADC_CCR_Type): C_ADC_CCR_Fields {.inline.} =
  volatileLoad(cast[ptr C_ADC_CCR_Fields](reg.loc))

proc write*(reg: C_ADC_CCR_Type, val: C_ADC_CCR_Fields) {.inline.} =
  volatileStore(cast[ptr C_ADC_CCR_Fields](reg.loc), val)

proc write*(reg: C_ADC_CCR_Type, TSVREFE: bool = false, VBATE: bool = false, ADCPRE: uint32 = 0, DMA: uint32 = 0, DDS: bool = false, DELAY: uint32 = 0, MULT: uint32 = 0) =
  var x: uint32
  x.setMask((TSVREFE.uint32 shl 23).masked(23 .. 23))
  x.setMask((VBATE.uint32 shl 22).masked(22 .. 22))
  x.setMask((ADCPRE shl 16).masked(16 .. 17))
  x.setMask((DMA shl 14).masked(14 .. 15))
  x.setMask((DDS.uint32 shl 13).masked(13 .. 13))
  x.setMask((DELAY shl 8).masked(8 .. 11))
  x.setMask((MULT shl 0).masked(0 .. 4))
  reg.write x.C_ADC_CCR_Fields

template modifyIt*(reg: C_ADC_CCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: C_ADC_CDR_Type): C_ADC_CDR_Fields {.inline.} =
  volatileLoad(cast[ptr C_ADC_CDR_Fields](reg.loc))

func OVR3*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

func STRT3*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

func JSTRT3*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

func JEOC3*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func EOC3*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func AWD3*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func OVR2*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

func STRT2*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

func JSTRT2*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func JEOC2*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func EOC2*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func AWD2*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func OVR1*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func STRT1*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func JSTRT1*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func JEOC1*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func EOC1*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func AWD1*(r: C_ADC_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func TSVREFE*(r: C_ADC_CCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `TSVREFE=`*(r: var C_ADC_CCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.C_ADC_CCR_Fields

func VBATE*(r: C_ADC_CCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `VBATE=`*(r: var C_ADC_CCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.C_ADC_CCR_Fields

func ADCPRE*(r: C_ADC_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `ADCPRE=`*(r: var C_ADC_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.C_ADC_CCR_Fields

func DMA*(r: C_ADC_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `DMA=`*(r: var C_ADC_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.C_ADC_CCR_Fields

func DDS*(r: C_ADC_CCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `DDS=`*(r: var C_ADC_CCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.C_ADC_CCR_Fields

func DELAY*(r: C_ADC_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `DELAY=`*(r: var C_ADC_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.C_ADC_CCR_Fields

func MULT*(r: C_ADC_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `MULT=`*(r: var C_ADC_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.C_ADC_CCR_Fields

func DATA2*(r: C_ADC_CDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

func DATA1*(r: C_ADC_CDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

type
  TIM1_CR1_Fields* = distinct uint32
  TIM1_CR2_Fields* = distinct uint32
  TIM1_SMCR_Fields* = distinct uint32
  TIM1_DIER_Fields* = distinct uint32
  TIM1_SR_Fields* = distinct uint32
  TIM1_EGR_Fields* = distinct uint32
  TIM1_CCMR1_Output_Fields* = distinct uint32
  TIM1_CCMR1_Input_Fields* = distinct uint32
  TIM1_CCMR2_Output_Fields* = distinct uint32
  TIM1_CCMR2_Input_Fields* = distinct uint32
  TIM1_CCER_Fields* = distinct uint32
  TIM1_CNT_Fields* = distinct uint32
  TIM1_PSC_Fields* = distinct uint32
  TIM1_ARR_Fields* = distinct uint32
  TIM1_CCR1_Fields* = distinct uint32
  TIM1_CCR2_Fields* = distinct uint32
  TIM1_CCR3_Fields* = distinct uint32
  TIM1_CCR4_Fields* = distinct uint32
  TIM1_DCR_Fields* = distinct uint32
  TIM1_DMAR_Fields* = distinct uint32
  TIM1_RCR_Fields* = distinct uint32
  TIM1_BDTR_Fields* = distinct uint32

proc read*(reg: TIM1_CR1_Type): TIM1_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CR1_Fields](reg.loc))

proc write*(reg: TIM1_CR1_Type, val: TIM1_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CR1_Fields](reg.loc), val)

proc write*(reg: TIM1_CR1_Type, CKD: uint32 = 0, ARPE: bool = false, CMS: uint32 = 0, DIR: bool = false, OPM: bool = false, URS: bool = false, UDIS: bool = false, CEN: bool = false) =
  var x: uint32
  x.setMask((CKD shl 8).masked(8 .. 9))
  x.setMask((ARPE.uint32 shl 7).masked(7 .. 7))
  x.setMask((CMS shl 5).masked(5 .. 6))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((OPM.uint32 shl 3).masked(3 .. 3))
  x.setMask((URS.uint32 shl 2).masked(2 .. 2))
  x.setMask((UDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_CR1_Fields

template modifyIt*(reg: TIM1_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CR2_Type): TIM1_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CR2_Fields](reg.loc))

proc write*(reg: TIM1_CR2_Type, val: TIM1_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CR2_Fields](reg.loc), val)

proc write*(reg: TIM1_CR2_Type, OIS4: bool = false, OIS3N: bool = false, OIS3: bool = false, OIS2N: bool = false, OIS2: bool = false, OIS1N: bool = false, OIS1: bool = false, TI1S: bool = false, MMS: uint32 = 0, CCDS: bool = false, CCUS: bool = false, CCPC: bool = false) =
  var x: uint32
  x.setMask((OIS4.uint32 shl 14).masked(14 .. 14))
  x.setMask((OIS3N.uint32 shl 13).masked(13 .. 13))
  x.setMask((OIS3.uint32 shl 12).masked(12 .. 12))
  x.setMask((OIS2N.uint32 shl 11).masked(11 .. 11))
  x.setMask((OIS2.uint32 shl 10).masked(10 .. 10))
  x.setMask((OIS1N.uint32 shl 9).masked(9 .. 9))
  x.setMask((OIS1.uint32 shl 8).masked(8 .. 8))
  x.setMask((TI1S.uint32 shl 7).masked(7 .. 7))
  x.setMask((MMS shl 4).masked(4 .. 6))
  x.setMask((CCDS.uint32 shl 3).masked(3 .. 3))
  x.setMask((CCUS.uint32 shl 2).masked(2 .. 2))
  x.setMask((CCPC.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_CR2_Fields

template modifyIt*(reg: TIM1_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_SMCR_Type): TIM1_SMCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_SMCR_Fields](reg.loc))

proc write*(reg: TIM1_SMCR_Type, val: TIM1_SMCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_SMCR_Fields](reg.loc), val)

proc write*(reg: TIM1_SMCR_Type, ETP: bool = false, ECE: bool = false, ETPS: uint32 = 0, ETF: uint32 = 0, MSM: bool = false, TS: uint32 = 0, SMS: uint32 = 0) =
  var x: uint32
  x.setMask((ETP.uint32 shl 15).masked(15 .. 15))
  x.setMask((ECE.uint32 shl 14).masked(14 .. 14))
  x.setMask((ETPS shl 12).masked(12 .. 13))
  x.setMask((ETF shl 8).masked(8 .. 11))
  x.setMask((MSM.uint32 shl 7).masked(7 .. 7))
  x.setMask((TS shl 4).masked(4 .. 6))
  x.setMask((SMS shl 0).masked(0 .. 2))
  reg.write x.TIM1_SMCR_Fields

template modifyIt*(reg: TIM1_SMCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_DIER_Type): TIM1_DIER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_DIER_Fields](reg.loc))

proc write*(reg: TIM1_DIER_Type, val: TIM1_DIER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_DIER_Fields](reg.loc), val)

proc write*(reg: TIM1_DIER_Type, TDE: bool = false, COMDE: bool = false, CC4DE: bool = false, CC3DE: bool = false, CC2DE: bool = false, CC1DE: bool = false, UDE: bool = false, TIE: bool = false, CC4IE: bool = false, CC3IE: bool = false, CC2IE: bool = false, CC1IE: bool = false, UIE: bool = false, BIE: bool = false, COMIE: bool = false) =
  var x: uint32
  x.setMask((TDE.uint32 shl 14).masked(14 .. 14))
  x.setMask((COMDE.uint32 shl 13).masked(13 .. 13))
  x.setMask((CC4DE.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3DE.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2DE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1DE.uint32 shl 9).masked(9 .. 9))
  x.setMask((UDE.uint32 shl 8).masked(8 .. 8))
  x.setMask((TIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4IE.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IE.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IE.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIE.uint32 shl 0).masked(0 .. 0))
  x.setMask((BIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((COMIE.uint32 shl 5).masked(5 .. 5))
  reg.write x.TIM1_DIER_Fields

template modifyIt*(reg: TIM1_DIER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_SR_Type): TIM1_SR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_SR_Fields](reg.loc))

proc write*(reg: TIM1_SR_Type, val: TIM1_SR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_SR_Fields](reg.loc), val)

proc write*(reg: TIM1_SR_Type, CC4OF: bool = false, CC3OF: bool = false, CC2OF: bool = false, CC1OF: bool = false, BIF: bool = false, TIF: bool = false, COMIF: bool = false, CC4IF: bool = false, CC3IF: bool = false, CC2IF: bool = false, CC1IF: bool = false, UIF: bool = false) =
  var x: uint32
  x.setMask((CC4OF.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3OF.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2OF.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1OF.uint32 shl 9).masked(9 .. 9))
  x.setMask((BIF.uint32 shl 7).masked(7 .. 7))
  x.setMask((TIF.uint32 shl 6).masked(6 .. 6))
  x.setMask((COMIF.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC4IF.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IF.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IF.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IF.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_SR_Fields

template modifyIt*(reg: TIM1_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: TIM1_EGR_Type, val: TIM1_EGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_EGR_Fields](reg.loc), val)

proc write*(reg: TIM1_EGR_Type, BG: bool = false, TG: bool = false, COMG: bool = false, CC4G: bool = false, CC3G: bool = false, CC2G: bool = false, CC1G: bool = false, UG: bool = false) =
  var x: uint32
  x.setMask((BG.uint32 shl 7).masked(7 .. 7))
  x.setMask((TG.uint32 shl 6).masked(6 .. 6))
  x.setMask((COMG.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC4G.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3G.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2G.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1G.uint32 shl 1).masked(1 .. 1))
  x.setMask((UG.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_EGR_Fields

proc read*(reg: TIM1_CCMR1_Output_Type): TIM1_CCMR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCMR1_Output_Fields](reg.loc))

proc write*(reg: TIM1_CCMR1_Output_Type, val: TIM1_CCMR1_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CCMR1_Output_Fields](reg.loc), val)

proc write*(reg: TIM1_CCMR1_Output_Type, OC2CE: bool = false, OC2M: uint32 = 0, OC2PE: bool = false, OC2FE: bool = false, CC2S: uint32 = 0, OC1CE: bool = false, OC1M: uint32 = 0, OC1PE: bool = false, OC1FE: bool = false, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((OC2CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC2M shl 12).masked(12 .. 14))
  x.setMask((OC2PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC2FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((OC1CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC1M shl 4).masked(4 .. 6))
  x.setMask((OC1PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC1FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM1_CCMR1_Output_Fields

template modifyIt*(reg: TIM1_CCMR1_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CCMR1_Input_Type): TIM1_CCMR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCMR1_Input_Fields](reg.loc))

proc write*(reg: TIM1_CCMR1_Input_Type, val: TIM1_CCMR1_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CCMR1_Input_Fields](reg.loc), val)

proc write*(reg: TIM1_CCMR1_Input_Type, IC2F: uint32 = 0, IC2PCS: uint32 = 0, CC2S: uint32 = 0, IC1F: uint32 = 0, ICPCS: uint32 = 0, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((IC2F shl 12).masked(12 .. 15))
  x.setMask((IC2PCS shl 10).masked(10 .. 11))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((IC1F shl 4).masked(4 .. 7))
  x.setMask((ICPCS shl 2).masked(2 .. 3))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM1_CCMR1_Input_Fields

template modifyIt*(reg: TIM1_CCMR1_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CCMR2_Output_Type): TIM1_CCMR2_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCMR2_Output_Fields](reg.loc))

proc write*(reg: TIM1_CCMR2_Output_Type, val: TIM1_CCMR2_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CCMR2_Output_Fields](reg.loc), val)

proc write*(reg: TIM1_CCMR2_Output_Type, OC4CE: bool = false, OC4M: uint32 = 0, OC4PE: bool = false, OC4FE: bool = false, CC4S: uint32 = 0, OC3CE: bool = false, OC3M: uint32 = 0, OC3PE: bool = false, OC3FE: bool = false, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((OC4CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC4M shl 12).masked(12 .. 14))
  x.setMask((OC4PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC4FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((OC3CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC3M shl 4).masked(4 .. 6))
  x.setMask((OC3PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC3FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM1_CCMR2_Output_Fields

template modifyIt*(reg: TIM1_CCMR2_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CCMR2_Input_Type): TIM1_CCMR2_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCMR2_Input_Fields](reg.loc))

proc write*(reg: TIM1_CCMR2_Input_Type, val: TIM1_CCMR2_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CCMR2_Input_Fields](reg.loc), val)

proc write*(reg: TIM1_CCMR2_Input_Type, IC4F: uint32 = 0, IC4PSC: uint32 = 0, CC4S: uint32 = 0, IC3F: uint32 = 0, IC3PSC: uint32 = 0, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((IC4F shl 12).masked(12 .. 15))
  x.setMask((IC4PSC shl 10).masked(10 .. 11))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((IC3F shl 4).masked(4 .. 7))
  x.setMask((IC3PSC shl 2).masked(2 .. 3))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM1_CCMR2_Input_Fields

template modifyIt*(reg: TIM1_CCMR2_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CCER_Type): TIM1_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCER_Fields](reg.loc))

proc write*(reg: TIM1_CCER_Type, val: TIM1_CCER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CCER_Fields](reg.loc), val)

proc write*(reg: TIM1_CCER_Type, CC4P: bool = false, CC4E: bool = false, CC3NP: bool = false, CC3NE: bool = false, CC3P: bool = false, CC3E: bool = false, CC2NP: bool = false, CC2NE: bool = false, CC2P: bool = false, CC2E: bool = false, CC1NP: bool = false, CC1NE: bool = false, CC1P: bool = false, CC1E: bool = false) =
  var x: uint32
  x.setMask((CC4P.uint32 shl 13).masked(13 .. 13))
  x.setMask((CC4E.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3NP.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC3NE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC3P.uint32 shl 9).masked(9 .. 9))
  x.setMask((CC3E.uint32 shl 8).masked(8 .. 8))
  x.setMask((CC2NP.uint32 shl 7).masked(7 .. 7))
  x.setMask((CC2NE.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC2P.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC2E.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC1NP.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC1NE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1P.uint32 shl 1).masked(1 .. 1))
  x.setMask((CC1E.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM1_CCER_Fields

template modifyIt*(reg: TIM1_CCER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CNT_Type): TIM1_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CNT_Fields](reg.loc))

proc write*(reg: TIM1_CNT_Type, val: TIM1_CNT_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CNT_Fields](reg.loc), val)

proc write*(reg: TIM1_CNT_Type, CNT: uint32 = 0) =
  var x: uint32
  x.setMask((CNT shl 0).masked(0 .. 15))
  reg.write x.TIM1_CNT_Fields

template modifyIt*(reg: TIM1_CNT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_PSC_Type): TIM1_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_PSC_Fields](reg.loc))

proc write*(reg: TIM1_PSC_Type, val: TIM1_PSC_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_PSC_Fields](reg.loc), val)

proc write*(reg: TIM1_PSC_Type, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((PSC shl 0).masked(0 .. 15))
  reg.write x.TIM1_PSC_Fields

template modifyIt*(reg: TIM1_PSC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_ARR_Type): TIM1_ARR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_ARR_Fields](reg.loc))

proc write*(reg: TIM1_ARR_Type, val: TIM1_ARR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_ARR_Fields](reg.loc), val)

proc write*(reg: TIM1_ARR_Type, ARR: uint32 = 0) =
  var x: uint32
  x.setMask((ARR shl 0).masked(0 .. 15))
  reg.write x.TIM1_ARR_Fields

template modifyIt*(reg: TIM1_ARR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CCR1_Type): TIM1_CCR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCR1_Fields](reg.loc))

proc write*(reg: TIM1_CCR1_Type, val: TIM1_CCR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CCR1_Fields](reg.loc), val)

proc write*(reg: TIM1_CCR1_Type, CCR1: uint32 = 0) =
  var x: uint32
  x.setMask((CCR1 shl 0).masked(0 .. 15))
  reg.write x.TIM1_CCR1_Fields

template modifyIt*(reg: TIM1_CCR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CCR2_Type): TIM1_CCR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCR2_Fields](reg.loc))

proc write*(reg: TIM1_CCR2_Type, val: TIM1_CCR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CCR2_Fields](reg.loc), val)

proc write*(reg: TIM1_CCR2_Type, CCR2: uint32 = 0) =
  var x: uint32
  x.setMask((CCR2 shl 0).masked(0 .. 15))
  reg.write x.TIM1_CCR2_Fields

template modifyIt*(reg: TIM1_CCR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CCR3_Type): TIM1_CCR3_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCR3_Fields](reg.loc))

proc write*(reg: TIM1_CCR3_Type, val: TIM1_CCR3_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CCR3_Fields](reg.loc), val)

proc write*(reg: TIM1_CCR3_Type, CCR3: uint32 = 0) =
  var x: uint32
  x.setMask((CCR3 shl 0).masked(0 .. 15))
  reg.write x.TIM1_CCR3_Fields

template modifyIt*(reg: TIM1_CCR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_CCR4_Type): TIM1_CCR4_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_CCR4_Fields](reg.loc))

proc write*(reg: TIM1_CCR4_Type, val: TIM1_CCR4_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_CCR4_Fields](reg.loc), val)

proc write*(reg: TIM1_CCR4_Type, CCR4: uint32 = 0) =
  var x: uint32
  x.setMask((CCR4 shl 0).masked(0 .. 15))
  reg.write x.TIM1_CCR4_Fields

template modifyIt*(reg: TIM1_CCR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_DCR_Type): TIM1_DCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_DCR_Fields](reg.loc))

proc write*(reg: TIM1_DCR_Type, val: TIM1_DCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_DCR_Fields](reg.loc), val)

proc write*(reg: TIM1_DCR_Type, DBL: uint32 = 0, DBA: uint32 = 0) =
  var x: uint32
  x.setMask((DBL shl 8).masked(8 .. 12))
  x.setMask((DBA shl 0).masked(0 .. 4))
  reg.write x.TIM1_DCR_Fields

template modifyIt*(reg: TIM1_DCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_DMAR_Type): TIM1_DMAR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_DMAR_Fields](reg.loc))

proc write*(reg: TIM1_DMAR_Type, val: TIM1_DMAR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_DMAR_Fields](reg.loc), val)

proc write*(reg: TIM1_DMAR_Type, DMAB: uint32 = 0) =
  var x: uint32
  x.setMask((DMAB shl 0).masked(0 .. 15))
  reg.write x.TIM1_DMAR_Fields

template modifyIt*(reg: TIM1_DMAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_RCR_Type): TIM1_RCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_RCR_Fields](reg.loc))

proc write*(reg: TIM1_RCR_Type, val: TIM1_RCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_RCR_Fields](reg.loc), val)

proc write*(reg: TIM1_RCR_Type, REP: uint32 = 0) =
  var x: uint32
  x.setMask((REP shl 0).masked(0 .. 7))
  reg.write x.TIM1_RCR_Fields

template modifyIt*(reg: TIM1_RCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM1_BDTR_Type): TIM1_BDTR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM1_BDTR_Fields](reg.loc))

proc write*(reg: TIM1_BDTR_Type, val: TIM1_BDTR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM1_BDTR_Fields](reg.loc), val)

proc write*(reg: TIM1_BDTR_Type, MOE: bool = false, AOE: bool = false, BKP: bool = false, BKE: bool = false, OSSR: bool = false, OSSI: bool = false, LOCK: uint32 = 0, DTG: uint32 = 0) =
  var x: uint32
  x.setMask((MOE.uint32 shl 15).masked(15 .. 15))
  x.setMask((AOE.uint32 shl 14).masked(14 .. 14))
  x.setMask((BKP.uint32 shl 13).masked(13 .. 13))
  x.setMask((BKE.uint32 shl 12).masked(12 .. 12))
  x.setMask((OSSR.uint32 shl 11).masked(11 .. 11))
  x.setMask((OSSI.uint32 shl 10).masked(10 .. 10))
  x.setMask((LOCK shl 8).masked(8 .. 9))
  x.setMask((DTG shl 0).masked(0 .. 7))
  reg.write x.TIM1_BDTR_Fields

template modifyIt*(reg: TIM1_BDTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CKD*(r: TIM1_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CKD=`*(r: var TIM1_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_CR1_Fields

func ARPE*(r: TIM1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARPE=`*(r: var TIM1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_CR1_Fields

func CMS*(r: TIM1_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 6)

proc `CMS=`*(r: var TIM1_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 6)
  tmp.setMask((val shl 5).masked(5 .. 6))
  r = tmp.TIM1_CR1_Fields

func DIR*(r: TIM1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var TIM1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM1_CR1_Fields

func OPM*(r: TIM1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OPM=`*(r: var TIM1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_CR1_Fields

func URS*(r: TIM1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `URS=`*(r: var TIM1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_CR1_Fields

func UDIS*(r: TIM1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `UDIS=`*(r: var TIM1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM1_CR1_Fields

func CEN*(r: TIM1_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CEN=`*(r: var TIM1_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_CR1_Fields

func OIS4*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `OIS4=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM1_CR2_Fields

func OIS3N*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `OIS3N=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM1_CR2_Fields

func OIS3*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `OIS3=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM1_CR2_Fields

func OIS2N*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OIS2N=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_CR2_Fields

func OIS2*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OIS2=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_CR2_Fields

func OIS1N*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `OIS1N=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM1_CR2_Fields

func OIS1*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `OIS1=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM1_CR2_Fields

func TI1S*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TI1S=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_CR2_Fields

func MMS*(r: TIM1_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `MMS=`*(r: var TIM1_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM1_CR2_Fields

func CCDS*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CCDS=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_CR2_Fields

func CCUS*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CCUS=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_CR2_Fields

func CCPC*(r: TIM1_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CCPC=`*(r: var TIM1_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_CR2_Fields

func ETP*(r: TIM1_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ETP=`*(r: var TIM1_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM1_SMCR_Fields

func ECE*(r: TIM1_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ECE=`*(r: var TIM1_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM1_SMCR_Fields

func ETPS*(r: TIM1_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `ETPS=`*(r: var TIM1_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.TIM1_SMCR_Fields

func ETF*(r: TIM1_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `ETF=`*(r: var TIM1_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.TIM1_SMCR_Fields

func MSM*(r: TIM1_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MSM=`*(r: var TIM1_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_SMCR_Fields

func TS*(r: TIM1_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `TS=`*(r: var TIM1_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM1_SMCR_Fields

func SMS*(r: TIM1_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMS=`*(r: var TIM1_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.TIM1_SMCR_Fields

func TDE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TDE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM1_DIER_Fields

func COMDE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `COMDE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM1_DIER_Fields

func CC4DE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4DE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM1_DIER_Fields

func CC3DE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3DE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_DIER_Fields

func CC2DE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2DE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_DIER_Fields

func CC1DE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1DE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM1_DIER_Fields

func UDE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `UDE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM1_DIER_Fields

func TIE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM1_DIER_Fields

func CC4IE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM1_DIER_Fields

func CC3IE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_DIER_Fields

func CC2IE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_DIER_Fields

func CC1IE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM1_DIER_Fields

func UIE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_DIER_Fields

func BIE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `BIE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_DIER_Fields

func COMIE*(r: TIM1_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `COMIE=`*(r: var TIM1_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM1_DIER_Fields

func CC4OF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4OF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM1_SR_Fields

func CC3OF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3OF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_SR_Fields

func CC2OF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2OF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_SR_Fields

func CC1OF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1OF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM1_SR_Fields

func BIF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `BIF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_SR_Fields

func TIF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM1_SR_Fields

func COMIF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `COMIF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM1_SR_Fields

func CC4IF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM1_SR_Fields

func CC3IF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_SR_Fields

func CC2IF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_SR_Fields

func CC1IF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM1_SR_Fields

func UIF*(r: TIM1_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIF=`*(r: var TIM1_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_SR_Fields

proc `BG=`*(r: var TIM1_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_EGR_Fields

proc `TG=`*(r: var TIM1_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM1_EGR_Fields

proc `COMG=`*(r: var TIM1_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM1_EGR_Fields

proc `CC4G=`*(r: var TIM1_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM1_EGR_Fields

proc `CC3G=`*(r: var TIM1_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_EGR_Fields

proc `CC2G=`*(r: var TIM1_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_EGR_Fields

proc `CC1G=`*(r: var TIM1_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM1_EGR_Fields

proc `UG=`*(r: var TIM1_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_EGR_Fields

func OC2CE*(r: TIM1_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC2CE=`*(r: var TIM1_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM1_CCMR1_Output_Fields

func OC2M*(r: TIM1_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC2M=`*(r: var TIM1_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM1_CCMR1_Output_Fields

func OC2PE*(r: TIM1_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC2PE=`*(r: var TIM1_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_CCMR1_Output_Fields

func OC2FE*(r: TIM1_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC2FE=`*(r: var TIM1_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_CCMR1_Output_Fields

func CC2S*(r: TIM1_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM1_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_CCMR1_Output_Fields

func OC1CE*(r: TIM1_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC1CE=`*(r: var TIM1_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_CCMR1_Output_Fields

func OC1M*(r: TIM1_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC1M=`*(r: var TIM1_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM1_CCMR1_Output_Fields

func OC1PE*(r: TIM1_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC1PE=`*(r: var TIM1_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_CCMR1_Output_Fields

func OC1FE*(r: TIM1_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC1FE=`*(r: var TIM1_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_CCMR1_Output_Fields

func CC1S*(r: TIM1_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM1_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM1_CCMR1_Output_Fields

func IC2F*(r: TIM1_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC2F=`*(r: var TIM1_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM1_CCMR1_Input_Fields

func IC2PCS*(r: TIM1_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC2PCS=`*(r: var TIM1_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM1_CCMR1_Input_Fields

func CC2S*(r: TIM1_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM1_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_CCMR1_Input_Fields

func IC1F*(r: TIM1_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC1F=`*(r: var TIM1_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM1_CCMR1_Input_Fields

func ICPCS*(r: TIM1_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `ICPCS=`*(r: var TIM1_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM1_CCMR1_Input_Fields

func CC1S*(r: TIM1_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM1_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM1_CCMR1_Input_Fields

func OC4CE*(r: TIM1_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC4CE=`*(r: var TIM1_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM1_CCMR2_Output_Fields

func OC4M*(r: TIM1_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC4M=`*(r: var TIM1_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM1_CCMR2_Output_Fields

func OC4PE*(r: TIM1_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC4PE=`*(r: var TIM1_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_CCMR2_Output_Fields

func OC4FE*(r: TIM1_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC4FE=`*(r: var TIM1_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_CCMR2_Output_Fields

func CC4S*(r: TIM1_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM1_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_CCMR2_Output_Fields

func OC3CE*(r: TIM1_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC3CE=`*(r: var TIM1_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_CCMR2_Output_Fields

func OC3M*(r: TIM1_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC3M=`*(r: var TIM1_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM1_CCMR2_Output_Fields

func OC3PE*(r: TIM1_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC3PE=`*(r: var TIM1_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_CCMR2_Output_Fields

func OC3FE*(r: TIM1_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC3FE=`*(r: var TIM1_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_CCMR2_Output_Fields

func CC3S*(r: TIM1_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM1_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM1_CCMR2_Output_Fields

func IC4F*(r: TIM1_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC4F=`*(r: var TIM1_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM1_CCMR2_Input_Fields

func IC4PSC*(r: TIM1_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC4PSC=`*(r: var TIM1_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM1_CCMR2_Input_Fields

func CC4S*(r: TIM1_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM1_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_CCMR2_Input_Fields

func IC3F*(r: TIM1_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC3F=`*(r: var TIM1_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM1_CCMR2_Input_Fields

func IC3PSC*(r: TIM1_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `IC3PSC=`*(r: var TIM1_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM1_CCMR2_Input_Fields

func CC3S*(r: TIM1_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM1_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM1_CCMR2_Input_Fields

func CC4P*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CC4P=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM1_CCER_Fields

func CC4E*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4E=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM1_CCER_Fields

func CC3NP*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3NP=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_CCER_Fields

func CC3NE*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC3NE=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_CCER_Fields

func CC3P*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC3P=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM1_CCER_Fields

func CC3E*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CC3E=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM1_CCER_Fields

func CC2NP*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `CC2NP=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM1_CCER_Fields

func CC2NE*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `CC2NE=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM1_CCER_Fields

func CC2P*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CC2P=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM1_CCER_Fields

func CC2E*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC2E=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM1_CCER_Fields

func CC1NP*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC1NP=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM1_CCER_Fields

func CC1NE*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC1NE=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM1_CCER_Fields

func CC1P*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1P=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM1_CCER_Fields

func CC1E*(r: TIM1_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CC1E=`*(r: var TIM1_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM1_CCER_Fields

func CNT*(r: TIM1_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNT=`*(r: var TIM1_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_CNT_Fields

func PSC*(r: TIM1_PSC_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PSC=`*(r: var TIM1_PSC_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_PSC_Fields

func ARR*(r: TIM1_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ARR=`*(r: var TIM1_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_ARR_Fields

func CCR1*(r: TIM1_CCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR1=`*(r: var TIM1_CCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_CCR1_Fields

func CCR2*(r: TIM1_CCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR2=`*(r: var TIM1_CCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_CCR2_Fields

func CCR3*(r: TIM1_CCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR3=`*(r: var TIM1_CCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_CCR3_Fields

func CCR4*(r: TIM1_CCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR4=`*(r: var TIM1_CCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_CCR4_Fields

func DBL*(r: TIM1_DCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 12)

proc `DBL=`*(r: var TIM1_DCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 12)
  tmp.setMask((val shl 8).masked(8 .. 12))
  r = tmp.TIM1_DCR_Fields

func DBA*(r: TIM1_DCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `DBA=`*(r: var TIM1_DCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.TIM1_DCR_Fields

func DMAB*(r: TIM1_DMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DMAB=`*(r: var TIM1_DMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM1_DMAR_Fields

func REP*(r: TIM1_RCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `REP=`*(r: var TIM1_RCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.TIM1_RCR_Fields

func MOE*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `MOE=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM1_BDTR_Fields

func AOE*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `AOE=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM1_BDTR_Fields

func BKP*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `BKP=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM1_BDTR_Fields

func BKE*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BKE=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM1_BDTR_Fields

func OSSR*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OSSR=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM1_BDTR_Fields

func OSSI*(r: TIM1_BDTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OSSI=`*(r: var TIM1_BDTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM1_BDTR_Fields

func LOCK*(r: TIM1_BDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `LOCK=`*(r: var TIM1_BDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM1_BDTR_Fields

func DTG*(r: TIM1_BDTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DTG=`*(r: var TIM1_BDTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.TIM1_BDTR_Fields

type
  TIM2_CR1_Fields* = distinct uint32
  TIM2_CR2_Fields* = distinct uint32
  TIM2_SMCR_Fields* = distinct uint32
  TIM2_DIER_Fields* = distinct uint32
  TIM2_SR_Fields* = distinct uint32
  TIM2_EGR_Fields* = distinct uint32
  TIM2_CCMR1_Output_Fields* = distinct uint32
  TIM2_CCMR1_Input_Fields* = distinct uint32
  TIM2_CCMR2_Output_Fields* = distinct uint32
  TIM2_CCMR2_Input_Fields* = distinct uint32
  TIM2_CCER_Fields* = distinct uint32
  TIM2_CNT_Fields* = distinct uint32
  TIM2_PSC_Fields* = distinct uint32
  TIM2_ARR_Fields* = distinct uint32
  TIM2_CCR1_Fields* = distinct uint32
  TIM2_CCR2_Fields* = distinct uint32
  TIM2_CCR3_Fields* = distinct uint32
  TIM2_CCR4_Fields* = distinct uint32
  TIM2_DCR_Fields* = distinct uint32
  TIM2_DMAR_Fields* = distinct uint32
  TIM2_OR_Fields* = distinct uint32

proc read*(reg: TIM2_CR1_Type): TIM2_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CR1_Fields](reg.loc))

proc write*(reg: TIM2_CR1_Type, val: TIM2_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CR1_Fields](reg.loc), val)

proc write*(reg: TIM2_CR1_Type, CKD: uint32 = 0, ARPE: bool = false, CMS: uint32 = 0, DIR: bool = false, OPM: bool = false, URS: bool = false, UDIS: bool = false, CEN: bool = false) =
  var x: uint32
  x.setMask((CKD shl 8).masked(8 .. 9))
  x.setMask((ARPE.uint32 shl 7).masked(7 .. 7))
  x.setMask((CMS shl 5).masked(5 .. 6))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((OPM.uint32 shl 3).masked(3 .. 3))
  x.setMask((URS.uint32 shl 2).masked(2 .. 2))
  x.setMask((UDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_CR1_Fields

template modifyIt*(reg: TIM2_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CR2_Type): TIM2_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CR2_Fields](reg.loc))

proc write*(reg: TIM2_CR2_Type, val: TIM2_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CR2_Fields](reg.loc), val)

proc write*(reg: TIM2_CR2_Type, TI1S: bool = false, MMS: uint32 = 0, CCDS: bool = false) =
  var x: uint32
  x.setMask((TI1S.uint32 shl 7).masked(7 .. 7))
  x.setMask((MMS shl 4).masked(4 .. 6))
  x.setMask((CCDS.uint32 shl 3).masked(3 .. 3))
  reg.write x.TIM2_CR2_Fields

template modifyIt*(reg: TIM2_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_SMCR_Type): TIM2_SMCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_SMCR_Fields](reg.loc))

proc write*(reg: TIM2_SMCR_Type, val: TIM2_SMCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_SMCR_Fields](reg.loc), val)

proc write*(reg: TIM2_SMCR_Type, ETP: bool = false, ECE: bool = false, ETPS: uint32 = 0, ETF: uint32 = 0, MSM: bool = false, TS: uint32 = 0, SMS: uint32 = 0) =
  var x: uint32
  x.setMask((ETP.uint32 shl 15).masked(15 .. 15))
  x.setMask((ECE.uint32 shl 14).masked(14 .. 14))
  x.setMask((ETPS shl 12).masked(12 .. 13))
  x.setMask((ETF shl 8).masked(8 .. 11))
  x.setMask((MSM.uint32 shl 7).masked(7 .. 7))
  x.setMask((TS shl 4).masked(4 .. 6))
  x.setMask((SMS shl 0).masked(0 .. 2))
  reg.write x.TIM2_SMCR_Fields

template modifyIt*(reg: TIM2_SMCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_DIER_Type): TIM2_DIER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_DIER_Fields](reg.loc))

proc write*(reg: TIM2_DIER_Type, val: TIM2_DIER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_DIER_Fields](reg.loc), val)

proc write*(reg: TIM2_DIER_Type, TDE: bool = false, CC4DE: bool = false, CC3DE: bool = false, CC2DE: bool = false, CC1DE: bool = false, UDE: bool = false, TIE: bool = false, CC4IE: bool = false, CC3IE: bool = false, CC2IE: bool = false, CC1IE: bool = false, UIE: bool = false) =
  var x: uint32
  x.setMask((TDE.uint32 shl 14).masked(14 .. 14))
  x.setMask((CC4DE.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3DE.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2DE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1DE.uint32 shl 9).masked(9 .. 9))
  x.setMask((UDE.uint32 shl 8).masked(8 .. 8))
  x.setMask((TIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4IE.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IE.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IE.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_DIER_Fields

template modifyIt*(reg: TIM2_DIER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_SR_Type): TIM2_SR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_SR_Fields](reg.loc))

proc write*(reg: TIM2_SR_Type, val: TIM2_SR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_SR_Fields](reg.loc), val)

proc write*(reg: TIM2_SR_Type, CC4OF: bool = false, CC3OF: bool = false, CC2OF: bool = false, CC1OF: bool = false, TIF: bool = false, CC4IF: bool = false, CC3IF: bool = false, CC2IF: bool = false, CC1IF: bool = false, UIF: bool = false) =
  var x: uint32
  x.setMask((CC4OF.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3OF.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2OF.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1OF.uint32 shl 9).masked(9 .. 9))
  x.setMask((TIF.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4IF.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IF.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IF.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IF.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_SR_Fields

template modifyIt*(reg: TIM2_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: TIM2_EGR_Type, val: TIM2_EGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_EGR_Fields](reg.loc), val)

proc write*(reg: TIM2_EGR_Type, TG: bool = false, CC4G: bool = false, CC3G: bool = false, CC2G: bool = false, CC1G: bool = false, UG: bool = false) =
  var x: uint32
  x.setMask((TG.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4G.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3G.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2G.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1G.uint32 shl 1).masked(1 .. 1))
  x.setMask((UG.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_EGR_Fields

proc read*(reg: TIM2_CCMR1_Output_Type): TIM2_CCMR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCMR1_Output_Fields](reg.loc))

proc write*(reg: TIM2_CCMR1_Output_Type, val: TIM2_CCMR1_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CCMR1_Output_Fields](reg.loc), val)

proc write*(reg: TIM2_CCMR1_Output_Type, OC2CE: bool = false, OC2M: uint32 = 0, OC2PE: bool = false, OC2FE: bool = false, CC2S: uint32 = 0, OC1CE: bool = false, OC1M: uint32 = 0, OC1PE: bool = false, OC1FE: bool = false, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((OC2CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC2M shl 12).masked(12 .. 14))
  x.setMask((OC2PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC2FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((OC1CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC1M shl 4).masked(4 .. 6))
  x.setMask((OC1PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC1FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM2_CCMR1_Output_Fields

template modifyIt*(reg: TIM2_CCMR1_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CCMR1_Input_Type): TIM2_CCMR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCMR1_Input_Fields](reg.loc))

proc write*(reg: TIM2_CCMR1_Input_Type, val: TIM2_CCMR1_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CCMR1_Input_Fields](reg.loc), val)

proc write*(reg: TIM2_CCMR1_Input_Type, IC2F: uint32 = 0, IC2PCS: uint32 = 0, CC2S: uint32 = 0, IC1F: uint32 = 0, ICPCS: uint32 = 0, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((IC2F shl 12).masked(12 .. 15))
  x.setMask((IC2PCS shl 10).masked(10 .. 11))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((IC1F shl 4).masked(4 .. 7))
  x.setMask((ICPCS shl 2).masked(2 .. 3))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM2_CCMR1_Input_Fields

template modifyIt*(reg: TIM2_CCMR1_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CCMR2_Output_Type): TIM2_CCMR2_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCMR2_Output_Fields](reg.loc))

proc write*(reg: TIM2_CCMR2_Output_Type, val: TIM2_CCMR2_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CCMR2_Output_Fields](reg.loc), val)

proc write*(reg: TIM2_CCMR2_Output_Type, OC4CE: bool = false, OC4M: uint32 = 0, OC4PE: bool = false, OC4FE: bool = false, CC4S: uint32 = 0, OC3CE: bool = false, OC3M: uint32 = 0, OC3PE: bool = false, OC3FE: bool = false, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((OC4CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC4M shl 12).masked(12 .. 14))
  x.setMask((OC4PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC4FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((OC3CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC3M shl 4).masked(4 .. 6))
  x.setMask((OC3PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC3FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM2_CCMR2_Output_Fields

template modifyIt*(reg: TIM2_CCMR2_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CCMR2_Input_Type): TIM2_CCMR2_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCMR2_Input_Fields](reg.loc))

proc write*(reg: TIM2_CCMR2_Input_Type, val: TIM2_CCMR2_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CCMR2_Input_Fields](reg.loc), val)

proc write*(reg: TIM2_CCMR2_Input_Type, IC4F: uint32 = 0, IC4PSC: uint32 = 0, CC4S: uint32 = 0, IC3F: uint32 = 0, IC3PSC: uint32 = 0, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((IC4F shl 12).masked(12 .. 15))
  x.setMask((IC4PSC shl 10).masked(10 .. 11))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((IC3F shl 4).masked(4 .. 7))
  x.setMask((IC3PSC shl 2).masked(2 .. 3))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM2_CCMR2_Input_Fields

template modifyIt*(reg: TIM2_CCMR2_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CCER_Type): TIM2_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCER_Fields](reg.loc))

proc write*(reg: TIM2_CCER_Type, val: TIM2_CCER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CCER_Fields](reg.loc), val)

proc write*(reg: TIM2_CCER_Type, CC4NP: bool = false, CC4P: bool = false, CC4E: bool = false, CC3NP: bool = false, CC3P: bool = false, CC3E: bool = false, CC2NP: bool = false, CC2P: bool = false, CC2E: bool = false, CC1NP: bool = false, CC1P: bool = false, CC1E: bool = false) =
  var x: uint32
  x.setMask((CC4NP.uint32 shl 15).masked(15 .. 15))
  x.setMask((CC4P.uint32 shl 13).masked(13 .. 13))
  x.setMask((CC4E.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3NP.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC3P.uint32 shl 9).masked(9 .. 9))
  x.setMask((CC3E.uint32 shl 8).masked(8 .. 8))
  x.setMask((CC2NP.uint32 shl 7).masked(7 .. 7))
  x.setMask((CC2P.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC2E.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC1NP.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC1P.uint32 shl 1).masked(1 .. 1))
  x.setMask((CC1E.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM2_CCER_Fields

template modifyIt*(reg: TIM2_CCER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CNT_Type): TIM2_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CNT_Fields](reg.loc))

proc write*(reg: TIM2_CNT_Type, val: TIM2_CNT_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CNT_Fields](reg.loc), val)

proc write*(reg: TIM2_CNT_Type, CNT_H: uint32 = 0, CNT_L: uint32 = 0) =
  var x: uint32
  x.setMask((CNT_H shl 16).masked(16 .. 31))
  x.setMask((CNT_L shl 0).masked(0 .. 15))
  reg.write x.TIM2_CNT_Fields

template modifyIt*(reg: TIM2_CNT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_PSC_Type): TIM2_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_PSC_Fields](reg.loc))

proc write*(reg: TIM2_PSC_Type, val: TIM2_PSC_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_PSC_Fields](reg.loc), val)

proc write*(reg: TIM2_PSC_Type, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((PSC shl 0).masked(0 .. 15))
  reg.write x.TIM2_PSC_Fields

template modifyIt*(reg: TIM2_PSC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_ARR_Type): TIM2_ARR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_ARR_Fields](reg.loc))

proc write*(reg: TIM2_ARR_Type, val: TIM2_ARR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_ARR_Fields](reg.loc), val)

proc write*(reg: TIM2_ARR_Type, ARR_H: uint32 = 0, ARR_L: uint32 = 0) =
  var x: uint32
  x.setMask((ARR_H shl 16).masked(16 .. 31))
  x.setMask((ARR_L shl 0).masked(0 .. 15))
  reg.write x.TIM2_ARR_Fields

template modifyIt*(reg: TIM2_ARR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CCR1_Type): TIM2_CCR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCR1_Fields](reg.loc))

proc write*(reg: TIM2_CCR1_Type, val: TIM2_CCR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CCR1_Fields](reg.loc), val)

proc write*(reg: TIM2_CCR1_Type, CCR1_H: uint32 = 0, CCR1_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR1_H shl 16).masked(16 .. 31))
  x.setMask((CCR1_L shl 0).masked(0 .. 15))
  reg.write x.TIM2_CCR1_Fields

template modifyIt*(reg: TIM2_CCR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CCR2_Type): TIM2_CCR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCR2_Fields](reg.loc))

proc write*(reg: TIM2_CCR2_Type, val: TIM2_CCR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CCR2_Fields](reg.loc), val)

proc write*(reg: TIM2_CCR2_Type, CCR2_H: uint32 = 0, CCR2_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR2_H shl 16).masked(16 .. 31))
  x.setMask((CCR2_L shl 0).masked(0 .. 15))
  reg.write x.TIM2_CCR2_Fields

template modifyIt*(reg: TIM2_CCR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CCR3_Type): TIM2_CCR3_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCR3_Fields](reg.loc))

proc write*(reg: TIM2_CCR3_Type, val: TIM2_CCR3_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CCR3_Fields](reg.loc), val)

proc write*(reg: TIM2_CCR3_Type, CCR3_H: uint32 = 0, CCR3_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR3_H shl 16).masked(16 .. 31))
  x.setMask((CCR3_L shl 0).masked(0 .. 15))
  reg.write x.TIM2_CCR3_Fields

template modifyIt*(reg: TIM2_CCR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_CCR4_Type): TIM2_CCR4_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_CCR4_Fields](reg.loc))

proc write*(reg: TIM2_CCR4_Type, val: TIM2_CCR4_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_CCR4_Fields](reg.loc), val)

proc write*(reg: TIM2_CCR4_Type, CCR4_H: uint32 = 0, CCR4_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR4_H shl 16).masked(16 .. 31))
  x.setMask((CCR4_L shl 0).masked(0 .. 15))
  reg.write x.TIM2_CCR4_Fields

template modifyIt*(reg: TIM2_CCR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_DCR_Type): TIM2_DCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_DCR_Fields](reg.loc))

proc write*(reg: TIM2_DCR_Type, val: TIM2_DCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_DCR_Fields](reg.loc), val)

proc write*(reg: TIM2_DCR_Type, DBL: uint32 = 0, DBA: uint32 = 0) =
  var x: uint32
  x.setMask((DBL shl 8).masked(8 .. 12))
  x.setMask((DBA shl 0).masked(0 .. 4))
  reg.write x.TIM2_DCR_Fields

template modifyIt*(reg: TIM2_DCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_DMAR_Type): TIM2_DMAR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_DMAR_Fields](reg.loc))

proc write*(reg: TIM2_DMAR_Type, val: TIM2_DMAR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_DMAR_Fields](reg.loc), val)

proc write*(reg: TIM2_DMAR_Type, DMAB: uint32 = 0) =
  var x: uint32
  x.setMask((DMAB shl 0).masked(0 .. 15))
  reg.write x.TIM2_DMAR_Fields

template modifyIt*(reg: TIM2_DMAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM2_OR_Type): TIM2_OR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM2_OR_Fields](reg.loc))

proc write*(reg: TIM2_OR_Type, val: TIM2_OR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM2_OR_Fields](reg.loc), val)

proc write*(reg: TIM2_OR_Type, ITR1_RMP: uint32 = 0) =
  var x: uint32
  x.setMask((ITR1_RMP shl 10).masked(10 .. 11))
  reg.write x.TIM2_OR_Fields

template modifyIt*(reg: TIM2_OR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CKD*(r: TIM2_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CKD=`*(r: var TIM2_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM2_CR1_Fields

func ARPE*(r: TIM2_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARPE=`*(r: var TIM2_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_CR1_Fields

func CMS*(r: TIM2_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 6)

proc `CMS=`*(r: var TIM2_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 6)
  tmp.setMask((val shl 5).masked(5 .. 6))
  r = tmp.TIM2_CR1_Fields

func DIR*(r: TIM2_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var TIM2_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM2_CR1_Fields

func OPM*(r: TIM2_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OPM=`*(r: var TIM2_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_CR1_Fields

func URS*(r: TIM2_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `URS=`*(r: var TIM2_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_CR1_Fields

func UDIS*(r: TIM2_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `UDIS=`*(r: var TIM2_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM2_CR1_Fields

func CEN*(r: TIM2_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CEN=`*(r: var TIM2_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_CR1_Fields

func TI1S*(r: TIM2_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TI1S=`*(r: var TIM2_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_CR2_Fields

func MMS*(r: TIM2_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `MMS=`*(r: var TIM2_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM2_CR2_Fields

func CCDS*(r: TIM2_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CCDS=`*(r: var TIM2_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_CR2_Fields

func ETP*(r: TIM2_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ETP=`*(r: var TIM2_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM2_SMCR_Fields

func ECE*(r: TIM2_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ECE=`*(r: var TIM2_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM2_SMCR_Fields

func ETPS*(r: TIM2_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `ETPS=`*(r: var TIM2_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.TIM2_SMCR_Fields

func ETF*(r: TIM2_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `ETF=`*(r: var TIM2_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.TIM2_SMCR_Fields

func MSM*(r: TIM2_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MSM=`*(r: var TIM2_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_SMCR_Fields

func TS*(r: TIM2_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `TS=`*(r: var TIM2_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM2_SMCR_Fields

func SMS*(r: TIM2_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMS=`*(r: var TIM2_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.TIM2_SMCR_Fields

func TDE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TDE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM2_DIER_Fields

func CC4DE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4DE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM2_DIER_Fields

func CC3DE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3DE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM2_DIER_Fields

func CC2DE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2DE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM2_DIER_Fields

func CC1DE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1DE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM2_DIER_Fields

func UDE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `UDE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM2_DIER_Fields

func TIE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM2_DIER_Fields

func CC4IE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM2_DIER_Fields

func CC3IE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_DIER_Fields

func CC2IE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_DIER_Fields

func CC1IE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM2_DIER_Fields

func UIE*(r: TIM2_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIE=`*(r: var TIM2_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_DIER_Fields

func CC4OF*(r: TIM2_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4OF=`*(r: var TIM2_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM2_SR_Fields

func CC3OF*(r: TIM2_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3OF=`*(r: var TIM2_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM2_SR_Fields

func CC2OF*(r: TIM2_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2OF=`*(r: var TIM2_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM2_SR_Fields

func CC1OF*(r: TIM2_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1OF=`*(r: var TIM2_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM2_SR_Fields

func TIF*(r: TIM2_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIF=`*(r: var TIM2_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM2_SR_Fields

func CC4IF*(r: TIM2_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IF=`*(r: var TIM2_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM2_SR_Fields

func CC3IF*(r: TIM2_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IF=`*(r: var TIM2_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_SR_Fields

func CC2IF*(r: TIM2_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IF=`*(r: var TIM2_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_SR_Fields

func CC1IF*(r: TIM2_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IF=`*(r: var TIM2_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM2_SR_Fields

func UIF*(r: TIM2_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIF=`*(r: var TIM2_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_SR_Fields

proc `TG=`*(r: var TIM2_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM2_EGR_Fields

proc `CC4G=`*(r: var TIM2_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM2_EGR_Fields

proc `CC3G=`*(r: var TIM2_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_EGR_Fields

proc `CC2G=`*(r: var TIM2_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_EGR_Fields

proc `CC1G=`*(r: var TIM2_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM2_EGR_Fields

proc `UG=`*(r: var TIM2_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_EGR_Fields

func OC2CE*(r: TIM2_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC2CE=`*(r: var TIM2_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM2_CCMR1_Output_Fields

func OC2M*(r: TIM2_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC2M=`*(r: var TIM2_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM2_CCMR1_Output_Fields

func OC2PE*(r: TIM2_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC2PE=`*(r: var TIM2_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM2_CCMR1_Output_Fields

func OC2FE*(r: TIM2_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC2FE=`*(r: var TIM2_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM2_CCMR1_Output_Fields

func CC2S*(r: TIM2_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM2_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM2_CCMR1_Output_Fields

func OC1CE*(r: TIM2_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC1CE=`*(r: var TIM2_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_CCMR1_Output_Fields

func OC1M*(r: TIM2_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC1M=`*(r: var TIM2_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM2_CCMR1_Output_Fields

func OC1PE*(r: TIM2_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC1PE=`*(r: var TIM2_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_CCMR1_Output_Fields

func OC1FE*(r: TIM2_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC1FE=`*(r: var TIM2_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_CCMR1_Output_Fields

func CC1S*(r: TIM2_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM2_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM2_CCMR1_Output_Fields

func IC2F*(r: TIM2_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC2F=`*(r: var TIM2_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM2_CCMR1_Input_Fields

func IC2PCS*(r: TIM2_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC2PCS=`*(r: var TIM2_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM2_CCMR1_Input_Fields

func CC2S*(r: TIM2_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM2_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM2_CCMR1_Input_Fields

func IC1F*(r: TIM2_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC1F=`*(r: var TIM2_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM2_CCMR1_Input_Fields

func ICPCS*(r: TIM2_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `ICPCS=`*(r: var TIM2_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM2_CCMR1_Input_Fields

func CC1S*(r: TIM2_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM2_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM2_CCMR1_Input_Fields

func OC4CE*(r: TIM2_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC4CE=`*(r: var TIM2_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM2_CCMR2_Output_Fields

func OC4M*(r: TIM2_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC4M=`*(r: var TIM2_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM2_CCMR2_Output_Fields

func OC4PE*(r: TIM2_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC4PE=`*(r: var TIM2_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM2_CCMR2_Output_Fields

func OC4FE*(r: TIM2_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC4FE=`*(r: var TIM2_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM2_CCMR2_Output_Fields

func CC4S*(r: TIM2_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM2_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM2_CCMR2_Output_Fields

func OC3CE*(r: TIM2_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC3CE=`*(r: var TIM2_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_CCMR2_Output_Fields

func OC3M*(r: TIM2_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC3M=`*(r: var TIM2_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM2_CCMR2_Output_Fields

func OC3PE*(r: TIM2_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC3PE=`*(r: var TIM2_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_CCMR2_Output_Fields

func OC3FE*(r: TIM2_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC3FE=`*(r: var TIM2_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM2_CCMR2_Output_Fields

func CC3S*(r: TIM2_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM2_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM2_CCMR2_Output_Fields

func IC4F*(r: TIM2_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC4F=`*(r: var TIM2_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM2_CCMR2_Input_Fields

func IC4PSC*(r: TIM2_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC4PSC=`*(r: var TIM2_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM2_CCMR2_Input_Fields

func CC4S*(r: TIM2_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM2_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM2_CCMR2_Input_Fields

func IC3F*(r: TIM2_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC3F=`*(r: var TIM2_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM2_CCMR2_Input_Fields

func IC3PSC*(r: TIM2_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `IC3PSC=`*(r: var TIM2_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM2_CCMR2_Input_Fields

func CC3S*(r: TIM2_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM2_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM2_CCMR2_Input_Fields

func CC4NP*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `CC4NP=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM2_CCER_Fields

func CC4P*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CC4P=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM2_CCER_Fields

func CC4E*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4E=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM2_CCER_Fields

func CC3NP*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3NP=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM2_CCER_Fields

func CC3P*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC3P=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM2_CCER_Fields

func CC3E*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CC3E=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM2_CCER_Fields

func CC2NP*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `CC2NP=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM2_CCER_Fields

func CC2P*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CC2P=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM2_CCER_Fields

func CC2E*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC2E=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM2_CCER_Fields

func CC1NP*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC1NP=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM2_CCER_Fields

func CC1P*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1P=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM2_CCER_Fields

func CC1E*(r: TIM2_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CC1E=`*(r: var TIM2_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM2_CCER_Fields

func CNT_H*(r: TIM2_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CNT_H=`*(r: var TIM2_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM2_CNT_Fields

func CNT_L*(r: TIM2_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNT_L=`*(r: var TIM2_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_CNT_Fields

func PSC*(r: TIM2_PSC_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PSC=`*(r: var TIM2_PSC_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_PSC_Fields

func ARR_H*(r: TIM2_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `ARR_H=`*(r: var TIM2_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM2_ARR_Fields

func ARR_L*(r: TIM2_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ARR_L=`*(r: var TIM2_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_ARR_Fields

func CCR1_H*(r: TIM2_CCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR1_H=`*(r: var TIM2_CCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM2_CCR1_Fields

func CCR1_L*(r: TIM2_CCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR1_L=`*(r: var TIM2_CCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_CCR1_Fields

func CCR2_H*(r: TIM2_CCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR2_H=`*(r: var TIM2_CCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM2_CCR2_Fields

func CCR2_L*(r: TIM2_CCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR2_L=`*(r: var TIM2_CCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_CCR2_Fields

func CCR3_H*(r: TIM2_CCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR3_H=`*(r: var TIM2_CCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM2_CCR3_Fields

func CCR3_L*(r: TIM2_CCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR3_L=`*(r: var TIM2_CCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_CCR3_Fields

func CCR4_H*(r: TIM2_CCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR4_H=`*(r: var TIM2_CCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM2_CCR4_Fields

func CCR4_L*(r: TIM2_CCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR4_L=`*(r: var TIM2_CCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_CCR4_Fields

func DBL*(r: TIM2_DCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 12)

proc `DBL=`*(r: var TIM2_DCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 12)
  tmp.setMask((val shl 8).masked(8 .. 12))
  r = tmp.TIM2_DCR_Fields

func DBA*(r: TIM2_DCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `DBA=`*(r: var TIM2_DCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.TIM2_DCR_Fields

func DMAB*(r: TIM2_DMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DMAB=`*(r: var TIM2_DMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM2_DMAR_Fields

func ITR1_RMP*(r: TIM2_OR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `ITR1_RMP=`*(r: var TIM2_OR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM2_OR_Fields

type
  TIM3_CR1_Fields* = distinct uint32
  TIM3_CR2_Fields* = distinct uint32
  TIM3_SMCR_Fields* = distinct uint32
  TIM3_DIER_Fields* = distinct uint32
  TIM3_SR_Fields* = distinct uint32
  TIM3_EGR_Fields* = distinct uint32
  TIM3_CCMR1_Output_Fields* = distinct uint32
  TIM3_CCMR1_Input_Fields* = distinct uint32
  TIM3_CCMR2_Output_Fields* = distinct uint32
  TIM3_CCMR2_Input_Fields* = distinct uint32
  TIM3_CCER_Fields* = distinct uint32
  TIM3_CNT_Fields* = distinct uint32
  TIM3_PSC_Fields* = distinct uint32
  TIM3_ARR_Fields* = distinct uint32
  TIM3_CCR1_Fields* = distinct uint32
  TIM3_CCR2_Fields* = distinct uint32
  TIM3_CCR3_Fields* = distinct uint32
  TIM3_CCR4_Fields* = distinct uint32
  TIM3_DCR_Fields* = distinct uint32
  TIM3_DMAR_Fields* = distinct uint32

proc read*(reg: TIM3_CR1_Type): TIM3_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CR1_Fields](reg.loc))

proc write*(reg: TIM3_CR1_Type, val: TIM3_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CR1_Fields](reg.loc), val)

proc write*(reg: TIM3_CR1_Type, CKD: uint32 = 0, ARPE: bool = false, CMS: uint32 = 0, DIR: bool = false, OPM: bool = false, URS: bool = false, UDIS: bool = false, CEN: bool = false) =
  var x: uint32
  x.setMask((CKD shl 8).masked(8 .. 9))
  x.setMask((ARPE.uint32 shl 7).masked(7 .. 7))
  x.setMask((CMS shl 5).masked(5 .. 6))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((OPM.uint32 shl 3).masked(3 .. 3))
  x.setMask((URS.uint32 shl 2).masked(2 .. 2))
  x.setMask((UDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM3_CR1_Fields

template modifyIt*(reg: TIM3_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_CR2_Type): TIM3_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CR2_Fields](reg.loc))

proc write*(reg: TIM3_CR2_Type, val: TIM3_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CR2_Fields](reg.loc), val)

proc write*(reg: TIM3_CR2_Type, TI1S: bool = false, MMS: uint32 = 0, CCDS: bool = false) =
  var x: uint32
  x.setMask((TI1S.uint32 shl 7).masked(7 .. 7))
  x.setMask((MMS shl 4).masked(4 .. 6))
  x.setMask((CCDS.uint32 shl 3).masked(3 .. 3))
  reg.write x.TIM3_CR2_Fields

template modifyIt*(reg: TIM3_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_SMCR_Type): TIM3_SMCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_SMCR_Fields](reg.loc))

proc write*(reg: TIM3_SMCR_Type, val: TIM3_SMCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_SMCR_Fields](reg.loc), val)

proc write*(reg: TIM3_SMCR_Type, ETP: bool = false, ECE: bool = false, ETPS: uint32 = 0, ETF: uint32 = 0, MSM: bool = false, TS: uint32 = 0, SMS: uint32 = 0) =
  var x: uint32
  x.setMask((ETP.uint32 shl 15).masked(15 .. 15))
  x.setMask((ECE.uint32 shl 14).masked(14 .. 14))
  x.setMask((ETPS shl 12).masked(12 .. 13))
  x.setMask((ETF shl 8).masked(8 .. 11))
  x.setMask((MSM.uint32 shl 7).masked(7 .. 7))
  x.setMask((TS shl 4).masked(4 .. 6))
  x.setMask((SMS shl 0).masked(0 .. 2))
  reg.write x.TIM3_SMCR_Fields

template modifyIt*(reg: TIM3_SMCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_DIER_Type): TIM3_DIER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_DIER_Fields](reg.loc))

proc write*(reg: TIM3_DIER_Type, val: TIM3_DIER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_DIER_Fields](reg.loc), val)

proc write*(reg: TIM3_DIER_Type, TDE: bool = false, CC4DE: bool = false, CC3DE: bool = false, CC2DE: bool = false, CC1DE: bool = false, UDE: bool = false, TIE: bool = false, CC4IE: bool = false, CC3IE: bool = false, CC2IE: bool = false, CC1IE: bool = false, UIE: bool = false) =
  var x: uint32
  x.setMask((TDE.uint32 shl 14).masked(14 .. 14))
  x.setMask((CC4DE.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3DE.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2DE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1DE.uint32 shl 9).masked(9 .. 9))
  x.setMask((UDE.uint32 shl 8).masked(8 .. 8))
  x.setMask((TIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4IE.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IE.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IE.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM3_DIER_Fields

template modifyIt*(reg: TIM3_DIER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_SR_Type): TIM3_SR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_SR_Fields](reg.loc))

proc write*(reg: TIM3_SR_Type, val: TIM3_SR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_SR_Fields](reg.loc), val)

proc write*(reg: TIM3_SR_Type, CC4OF: bool = false, CC3OF: bool = false, CC2OF: bool = false, CC1OF: bool = false, TIF: bool = false, CC4IF: bool = false, CC3IF: bool = false, CC2IF: bool = false, CC1IF: bool = false, UIF: bool = false) =
  var x: uint32
  x.setMask((CC4OF.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3OF.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2OF.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1OF.uint32 shl 9).masked(9 .. 9))
  x.setMask((TIF.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4IF.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IF.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IF.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IF.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM3_SR_Fields

template modifyIt*(reg: TIM3_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: TIM3_EGR_Type, val: TIM3_EGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_EGR_Fields](reg.loc), val)

proc write*(reg: TIM3_EGR_Type, TG: bool = false, CC4G: bool = false, CC3G: bool = false, CC2G: bool = false, CC1G: bool = false, UG: bool = false) =
  var x: uint32
  x.setMask((TG.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4G.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3G.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2G.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1G.uint32 shl 1).masked(1 .. 1))
  x.setMask((UG.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM3_EGR_Fields

proc read*(reg: TIM3_CCMR1_Output_Type): TIM3_CCMR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CCMR1_Output_Fields](reg.loc))

proc write*(reg: TIM3_CCMR1_Output_Type, val: TIM3_CCMR1_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CCMR1_Output_Fields](reg.loc), val)

proc write*(reg: TIM3_CCMR1_Output_Type, OC2CE: bool = false, OC2M: uint32 = 0, OC2PE: bool = false, OC2FE: bool = false, CC2S: uint32 = 0, OC1CE: bool = false, OC1M: uint32 = 0, OC1PE: bool = false, OC1FE: bool = false, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((OC2CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC2M shl 12).masked(12 .. 14))
  x.setMask((OC2PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC2FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((OC1CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC1M shl 4).masked(4 .. 6))
  x.setMask((OC1PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC1FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM3_CCMR1_Output_Fields

template modifyIt*(reg: TIM3_CCMR1_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_CCMR1_Input_Type): TIM3_CCMR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CCMR1_Input_Fields](reg.loc))

proc write*(reg: TIM3_CCMR1_Input_Type, val: TIM3_CCMR1_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CCMR1_Input_Fields](reg.loc), val)

proc write*(reg: TIM3_CCMR1_Input_Type, IC2F: uint32 = 0, IC2PCS: uint32 = 0, CC2S: uint32 = 0, IC1F: uint32 = 0, ICPCS: uint32 = 0, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((IC2F shl 12).masked(12 .. 15))
  x.setMask((IC2PCS shl 10).masked(10 .. 11))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((IC1F shl 4).masked(4 .. 7))
  x.setMask((ICPCS shl 2).masked(2 .. 3))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM3_CCMR1_Input_Fields

template modifyIt*(reg: TIM3_CCMR1_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_CCMR2_Output_Type): TIM3_CCMR2_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CCMR2_Output_Fields](reg.loc))

proc write*(reg: TIM3_CCMR2_Output_Type, val: TIM3_CCMR2_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CCMR2_Output_Fields](reg.loc), val)

proc write*(reg: TIM3_CCMR2_Output_Type, OC4CE: bool = false, OC4M: uint32 = 0, OC4PE: bool = false, OC4FE: bool = false, CC4S: uint32 = 0, OC3CE: bool = false, OC3M: uint32 = 0, OC3PE: bool = false, OC3FE: bool = false, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((OC4CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC4M shl 12).masked(12 .. 14))
  x.setMask((OC4PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC4FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((OC3CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC3M shl 4).masked(4 .. 6))
  x.setMask((OC3PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC3FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM3_CCMR2_Output_Fields

template modifyIt*(reg: TIM3_CCMR2_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_CCMR2_Input_Type): TIM3_CCMR2_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CCMR2_Input_Fields](reg.loc))

proc write*(reg: TIM3_CCMR2_Input_Type, val: TIM3_CCMR2_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CCMR2_Input_Fields](reg.loc), val)

proc write*(reg: TIM3_CCMR2_Input_Type, IC4F: uint32 = 0, IC4PSC: uint32 = 0, CC4S: uint32 = 0, IC3F: uint32 = 0, IC3PSC: uint32 = 0, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((IC4F shl 12).masked(12 .. 15))
  x.setMask((IC4PSC shl 10).masked(10 .. 11))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((IC3F shl 4).masked(4 .. 7))
  x.setMask((IC3PSC shl 2).masked(2 .. 3))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM3_CCMR2_Input_Fields

template modifyIt*(reg: TIM3_CCMR2_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_CCER_Type): TIM3_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CCER_Fields](reg.loc))

proc write*(reg: TIM3_CCER_Type, val: TIM3_CCER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CCER_Fields](reg.loc), val)

proc write*(reg: TIM3_CCER_Type, CC4NP: bool = false, CC4P: bool = false, CC4E: bool = false, CC3NP: bool = false, CC3P: bool = false, CC3E: bool = false, CC2NP: bool = false, CC2P: bool = false, CC2E: bool = false, CC1NP: bool = false, CC1P: bool = false, CC1E: bool = false) =
  var x: uint32
  x.setMask((CC4NP.uint32 shl 15).masked(15 .. 15))
  x.setMask((CC4P.uint32 shl 13).masked(13 .. 13))
  x.setMask((CC4E.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3NP.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC3P.uint32 shl 9).masked(9 .. 9))
  x.setMask((CC3E.uint32 shl 8).masked(8 .. 8))
  x.setMask((CC2NP.uint32 shl 7).masked(7 .. 7))
  x.setMask((CC2P.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC2E.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC1NP.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC1P.uint32 shl 1).masked(1 .. 1))
  x.setMask((CC1E.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM3_CCER_Fields

template modifyIt*(reg: TIM3_CCER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_CNT_Type): TIM3_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CNT_Fields](reg.loc))

proc write*(reg: TIM3_CNT_Type, val: TIM3_CNT_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CNT_Fields](reg.loc), val)

proc write*(reg: TIM3_CNT_Type, CNT_H: uint32 = 0, CNT_L: uint32 = 0) =
  var x: uint32
  x.setMask((CNT_H shl 16).masked(16 .. 31))
  x.setMask((CNT_L shl 0).masked(0 .. 15))
  reg.write x.TIM3_CNT_Fields

template modifyIt*(reg: TIM3_CNT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_PSC_Type): TIM3_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_PSC_Fields](reg.loc))

proc write*(reg: TIM3_PSC_Type, val: TIM3_PSC_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_PSC_Fields](reg.loc), val)

proc write*(reg: TIM3_PSC_Type, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((PSC shl 0).masked(0 .. 15))
  reg.write x.TIM3_PSC_Fields

template modifyIt*(reg: TIM3_PSC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_ARR_Type): TIM3_ARR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_ARR_Fields](reg.loc))

proc write*(reg: TIM3_ARR_Type, val: TIM3_ARR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_ARR_Fields](reg.loc), val)

proc write*(reg: TIM3_ARR_Type, ARR_H: uint32 = 0, ARR_L: uint32 = 0) =
  var x: uint32
  x.setMask((ARR_H shl 16).masked(16 .. 31))
  x.setMask((ARR_L shl 0).masked(0 .. 15))
  reg.write x.TIM3_ARR_Fields

template modifyIt*(reg: TIM3_ARR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_CCR1_Type): TIM3_CCR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CCR1_Fields](reg.loc))

proc write*(reg: TIM3_CCR1_Type, val: TIM3_CCR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CCR1_Fields](reg.loc), val)

proc write*(reg: TIM3_CCR1_Type, CCR1_H: uint32 = 0, CCR1_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR1_H shl 16).masked(16 .. 31))
  x.setMask((CCR1_L shl 0).masked(0 .. 15))
  reg.write x.TIM3_CCR1_Fields

template modifyIt*(reg: TIM3_CCR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_CCR2_Type): TIM3_CCR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CCR2_Fields](reg.loc))

proc write*(reg: TIM3_CCR2_Type, val: TIM3_CCR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CCR2_Fields](reg.loc), val)

proc write*(reg: TIM3_CCR2_Type, CCR2_H: uint32 = 0, CCR2_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR2_H shl 16).masked(16 .. 31))
  x.setMask((CCR2_L shl 0).masked(0 .. 15))
  reg.write x.TIM3_CCR2_Fields

template modifyIt*(reg: TIM3_CCR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_CCR3_Type): TIM3_CCR3_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CCR3_Fields](reg.loc))

proc write*(reg: TIM3_CCR3_Type, val: TIM3_CCR3_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CCR3_Fields](reg.loc), val)

proc write*(reg: TIM3_CCR3_Type, CCR3_H: uint32 = 0, CCR3_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR3_H shl 16).masked(16 .. 31))
  x.setMask((CCR3_L shl 0).masked(0 .. 15))
  reg.write x.TIM3_CCR3_Fields

template modifyIt*(reg: TIM3_CCR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_CCR4_Type): TIM3_CCR4_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_CCR4_Fields](reg.loc))

proc write*(reg: TIM3_CCR4_Type, val: TIM3_CCR4_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_CCR4_Fields](reg.loc), val)

proc write*(reg: TIM3_CCR4_Type, CCR4_H: uint32 = 0, CCR4_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR4_H shl 16).masked(16 .. 31))
  x.setMask((CCR4_L shl 0).masked(0 .. 15))
  reg.write x.TIM3_CCR4_Fields

template modifyIt*(reg: TIM3_CCR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_DCR_Type): TIM3_DCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_DCR_Fields](reg.loc))

proc write*(reg: TIM3_DCR_Type, val: TIM3_DCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_DCR_Fields](reg.loc), val)

proc write*(reg: TIM3_DCR_Type, DBL: uint32 = 0, DBA: uint32 = 0) =
  var x: uint32
  x.setMask((DBL shl 8).masked(8 .. 12))
  x.setMask((DBA shl 0).masked(0 .. 4))
  reg.write x.TIM3_DCR_Fields

template modifyIt*(reg: TIM3_DCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM3_DMAR_Type): TIM3_DMAR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM3_DMAR_Fields](reg.loc))

proc write*(reg: TIM3_DMAR_Type, val: TIM3_DMAR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM3_DMAR_Fields](reg.loc), val)

proc write*(reg: TIM3_DMAR_Type, DMAB: uint32 = 0) =
  var x: uint32
  x.setMask((DMAB shl 0).masked(0 .. 15))
  reg.write x.TIM3_DMAR_Fields

template modifyIt*(reg: TIM3_DMAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CKD*(r: TIM3_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CKD=`*(r: var TIM3_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM3_CR1_Fields

func ARPE*(r: TIM3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARPE=`*(r: var TIM3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM3_CR1_Fields

func CMS*(r: TIM3_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 6)

proc `CMS=`*(r: var TIM3_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 6)
  tmp.setMask((val shl 5).masked(5 .. 6))
  r = tmp.TIM3_CR1_Fields

func DIR*(r: TIM3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var TIM3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM3_CR1_Fields

func OPM*(r: TIM3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OPM=`*(r: var TIM3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM3_CR1_Fields

func URS*(r: TIM3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `URS=`*(r: var TIM3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM3_CR1_Fields

func UDIS*(r: TIM3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `UDIS=`*(r: var TIM3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM3_CR1_Fields

func CEN*(r: TIM3_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CEN=`*(r: var TIM3_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM3_CR1_Fields

func TI1S*(r: TIM3_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TI1S=`*(r: var TIM3_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM3_CR2_Fields

func MMS*(r: TIM3_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `MMS=`*(r: var TIM3_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM3_CR2_Fields

func CCDS*(r: TIM3_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CCDS=`*(r: var TIM3_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM3_CR2_Fields

func ETP*(r: TIM3_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ETP=`*(r: var TIM3_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM3_SMCR_Fields

func ECE*(r: TIM3_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ECE=`*(r: var TIM3_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM3_SMCR_Fields

func ETPS*(r: TIM3_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `ETPS=`*(r: var TIM3_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.TIM3_SMCR_Fields

func ETF*(r: TIM3_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `ETF=`*(r: var TIM3_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.TIM3_SMCR_Fields

func MSM*(r: TIM3_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MSM=`*(r: var TIM3_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM3_SMCR_Fields

func TS*(r: TIM3_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `TS=`*(r: var TIM3_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM3_SMCR_Fields

func SMS*(r: TIM3_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMS=`*(r: var TIM3_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.TIM3_SMCR_Fields

func TDE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TDE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM3_DIER_Fields

func CC4DE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4DE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM3_DIER_Fields

func CC3DE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3DE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM3_DIER_Fields

func CC2DE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2DE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM3_DIER_Fields

func CC1DE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1DE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM3_DIER_Fields

func UDE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `UDE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM3_DIER_Fields

func TIE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM3_DIER_Fields

func CC4IE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM3_DIER_Fields

func CC3IE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM3_DIER_Fields

func CC2IE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM3_DIER_Fields

func CC1IE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM3_DIER_Fields

func UIE*(r: TIM3_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIE=`*(r: var TIM3_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM3_DIER_Fields

func CC4OF*(r: TIM3_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4OF=`*(r: var TIM3_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM3_SR_Fields

func CC3OF*(r: TIM3_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3OF=`*(r: var TIM3_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM3_SR_Fields

func CC2OF*(r: TIM3_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2OF=`*(r: var TIM3_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM3_SR_Fields

func CC1OF*(r: TIM3_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1OF=`*(r: var TIM3_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM3_SR_Fields

func TIF*(r: TIM3_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIF=`*(r: var TIM3_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM3_SR_Fields

func CC4IF*(r: TIM3_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IF=`*(r: var TIM3_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM3_SR_Fields

func CC3IF*(r: TIM3_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IF=`*(r: var TIM3_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM3_SR_Fields

func CC2IF*(r: TIM3_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IF=`*(r: var TIM3_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM3_SR_Fields

func CC1IF*(r: TIM3_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IF=`*(r: var TIM3_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM3_SR_Fields

func UIF*(r: TIM3_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIF=`*(r: var TIM3_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM3_SR_Fields

proc `TG=`*(r: var TIM3_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM3_EGR_Fields

proc `CC4G=`*(r: var TIM3_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM3_EGR_Fields

proc `CC3G=`*(r: var TIM3_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM3_EGR_Fields

proc `CC2G=`*(r: var TIM3_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM3_EGR_Fields

proc `CC1G=`*(r: var TIM3_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM3_EGR_Fields

proc `UG=`*(r: var TIM3_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM3_EGR_Fields

func OC2CE*(r: TIM3_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC2CE=`*(r: var TIM3_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM3_CCMR1_Output_Fields

func OC2M*(r: TIM3_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC2M=`*(r: var TIM3_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM3_CCMR1_Output_Fields

func OC2PE*(r: TIM3_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC2PE=`*(r: var TIM3_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM3_CCMR1_Output_Fields

func OC2FE*(r: TIM3_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC2FE=`*(r: var TIM3_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM3_CCMR1_Output_Fields

func CC2S*(r: TIM3_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM3_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM3_CCMR1_Output_Fields

func OC1CE*(r: TIM3_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC1CE=`*(r: var TIM3_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM3_CCMR1_Output_Fields

func OC1M*(r: TIM3_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC1M=`*(r: var TIM3_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM3_CCMR1_Output_Fields

func OC1PE*(r: TIM3_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC1PE=`*(r: var TIM3_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM3_CCMR1_Output_Fields

func OC1FE*(r: TIM3_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC1FE=`*(r: var TIM3_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM3_CCMR1_Output_Fields

func CC1S*(r: TIM3_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM3_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM3_CCMR1_Output_Fields

func IC2F*(r: TIM3_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC2F=`*(r: var TIM3_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM3_CCMR1_Input_Fields

func IC2PCS*(r: TIM3_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC2PCS=`*(r: var TIM3_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM3_CCMR1_Input_Fields

func CC2S*(r: TIM3_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM3_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM3_CCMR1_Input_Fields

func IC1F*(r: TIM3_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC1F=`*(r: var TIM3_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM3_CCMR1_Input_Fields

func ICPCS*(r: TIM3_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `ICPCS=`*(r: var TIM3_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM3_CCMR1_Input_Fields

func CC1S*(r: TIM3_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM3_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM3_CCMR1_Input_Fields

func OC4CE*(r: TIM3_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC4CE=`*(r: var TIM3_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM3_CCMR2_Output_Fields

func OC4M*(r: TIM3_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC4M=`*(r: var TIM3_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM3_CCMR2_Output_Fields

func OC4PE*(r: TIM3_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC4PE=`*(r: var TIM3_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM3_CCMR2_Output_Fields

func OC4FE*(r: TIM3_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC4FE=`*(r: var TIM3_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM3_CCMR2_Output_Fields

func CC4S*(r: TIM3_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM3_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM3_CCMR2_Output_Fields

func OC3CE*(r: TIM3_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC3CE=`*(r: var TIM3_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM3_CCMR2_Output_Fields

func OC3M*(r: TIM3_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC3M=`*(r: var TIM3_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM3_CCMR2_Output_Fields

func OC3PE*(r: TIM3_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC3PE=`*(r: var TIM3_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM3_CCMR2_Output_Fields

func OC3FE*(r: TIM3_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC3FE=`*(r: var TIM3_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM3_CCMR2_Output_Fields

func CC3S*(r: TIM3_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM3_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM3_CCMR2_Output_Fields

func IC4F*(r: TIM3_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC4F=`*(r: var TIM3_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM3_CCMR2_Input_Fields

func IC4PSC*(r: TIM3_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC4PSC=`*(r: var TIM3_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM3_CCMR2_Input_Fields

func CC4S*(r: TIM3_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM3_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM3_CCMR2_Input_Fields

func IC3F*(r: TIM3_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC3F=`*(r: var TIM3_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM3_CCMR2_Input_Fields

func IC3PSC*(r: TIM3_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `IC3PSC=`*(r: var TIM3_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM3_CCMR2_Input_Fields

func CC3S*(r: TIM3_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM3_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM3_CCMR2_Input_Fields

func CC4NP*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `CC4NP=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM3_CCER_Fields

func CC4P*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CC4P=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM3_CCER_Fields

func CC4E*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4E=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM3_CCER_Fields

func CC3NP*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3NP=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM3_CCER_Fields

func CC3P*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC3P=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM3_CCER_Fields

func CC3E*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CC3E=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM3_CCER_Fields

func CC2NP*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `CC2NP=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM3_CCER_Fields

func CC2P*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CC2P=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM3_CCER_Fields

func CC2E*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC2E=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM3_CCER_Fields

func CC1NP*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC1NP=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM3_CCER_Fields

func CC1P*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1P=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM3_CCER_Fields

func CC1E*(r: TIM3_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CC1E=`*(r: var TIM3_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM3_CCER_Fields

func CNT_H*(r: TIM3_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CNT_H=`*(r: var TIM3_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM3_CNT_Fields

func CNT_L*(r: TIM3_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNT_L=`*(r: var TIM3_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM3_CNT_Fields

func PSC*(r: TIM3_PSC_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PSC=`*(r: var TIM3_PSC_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM3_PSC_Fields

func ARR_H*(r: TIM3_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `ARR_H=`*(r: var TIM3_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM3_ARR_Fields

func ARR_L*(r: TIM3_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ARR_L=`*(r: var TIM3_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM3_ARR_Fields

func CCR1_H*(r: TIM3_CCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR1_H=`*(r: var TIM3_CCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM3_CCR1_Fields

func CCR1_L*(r: TIM3_CCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR1_L=`*(r: var TIM3_CCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM3_CCR1_Fields

func CCR2_H*(r: TIM3_CCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR2_H=`*(r: var TIM3_CCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM3_CCR2_Fields

func CCR2_L*(r: TIM3_CCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR2_L=`*(r: var TIM3_CCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM3_CCR2_Fields

func CCR3_H*(r: TIM3_CCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR3_H=`*(r: var TIM3_CCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM3_CCR3_Fields

func CCR3_L*(r: TIM3_CCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR3_L=`*(r: var TIM3_CCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM3_CCR3_Fields

func CCR4_H*(r: TIM3_CCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR4_H=`*(r: var TIM3_CCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM3_CCR4_Fields

func CCR4_L*(r: TIM3_CCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR4_L=`*(r: var TIM3_CCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM3_CCR4_Fields

func DBL*(r: TIM3_DCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 12)

proc `DBL=`*(r: var TIM3_DCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 12)
  tmp.setMask((val shl 8).masked(8 .. 12))
  r = tmp.TIM3_DCR_Fields

func DBA*(r: TIM3_DCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `DBA=`*(r: var TIM3_DCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.TIM3_DCR_Fields

func DMAB*(r: TIM3_DMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DMAB=`*(r: var TIM3_DMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM3_DMAR_Fields

type
  TIM5_CR1_Fields* = distinct uint32
  TIM5_CR2_Fields* = distinct uint32
  TIM5_SMCR_Fields* = distinct uint32
  TIM5_DIER_Fields* = distinct uint32
  TIM5_SR_Fields* = distinct uint32
  TIM5_EGR_Fields* = distinct uint32
  TIM5_CCMR1_Output_Fields* = distinct uint32
  TIM5_CCMR1_Input_Fields* = distinct uint32
  TIM5_CCMR2_Output_Fields* = distinct uint32
  TIM5_CCMR2_Input_Fields* = distinct uint32
  TIM5_CCER_Fields* = distinct uint32
  TIM5_CNT_Fields* = distinct uint32
  TIM5_PSC_Fields* = distinct uint32
  TIM5_ARR_Fields* = distinct uint32
  TIM5_CCR1_Fields* = distinct uint32
  TIM5_CCR2_Fields* = distinct uint32
  TIM5_CCR3_Fields* = distinct uint32
  TIM5_CCR4_Fields* = distinct uint32
  TIM5_DCR_Fields* = distinct uint32
  TIM5_DMAR_Fields* = distinct uint32
  TIM5_OR_Fields* = distinct uint32

proc read*(reg: TIM5_CR1_Type): TIM5_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CR1_Fields](reg.loc))

proc write*(reg: TIM5_CR1_Type, val: TIM5_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CR1_Fields](reg.loc), val)

proc write*(reg: TIM5_CR1_Type, CKD: uint32 = 0, ARPE: bool = false, CMS: uint32 = 0, DIR: bool = false, OPM: bool = false, URS: bool = false, UDIS: bool = false, CEN: bool = false) =
  var x: uint32
  x.setMask((CKD shl 8).masked(8 .. 9))
  x.setMask((ARPE.uint32 shl 7).masked(7 .. 7))
  x.setMask((CMS shl 5).masked(5 .. 6))
  x.setMask((DIR.uint32 shl 4).masked(4 .. 4))
  x.setMask((OPM.uint32 shl 3).masked(3 .. 3))
  x.setMask((URS.uint32 shl 2).masked(2 .. 2))
  x.setMask((UDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM5_CR1_Fields

template modifyIt*(reg: TIM5_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_CR2_Type): TIM5_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CR2_Fields](reg.loc))

proc write*(reg: TIM5_CR2_Type, val: TIM5_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CR2_Fields](reg.loc), val)

proc write*(reg: TIM5_CR2_Type, TI1S: bool = false, MMS: uint32 = 0, CCDS: bool = false) =
  var x: uint32
  x.setMask((TI1S.uint32 shl 7).masked(7 .. 7))
  x.setMask((MMS shl 4).masked(4 .. 6))
  x.setMask((CCDS.uint32 shl 3).masked(3 .. 3))
  reg.write x.TIM5_CR2_Fields

template modifyIt*(reg: TIM5_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_SMCR_Type): TIM5_SMCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_SMCR_Fields](reg.loc))

proc write*(reg: TIM5_SMCR_Type, val: TIM5_SMCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_SMCR_Fields](reg.loc), val)

proc write*(reg: TIM5_SMCR_Type, ETP: bool = false, ECE: bool = false, ETPS: uint32 = 0, ETF: uint32 = 0, MSM: bool = false, TS: uint32 = 0, SMS: uint32 = 0) =
  var x: uint32
  x.setMask((ETP.uint32 shl 15).masked(15 .. 15))
  x.setMask((ECE.uint32 shl 14).masked(14 .. 14))
  x.setMask((ETPS shl 12).masked(12 .. 13))
  x.setMask((ETF shl 8).masked(8 .. 11))
  x.setMask((MSM.uint32 shl 7).masked(7 .. 7))
  x.setMask((TS shl 4).masked(4 .. 6))
  x.setMask((SMS shl 0).masked(0 .. 2))
  reg.write x.TIM5_SMCR_Fields

template modifyIt*(reg: TIM5_SMCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_DIER_Type): TIM5_DIER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_DIER_Fields](reg.loc))

proc write*(reg: TIM5_DIER_Type, val: TIM5_DIER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_DIER_Fields](reg.loc), val)

proc write*(reg: TIM5_DIER_Type, TDE: bool = false, CC4DE: bool = false, CC3DE: bool = false, CC2DE: bool = false, CC1DE: bool = false, UDE: bool = false, TIE: bool = false, CC4IE: bool = false, CC3IE: bool = false, CC2IE: bool = false, CC1IE: bool = false, UIE: bool = false) =
  var x: uint32
  x.setMask((TDE.uint32 shl 14).masked(14 .. 14))
  x.setMask((CC4DE.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3DE.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2DE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1DE.uint32 shl 9).masked(9 .. 9))
  x.setMask((UDE.uint32 shl 8).masked(8 .. 8))
  x.setMask((TIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4IE.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IE.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IE.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM5_DIER_Fields

template modifyIt*(reg: TIM5_DIER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_SR_Type): TIM5_SR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_SR_Fields](reg.loc))

proc write*(reg: TIM5_SR_Type, val: TIM5_SR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_SR_Fields](reg.loc), val)

proc write*(reg: TIM5_SR_Type, CC4OF: bool = false, CC3OF: bool = false, CC2OF: bool = false, CC1OF: bool = false, TIF: bool = false, CC4IF: bool = false, CC3IF: bool = false, CC2IF: bool = false, CC1IF: bool = false, UIF: bool = false) =
  var x: uint32
  x.setMask((CC4OF.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3OF.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC2OF.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1OF.uint32 shl 9).masked(9 .. 9))
  x.setMask((TIF.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4IF.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3IF.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2IF.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IF.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM5_SR_Fields

template modifyIt*(reg: TIM5_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: TIM5_EGR_Type, val: TIM5_EGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_EGR_Fields](reg.loc), val)

proc write*(reg: TIM5_EGR_Type, TG: bool = false, CC4G: bool = false, CC3G: bool = false, CC2G: bool = false, CC1G: bool = false, UG: bool = false) =
  var x: uint32
  x.setMask((TG.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC4G.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC3G.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC2G.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1G.uint32 shl 1).masked(1 .. 1))
  x.setMask((UG.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM5_EGR_Fields

proc read*(reg: TIM5_CCMR1_Output_Type): TIM5_CCMR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CCMR1_Output_Fields](reg.loc))

proc write*(reg: TIM5_CCMR1_Output_Type, val: TIM5_CCMR1_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CCMR1_Output_Fields](reg.loc), val)

proc write*(reg: TIM5_CCMR1_Output_Type, OC2CE: bool = false, OC2M: uint32 = 0, OC2PE: bool = false, OC2FE: bool = false, CC2S: uint32 = 0, OC1CE: bool = false, OC1M: uint32 = 0, OC1PE: bool = false, OC1FE: bool = false, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((OC2CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC2M shl 12).masked(12 .. 14))
  x.setMask((OC2PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC2FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((OC1CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC1M shl 4).masked(4 .. 6))
  x.setMask((OC1PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC1FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM5_CCMR1_Output_Fields

template modifyIt*(reg: TIM5_CCMR1_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_CCMR1_Input_Type): TIM5_CCMR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CCMR1_Input_Fields](reg.loc))

proc write*(reg: TIM5_CCMR1_Input_Type, val: TIM5_CCMR1_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CCMR1_Input_Fields](reg.loc), val)

proc write*(reg: TIM5_CCMR1_Input_Type, IC2F: uint32 = 0, IC2PCS: uint32 = 0, CC2S: uint32 = 0, IC1F: uint32 = 0, ICPCS: uint32 = 0, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((IC2F shl 12).masked(12 .. 15))
  x.setMask((IC2PCS shl 10).masked(10 .. 11))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((IC1F shl 4).masked(4 .. 7))
  x.setMask((ICPCS shl 2).masked(2 .. 3))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM5_CCMR1_Input_Fields

template modifyIt*(reg: TIM5_CCMR1_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_CCMR2_Output_Type): TIM5_CCMR2_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CCMR2_Output_Fields](reg.loc))

proc write*(reg: TIM5_CCMR2_Output_Type, val: TIM5_CCMR2_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CCMR2_Output_Fields](reg.loc), val)

proc write*(reg: TIM5_CCMR2_Output_Type, OC4CE: bool = false, OC4M: uint32 = 0, OC4PE: bool = false, OC4FE: bool = false, CC4S: uint32 = 0, OC3CE: bool = false, OC3M: uint32 = 0, OC3PE: bool = false, OC3FE: bool = false, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((OC4CE.uint32 shl 15).masked(15 .. 15))
  x.setMask((OC4M shl 12).masked(12 .. 14))
  x.setMask((OC4PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC4FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((OC3CE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OC3M shl 4).masked(4 .. 6))
  x.setMask((OC3PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC3FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM5_CCMR2_Output_Fields

template modifyIt*(reg: TIM5_CCMR2_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_CCMR2_Input_Type): TIM5_CCMR2_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CCMR2_Input_Fields](reg.loc))

proc write*(reg: TIM5_CCMR2_Input_Type, val: TIM5_CCMR2_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CCMR2_Input_Fields](reg.loc), val)

proc write*(reg: TIM5_CCMR2_Input_Type, IC4F: uint32 = 0, IC4PSC: uint32 = 0, CC4S: uint32 = 0, IC3F: uint32 = 0, IC3PSC: uint32 = 0, CC3S: uint32 = 0) =
  var x: uint32
  x.setMask((IC4F shl 12).masked(12 .. 15))
  x.setMask((IC4PSC shl 10).masked(10 .. 11))
  x.setMask((CC4S shl 8).masked(8 .. 9))
  x.setMask((IC3F shl 4).masked(4 .. 7))
  x.setMask((IC3PSC shl 2).masked(2 .. 3))
  x.setMask((CC3S shl 0).masked(0 .. 1))
  reg.write x.TIM5_CCMR2_Input_Fields

template modifyIt*(reg: TIM5_CCMR2_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_CCER_Type): TIM5_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CCER_Fields](reg.loc))

proc write*(reg: TIM5_CCER_Type, val: TIM5_CCER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CCER_Fields](reg.loc), val)

proc write*(reg: TIM5_CCER_Type, CC4NP: bool = false, CC4P: bool = false, CC4E: bool = false, CC3NP: bool = false, CC3P: bool = false, CC3E: bool = false, CC2NP: bool = false, CC2P: bool = false, CC2E: bool = false, CC1NP: bool = false, CC1P: bool = false, CC1E: bool = false) =
  var x: uint32
  x.setMask((CC4NP.uint32 shl 15).masked(15 .. 15))
  x.setMask((CC4P.uint32 shl 13).masked(13 .. 13))
  x.setMask((CC4E.uint32 shl 12).masked(12 .. 12))
  x.setMask((CC3NP.uint32 shl 11).masked(11 .. 11))
  x.setMask((CC3P.uint32 shl 9).masked(9 .. 9))
  x.setMask((CC3E.uint32 shl 8).masked(8 .. 8))
  x.setMask((CC2NP.uint32 shl 7).masked(7 .. 7))
  x.setMask((CC2P.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC2E.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC1NP.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC1P.uint32 shl 1).masked(1 .. 1))
  x.setMask((CC1E.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM5_CCER_Fields

template modifyIt*(reg: TIM5_CCER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_CNT_Type): TIM5_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CNT_Fields](reg.loc))

proc write*(reg: TIM5_CNT_Type, val: TIM5_CNT_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CNT_Fields](reg.loc), val)

proc write*(reg: TIM5_CNT_Type, CNT_H: uint32 = 0, CNT_L: uint32 = 0) =
  var x: uint32
  x.setMask((CNT_H shl 16).masked(16 .. 31))
  x.setMask((CNT_L shl 0).masked(0 .. 15))
  reg.write x.TIM5_CNT_Fields

template modifyIt*(reg: TIM5_CNT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_PSC_Type): TIM5_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_PSC_Fields](reg.loc))

proc write*(reg: TIM5_PSC_Type, val: TIM5_PSC_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_PSC_Fields](reg.loc), val)

proc write*(reg: TIM5_PSC_Type, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((PSC shl 0).masked(0 .. 15))
  reg.write x.TIM5_PSC_Fields

template modifyIt*(reg: TIM5_PSC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_ARR_Type): TIM5_ARR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_ARR_Fields](reg.loc))

proc write*(reg: TIM5_ARR_Type, val: TIM5_ARR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_ARR_Fields](reg.loc), val)

proc write*(reg: TIM5_ARR_Type, ARR_H: uint32 = 0, ARR_L: uint32 = 0) =
  var x: uint32
  x.setMask((ARR_H shl 16).masked(16 .. 31))
  x.setMask((ARR_L shl 0).masked(0 .. 15))
  reg.write x.TIM5_ARR_Fields

template modifyIt*(reg: TIM5_ARR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_CCR1_Type): TIM5_CCR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CCR1_Fields](reg.loc))

proc write*(reg: TIM5_CCR1_Type, val: TIM5_CCR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CCR1_Fields](reg.loc), val)

proc write*(reg: TIM5_CCR1_Type, CCR1_H: uint32 = 0, CCR1_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR1_H shl 16).masked(16 .. 31))
  x.setMask((CCR1_L shl 0).masked(0 .. 15))
  reg.write x.TIM5_CCR1_Fields

template modifyIt*(reg: TIM5_CCR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_CCR2_Type): TIM5_CCR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CCR2_Fields](reg.loc))

proc write*(reg: TIM5_CCR2_Type, val: TIM5_CCR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CCR2_Fields](reg.loc), val)

proc write*(reg: TIM5_CCR2_Type, CCR2_H: uint32 = 0, CCR2_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR2_H shl 16).masked(16 .. 31))
  x.setMask((CCR2_L shl 0).masked(0 .. 15))
  reg.write x.TIM5_CCR2_Fields

template modifyIt*(reg: TIM5_CCR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_CCR3_Type): TIM5_CCR3_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CCR3_Fields](reg.loc))

proc write*(reg: TIM5_CCR3_Type, val: TIM5_CCR3_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CCR3_Fields](reg.loc), val)

proc write*(reg: TIM5_CCR3_Type, CCR3_H: uint32 = 0, CCR3_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR3_H shl 16).masked(16 .. 31))
  x.setMask((CCR3_L shl 0).masked(0 .. 15))
  reg.write x.TIM5_CCR3_Fields

template modifyIt*(reg: TIM5_CCR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_CCR4_Type): TIM5_CCR4_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_CCR4_Fields](reg.loc))

proc write*(reg: TIM5_CCR4_Type, val: TIM5_CCR4_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_CCR4_Fields](reg.loc), val)

proc write*(reg: TIM5_CCR4_Type, CCR4_H: uint32 = 0, CCR4_L: uint32 = 0) =
  var x: uint32
  x.setMask((CCR4_H shl 16).masked(16 .. 31))
  x.setMask((CCR4_L shl 0).masked(0 .. 15))
  reg.write x.TIM5_CCR4_Fields

template modifyIt*(reg: TIM5_CCR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_DCR_Type): TIM5_DCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_DCR_Fields](reg.loc))

proc write*(reg: TIM5_DCR_Type, val: TIM5_DCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_DCR_Fields](reg.loc), val)

proc write*(reg: TIM5_DCR_Type, DBL: uint32 = 0, DBA: uint32 = 0) =
  var x: uint32
  x.setMask((DBL shl 8).masked(8 .. 12))
  x.setMask((DBA shl 0).masked(0 .. 4))
  reg.write x.TIM5_DCR_Fields

template modifyIt*(reg: TIM5_DCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_DMAR_Type): TIM5_DMAR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_DMAR_Fields](reg.loc))

proc write*(reg: TIM5_DMAR_Type, val: TIM5_DMAR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_DMAR_Fields](reg.loc), val)

proc write*(reg: TIM5_DMAR_Type, DMAB: uint32 = 0) =
  var x: uint32
  x.setMask((DMAB shl 0).masked(0 .. 15))
  reg.write x.TIM5_DMAR_Fields

template modifyIt*(reg: TIM5_DMAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM5_OR_Type): TIM5_OR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM5_OR_Fields](reg.loc))

proc write*(reg: TIM5_OR_Type, val: TIM5_OR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM5_OR_Fields](reg.loc), val)

proc write*(reg: TIM5_OR_Type, IT4_RMP: uint32 = 0) =
  var x: uint32
  x.setMask((IT4_RMP shl 6).masked(6 .. 7))
  reg.write x.TIM5_OR_Fields

template modifyIt*(reg: TIM5_OR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CKD*(r: TIM5_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CKD=`*(r: var TIM5_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM5_CR1_Fields

func ARPE*(r: TIM5_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARPE=`*(r: var TIM5_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM5_CR1_Fields

func CMS*(r: TIM5_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 6)

proc `CMS=`*(r: var TIM5_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 6)
  tmp.setMask((val shl 5).masked(5 .. 6))
  r = tmp.TIM5_CR1_Fields

func DIR*(r: TIM5_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `DIR=`*(r: var TIM5_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM5_CR1_Fields

func OPM*(r: TIM5_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OPM=`*(r: var TIM5_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM5_CR1_Fields

func URS*(r: TIM5_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `URS=`*(r: var TIM5_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM5_CR1_Fields

func UDIS*(r: TIM5_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `UDIS=`*(r: var TIM5_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM5_CR1_Fields

func CEN*(r: TIM5_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CEN=`*(r: var TIM5_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM5_CR1_Fields

func TI1S*(r: TIM5_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TI1S=`*(r: var TIM5_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM5_CR2_Fields

func MMS*(r: TIM5_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `MMS=`*(r: var TIM5_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM5_CR2_Fields

func CCDS*(r: TIM5_CR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CCDS=`*(r: var TIM5_CR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM5_CR2_Fields

func ETP*(r: TIM5_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ETP=`*(r: var TIM5_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM5_SMCR_Fields

func ECE*(r: TIM5_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ECE=`*(r: var TIM5_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM5_SMCR_Fields

func ETPS*(r: TIM5_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `ETPS=`*(r: var TIM5_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.TIM5_SMCR_Fields

func ETF*(r: TIM5_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `ETF=`*(r: var TIM5_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.TIM5_SMCR_Fields

func MSM*(r: TIM5_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MSM=`*(r: var TIM5_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM5_SMCR_Fields

func TS*(r: TIM5_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `TS=`*(r: var TIM5_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM5_SMCR_Fields

func SMS*(r: TIM5_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMS=`*(r: var TIM5_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.TIM5_SMCR_Fields

func TDE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TDE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.TIM5_DIER_Fields

func CC4DE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4DE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM5_DIER_Fields

func CC3DE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3DE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM5_DIER_Fields

func CC2DE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2DE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM5_DIER_Fields

func CC1DE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1DE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM5_DIER_Fields

func UDE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `UDE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM5_DIER_Fields

func TIE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM5_DIER_Fields

func CC4IE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM5_DIER_Fields

func CC3IE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM5_DIER_Fields

func CC2IE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM5_DIER_Fields

func CC1IE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM5_DIER_Fields

func UIE*(r: TIM5_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIE=`*(r: var TIM5_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM5_DIER_Fields

func CC4OF*(r: TIM5_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4OF=`*(r: var TIM5_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM5_SR_Fields

func CC3OF*(r: TIM5_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3OF=`*(r: var TIM5_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM5_SR_Fields

func CC2OF*(r: TIM5_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2OF=`*(r: var TIM5_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM5_SR_Fields

func CC1OF*(r: TIM5_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1OF=`*(r: var TIM5_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM5_SR_Fields

func TIF*(r: TIM5_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIF=`*(r: var TIM5_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM5_SR_Fields

func CC4IF*(r: TIM5_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC4IF=`*(r: var TIM5_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM5_SR_Fields

func CC3IF*(r: TIM5_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC3IF=`*(r: var TIM5_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM5_SR_Fields

func CC2IF*(r: TIM5_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IF=`*(r: var TIM5_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM5_SR_Fields

func CC1IF*(r: TIM5_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IF=`*(r: var TIM5_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM5_SR_Fields

func UIF*(r: TIM5_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIF=`*(r: var TIM5_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM5_SR_Fields

proc `TG=`*(r: var TIM5_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM5_EGR_Fields

proc `CC4G=`*(r: var TIM5_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM5_EGR_Fields

proc `CC3G=`*(r: var TIM5_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM5_EGR_Fields

proc `CC2G=`*(r: var TIM5_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM5_EGR_Fields

proc `CC1G=`*(r: var TIM5_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM5_EGR_Fields

proc `UG=`*(r: var TIM5_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM5_EGR_Fields

func OC2CE*(r: TIM5_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC2CE=`*(r: var TIM5_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM5_CCMR1_Output_Fields

func OC2M*(r: TIM5_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC2M=`*(r: var TIM5_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM5_CCMR1_Output_Fields

func OC2PE*(r: TIM5_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC2PE=`*(r: var TIM5_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM5_CCMR1_Output_Fields

func OC2FE*(r: TIM5_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC2FE=`*(r: var TIM5_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM5_CCMR1_Output_Fields

func CC2S*(r: TIM5_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM5_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM5_CCMR1_Output_Fields

func OC1CE*(r: TIM5_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC1CE=`*(r: var TIM5_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM5_CCMR1_Output_Fields

func OC1M*(r: TIM5_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC1M=`*(r: var TIM5_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM5_CCMR1_Output_Fields

func OC1PE*(r: TIM5_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC1PE=`*(r: var TIM5_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM5_CCMR1_Output_Fields

func OC1FE*(r: TIM5_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC1FE=`*(r: var TIM5_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM5_CCMR1_Output_Fields

func CC1S*(r: TIM5_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM5_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM5_CCMR1_Output_Fields

func IC2F*(r: TIM5_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC2F=`*(r: var TIM5_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM5_CCMR1_Input_Fields

func IC2PCS*(r: TIM5_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC2PCS=`*(r: var TIM5_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM5_CCMR1_Input_Fields

func CC2S*(r: TIM5_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM5_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM5_CCMR1_Input_Fields

func IC1F*(r: TIM5_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC1F=`*(r: var TIM5_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM5_CCMR1_Input_Fields

func ICPCS*(r: TIM5_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `ICPCS=`*(r: var TIM5_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM5_CCMR1_Input_Fields

func CC1S*(r: TIM5_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM5_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM5_CCMR1_Input_Fields

func OC4CE*(r: TIM5_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `OC4CE=`*(r: var TIM5_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM5_CCMR2_Output_Fields

func OC4M*(r: TIM5_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC4M=`*(r: var TIM5_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM5_CCMR2_Output_Fields

func OC4PE*(r: TIM5_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC4PE=`*(r: var TIM5_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM5_CCMR2_Output_Fields

func OC4FE*(r: TIM5_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC4FE=`*(r: var TIM5_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM5_CCMR2_Output_Fields

func CC4S*(r: TIM5_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM5_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM5_CCMR2_Output_Fields

func OC3CE*(r: TIM5_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `OC3CE=`*(r: var TIM5_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM5_CCMR2_Output_Fields

func OC3M*(r: TIM5_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC3M=`*(r: var TIM5_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM5_CCMR2_Output_Fields

func OC3PE*(r: TIM5_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC3PE=`*(r: var TIM5_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM5_CCMR2_Output_Fields

func OC3FE*(r: TIM5_CCMR2_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC3FE=`*(r: var TIM5_CCMR2_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM5_CCMR2_Output_Fields

func CC3S*(r: TIM5_CCMR2_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM5_CCMR2_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM5_CCMR2_Output_Fields

func IC4F*(r: TIM5_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 15)

proc `IC4F=`*(r: var TIM5_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 15)
  tmp.setMask((val shl 12).masked(12 .. 15))
  r = tmp.TIM5_CCMR2_Input_Fields

func IC4PSC*(r: TIM5_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC4PSC=`*(r: var TIM5_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM5_CCMR2_Input_Fields

func CC4S*(r: TIM5_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC4S=`*(r: var TIM5_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM5_CCMR2_Input_Fields

func IC3F*(r: TIM5_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC3F=`*(r: var TIM5_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM5_CCMR2_Input_Fields

func IC3PSC*(r: TIM5_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `IC3PSC=`*(r: var TIM5_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM5_CCMR2_Input_Fields

func CC3S*(r: TIM5_CCMR2_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC3S=`*(r: var TIM5_CCMR2_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM5_CCMR2_Input_Fields

func CC4NP*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `CC4NP=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.TIM5_CCER_Fields

func CC4P*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CC4P=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.TIM5_CCER_Fields

func CC4E*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `CC4E=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.TIM5_CCER_Fields

func CC3NP*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CC3NP=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM5_CCER_Fields

func CC3P*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC3P=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM5_CCER_Fields

func CC3E*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CC3E=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM5_CCER_Fields

func CC2NP*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `CC2NP=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM5_CCER_Fields

func CC2P*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CC2P=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM5_CCER_Fields

func CC2E*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC2E=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM5_CCER_Fields

func CC1NP*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC1NP=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM5_CCER_Fields

func CC1P*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1P=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM5_CCER_Fields

func CC1E*(r: TIM5_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CC1E=`*(r: var TIM5_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM5_CCER_Fields

func CNT_H*(r: TIM5_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CNT_H=`*(r: var TIM5_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM5_CNT_Fields

func CNT_L*(r: TIM5_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNT_L=`*(r: var TIM5_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM5_CNT_Fields

func PSC*(r: TIM5_PSC_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PSC=`*(r: var TIM5_PSC_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM5_PSC_Fields

func ARR_H*(r: TIM5_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `ARR_H=`*(r: var TIM5_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM5_ARR_Fields

func ARR_L*(r: TIM5_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ARR_L=`*(r: var TIM5_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM5_ARR_Fields

func CCR1_H*(r: TIM5_CCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR1_H=`*(r: var TIM5_CCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM5_CCR1_Fields

func CCR1_L*(r: TIM5_CCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR1_L=`*(r: var TIM5_CCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM5_CCR1_Fields

func CCR2_H*(r: TIM5_CCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR2_H=`*(r: var TIM5_CCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM5_CCR2_Fields

func CCR2_L*(r: TIM5_CCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR2_L=`*(r: var TIM5_CCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM5_CCR2_Fields

func CCR3_H*(r: TIM5_CCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR3_H=`*(r: var TIM5_CCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM5_CCR3_Fields

func CCR3_L*(r: TIM5_CCR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR3_L=`*(r: var TIM5_CCR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM5_CCR3_Fields

func CCR4_H*(r: TIM5_CCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `CCR4_H=`*(r: var TIM5_CCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.TIM5_CCR4_Fields

func CCR4_L*(r: TIM5_CCR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR4_L=`*(r: var TIM5_CCR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM5_CCR4_Fields

func DBL*(r: TIM5_DCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 12)

proc `DBL=`*(r: var TIM5_DCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 12)
  tmp.setMask((val shl 8).masked(8 .. 12))
  r = tmp.TIM5_DCR_Fields

func DBA*(r: TIM5_DCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `DBA=`*(r: var TIM5_DCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.TIM5_DCR_Fields

func DMAB*(r: TIM5_DMAR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `DMAB=`*(r: var TIM5_DMAR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM5_DMAR_Fields

func IT4_RMP*(r: TIM5_OR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `IT4_RMP=`*(r: var TIM5_OR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.TIM5_OR_Fields

type
  TIM9_CR1_Fields* = distinct uint32
  TIM9_CR2_Fields* = distinct uint32
  TIM9_SMCR_Fields* = distinct uint32
  TIM9_DIER_Fields* = distinct uint32
  TIM9_SR_Fields* = distinct uint32
  TIM9_EGR_Fields* = distinct uint32
  TIM9_CCMR1_Output_Fields* = distinct uint32
  TIM9_CCMR1_Input_Fields* = distinct uint32
  TIM9_CCER_Fields* = distinct uint32
  TIM9_CNT_Fields* = distinct uint32
  TIM9_PSC_Fields* = distinct uint32
  TIM9_ARR_Fields* = distinct uint32
  TIM9_CCR1_Fields* = distinct uint32
  TIM9_CCR2_Fields* = distinct uint32

proc read*(reg: TIM9_CR1_Type): TIM9_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_CR1_Fields](reg.loc))

proc write*(reg: TIM9_CR1_Type, val: TIM9_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_CR1_Fields](reg.loc), val)

proc write*(reg: TIM9_CR1_Type, CKD: uint32 = 0, ARPE: bool = false, OPM: bool = false, URS: bool = false, UDIS: bool = false, CEN: bool = false) =
  var x: uint32
  x.setMask((CKD shl 8).masked(8 .. 9))
  x.setMask((ARPE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OPM.uint32 shl 3).masked(3 .. 3))
  x.setMask((URS.uint32 shl 2).masked(2 .. 2))
  x.setMask((UDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM9_CR1_Fields

template modifyIt*(reg: TIM9_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_CR2_Type): TIM9_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_CR2_Fields](reg.loc))

proc write*(reg: TIM9_CR2_Type, val: TIM9_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_CR2_Fields](reg.loc), val)

proc write*(reg: TIM9_CR2_Type, MMS: uint32 = 0) =
  var x: uint32
  x.setMask((MMS shl 4).masked(4 .. 6))
  reg.write x.TIM9_CR2_Fields

template modifyIt*(reg: TIM9_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_SMCR_Type): TIM9_SMCR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_SMCR_Fields](reg.loc))

proc write*(reg: TIM9_SMCR_Type, val: TIM9_SMCR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_SMCR_Fields](reg.loc), val)

proc write*(reg: TIM9_SMCR_Type, MSM: bool = false, TS: uint32 = 0, SMS: uint32 = 0) =
  var x: uint32
  x.setMask((MSM.uint32 shl 7).masked(7 .. 7))
  x.setMask((TS shl 4).masked(4 .. 6))
  x.setMask((SMS shl 0).masked(0 .. 2))
  reg.write x.TIM9_SMCR_Fields

template modifyIt*(reg: TIM9_SMCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_DIER_Type): TIM9_DIER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_DIER_Fields](reg.loc))

proc write*(reg: TIM9_DIER_Type, val: TIM9_DIER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_DIER_Fields](reg.loc), val)

proc write*(reg: TIM9_DIER_Type, TIE: bool = false, CC2IE: bool = false, CC1IE: bool = false, UIE: bool = false) =
  var x: uint32
  x.setMask((TIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC2IE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IE.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM9_DIER_Fields

template modifyIt*(reg: TIM9_DIER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_SR_Type): TIM9_SR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_SR_Fields](reg.loc))

proc write*(reg: TIM9_SR_Type, val: TIM9_SR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_SR_Fields](reg.loc), val)

proc write*(reg: TIM9_SR_Type, CC2OF: bool = false, CC1OF: bool = false, TIF: bool = false, CC2IF: bool = false, CC1IF: bool = false, UIF: bool = false) =
  var x: uint32
  x.setMask((CC2OF.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC1OF.uint32 shl 9).masked(9 .. 9))
  x.setMask((TIF.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC2IF.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1IF.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM9_SR_Fields

template modifyIt*(reg: TIM9_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: TIM9_EGR_Type, val: TIM9_EGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_EGR_Fields](reg.loc), val)

proc write*(reg: TIM9_EGR_Type, TG: bool = false, CC2G: bool = false, CC1G: bool = false, UG: bool = false) =
  var x: uint32
  x.setMask((TG.uint32 shl 6).masked(6 .. 6))
  x.setMask((CC2G.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1G.uint32 shl 1).masked(1 .. 1))
  x.setMask((UG.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM9_EGR_Fields

proc read*(reg: TIM9_CCMR1_Output_Type): TIM9_CCMR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_CCMR1_Output_Fields](reg.loc))

proc write*(reg: TIM9_CCMR1_Output_Type, val: TIM9_CCMR1_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_CCMR1_Output_Fields](reg.loc), val)

proc write*(reg: TIM9_CCMR1_Output_Type, OC2M: uint32 = 0, OC2PE: bool = false, OC2FE: bool = false, CC2S: uint32 = 0, OC1M: uint32 = 0, OC1PE: bool = false, OC1FE: bool = false, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((OC2M shl 12).masked(12 .. 14))
  x.setMask((OC2PE.uint32 shl 11).masked(11 .. 11))
  x.setMask((OC2FE.uint32 shl 10).masked(10 .. 10))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((OC1M shl 4).masked(4 .. 6))
  x.setMask((OC1PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC1FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM9_CCMR1_Output_Fields

template modifyIt*(reg: TIM9_CCMR1_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_CCMR1_Input_Type): TIM9_CCMR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_CCMR1_Input_Fields](reg.loc))

proc write*(reg: TIM9_CCMR1_Input_Type, val: TIM9_CCMR1_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_CCMR1_Input_Fields](reg.loc), val)

proc write*(reg: TIM9_CCMR1_Input_Type, IC2F: uint32 = 0, IC2PCS: uint32 = 0, CC2S: uint32 = 0, IC1F: uint32 = 0, ICPCS: uint32 = 0, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((IC2F shl 12).masked(12 .. 14))
  x.setMask((IC2PCS shl 10).masked(10 .. 11))
  x.setMask((CC2S shl 8).masked(8 .. 9))
  x.setMask((IC1F shl 4).masked(4 .. 6))
  x.setMask((ICPCS shl 2).masked(2 .. 3))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM9_CCMR1_Input_Fields

template modifyIt*(reg: TIM9_CCMR1_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_CCER_Type): TIM9_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_CCER_Fields](reg.loc))

proc write*(reg: TIM9_CCER_Type, val: TIM9_CCER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_CCER_Fields](reg.loc), val)

proc write*(reg: TIM9_CCER_Type, CC2NP: bool = false, CC2P: bool = false, CC2E: bool = false, CC1NP: bool = false, CC1P: bool = false, CC1E: bool = false) =
  var x: uint32
  x.setMask((CC2NP.uint32 shl 7).masked(7 .. 7))
  x.setMask((CC2P.uint32 shl 5).masked(5 .. 5))
  x.setMask((CC2E.uint32 shl 4).masked(4 .. 4))
  x.setMask((CC1NP.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC1P.uint32 shl 1).masked(1 .. 1))
  x.setMask((CC1E.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM9_CCER_Fields

template modifyIt*(reg: TIM9_CCER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_CNT_Type): TIM9_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_CNT_Fields](reg.loc))

proc write*(reg: TIM9_CNT_Type, val: TIM9_CNT_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_CNT_Fields](reg.loc), val)

proc write*(reg: TIM9_CNT_Type, CNT: uint32 = 0) =
  var x: uint32
  x.setMask((CNT shl 0).masked(0 .. 15))
  reg.write x.TIM9_CNT_Fields

template modifyIt*(reg: TIM9_CNT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_PSC_Type): TIM9_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_PSC_Fields](reg.loc))

proc write*(reg: TIM9_PSC_Type, val: TIM9_PSC_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_PSC_Fields](reg.loc), val)

proc write*(reg: TIM9_PSC_Type, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((PSC shl 0).masked(0 .. 15))
  reg.write x.TIM9_PSC_Fields

template modifyIt*(reg: TIM9_PSC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_ARR_Type): TIM9_ARR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_ARR_Fields](reg.loc))

proc write*(reg: TIM9_ARR_Type, val: TIM9_ARR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_ARR_Fields](reg.loc), val)

proc write*(reg: TIM9_ARR_Type, ARR: uint32 = 0) =
  var x: uint32
  x.setMask((ARR shl 0).masked(0 .. 15))
  reg.write x.TIM9_ARR_Fields

template modifyIt*(reg: TIM9_ARR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_CCR1_Type): TIM9_CCR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_CCR1_Fields](reg.loc))

proc write*(reg: TIM9_CCR1_Type, val: TIM9_CCR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_CCR1_Fields](reg.loc), val)

proc write*(reg: TIM9_CCR1_Type, CCR1: uint32 = 0) =
  var x: uint32
  x.setMask((CCR1 shl 0).masked(0 .. 15))
  reg.write x.TIM9_CCR1_Fields

template modifyIt*(reg: TIM9_CCR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM9_CCR2_Type): TIM9_CCR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM9_CCR2_Fields](reg.loc))

proc write*(reg: TIM9_CCR2_Type, val: TIM9_CCR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM9_CCR2_Fields](reg.loc), val)

proc write*(reg: TIM9_CCR2_Type, CCR2: uint32 = 0) =
  var x: uint32
  x.setMask((CCR2 shl 0).masked(0 .. 15))
  reg.write x.TIM9_CCR2_Fields

template modifyIt*(reg: TIM9_CCR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CKD*(r: TIM9_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CKD=`*(r: var TIM9_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM9_CR1_Fields

func ARPE*(r: TIM9_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARPE=`*(r: var TIM9_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM9_CR1_Fields

func OPM*(r: TIM9_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OPM=`*(r: var TIM9_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM9_CR1_Fields

func URS*(r: TIM9_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `URS=`*(r: var TIM9_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM9_CR1_Fields

func UDIS*(r: TIM9_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `UDIS=`*(r: var TIM9_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM9_CR1_Fields

func CEN*(r: TIM9_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CEN=`*(r: var TIM9_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM9_CR1_Fields

func MMS*(r: TIM9_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `MMS=`*(r: var TIM9_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM9_CR2_Fields

func MSM*(r: TIM9_SMCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MSM=`*(r: var TIM9_SMCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM9_SMCR_Fields

func TS*(r: TIM9_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `TS=`*(r: var TIM9_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM9_SMCR_Fields

func SMS*(r: TIM9_SMCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SMS=`*(r: var TIM9_SMCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.TIM9_SMCR_Fields

func TIE*(r: TIM9_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIE=`*(r: var TIM9_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM9_DIER_Fields

func CC2IE*(r: TIM9_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IE=`*(r: var TIM9_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM9_DIER_Fields

func CC1IE*(r: TIM9_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IE=`*(r: var TIM9_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM9_DIER_Fields

func UIE*(r: TIM9_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIE=`*(r: var TIM9_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM9_DIER_Fields

func CC2OF*(r: TIM9_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CC2OF=`*(r: var TIM9_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM9_SR_Fields

func CC1OF*(r: TIM9_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1OF=`*(r: var TIM9_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM9_SR_Fields

func TIF*(r: TIM9_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TIF=`*(r: var TIM9_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM9_SR_Fields

func CC2IF*(r: TIM9_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CC2IF=`*(r: var TIM9_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM9_SR_Fields

func CC1IF*(r: TIM9_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IF=`*(r: var TIM9_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM9_SR_Fields

func UIF*(r: TIM9_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIF=`*(r: var TIM9_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM9_SR_Fields

proc `TG=`*(r: var TIM9_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.TIM9_EGR_Fields

proc `CC2G=`*(r: var TIM9_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM9_EGR_Fields

proc `CC1G=`*(r: var TIM9_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM9_EGR_Fields

proc `UG=`*(r: var TIM9_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM9_EGR_Fields

func OC2M*(r: TIM9_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `OC2M=`*(r: var TIM9_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM9_CCMR1_Output_Fields

func OC2PE*(r: TIM9_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `OC2PE=`*(r: var TIM9_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.TIM9_CCMR1_Output_Fields

func OC2FE*(r: TIM9_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `OC2FE=`*(r: var TIM9_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.TIM9_CCMR1_Output_Fields

func CC2S*(r: TIM9_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM9_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM9_CCMR1_Output_Fields

func OC1M*(r: TIM9_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC1M=`*(r: var TIM9_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM9_CCMR1_Output_Fields

func OC1PE*(r: TIM9_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC1PE=`*(r: var TIM9_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM9_CCMR1_Output_Fields

func OC1FE*(r: TIM9_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC1FE=`*(r: var TIM9_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM9_CCMR1_Output_Fields

func CC1S*(r: TIM9_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM9_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM9_CCMR1_Output_Fields

func IC2F*(r: TIM9_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 14)

proc `IC2F=`*(r: var TIM9_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 14)
  tmp.setMask((val shl 12).masked(12 .. 14))
  r = tmp.TIM9_CCMR1_Input_Fields

func IC2PCS*(r: TIM9_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `IC2PCS=`*(r: var TIM9_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.TIM9_CCMR1_Input_Fields

func CC2S*(r: TIM9_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CC2S=`*(r: var TIM9_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM9_CCMR1_Input_Fields

func IC1F*(r: TIM9_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `IC1F=`*(r: var TIM9_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM9_CCMR1_Input_Fields

func ICPCS*(r: TIM9_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `ICPCS=`*(r: var TIM9_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM9_CCMR1_Input_Fields

func CC1S*(r: TIM9_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM9_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM9_CCMR1_Input_Fields

func CC2NP*(r: TIM9_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `CC2NP=`*(r: var TIM9_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM9_CCER_Fields

func CC2P*(r: TIM9_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CC2P=`*(r: var TIM9_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.TIM9_CCER_Fields

func CC2E*(r: TIM9_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CC2E=`*(r: var TIM9_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.TIM9_CCER_Fields

func CC1NP*(r: TIM9_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC1NP=`*(r: var TIM9_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM9_CCER_Fields

func CC1P*(r: TIM9_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1P=`*(r: var TIM9_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM9_CCER_Fields

func CC1E*(r: TIM9_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CC1E=`*(r: var TIM9_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM9_CCER_Fields

func CNT*(r: TIM9_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNT=`*(r: var TIM9_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM9_CNT_Fields

func PSC*(r: TIM9_PSC_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PSC=`*(r: var TIM9_PSC_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM9_PSC_Fields

func ARR*(r: TIM9_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ARR=`*(r: var TIM9_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM9_ARR_Fields

func CCR1*(r: TIM9_CCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR1=`*(r: var TIM9_CCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM9_CCR1_Fields

func CCR2*(r: TIM9_CCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR2=`*(r: var TIM9_CCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM9_CCR2_Fields

type
  TIM10_CR1_Fields* = distinct uint32
  TIM10_DIER_Fields* = distinct uint32
  TIM10_SR_Fields* = distinct uint32
  TIM10_EGR_Fields* = distinct uint32
  TIM10_CCMR1_Output_Fields* = distinct uint32
  TIM10_CCMR1_Input_Fields* = distinct uint32
  TIM10_CCER_Fields* = distinct uint32
  TIM10_CNT_Fields* = distinct uint32
  TIM10_PSC_Fields* = distinct uint32
  TIM10_ARR_Fields* = distinct uint32
  TIM10_CCR1_Fields* = distinct uint32

proc read*(reg: TIM10_CR1_Type): TIM10_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM10_CR1_Fields](reg.loc))

proc write*(reg: TIM10_CR1_Type, val: TIM10_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_CR1_Fields](reg.loc), val)

proc write*(reg: TIM10_CR1_Type, CKD: uint32 = 0, ARPE: bool = false, URS: bool = false, UDIS: bool = false, CEN: bool = false) =
  var x: uint32
  x.setMask((CKD shl 8).masked(8 .. 9))
  x.setMask((ARPE.uint32 shl 7).masked(7 .. 7))
  x.setMask((URS.uint32 shl 2).masked(2 .. 2))
  x.setMask((UDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM10_CR1_Fields

template modifyIt*(reg: TIM10_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM10_DIER_Type): TIM10_DIER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM10_DIER_Fields](reg.loc))

proc write*(reg: TIM10_DIER_Type, val: TIM10_DIER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_DIER_Fields](reg.loc), val)

proc write*(reg: TIM10_DIER_Type, CC1IE: bool = false, UIE: bool = false) =
  var x: uint32
  x.setMask((CC1IE.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM10_DIER_Fields

template modifyIt*(reg: TIM10_DIER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM10_SR_Type): TIM10_SR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM10_SR_Fields](reg.loc))

proc write*(reg: TIM10_SR_Type, val: TIM10_SR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_SR_Fields](reg.loc), val)

proc write*(reg: TIM10_SR_Type, CC1OF: bool = false, CC1IF: bool = false, UIF: bool = false) =
  var x: uint32
  x.setMask((CC1OF.uint32 shl 9).masked(9 .. 9))
  x.setMask((CC1IF.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM10_SR_Fields

template modifyIt*(reg: TIM10_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: TIM10_EGR_Type, val: TIM10_EGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_EGR_Fields](reg.loc), val)

proc write*(reg: TIM10_EGR_Type, CC1G: bool = false, UG: bool = false) =
  var x: uint32
  x.setMask((CC1G.uint32 shl 1).masked(1 .. 1))
  x.setMask((UG.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM10_EGR_Fields

proc read*(reg: TIM10_CCMR1_Output_Type): TIM10_CCMR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM10_CCMR1_Output_Fields](reg.loc))

proc write*(reg: TIM10_CCMR1_Output_Type, val: TIM10_CCMR1_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_CCMR1_Output_Fields](reg.loc), val)

proc write*(reg: TIM10_CCMR1_Output_Type, OC1M: uint32 = 0, OC1PE: bool = false, OC1FE: bool = false, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((OC1M shl 4).masked(4 .. 6))
  x.setMask((OC1PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC1FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM10_CCMR1_Output_Fields

template modifyIt*(reg: TIM10_CCMR1_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM10_CCMR1_Input_Type): TIM10_CCMR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM10_CCMR1_Input_Fields](reg.loc))

proc write*(reg: TIM10_CCMR1_Input_Type, val: TIM10_CCMR1_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_CCMR1_Input_Fields](reg.loc), val)

proc write*(reg: TIM10_CCMR1_Input_Type, IC1F: uint32 = 0, ICPCS: uint32 = 0, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((IC1F shl 4).masked(4 .. 7))
  x.setMask((ICPCS shl 2).masked(2 .. 3))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM10_CCMR1_Input_Fields

template modifyIt*(reg: TIM10_CCMR1_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM10_CCER_Type): TIM10_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM10_CCER_Fields](reg.loc))

proc write*(reg: TIM10_CCER_Type, val: TIM10_CCER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_CCER_Fields](reg.loc), val)

proc write*(reg: TIM10_CCER_Type, CC1NP: bool = false, CC1P: bool = false, CC1E: bool = false) =
  var x: uint32
  x.setMask((CC1NP.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC1P.uint32 shl 1).masked(1 .. 1))
  x.setMask((CC1E.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM10_CCER_Fields

template modifyIt*(reg: TIM10_CCER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM10_CNT_Type): TIM10_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM10_CNT_Fields](reg.loc))

proc write*(reg: TIM10_CNT_Type, val: TIM10_CNT_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_CNT_Fields](reg.loc), val)

proc write*(reg: TIM10_CNT_Type, CNT: uint32 = 0) =
  var x: uint32
  x.setMask((CNT shl 0).masked(0 .. 15))
  reg.write x.TIM10_CNT_Fields

template modifyIt*(reg: TIM10_CNT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM10_PSC_Type): TIM10_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM10_PSC_Fields](reg.loc))

proc write*(reg: TIM10_PSC_Type, val: TIM10_PSC_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_PSC_Fields](reg.loc), val)

proc write*(reg: TIM10_PSC_Type, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((PSC shl 0).masked(0 .. 15))
  reg.write x.TIM10_PSC_Fields

template modifyIt*(reg: TIM10_PSC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM10_ARR_Type): TIM10_ARR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM10_ARR_Fields](reg.loc))

proc write*(reg: TIM10_ARR_Type, val: TIM10_ARR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_ARR_Fields](reg.loc), val)

proc write*(reg: TIM10_ARR_Type, ARR: uint32 = 0) =
  var x: uint32
  x.setMask((ARR shl 0).masked(0 .. 15))
  reg.write x.TIM10_ARR_Fields

template modifyIt*(reg: TIM10_ARR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM10_CCR1_Type): TIM10_CCR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM10_CCR1_Fields](reg.loc))

proc write*(reg: TIM10_CCR1_Type, val: TIM10_CCR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM10_CCR1_Fields](reg.loc), val)

proc write*(reg: TIM10_CCR1_Type, CCR1: uint32 = 0) =
  var x: uint32
  x.setMask((CCR1 shl 0).masked(0 .. 15))
  reg.write x.TIM10_CCR1_Fields

template modifyIt*(reg: TIM10_CCR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CKD*(r: TIM10_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CKD=`*(r: var TIM10_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM10_CR1_Fields

func ARPE*(r: TIM10_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARPE=`*(r: var TIM10_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM10_CR1_Fields

func URS*(r: TIM10_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `URS=`*(r: var TIM10_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM10_CR1_Fields

func UDIS*(r: TIM10_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `UDIS=`*(r: var TIM10_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM10_CR1_Fields

func CEN*(r: TIM10_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CEN=`*(r: var TIM10_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM10_CR1_Fields

func CC1IE*(r: TIM10_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IE=`*(r: var TIM10_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM10_DIER_Fields

func UIE*(r: TIM10_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIE=`*(r: var TIM10_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM10_DIER_Fields

func CC1OF*(r: TIM10_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1OF=`*(r: var TIM10_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM10_SR_Fields

func CC1IF*(r: TIM10_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IF=`*(r: var TIM10_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM10_SR_Fields

func UIF*(r: TIM10_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIF=`*(r: var TIM10_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM10_SR_Fields

proc `CC1G=`*(r: var TIM10_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM10_EGR_Fields

proc `UG=`*(r: var TIM10_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM10_EGR_Fields

func OC1M*(r: TIM10_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC1M=`*(r: var TIM10_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM10_CCMR1_Output_Fields

func OC1PE*(r: TIM10_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC1PE=`*(r: var TIM10_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM10_CCMR1_Output_Fields

func OC1FE*(r: TIM10_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC1FE=`*(r: var TIM10_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM10_CCMR1_Output_Fields

func CC1S*(r: TIM10_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM10_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM10_CCMR1_Output_Fields

func IC1F*(r: TIM10_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC1F=`*(r: var TIM10_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM10_CCMR1_Input_Fields

func ICPCS*(r: TIM10_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `ICPCS=`*(r: var TIM10_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM10_CCMR1_Input_Fields

func CC1S*(r: TIM10_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM10_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM10_CCMR1_Input_Fields

func CC1NP*(r: TIM10_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC1NP=`*(r: var TIM10_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM10_CCER_Fields

func CC1P*(r: TIM10_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1P=`*(r: var TIM10_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM10_CCER_Fields

func CC1E*(r: TIM10_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CC1E=`*(r: var TIM10_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM10_CCER_Fields

func CNT*(r: TIM10_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNT=`*(r: var TIM10_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM10_CNT_Fields

func PSC*(r: TIM10_PSC_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PSC=`*(r: var TIM10_PSC_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM10_PSC_Fields

func ARR*(r: TIM10_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ARR=`*(r: var TIM10_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM10_ARR_Fields

func CCR1*(r: TIM10_CCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR1=`*(r: var TIM10_CCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM10_CCR1_Fields

type
  TIM11_CR1_Fields* = distinct uint32
  TIM11_DIER_Fields* = distinct uint32
  TIM11_SR_Fields* = distinct uint32
  TIM11_EGR_Fields* = distinct uint32
  TIM11_CCMR1_Output_Fields* = distinct uint32
  TIM11_CCMR1_Input_Fields* = distinct uint32
  TIM11_CCER_Fields* = distinct uint32
  TIM11_CNT_Fields* = distinct uint32
  TIM11_PSC_Fields* = distinct uint32
  TIM11_ARR_Fields* = distinct uint32
  TIM11_CCR1_Fields* = distinct uint32
  TIM11_OR_Fields* = distinct uint32

proc read*(reg: TIM11_CR1_Type): TIM11_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_CR1_Fields](reg.loc))

proc write*(reg: TIM11_CR1_Type, val: TIM11_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_CR1_Fields](reg.loc), val)

proc write*(reg: TIM11_CR1_Type, CKD: uint32 = 0, ARPE: bool = false, URS: bool = false, UDIS: bool = false, CEN: bool = false) =
  var x: uint32
  x.setMask((CKD shl 8).masked(8 .. 9))
  x.setMask((ARPE.uint32 shl 7).masked(7 .. 7))
  x.setMask((URS.uint32 shl 2).masked(2 .. 2))
  x.setMask((UDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM11_CR1_Fields

template modifyIt*(reg: TIM11_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM11_DIER_Type): TIM11_DIER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_DIER_Fields](reg.loc))

proc write*(reg: TIM11_DIER_Type, val: TIM11_DIER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_DIER_Fields](reg.loc), val)

proc write*(reg: TIM11_DIER_Type, CC1IE: bool = false, UIE: bool = false) =
  var x: uint32
  x.setMask((CC1IE.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM11_DIER_Fields

template modifyIt*(reg: TIM11_DIER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM11_SR_Type): TIM11_SR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_SR_Fields](reg.loc))

proc write*(reg: TIM11_SR_Type, val: TIM11_SR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_SR_Fields](reg.loc), val)

proc write*(reg: TIM11_SR_Type, CC1OF: bool = false, CC1IF: bool = false, UIF: bool = false) =
  var x: uint32
  x.setMask((CC1OF.uint32 shl 9).masked(9 .. 9))
  x.setMask((CC1IF.uint32 shl 1).masked(1 .. 1))
  x.setMask((UIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM11_SR_Fields

template modifyIt*(reg: TIM11_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: TIM11_EGR_Type, val: TIM11_EGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_EGR_Fields](reg.loc), val)

proc write*(reg: TIM11_EGR_Type, CC1G: bool = false, UG: bool = false) =
  var x: uint32
  x.setMask((CC1G.uint32 shl 1).masked(1 .. 1))
  x.setMask((UG.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM11_EGR_Fields

proc read*(reg: TIM11_CCMR1_Output_Type): TIM11_CCMR1_Output_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_CCMR1_Output_Fields](reg.loc))

proc write*(reg: TIM11_CCMR1_Output_Type, val: TIM11_CCMR1_Output_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_CCMR1_Output_Fields](reg.loc), val)

proc write*(reg: TIM11_CCMR1_Output_Type, OC1M: uint32 = 0, OC1PE: bool = false, OC1FE: bool = false, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((OC1M shl 4).masked(4 .. 6))
  x.setMask((OC1PE.uint32 shl 3).masked(3 .. 3))
  x.setMask((OC1FE.uint32 shl 2).masked(2 .. 2))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM11_CCMR1_Output_Fields

template modifyIt*(reg: TIM11_CCMR1_Output_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM11_CCMR1_Input_Type): TIM11_CCMR1_Input_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_CCMR1_Input_Fields](reg.loc))

proc write*(reg: TIM11_CCMR1_Input_Type, val: TIM11_CCMR1_Input_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_CCMR1_Input_Fields](reg.loc), val)

proc write*(reg: TIM11_CCMR1_Input_Type, IC1F: uint32 = 0, ICPCS: uint32 = 0, CC1S: uint32 = 0) =
  var x: uint32
  x.setMask((IC1F shl 4).masked(4 .. 7))
  x.setMask((ICPCS shl 2).masked(2 .. 3))
  x.setMask((CC1S shl 0).masked(0 .. 1))
  reg.write x.TIM11_CCMR1_Input_Fields

template modifyIt*(reg: TIM11_CCMR1_Input_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM11_CCER_Type): TIM11_CCER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_CCER_Fields](reg.loc))

proc write*(reg: TIM11_CCER_Type, val: TIM11_CCER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_CCER_Fields](reg.loc), val)

proc write*(reg: TIM11_CCER_Type, CC1NP: bool = false, CC1P: bool = false, CC1E: bool = false) =
  var x: uint32
  x.setMask((CC1NP.uint32 shl 3).masked(3 .. 3))
  x.setMask((CC1P.uint32 shl 1).masked(1 .. 1))
  x.setMask((CC1E.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM11_CCER_Fields

template modifyIt*(reg: TIM11_CCER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM11_CNT_Type): TIM11_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_CNT_Fields](reg.loc))

proc write*(reg: TIM11_CNT_Type, val: TIM11_CNT_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_CNT_Fields](reg.loc), val)

proc write*(reg: TIM11_CNT_Type, CNT: uint32 = 0) =
  var x: uint32
  x.setMask((CNT shl 0).masked(0 .. 15))
  reg.write x.TIM11_CNT_Fields

template modifyIt*(reg: TIM11_CNT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM11_PSC_Type): TIM11_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_PSC_Fields](reg.loc))

proc write*(reg: TIM11_PSC_Type, val: TIM11_PSC_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_PSC_Fields](reg.loc), val)

proc write*(reg: TIM11_PSC_Type, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((PSC shl 0).masked(0 .. 15))
  reg.write x.TIM11_PSC_Fields

template modifyIt*(reg: TIM11_PSC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM11_ARR_Type): TIM11_ARR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_ARR_Fields](reg.loc))

proc write*(reg: TIM11_ARR_Type, val: TIM11_ARR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_ARR_Fields](reg.loc), val)

proc write*(reg: TIM11_ARR_Type, ARR: uint32 = 0) =
  var x: uint32
  x.setMask((ARR shl 0).masked(0 .. 15))
  reg.write x.TIM11_ARR_Fields

template modifyIt*(reg: TIM11_ARR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM11_CCR1_Type): TIM11_CCR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_CCR1_Fields](reg.loc))

proc write*(reg: TIM11_CCR1_Type, val: TIM11_CCR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_CCR1_Fields](reg.loc), val)

proc write*(reg: TIM11_CCR1_Type, CCR1: uint32 = 0) =
  var x: uint32
  x.setMask((CCR1 shl 0).masked(0 .. 15))
  reg.write x.TIM11_CCR1_Fields

template modifyIt*(reg: TIM11_CCR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM11_OR_Type): TIM11_OR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM11_OR_Fields](reg.loc))

proc write*(reg: TIM11_OR_Type, val: TIM11_OR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM11_OR_Fields](reg.loc), val)

proc write*(reg: TIM11_OR_Type, RMP: uint32 = 0) =
  var x: uint32
  x.setMask((RMP shl 0).masked(0 .. 1))
  reg.write x.TIM11_OR_Fields

template modifyIt*(reg: TIM11_OR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func CKD*(r: TIM11_CR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `CKD=`*(r: var TIM11_CR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.TIM11_CR1_Fields

func ARPE*(r: TIM11_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARPE=`*(r: var TIM11_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM11_CR1_Fields

func URS*(r: TIM11_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `URS=`*(r: var TIM11_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM11_CR1_Fields

func UDIS*(r: TIM11_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `UDIS=`*(r: var TIM11_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM11_CR1_Fields

func CEN*(r: TIM11_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CEN=`*(r: var TIM11_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM11_CR1_Fields

func CC1IE*(r: TIM11_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IE=`*(r: var TIM11_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM11_DIER_Fields

func UIE*(r: TIM11_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIE=`*(r: var TIM11_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM11_DIER_Fields

func CC1OF*(r: TIM11_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CC1OF=`*(r: var TIM11_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.TIM11_SR_Fields

func CC1IF*(r: TIM11_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1IF=`*(r: var TIM11_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM11_SR_Fields

func UIF*(r: TIM11_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIF=`*(r: var TIM11_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM11_SR_Fields

proc `CC1G=`*(r: var TIM11_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM11_EGR_Fields

proc `UG=`*(r: var TIM11_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM11_EGR_Fields

func OC1M*(r: TIM11_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `OC1M=`*(r: var TIM11_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM11_CCMR1_Output_Fields

func OC1PE*(r: TIM11_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OC1PE=`*(r: var TIM11_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM11_CCMR1_Output_Fields

func OC1FE*(r: TIM11_CCMR1_Output_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OC1FE=`*(r: var TIM11_CCMR1_Output_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM11_CCMR1_Output_Fields

func CC1S*(r: TIM11_CCMR1_Output_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM11_CCMR1_Output_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM11_CCMR1_Output_Fields

func IC1F*(r: TIM11_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `IC1F=`*(r: var TIM11_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.TIM11_CCMR1_Input_Fields

func ICPCS*(r: TIM11_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `ICPCS=`*(r: var TIM11_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.TIM11_CCMR1_Input_Fields

func CC1S*(r: TIM11_CCMR1_Input_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `CC1S=`*(r: var TIM11_CCMR1_Input_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM11_CCMR1_Input_Fields

func CC1NP*(r: TIM11_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CC1NP=`*(r: var TIM11_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM11_CCER_Fields

func CC1P*(r: TIM11_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CC1P=`*(r: var TIM11_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM11_CCER_Fields

func CC1E*(r: TIM11_CCER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CC1E=`*(r: var TIM11_CCER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM11_CCER_Fields

func CNT*(r: TIM11_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNT=`*(r: var TIM11_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM11_CNT_Fields

func PSC*(r: TIM11_PSC_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PSC=`*(r: var TIM11_PSC_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM11_PSC_Fields

func ARR*(r: TIM11_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ARR=`*(r: var TIM11_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM11_ARR_Fields

func CCR1*(r: TIM11_CCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CCR1=`*(r: var TIM11_CCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM11_CCR1_Fields

func RMP*(r: TIM11_OR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `RMP=`*(r: var TIM11_OR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.TIM11_OR_Fields

type
  TIM6_CR1_Fields* = distinct uint32
  TIM6_CR2_Fields* = distinct uint32
  TIM6_DIER_Fields* = distinct uint32
  TIM6_SR_Fields* = distinct uint32
  TIM6_EGR_Fields* = distinct uint32
  TIM6_CNT_Fields* = distinct uint32
  TIM6_PSC_Fields* = distinct uint32
  TIM6_ARR_Fields* = distinct uint32

proc read*(reg: TIM6_CR1_Type): TIM6_CR1_Fields {.inline.} =
  volatileLoad(cast[ptr TIM6_CR1_Fields](reg.loc))

proc write*(reg: TIM6_CR1_Type, val: TIM6_CR1_Fields) {.inline.} =
  volatileStore(cast[ptr TIM6_CR1_Fields](reg.loc), val)

proc write*(reg: TIM6_CR1_Type, ARPE: bool = false, OPM: bool = false, URS: bool = false, UDIS: bool = false, CEN: bool = false) =
  var x: uint32
  x.setMask((ARPE.uint32 shl 7).masked(7 .. 7))
  x.setMask((OPM.uint32 shl 3).masked(3 .. 3))
  x.setMask((URS.uint32 shl 2).masked(2 .. 2))
  x.setMask((UDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM6_CR1_Fields

template modifyIt*(reg: TIM6_CR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM6_CR2_Type): TIM6_CR2_Fields {.inline.} =
  volatileLoad(cast[ptr TIM6_CR2_Fields](reg.loc))

proc write*(reg: TIM6_CR2_Type, val: TIM6_CR2_Fields) {.inline.} =
  volatileStore(cast[ptr TIM6_CR2_Fields](reg.loc), val)

proc write*(reg: TIM6_CR2_Type, MMS: uint32 = 0) =
  var x: uint32
  x.setMask((MMS shl 4).masked(4 .. 6))
  reg.write x.TIM6_CR2_Fields

template modifyIt*(reg: TIM6_CR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM6_DIER_Type): TIM6_DIER_Fields {.inline.} =
  volatileLoad(cast[ptr TIM6_DIER_Fields](reg.loc))

proc write*(reg: TIM6_DIER_Type, val: TIM6_DIER_Fields) {.inline.} =
  volatileStore(cast[ptr TIM6_DIER_Fields](reg.loc), val)

proc write*(reg: TIM6_DIER_Type, UDE: bool = false, UIE: bool = false) =
  var x: uint32
  x.setMask((UDE.uint32 shl 8).masked(8 .. 8))
  x.setMask((UIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM6_DIER_Fields

template modifyIt*(reg: TIM6_DIER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM6_SR_Type): TIM6_SR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM6_SR_Fields](reg.loc))

proc write*(reg: TIM6_SR_Type, val: TIM6_SR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM6_SR_Fields](reg.loc), val)

proc write*(reg: TIM6_SR_Type, UIF: bool = false) =
  var x: uint32
  x.setMask((UIF.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM6_SR_Fields

template modifyIt*(reg: TIM6_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: TIM6_EGR_Type, val: TIM6_EGR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM6_EGR_Fields](reg.loc), val)

proc write*(reg: TIM6_EGR_Type, UG: bool = false) =
  var x: uint32
  x.setMask((UG.uint32 shl 0).masked(0 .. 0))
  reg.write x.TIM6_EGR_Fields

proc read*(reg: TIM6_CNT_Type): TIM6_CNT_Fields {.inline.} =
  volatileLoad(cast[ptr TIM6_CNT_Fields](reg.loc))

proc write*(reg: TIM6_CNT_Type, val: TIM6_CNT_Fields) {.inline.} =
  volatileStore(cast[ptr TIM6_CNT_Fields](reg.loc), val)

proc write*(reg: TIM6_CNT_Type, CNT: uint32 = 0) =
  var x: uint32
  x.setMask((CNT shl 0).masked(0 .. 15))
  reg.write x.TIM6_CNT_Fields

template modifyIt*(reg: TIM6_CNT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM6_PSC_Type): TIM6_PSC_Fields {.inline.} =
  volatileLoad(cast[ptr TIM6_PSC_Fields](reg.loc))

proc write*(reg: TIM6_PSC_Type, val: TIM6_PSC_Fields) {.inline.} =
  volatileStore(cast[ptr TIM6_PSC_Fields](reg.loc), val)

proc write*(reg: TIM6_PSC_Type, PSC: uint32 = 0) =
  var x: uint32
  x.setMask((PSC shl 0).masked(0 .. 15))
  reg.write x.TIM6_PSC_Fields

template modifyIt*(reg: TIM6_PSC_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: TIM6_ARR_Type): TIM6_ARR_Fields {.inline.} =
  volatileLoad(cast[ptr TIM6_ARR_Fields](reg.loc))

proc write*(reg: TIM6_ARR_Type, val: TIM6_ARR_Fields) {.inline.} =
  volatileStore(cast[ptr TIM6_ARR_Fields](reg.loc), val)

proc write*(reg: TIM6_ARR_Type, ARR: uint32 = 0) =
  var x: uint32
  x.setMask((ARR shl 0).masked(0 .. 15))
  reg.write x.TIM6_ARR_Fields

template modifyIt*(reg: TIM6_ARR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func ARPE*(r: TIM6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARPE=`*(r: var TIM6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.TIM6_CR1_Fields

func OPM*(r: TIM6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OPM=`*(r: var TIM6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.TIM6_CR1_Fields

func URS*(r: TIM6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `URS=`*(r: var TIM6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.TIM6_CR1_Fields

func UDIS*(r: TIM6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `UDIS=`*(r: var TIM6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.TIM6_CR1_Fields

func CEN*(r: TIM6_CR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CEN=`*(r: var TIM6_CR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM6_CR1_Fields

func MMS*(r: TIM6_CR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `MMS=`*(r: var TIM6_CR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.TIM6_CR2_Fields

func UDE*(r: TIM6_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `UDE=`*(r: var TIM6_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.TIM6_DIER_Fields

func UIE*(r: TIM6_DIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIE=`*(r: var TIM6_DIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM6_DIER_Fields

func UIF*(r: TIM6_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `UIF=`*(r: var TIM6_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM6_SR_Fields

proc `UG=`*(r: var TIM6_EGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.TIM6_EGR_Fields

func CNT*(r: TIM6_CNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `CNT=`*(r: var TIM6_CNT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM6_CNT_Fields

func PSC*(r: TIM6_PSC_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PSC=`*(r: var TIM6_PSC_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM6_PSC_Fields

func ARR*(r: TIM6_ARR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `ARR=`*(r: var TIM6_ARR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.TIM6_ARR_Fields

type
  CRC_IDR_Fields* = distinct uint32
  CRC_CR_Fields* = distinct uint32

proc read*(reg: CRC_DR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: CRC_DR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: CRC_DR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CRC_IDR_Type): CRC_IDR_Fields {.inline.} =
  volatileLoad(cast[ptr CRC_IDR_Fields](reg.loc))

proc write*(reg: CRC_IDR_Type, val: CRC_IDR_Fields) {.inline.} =
  volatileStore(cast[ptr CRC_IDR_Fields](reg.loc), val)

proc write*(reg: CRC_IDR_Type, IDR: uint32 = 0) =
  var x: uint32
  x.setMask((IDR shl 0).masked(0 .. 7))
  reg.write x.CRC_IDR_Fields

template modifyIt*(reg: CRC_IDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: CRC_CR_Type, val: CRC_CR_Fields) {.inline.} =
  volatileStore(cast[ptr CRC_CR_Fields](reg.loc), val)

proc write*(reg: CRC_CR_Type, CR: bool = false) =
  var x: uint32
  x.setMask((CR.uint32 shl 0).masked(0 .. 0))
  reg.write x.CRC_CR_Fields

func IDR*(r: CRC_IDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `IDR=`*(r: var CRC_IDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CRC_IDR_Fields

proc `CR=`*(r: var CRC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CRC_CR_Fields

type
  OTG_FS_GLOBAL_FS_GOTGCTL_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GOTGINT_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GAHBCFG_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GUSBCFG_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GRSTCTL_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GINTSTS_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GINTMSK_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GRXSTSR_Device_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GRXSTSR_Host_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GRXFSIZ_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GNPTXSTS_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_GCCFG_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_DIEPTXF1_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_DIEPTXF2_Fields* = distinct uint32
  OTG_FS_GLOBAL_FS_DIEPTXF3_Fields* = distinct uint32

proc read*(reg: OTG_FS_GLOBAL_FS_GOTGCTL_Type): OTG_FS_GLOBAL_FS_GOTGCTL_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GOTGCTL_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GOTGCTL_Type, val: OTG_FS_GLOBAL_FS_GOTGCTL_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GOTGCTL_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GOTGCTL_Type, SRQ: bool = false, HNPRQ: bool = false, HSHNPEN: bool = false, DHNPEN: bool = true) =
  var x: uint32
  x.setMask((SRQ.uint32 shl 1).masked(1 .. 1))
  x.setMask((HNPRQ.uint32 shl 9).masked(9 .. 9))
  x.setMask((HSHNPEN.uint32 shl 10).masked(10 .. 10))
  x.setMask((DHNPEN.uint32 shl 11).masked(11 .. 11))
  reg.write x.OTG_FS_GLOBAL_FS_GOTGCTL_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GOTGCTL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_GOTGINT_Type): OTG_FS_GLOBAL_FS_GOTGINT_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GOTGINT_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GOTGINT_Type, val: OTG_FS_GLOBAL_FS_GOTGINT_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GOTGINT_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GOTGINT_Type, SEDET: bool = false, SRSSCHG: bool = false, HNSSCHG: bool = false, HNGDET: bool = false, ADTOCHG: bool = false, DBCDNE: bool = false) =
  var x: uint32
  x.setMask((SEDET.uint32 shl 2).masked(2 .. 2))
  x.setMask((SRSSCHG.uint32 shl 8).masked(8 .. 8))
  x.setMask((HNSSCHG.uint32 shl 9).masked(9 .. 9))
  x.setMask((HNGDET.uint32 shl 17).masked(17 .. 17))
  x.setMask((ADTOCHG.uint32 shl 18).masked(18 .. 18))
  x.setMask((DBCDNE.uint32 shl 19).masked(19 .. 19))
  reg.write x.OTG_FS_GLOBAL_FS_GOTGINT_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GOTGINT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_GAHBCFG_Type): OTG_FS_GLOBAL_FS_GAHBCFG_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GAHBCFG_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GAHBCFG_Type, val: OTG_FS_GLOBAL_FS_GAHBCFG_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GAHBCFG_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GAHBCFG_Type, GINT: bool = false, TXFELVL: bool = false, PTXFELVL: bool = false) =
  var x: uint32
  x.setMask((GINT.uint32 shl 0).masked(0 .. 0))
  x.setMask((TXFELVL.uint32 shl 7).masked(7 .. 7))
  x.setMask((PTXFELVL.uint32 shl 8).masked(8 .. 8))
  reg.write x.OTG_FS_GLOBAL_FS_GAHBCFG_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GAHBCFG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_GUSBCFG_Type): OTG_FS_GLOBAL_FS_GUSBCFG_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GUSBCFG_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GUSBCFG_Type, val: OTG_FS_GLOBAL_FS_GUSBCFG_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GUSBCFG_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GUSBCFG_Type, TOCAL: uint32 = 0, PHYSEL: bool = false, SRPCAP: bool = false, HNPCAP: bool = true, TRDT: uint32 = 2, FHMOD: bool = false, FDMOD: bool = false, CTXPKT: bool = false) =
  var x: uint32
  x.setMask((TOCAL shl 0).masked(0 .. 2))
  x.setMask((PHYSEL.uint32 shl 6).masked(6 .. 6))
  x.setMask((SRPCAP.uint32 shl 8).masked(8 .. 8))
  x.setMask((HNPCAP.uint32 shl 9).masked(9 .. 9))
  x.setMask((TRDT shl 10).masked(10 .. 13))
  x.setMask((FHMOD.uint32 shl 29).masked(29 .. 29))
  x.setMask((FDMOD.uint32 shl 30).masked(30 .. 30))
  x.setMask((CTXPKT.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_GLOBAL_FS_GUSBCFG_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GUSBCFG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_GRSTCTL_Type): OTG_FS_GLOBAL_FS_GRSTCTL_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GRSTCTL_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GRSTCTL_Type, val: OTG_FS_GLOBAL_FS_GRSTCTL_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GRSTCTL_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GRSTCTL_Type, CSRST: bool = false, HSRST: bool = false, FCRST: bool = false, RXFFLSH: bool = false, TXFFLSH: bool = false, TXFNUM: uint32 = 0) =
  var x: uint32
  x.setMask((CSRST.uint32 shl 0).masked(0 .. 0))
  x.setMask((HSRST.uint32 shl 1).masked(1 .. 1))
  x.setMask((FCRST.uint32 shl 2).masked(2 .. 2))
  x.setMask((RXFFLSH.uint32 shl 4).masked(4 .. 4))
  x.setMask((TXFFLSH.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXFNUM shl 6).masked(6 .. 10))
  reg.write x.OTG_FS_GLOBAL_FS_GRSTCTL_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GRSTCTL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_GINTSTS_Type): OTG_FS_GLOBAL_FS_GINTSTS_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GINTSTS_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GINTSTS_Type, val: OTG_FS_GLOBAL_FS_GINTSTS_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GINTSTS_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GINTSTS_Type, MMIS: bool = false, SOF: bool = false, ESUSP: bool = false, USBSUSP: bool = false, USBRST: bool = false, ENUMDNE: bool = false, ISOODRP: bool = false, EOPF: bool = false, IISOIXFR: bool = false, IPXFR_INCOMPISOOUT: bool = false, CIDSCHG: bool = false, DISCINT: bool = false, SRQINT: bool = false, WKUPINT: bool = false) =
  var x: uint32
  x.setMask((MMIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((SOF.uint32 shl 3).masked(3 .. 3))
  x.setMask((ESUSP.uint32 shl 10).masked(10 .. 10))
  x.setMask((USBSUSP.uint32 shl 11).masked(11 .. 11))
  x.setMask((USBRST.uint32 shl 12).masked(12 .. 12))
  x.setMask((ENUMDNE.uint32 shl 13).masked(13 .. 13))
  x.setMask((ISOODRP.uint32 shl 14).masked(14 .. 14))
  x.setMask((EOPF.uint32 shl 15).masked(15 .. 15))
  x.setMask((IISOIXFR.uint32 shl 20).masked(20 .. 20))
  x.setMask((IPXFR_INCOMPISOOUT.uint32 shl 21).masked(21 .. 21))
  x.setMask((CIDSCHG.uint32 shl 28).masked(28 .. 28))
  x.setMask((DISCINT.uint32 shl 29).masked(29 .. 29))
  x.setMask((SRQINT.uint32 shl 30).masked(30 .. 30))
  x.setMask((WKUPINT.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_GLOBAL_FS_GINTSTS_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GINTSTS_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_GINTMSK_Type): OTG_FS_GLOBAL_FS_GINTMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GINTMSK_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GINTMSK_Type, val: OTG_FS_GLOBAL_FS_GINTMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GINTMSK_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GINTMSK_Type, MMISM: bool = false, OTGINT: bool = false, SOFM: bool = false, RXFLVLM: bool = false, NPTXFEM: bool = false, GINAKEFFM: bool = false, GONAKEFFM: bool = false, ESUSPM: bool = false, USBSUSPM: bool = false, USBRST: bool = false, ENUMDNEM: bool = false, ISOODRPM: bool = false, EOPFM: bool = false, EPMISM: bool = false, IEPINT: bool = false, OEPINT: bool = false, IISOIXFRM: bool = false, IPXFRM_IISOOXFRM: bool = false, HCIM: bool = false, PTXFEM: bool = false, CIDSCHGM: bool = false, DISCINT: bool = false, SRQIM: bool = false, WUIM: bool = false) =
  var x: uint32
  x.setMask((MMISM.uint32 shl 1).masked(1 .. 1))
  x.setMask((OTGINT.uint32 shl 2).masked(2 .. 2))
  x.setMask((SOFM.uint32 shl 3).masked(3 .. 3))
  x.setMask((RXFLVLM.uint32 shl 4).masked(4 .. 4))
  x.setMask((NPTXFEM.uint32 shl 5).masked(5 .. 5))
  x.setMask((GINAKEFFM.uint32 shl 6).masked(6 .. 6))
  x.setMask((GONAKEFFM.uint32 shl 7).masked(7 .. 7))
  x.setMask((ESUSPM.uint32 shl 10).masked(10 .. 10))
  x.setMask((USBSUSPM.uint32 shl 11).masked(11 .. 11))
  x.setMask((USBRST.uint32 shl 12).masked(12 .. 12))
  x.setMask((ENUMDNEM.uint32 shl 13).masked(13 .. 13))
  x.setMask((ISOODRPM.uint32 shl 14).masked(14 .. 14))
  x.setMask((EOPFM.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPMISM.uint32 shl 17).masked(17 .. 17))
  x.setMask((IEPINT.uint32 shl 18).masked(18 .. 18))
  x.setMask((OEPINT.uint32 shl 19).masked(19 .. 19))
  x.setMask((IISOIXFRM.uint32 shl 20).masked(20 .. 20))
  x.setMask((IPXFRM_IISOOXFRM.uint32 shl 21).masked(21 .. 21))
  x.setMask((HCIM.uint32 shl 25).masked(25 .. 25))
  x.setMask((PTXFEM.uint32 shl 26).masked(26 .. 26))
  x.setMask((CIDSCHGM.uint32 shl 28).masked(28 .. 28))
  x.setMask((DISCINT.uint32 shl 29).masked(29 .. 29))
  x.setMask((SRQIM.uint32 shl 30).masked(30 .. 30))
  x.setMask((WUIM.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_GLOBAL_FS_GINTMSK_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GINTMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_GRXSTSR_Device_Type): OTG_FS_GLOBAL_FS_GRXSTSR_Device_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GRXSTSR_Device_Fields](reg.loc))

proc read*(reg: OTG_FS_GLOBAL_FS_GRXSTSR_Host_Type): OTG_FS_GLOBAL_FS_GRXSTSR_Host_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GRXSTSR_Host_Fields](reg.loc))

proc read*(reg: OTG_FS_GLOBAL_FS_GRXFSIZ_Type): OTG_FS_GLOBAL_FS_GRXFSIZ_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GRXFSIZ_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GRXFSIZ_Type, val: OTG_FS_GLOBAL_FS_GRXFSIZ_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GRXFSIZ_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GRXFSIZ_Type, RXFD: uint32 = 512) =
  var x: uint32
  x.setMask((RXFD shl 0).masked(0 .. 15))
  reg.write x.OTG_FS_GLOBAL_FS_GRXFSIZ_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GRXFSIZ_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Type): OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Type, val: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Type, TX0FSA: uint32 = 512, TX0FD: uint32 = 0) =
  var x: uint32
  x.setMask((TX0FSA shl 0).masked(0 .. 15))
  x.setMask((TX0FD shl 16).masked(16 .. 31))
  reg.write x.OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Type): OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Type, val: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Type, NPTXFSA: uint32 = 512, NPTXFD: uint32 = 0) =
  var x: uint32
  x.setMask((NPTXFSA shl 0).masked(0 .. 15))
  x.setMask((NPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_GNPTXSTS_Type): OTG_FS_GLOBAL_FS_GNPTXSTS_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GNPTXSTS_Fields](reg.loc))

proc read*(reg: OTG_FS_GLOBAL_FS_GCCFG_Type): OTG_FS_GLOBAL_FS_GCCFG_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_GCCFG_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_GCCFG_Type, val: OTG_FS_GLOBAL_FS_GCCFG_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_GCCFG_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_GCCFG_Type, PWRDWN: bool = false, VBUSASEN: bool = false, VBUSBSEN: bool = false, SOFOUTEN: bool = false) =
  var x: uint32
  x.setMask((PWRDWN.uint32 shl 16).masked(16 .. 16))
  x.setMask((VBUSASEN.uint32 shl 18).masked(18 .. 18))
  x.setMask((VBUSBSEN.uint32 shl 19).masked(19 .. 19))
  x.setMask((SOFOUTEN.uint32 shl 20).masked(20 .. 20))
  reg.write x.OTG_FS_GLOBAL_FS_GCCFG_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_GCCFG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_CID_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_CID_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_FS_GLOBAL_FS_CID_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_HPTXFSIZ_Type): OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_HPTXFSIZ_Type, val: OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_HPTXFSIZ_Type, PTXSA: uint32 = 1536, PTXFSIZ: uint32 = 512) =
  var x: uint32
  x.setMask((PTXSA shl 0).masked(0 .. 15))
  x.setMask((PTXFSIZ shl 16).masked(16 .. 31))
  reg.write x.OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_HPTXFSIZ_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_DIEPTXF1_Type): OTG_FS_GLOBAL_FS_DIEPTXF1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_DIEPTXF1_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_DIEPTXF1_Type, val: OTG_FS_GLOBAL_FS_DIEPTXF1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_DIEPTXF1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_DIEPTXF1_Type, INEPTXSA: uint32 = 1024, INEPTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((INEPTXSA shl 0).masked(0 .. 15))
  x.setMask((INEPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_FS_GLOBAL_FS_DIEPTXF1_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_DIEPTXF1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_DIEPTXF2_Type): OTG_FS_GLOBAL_FS_DIEPTXF2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_DIEPTXF2_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_DIEPTXF2_Type, val: OTG_FS_GLOBAL_FS_DIEPTXF2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_DIEPTXF2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_DIEPTXF2_Type, INEPTXSA: uint32 = 1024, INEPTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((INEPTXSA shl 0).masked(0 .. 15))
  x.setMask((INEPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_FS_GLOBAL_FS_DIEPTXF2_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_DIEPTXF2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_GLOBAL_FS_DIEPTXF3_Type): OTG_FS_GLOBAL_FS_DIEPTXF3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_GLOBAL_FS_DIEPTXF3_Fields](reg.loc))

proc write*(reg: OTG_FS_GLOBAL_FS_DIEPTXF3_Type, val: OTG_FS_GLOBAL_FS_DIEPTXF3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_GLOBAL_FS_DIEPTXF3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_GLOBAL_FS_DIEPTXF3_Type, INEPTXSA: uint32 = 1024, INEPTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((INEPTXSA shl 0).masked(0 .. 15))
  x.setMask((INEPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_FS_GLOBAL_FS_DIEPTXF3_Fields

template modifyIt*(reg: OTG_FS_GLOBAL_FS_DIEPTXF3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func SRQSCS*(r: OTG_FS_GLOBAL_FS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func SRQ*(r: OTG_FS_GLOBAL_FS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SRQ=`*(r: var OTG_FS_GLOBAL_FS_GOTGCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_GLOBAL_FS_GOTGCTL_Fields

func HNGSCS*(r: OTG_FS_GLOBAL_FS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func HNPRQ*(r: OTG_FS_GLOBAL_FS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `HNPRQ=`*(r: var OTG_FS_GLOBAL_FS_GOTGCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_GLOBAL_FS_GOTGCTL_Fields

func HSHNPEN*(r: OTG_FS_GLOBAL_FS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `HSHNPEN=`*(r: var OTG_FS_GLOBAL_FS_GOTGCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_GLOBAL_FS_GOTGCTL_Fields

func DHNPEN*(r: OTG_FS_GLOBAL_FS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DHNPEN=`*(r: var OTG_FS_GLOBAL_FS_GOTGCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_FS_GLOBAL_FS_GOTGCTL_Fields

func CIDSTS*(r: OTG_FS_GLOBAL_FS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func DBCT*(r: OTG_FS_GLOBAL_FS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func ASVLD*(r: OTG_FS_GLOBAL_FS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func BSVLD*(r: OTG_FS_GLOBAL_FS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

func SEDET*(r: OTG_FS_GLOBAL_FS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `SEDET=`*(r: var OTG_FS_GLOBAL_FS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_GLOBAL_FS_GOTGINT_Fields

func SRSSCHG*(r: OTG_FS_GLOBAL_FS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SRSSCHG=`*(r: var OTG_FS_GLOBAL_FS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_GLOBAL_FS_GOTGINT_Fields

func HNSSCHG*(r: OTG_FS_GLOBAL_FS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `HNSSCHG=`*(r: var OTG_FS_GLOBAL_FS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_GLOBAL_FS_GOTGINT_Fields

func HNGDET*(r: OTG_FS_GLOBAL_FS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `HNGDET=`*(r: var OTG_FS_GLOBAL_FS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_GLOBAL_FS_GOTGINT_Fields

func ADTOCHG*(r: OTG_FS_GLOBAL_FS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `ADTOCHG=`*(r: var OTG_FS_GLOBAL_FS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.OTG_FS_GLOBAL_FS_GOTGINT_Fields

func DBCDNE*(r: OTG_FS_GLOBAL_FS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `DBCDNE=`*(r: var OTG_FS_GLOBAL_FS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.OTG_FS_GLOBAL_FS_GOTGINT_Fields

func GINT*(r: OTG_FS_GLOBAL_FS_GAHBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `GINT=`*(r: var OTG_FS_GLOBAL_FS_GAHBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_GLOBAL_FS_GAHBCFG_Fields

func TXFELVL*(r: OTG_FS_GLOBAL_FS_GAHBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXFELVL=`*(r: var OTG_FS_GLOBAL_FS_GAHBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_GLOBAL_FS_GAHBCFG_Fields

func PTXFELVL*(r: OTG_FS_GLOBAL_FS_GAHBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PTXFELVL=`*(r: var OTG_FS_GLOBAL_FS_GAHBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_GLOBAL_FS_GAHBCFG_Fields

func TOCAL*(r: OTG_FS_GLOBAL_FS_GUSBCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `TOCAL=`*(r: var OTG_FS_GLOBAL_FS_GUSBCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.OTG_FS_GLOBAL_FS_GUSBCFG_Fields

proc `PHYSEL=`*(r: var OTG_FS_GLOBAL_FS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_GLOBAL_FS_GUSBCFG_Fields

func SRPCAP*(r: OTG_FS_GLOBAL_FS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SRPCAP=`*(r: var OTG_FS_GLOBAL_FS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_GLOBAL_FS_GUSBCFG_Fields

func HNPCAP*(r: OTG_FS_GLOBAL_FS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `HNPCAP=`*(r: var OTG_FS_GLOBAL_FS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_GLOBAL_FS_GUSBCFG_Fields

func TRDT*(r: OTG_FS_GLOBAL_FS_GUSBCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 13)

proc `TRDT=`*(r: var OTG_FS_GLOBAL_FS_GUSBCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 13)
  tmp.setMask((val shl 10).masked(10 .. 13))
  r = tmp.OTG_FS_GLOBAL_FS_GUSBCFG_Fields

func FHMOD*(r: OTG_FS_GLOBAL_FS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FHMOD=`*(r: var OTG_FS_GLOBAL_FS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_GLOBAL_FS_GUSBCFG_Fields

func FDMOD*(r: OTG_FS_GLOBAL_FS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FDMOD=`*(r: var OTG_FS_GLOBAL_FS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_GLOBAL_FS_GUSBCFG_Fields

func CTXPKT*(r: OTG_FS_GLOBAL_FS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CTXPKT=`*(r: var OTG_FS_GLOBAL_FS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_GLOBAL_FS_GUSBCFG_Fields

func CSRST*(r: OTG_FS_GLOBAL_FS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CSRST=`*(r: var OTG_FS_GLOBAL_FS_GRSTCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_GLOBAL_FS_GRSTCTL_Fields

func HSRST*(r: OTG_FS_GLOBAL_FS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `HSRST=`*(r: var OTG_FS_GLOBAL_FS_GRSTCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_GLOBAL_FS_GRSTCTL_Fields

func FCRST*(r: OTG_FS_GLOBAL_FS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FCRST=`*(r: var OTG_FS_GLOBAL_FS_GRSTCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_GLOBAL_FS_GRSTCTL_Fields

func RXFFLSH*(r: OTG_FS_GLOBAL_FS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `RXFFLSH=`*(r: var OTG_FS_GLOBAL_FS_GRSTCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_GLOBAL_FS_GRSTCTL_Fields

func TXFFLSH*(r: OTG_FS_GLOBAL_FS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TXFFLSH=`*(r: var OTG_FS_GLOBAL_FS_GRSTCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_GLOBAL_FS_GRSTCTL_Fields

func TXFNUM*(r: OTG_FS_GLOBAL_FS_GRSTCTL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 10)

proc `TXFNUM=`*(r: var OTG_FS_GLOBAL_FS_GRSTCTL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 10)
  tmp.setMask((val shl 6).masked(6 .. 10))
  r = tmp.OTG_FS_GLOBAL_FS_GRSTCTL_Fields

func AHBIDL*(r: OTG_FS_GLOBAL_FS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

func CMOD*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func MMIS*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MMIS=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func OTGINT*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func SOF*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `SOF=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func RXFLVL*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func NPTXFE*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func GINAKEFF*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func GOUTNAKEFF*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func ESUSP*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ESUSP=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func USBSUSP*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `USBSUSP=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func USBRST*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `USBRST=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func ENUMDNE*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ENUMDNE=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func ISOODRP*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ISOODRP=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func EOPF*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EOPF=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func IEPINT*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func OEPINT*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

func IISOIXFR*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `IISOIXFR=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func IPXFR_INCOMPISOOUT*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `IPXFR_INCOMPISOOUT=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func HPRTINT*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

func HCINT*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

func PTXFE*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

func CIDSCHG*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `CIDSCHG=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func DISCINT*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DISCINT=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func SRQINT*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `SRQINT=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func WKUPINT*(r: OTG_FS_GLOBAL_FS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `WKUPINT=`*(r: var OTG_FS_GLOBAL_FS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_GLOBAL_FS_GINTSTS_Fields

func MMISM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MMISM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func OTGINT*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OTGINT=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func SOFM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `SOFM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func RXFLVLM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `RXFLVLM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func NPTXFEM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `NPTXFEM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func GINAKEFFM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `GINAKEFFM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func GONAKEFFM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `GONAKEFFM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func ESUSPM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ESUSPM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func USBSUSPM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `USBSUSPM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func USBRST*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `USBRST=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func ENUMDNEM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ENUMDNEM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func ISOODRPM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ISOODRPM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func EOPFM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EOPFM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func EPMISM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `EPMISM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func IEPINT*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `IEPINT=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func OEPINT*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `OEPINT=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func IISOIXFRM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `IISOIXFRM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func IPXFRM_IISOOXFRM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `IPXFRM_IISOOXFRM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func PRTIM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

func HCIM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `HCIM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func PTXFEM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `PTXFEM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func CIDSCHGM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `CIDSCHGM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func DISCINT*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DISCINT=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func SRQIM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `SRQIM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func WUIM*(r: OTG_FS_GLOBAL_FS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `WUIM=`*(r: var OTG_FS_GLOBAL_FS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_GLOBAL_FS_GINTMSK_Fields

func EPNUM*(r: OTG_FS_GLOBAL_FS_GRXSTSR_Device_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func BCNT*(r: OTG_FS_GLOBAL_FS_GRXSTSR_Device_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 14)

func DPID*(r: OTG_FS_GLOBAL_FS_GRXSTSR_Device_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 16)

func PKTSTS*(r: OTG_FS_GLOBAL_FS_GRXSTSR_Device_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 20)

func FRMNUM*(r: OTG_FS_GLOBAL_FS_GRXSTSR_Device_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 24)

func EPNUM*(r: OTG_FS_GLOBAL_FS_GRXSTSR_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func BCNT*(r: OTG_FS_GLOBAL_FS_GRXSTSR_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 14)

func DPID*(r: OTG_FS_GLOBAL_FS_GRXSTSR_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 16)

func PKTSTS*(r: OTG_FS_GLOBAL_FS_GRXSTSR_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 20)

func FRMNUM*(r: OTG_FS_GLOBAL_FS_GRXSTSR_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 24)

func RXFD*(r: OTG_FS_GLOBAL_FS_GRXFSIZ_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `RXFD=`*(r: var OTG_FS_GLOBAL_FS_GRXFSIZ_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_GLOBAL_FS_GRXFSIZ_Fields

func TX0FSA*(r: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `TX0FSA=`*(r: var OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields

func TX0FD*(r: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `TX0FD=`*(r: var OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_Fields

func NPTXFSA*(r: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NPTXFSA=`*(r: var OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields

func NPTXFD*(r: OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `NPTXFD=`*(r: var OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_Fields

func NPTXFSAV*(r: OTG_FS_GLOBAL_FS_GNPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func NPTQXSAV*(r: OTG_FS_GLOBAL_FS_GNPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func NPTXQTOP*(r: OTG_FS_GLOBAL_FS_GNPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 30)

func PWRDWN*(r: OTG_FS_GLOBAL_FS_GCCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `PWRDWN=`*(r: var OTG_FS_GLOBAL_FS_GCCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_FS_GLOBAL_FS_GCCFG_Fields

func VBUSASEN*(r: OTG_FS_GLOBAL_FS_GCCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `VBUSASEN=`*(r: var OTG_FS_GLOBAL_FS_GCCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.OTG_FS_GLOBAL_FS_GCCFG_Fields

func VBUSBSEN*(r: OTG_FS_GLOBAL_FS_GCCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `VBUSBSEN=`*(r: var OTG_FS_GLOBAL_FS_GCCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.OTG_FS_GLOBAL_FS_GCCFG_Fields

func SOFOUTEN*(r: OTG_FS_GLOBAL_FS_GCCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SOFOUTEN=`*(r: var OTG_FS_GLOBAL_FS_GCCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_FS_GLOBAL_FS_GCCFG_Fields

func PTXSA*(r: OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PTXSA=`*(r: var OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields

func PTXFSIZ*(r: OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `PTXFSIZ=`*(r: var OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_FS_GLOBAL_FS_HPTXFSIZ_Fields

func INEPTXSA*(r: OTG_FS_GLOBAL_FS_DIEPTXF1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXSA=`*(r: var OTG_FS_GLOBAL_FS_DIEPTXF1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_GLOBAL_FS_DIEPTXF1_Fields

func INEPTXFD*(r: OTG_FS_GLOBAL_FS_DIEPTXF1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `INEPTXFD=`*(r: var OTG_FS_GLOBAL_FS_DIEPTXF1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_FS_GLOBAL_FS_DIEPTXF1_Fields

func INEPTXSA*(r: OTG_FS_GLOBAL_FS_DIEPTXF2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXSA=`*(r: var OTG_FS_GLOBAL_FS_DIEPTXF2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_GLOBAL_FS_DIEPTXF2_Fields

func INEPTXFD*(r: OTG_FS_GLOBAL_FS_DIEPTXF2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `INEPTXFD=`*(r: var OTG_FS_GLOBAL_FS_DIEPTXF2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_FS_GLOBAL_FS_DIEPTXF2_Fields

func INEPTXSA*(r: OTG_FS_GLOBAL_FS_DIEPTXF3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXSA=`*(r: var OTG_FS_GLOBAL_FS_DIEPTXF3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_GLOBAL_FS_DIEPTXF3_Fields

func INEPTXFD*(r: OTG_FS_GLOBAL_FS_DIEPTXF3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `INEPTXFD=`*(r: var OTG_FS_GLOBAL_FS_DIEPTXF3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_FS_GLOBAL_FS_DIEPTXF3_Fields

type
  OTG_FS_HOST_FS_HCFG_Fields* = distinct uint32
  OTG_FS_HOST_HFIR_Fields* = distinct uint32
  OTG_FS_HOST_FS_HFNUM_Fields* = distinct uint32
  OTG_FS_HOST_FS_HPTXSTS_Fields* = distinct uint32
  OTG_FS_HOST_HAINT_Fields* = distinct uint32
  OTG_FS_HOST_HAINTMSK_Fields* = distinct uint32
  OTG_FS_HOST_FS_HPRT_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR0_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR1_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR2_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR3_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR4_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR5_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR6_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR7_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR8_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR9_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR10_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCCHAR11_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT0_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT1_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT2_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT3_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT4_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT5_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT6_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT7_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT8_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT9_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT10_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINT11_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK0_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK1_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK2_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK3_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK4_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK5_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK6_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK7_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK8_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK9_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK10_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCINTMSK11_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ0_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ1_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ2_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ3_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ4_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ5_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ6_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ7_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ8_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ9_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ10_Fields* = distinct uint32
  OTG_FS_HOST_FS_HCTSIZ11_Fields* = distinct uint32

proc read*(reg: OTG_FS_HOST_FS_HCFG_Type): OTG_FS_HOST_FS_HCFG_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCFG_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCFG_Type, val: OTG_FS_HOST_FS_HCFG_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCFG_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCFG_Type, FSLSPCS: uint32 = 0) =
  var x: uint32
  x.setMask((FSLSPCS shl 0).masked(0 .. 1))
  reg.write x.OTG_FS_HOST_FS_HCFG_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCFG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_HFIR_Type): OTG_FS_HOST_HFIR_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_HFIR_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_HFIR_Type, val: OTG_FS_HOST_HFIR_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_HFIR_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_HFIR_Type, FRIVL: uint32 = 60000) =
  var x: uint32
  x.setMask((FRIVL shl 0).masked(0 .. 15))
  reg.write x.OTG_FS_HOST_HFIR_Fields

template modifyIt*(reg: OTG_FS_HOST_HFIR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HFNUM_Type): OTG_FS_HOST_FS_HFNUM_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HFNUM_Fields](reg.loc))

proc read*(reg: OTG_FS_HOST_FS_HPTXSTS_Type): OTG_FS_HOST_FS_HPTXSTS_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HPTXSTS_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HPTXSTS_Type, val: OTG_FS_HOST_FS_HPTXSTS_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HPTXSTS_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HPTXSTS_Type, PTXFSAVL: uint32 = 256) =
  var x: uint32
  x.setMask((PTXFSAVL shl 0).masked(0 .. 15))
  reg.write x.OTG_FS_HOST_FS_HPTXSTS_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HPTXSTS_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_HAINT_Type): OTG_FS_HOST_HAINT_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_HAINT_Fields](reg.loc))

proc read*(reg: OTG_FS_HOST_HAINTMSK_Type): OTG_FS_HOST_HAINTMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_HAINTMSK_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_HAINTMSK_Type, val: OTG_FS_HOST_HAINTMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_HAINTMSK_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_HAINTMSK_Type, HAINTM: uint32 = 0) =
  var x: uint32
  x.setMask((HAINTM shl 0).masked(0 .. 15))
  reg.write x.OTG_FS_HOST_HAINTMSK_Fields

template modifyIt*(reg: OTG_FS_HOST_HAINTMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HPRT_Type): OTG_FS_HOST_FS_HPRT_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HPRT_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HPRT_Type, val: OTG_FS_HOST_FS_HPRT_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HPRT_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HPRT_Type, PCDET: bool = false, PENA: bool = false, PENCHNG: bool = false, POCCHNG: bool = false, PRES: bool = false, PSUSP: bool = false, PRST: bool = false, PPWR: bool = false, PTCTL: uint32 = 0) =
  var x: uint32
  x.setMask((PCDET.uint32 shl 1).masked(1 .. 1))
  x.setMask((PENA.uint32 shl 2).masked(2 .. 2))
  x.setMask((PENCHNG.uint32 shl 3).masked(3 .. 3))
  x.setMask((POCCHNG.uint32 shl 5).masked(5 .. 5))
  x.setMask((PRES.uint32 shl 6).masked(6 .. 6))
  x.setMask((PSUSP.uint32 shl 7).masked(7 .. 7))
  x.setMask((PRST.uint32 shl 8).masked(8 .. 8))
  x.setMask((PPWR.uint32 shl 12).masked(12 .. 12))
  x.setMask((PTCTL shl 13).masked(13 .. 16))
  reg.write x.OTG_FS_HOST_FS_HPRT_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HPRT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR0_Type): OTG_FS_HOST_FS_HCCHAR0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR0_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR0_Type, val: OTG_FS_HOST_FS_HCCHAR0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR0_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR0_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR0_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR1_Type): OTG_FS_HOST_FS_HCCHAR1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR1_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR1_Type, val: OTG_FS_HOST_FS_HCCHAR1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR1_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR1_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR2_Type): OTG_FS_HOST_FS_HCCHAR2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR2_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR2_Type, val: OTG_FS_HOST_FS_HCCHAR2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR2_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR2_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR3_Type): OTG_FS_HOST_FS_HCCHAR3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR3_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR3_Type, val: OTG_FS_HOST_FS_HCCHAR3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR3_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR3_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR4_Type): OTG_FS_HOST_FS_HCCHAR4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR4_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR4_Type, val: OTG_FS_HOST_FS_HCCHAR4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR4_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR4_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR4_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR5_Type): OTG_FS_HOST_FS_HCCHAR5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR5_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR5_Type, val: OTG_FS_HOST_FS_HCCHAR5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR5_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR5_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR5_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR6_Type): OTG_FS_HOST_FS_HCCHAR6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR6_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR6_Type, val: OTG_FS_HOST_FS_HCCHAR6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR6_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR6_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR6_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR7_Type): OTG_FS_HOST_FS_HCCHAR7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR7_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR7_Type, val: OTG_FS_HOST_FS_HCCHAR7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR7_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR7_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR7_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR8_Type): OTG_FS_HOST_FS_HCCHAR8_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR8_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR8_Type, val: OTG_FS_HOST_FS_HCCHAR8_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR8_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR8_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR8_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR9_Type): OTG_FS_HOST_FS_HCCHAR9_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR9_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR9_Type, val: OTG_FS_HOST_FS_HCCHAR9_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR9_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR9_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR9_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR10_Type): OTG_FS_HOST_FS_HCCHAR10_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR10_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR10_Type, val: OTG_FS_HOST_FS_HCCHAR10_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR10_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR10_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR10_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCCHAR11_Type): OTG_FS_HOST_FS_HCCHAR11_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCCHAR11_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCCHAR11_Type, val: OTG_FS_HOST_FS_HCCHAR11_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCCHAR11_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCCHAR11_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_FS_HOST_FS_HCCHAR11_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCCHAR11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT0_Type): OTG_FS_HOST_FS_HCINT0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT0_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT0_Type, val: OTG_FS_HOST_FS_HCINT0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT0_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT0_Type, XFRC: bool = false, CHH: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT0_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT1_Type): OTG_FS_HOST_FS_HCINT1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT1_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT1_Type, val: OTG_FS_HOST_FS_HCINT1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT1_Type, XFRC: bool = false, CHH: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT1_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT2_Type): OTG_FS_HOST_FS_HCINT2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT2_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT2_Type, val: OTG_FS_HOST_FS_HCINT2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT2_Type, XFRC: bool = false, CHH: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT2_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT3_Type): OTG_FS_HOST_FS_HCINT3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT3_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT3_Type, val: OTG_FS_HOST_FS_HCINT3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT3_Type, XFRC: bool = false, CHH: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT3_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT4_Type): OTG_FS_HOST_FS_HCINT4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT4_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT4_Type, val: OTG_FS_HOST_FS_HCINT4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT4_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT4_Type, XFRC: bool = false, CHH: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT4_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT5_Type): OTG_FS_HOST_FS_HCINT5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT5_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT5_Type, val: OTG_FS_HOST_FS_HCINT5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT5_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT5_Type, XFRC: bool = false, CHH: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT5_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT6_Type): OTG_FS_HOST_FS_HCINT6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT6_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT6_Type, val: OTG_FS_HOST_FS_HCINT6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT6_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT6_Type, XFRC: bool = false, CHH: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT6_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT7_Type): OTG_FS_HOST_FS_HCINT7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT7_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT7_Type, val: OTG_FS_HOST_FS_HCINT7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT7_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT7_Type, XFRC: bool = false, CHH: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT7_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT8_Type): OTG_FS_HOST_FS_HCINT8_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT8_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT8_Type, val: OTG_FS_HOST_FS_HCINT8_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT8_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT8_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT8_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT9_Type): OTG_FS_HOST_FS_HCINT9_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT9_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT9_Type, val: OTG_FS_HOST_FS_HCINT9_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT9_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT9_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT9_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT10_Type): OTG_FS_HOST_FS_HCINT10_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT10_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT10_Type, val: OTG_FS_HOST_FS_HCINT10_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT10_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT10_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT10_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINT11_Type): OTG_FS_HOST_FS_HCINT11_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINT11_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINT11_Type, val: OTG_FS_HOST_FS_HCINT11_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINT11_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINT11_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINT11_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINT11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK0_Type): OTG_FS_HOST_FS_HCINTMSK0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK0_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK0_Type, val: OTG_FS_HOST_FS_HCINTMSK0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK0_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK0_Type, XFRCM: bool = false, CHHM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK0_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK1_Type): OTG_FS_HOST_FS_HCINTMSK1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK1_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK1_Type, val: OTG_FS_HOST_FS_HCINTMSK1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK1_Type, XFRCM: bool = false, CHHM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK1_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK2_Type): OTG_FS_HOST_FS_HCINTMSK2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK2_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK2_Type, val: OTG_FS_HOST_FS_HCINTMSK2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK2_Type, XFRCM: bool = false, CHHM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK2_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK3_Type): OTG_FS_HOST_FS_HCINTMSK3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK3_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK3_Type, val: OTG_FS_HOST_FS_HCINTMSK3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK3_Type, XFRCM: bool = false, CHHM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK3_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK4_Type): OTG_FS_HOST_FS_HCINTMSK4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK4_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK4_Type, val: OTG_FS_HOST_FS_HCINTMSK4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK4_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK4_Type, XFRCM: bool = false, CHHM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK4_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK5_Type): OTG_FS_HOST_FS_HCINTMSK5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK5_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK5_Type, val: OTG_FS_HOST_FS_HCINTMSK5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK5_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK5_Type, XFRCM: bool = false, CHHM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK5_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK6_Type): OTG_FS_HOST_FS_HCINTMSK6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK6_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK6_Type, val: OTG_FS_HOST_FS_HCINTMSK6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK6_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK6_Type, XFRCM: bool = false, CHHM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK6_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK7_Type): OTG_FS_HOST_FS_HCINTMSK7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK7_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK7_Type, val: OTG_FS_HOST_FS_HCINTMSK7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK7_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK7_Type, XFRCM: bool = false, CHHM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK7_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK8_Type): OTG_FS_HOST_FS_HCINTMSK8_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK8_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK8_Type, val: OTG_FS_HOST_FS_HCINTMSK8_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK8_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK8_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK8_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK9_Type): OTG_FS_HOST_FS_HCINTMSK9_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK9_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK9_Type, val: OTG_FS_HOST_FS_HCINTMSK9_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK9_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK9_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK9_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK10_Type): OTG_FS_HOST_FS_HCINTMSK10_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK10_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK10_Type, val: OTG_FS_HOST_FS_HCINTMSK10_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK10_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK10_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK10_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCINTMSK11_Type): OTG_FS_HOST_FS_HCINTMSK11_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCINTMSK11_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK11_Type, val: OTG_FS_HOST_FS_HCINTMSK11_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCINTMSK11_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCINTMSK11_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_FS_HOST_FS_HCINTMSK11_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCINTMSK11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ0_Type): OTG_FS_HOST_FS_HCTSIZ0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ0_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ0_Type, val: OTG_FS_HOST_FS_HCTSIZ0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ0_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ0_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ0_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ1_Type): OTG_FS_HOST_FS_HCTSIZ1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ1_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ1_Type, val: OTG_FS_HOST_FS_HCTSIZ1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ1_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ1_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ2_Type): OTG_FS_HOST_FS_HCTSIZ2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ2_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ2_Type, val: OTG_FS_HOST_FS_HCTSIZ2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ2_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ2_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ3_Type): OTG_FS_HOST_FS_HCTSIZ3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ3_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ3_Type, val: OTG_FS_HOST_FS_HCTSIZ3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ3_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ3_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ4_Type): OTG_FS_HOST_FS_HCTSIZ4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ4_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ4_Type, val: OTG_FS_HOST_FS_HCTSIZ4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ4_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ4_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ4_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ5_Type): OTG_FS_HOST_FS_HCTSIZ5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ5_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ5_Type, val: OTG_FS_HOST_FS_HCTSIZ5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ5_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ5_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ5_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ6_Type): OTG_FS_HOST_FS_HCTSIZ6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ6_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ6_Type, val: OTG_FS_HOST_FS_HCTSIZ6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ6_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ6_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ6_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ7_Type): OTG_FS_HOST_FS_HCTSIZ7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ7_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ7_Type, val: OTG_FS_HOST_FS_HCTSIZ7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ7_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ7_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ7_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ8_Type): OTG_FS_HOST_FS_HCTSIZ8_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ8_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ8_Type, val: OTG_FS_HOST_FS_HCTSIZ8_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ8_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ8_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ8_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ9_Type): OTG_FS_HOST_FS_HCTSIZ9_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ9_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ9_Type, val: OTG_FS_HOST_FS_HCTSIZ9_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ9_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ9_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ9_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ10_Type): OTG_FS_HOST_FS_HCTSIZ10_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ10_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ10_Type, val: OTG_FS_HOST_FS_HCTSIZ10_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ10_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ10_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ10_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_HOST_FS_HCTSIZ11_Type): OTG_FS_HOST_FS_HCTSIZ11_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_HOST_FS_HCTSIZ11_Fields](reg.loc))

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ11_Type, val: OTG_FS_HOST_FS_HCTSIZ11_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_HOST_FS_HCTSIZ11_Fields](reg.loc), val)

proc write*(reg: OTG_FS_HOST_FS_HCTSIZ11_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_FS_HOST_FS_HCTSIZ11_Fields

template modifyIt*(reg: OTG_FS_HOST_FS_HCTSIZ11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func FSLSPCS*(r: OTG_FS_HOST_FS_HCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `FSLSPCS=`*(r: var OTG_FS_HOST_FS_HCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCFG_Fields

func FSLSS*(r: OTG_FS_HOST_FS_HCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func FRIVL*(r: OTG_FS_HOST_HFIR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `FRIVL=`*(r: var OTG_FS_HOST_HFIR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_HOST_HFIR_Fields

func FRNUM*(r: OTG_FS_HOST_FS_HFNUM_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func FTREM*(r: OTG_FS_HOST_FS_HFNUM_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

func PTXFSAVL*(r: OTG_FS_HOST_FS_HPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PTXFSAVL=`*(r: var OTG_FS_HOST_FS_HPTXSTS_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_HOST_FS_HPTXSTS_Fields

func PTXQSAV*(r: OTG_FS_HOST_FS_HPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func PTXQTOP*(r: OTG_FS_HOST_FS_HPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func HAINT*(r: OTG_FS_HOST_HAINT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func HAINTM*(r: OTG_FS_HOST_HAINTMSK_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `HAINTM=`*(r: var OTG_FS_HOST_HAINTMSK_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_HOST_HAINTMSK_Fields

func PCSTS*(r: OTG_FS_HOST_FS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func PCDET*(r: OTG_FS_HOST_FS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PCDET=`*(r: var OTG_FS_HOST_FS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HPRT_Fields

func PENA*(r: OTG_FS_HOST_FS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `PENA=`*(r: var OTG_FS_HOST_FS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_HOST_FS_HPRT_Fields

func PENCHNG*(r: OTG_FS_HOST_FS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PENCHNG=`*(r: var OTG_FS_HOST_FS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HPRT_Fields

func POCA*(r: OTG_FS_HOST_FS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func POCCHNG*(r: OTG_FS_HOST_FS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `POCCHNG=`*(r: var OTG_FS_HOST_FS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HPRT_Fields

func PRES*(r: OTG_FS_HOST_FS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PRES=`*(r: var OTG_FS_HOST_FS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HPRT_Fields

func PSUSP*(r: OTG_FS_HOST_FS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `PSUSP=`*(r: var OTG_FS_HOST_FS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HPRT_Fields

func PRST*(r: OTG_FS_HOST_FS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PRST=`*(r: var OTG_FS_HOST_FS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HPRT_Fields

func PLSTS*(r: OTG_FS_HOST_FS_HPRT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

func PPWR*(r: OTG_FS_HOST_FS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PPWR=`*(r: var OTG_FS_HOST_FS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_FS_HOST_FS_HPRT_Fields

func PTCTL*(r: OTG_FS_HOST_FS_HPRT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 16)

proc `PTCTL=`*(r: var OTG_FS_HOST_FS_HPRT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 16)
  tmp.setMask((val shl 13).masked(13 .. 16))
  r = tmp.OTG_FS_HOST_FS_HPRT_Fields

func PSPD*(r: OTG_FS_HOST_FS_HPRT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 18)

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR0_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR0_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR0_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR0_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR0_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR0_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR0_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR0_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR0_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR0_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR1_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR1_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR1_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR1_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR1_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR1_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR1_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR1_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR1_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR1_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR2_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR2_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR2_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR2_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR2_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR2_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR2_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR2_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR2_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR2_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR3_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR3_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR3_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR3_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR3_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR3_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR3_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR3_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR3_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR3_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR4_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR4_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR4_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR4_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR4_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR4_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR4_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR4_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR4_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR4_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR5_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR5_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR5_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR5_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR5_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR5_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR5_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR5_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR5_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR5_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR6_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR6_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR6_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR6_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR6_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR6_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR6_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR6_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR6_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR6_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR7_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR7_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR7_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR7_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR7_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR7_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR7_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR7_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR7_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR7_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR8_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR8_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR8_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR8_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR8_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR8_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR8_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR8_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR8_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR8_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR9_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR9_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR9_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR9_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR9_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR9_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR9_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR9_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR9_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR9_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR9_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR9_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR9_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR9_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR9_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR10_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR10_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR10_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR10_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR10_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR10_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR10_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR10_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR10_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR10_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR10_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR10_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR10_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR10_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR10_Fields

func MPSIZ*(r: OTG_FS_HOST_FS_HCCHAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_HOST_FS_HCCHAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCCHAR11_Fields

func EPNUM*(r: OTG_FS_HOST_FS_HCCHAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_FS_HOST_FS_HCCHAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_FS_HOST_FS_HCCHAR11_Fields

func EPDIR*(r: OTG_FS_HOST_FS_HCCHAR11_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_FS_HOST_FS_HCCHAR11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_HOST_FS_HCCHAR11_Fields

func LSDEV*(r: OTG_FS_HOST_FS_HCCHAR11_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_FS_HOST_FS_HCCHAR11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_FS_HOST_FS_HCCHAR11_Fields

func EPTYP*(r: OTG_FS_HOST_FS_HCCHAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_HOST_FS_HCCHAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_HOST_FS_HCCHAR11_Fields

func MCNT*(r: OTG_FS_HOST_FS_HCCHAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_FS_HOST_FS_HCCHAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_FS_HOST_FS_HCCHAR11_Fields

func DAD*(r: OTG_FS_HOST_FS_HCCHAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_FS_HOST_FS_HCCHAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCCHAR11_Fields

func ODDFRM*(r: OTG_FS_HOST_FS_HCCHAR11_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_FS_HOST_FS_HCCHAR11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_HOST_FS_HCCHAR11_Fields

func CHDIS*(r: OTG_FS_HOST_FS_HCCHAR11_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_FS_HOST_FS_HCCHAR11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCCHAR11_Fields

func CHENA*(r: OTG_FS_HOST_FS_HCCHAR11_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_FS_HOST_FS_HCCHAR11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_HOST_FS_HCCHAR11_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT0_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT0_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT0_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT0_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT0_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT0_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT0_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT0_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT0_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT1_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT1_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT1_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT1_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT1_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT1_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT1_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT1_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT1_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT2_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT2_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT2_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT2_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT2_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT2_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT2_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT2_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT2_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT3_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT3_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT3_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT3_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT3_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT3_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT3_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT3_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT3_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT4_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT4_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT4_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT4_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT4_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT4_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT4_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT4_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT4_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT5_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT5_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT5_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT5_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT5_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT5_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT5_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT5_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT5_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT6_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT6_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT6_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT6_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT6_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT6_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT6_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT6_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT6_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT7_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT7_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT7_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT7_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT7_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT7_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT7_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT7_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT7_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func AHBERR*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT8_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func AHBERR*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT9_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func AHBERR*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT10_Fields

func XFRC*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func CHH*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func AHBERR*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func STALL*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func NAK*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func ACK*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func TXERR*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func BBERR*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func FRMOR*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func DTERR*(r: OTG_FS_HOST_FS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_FS_HOST_FS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINT11_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK0_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK0_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK0_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK0_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK0_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK0_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK0_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK0_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK0_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK0_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK1_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK1_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK1_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK1_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK1_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK1_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK1_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK1_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK1_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK1_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK2_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK2_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK2_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK2_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK2_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK2_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK2_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK2_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK2_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK2_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK3_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK3_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK3_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK3_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK3_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK3_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK3_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK3_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK3_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK3_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK4_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK4_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK4_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK4_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK4_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK4_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK4_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK4_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK4_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK4_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK5_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK5_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK5_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK5_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK5_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK5_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK5_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK5_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK5_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK5_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK6_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK6_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK6_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK6_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK6_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK6_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK6_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK6_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK6_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK6_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK7_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK7_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK7_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK7_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK7_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK7_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK7_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK7_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK7_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK7_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func AHBERRM*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK8_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func AHBERRM*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK9_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func AHBERRM*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK10_Fields

func XFRCM*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func CHHM*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func AHBERRM*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func STALLM*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func NAKM*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func ACKM*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func NYET*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func TXERRM*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func BBERRM*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func FRMORM*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func DTERRM*(r: OTG_FS_HOST_FS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_FS_HOST_FS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_HOST_FS_HCINTMSK11_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ0_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ0_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ0_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ1_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ1_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ1_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ2_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ2_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ2_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ3_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ3_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ3_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ4_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ4_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ4_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ5_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ5_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ5_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ6_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ6_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ6_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ7_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ7_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ7_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ8_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ8_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ8_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ9_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ9_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ9_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ10_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ10_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ10_Fields

func XFRSIZ*(r: OTG_FS_HOST_FS_HCTSIZ11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_HOST_FS_HCTSIZ11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ11_Fields

func PKTCNT*(r: OTG_FS_HOST_FS_HCTSIZ11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_HOST_FS_HCTSIZ11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ11_Fields

func DPID*(r: OTG_FS_HOST_FS_HCTSIZ11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_FS_HOST_FS_HCTSIZ11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_HOST_FS_HCTSIZ11_Fields

type
  OTG_FS_DEVICE_FS_DCFG_Fields* = distinct uint32
  OTG_FS_DEVICE_FS_DCTL_Fields* = distinct uint32
  OTG_FS_DEVICE_FS_DSTS_Fields* = distinct uint32
  OTG_FS_DEVICE_FS_DIEPMSK_Fields* = distinct uint32
  OTG_FS_DEVICE_FS_DOEPMSK_Fields* = distinct uint32
  OTG_FS_DEVICE_FS_DAINT_Fields* = distinct uint32
  OTG_FS_DEVICE_FS_DAINTMSK_Fields* = distinct uint32
  OTG_FS_DEVICE_DVBUSDIS_Fields* = distinct uint32
  OTG_FS_DEVICE_DVBUSPULSE_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPEMPMSK_Fields* = distinct uint32
  OTG_FS_DEVICE_FS_DIEPCTL0_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPCTL1_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPCTL2_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPCTL3_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPCTL0_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPCTL1_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPCTL2_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPCTL3_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPINT0_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPINT1_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPINT2_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPINT3_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPINT0_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPINT1_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPINT2_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPINT3_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPTSIZ0_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPTSIZ0_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPTSIZ1_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPTSIZ2_Fields* = distinct uint32
  OTG_FS_DEVICE_DIEPTSIZ3_Fields* = distinct uint32
  OTG_FS_DEVICE_DTXFSTS0_Fields* = distinct uint32
  OTG_FS_DEVICE_DTXFSTS1_Fields* = distinct uint32
  OTG_FS_DEVICE_DTXFSTS2_Fields* = distinct uint32
  OTG_FS_DEVICE_DTXFSTS3_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPTSIZ1_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPTSIZ2_Fields* = distinct uint32
  OTG_FS_DEVICE_DOEPTSIZ3_Fields* = distinct uint32

proc read*(reg: OTG_FS_DEVICE_FS_DCFG_Type): OTG_FS_DEVICE_FS_DCFG_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_FS_DCFG_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_FS_DCFG_Type, val: OTG_FS_DEVICE_FS_DCFG_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_FS_DCFG_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_FS_DCFG_Type, DSPD: uint32 = 0, NZLSOHSK: bool = false, DAD: uint32 = 0, PFIVL: uint32 = 0, ERRATIM: bool = false) =
  var x: uint32
  x.setMask((DSPD shl 0).masked(0 .. 1))
  x.setMask((NZLSOHSK.uint32 shl 2).masked(2 .. 2))
  x.setMask((DAD shl 4).masked(4 .. 10))
  x.setMask((PFIVL shl 11).masked(11 .. 12))
  x.setMask((ERRATIM.uint32 shl 15).masked(15 .. 15))
  reg.write x.OTG_FS_DEVICE_FS_DCFG_Fields

template modifyIt*(reg: OTG_FS_DEVICE_FS_DCFG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_FS_DCTL_Type): OTG_FS_DEVICE_FS_DCTL_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_FS_DCTL_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_FS_DCTL_Type, val: OTG_FS_DEVICE_FS_DCTL_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_FS_DCTL_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_FS_DCTL_Type, RWUSIG: bool = false, SDIS: bool = false, TCTL: uint32 = 0, SGINAK: bool = false, CGINAK: bool = false, SGONAK: bool = false, CGONAK: bool = false, POPRGDNE: bool = false) =
  var x: uint32
  x.setMask((RWUSIG.uint32 shl 0).masked(0 .. 0))
  x.setMask((SDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((TCTL shl 4).masked(4 .. 6))
  x.setMask((SGINAK.uint32 shl 7).masked(7 .. 7))
  x.setMask((CGINAK.uint32 shl 8).masked(8 .. 8))
  x.setMask((SGONAK.uint32 shl 9).masked(9 .. 9))
  x.setMask((CGONAK.uint32 shl 10).masked(10 .. 10))
  x.setMask((POPRGDNE.uint32 shl 11).masked(11 .. 11))
  reg.write x.OTG_FS_DEVICE_FS_DCTL_Fields

template modifyIt*(reg: OTG_FS_DEVICE_FS_DCTL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_FS_DSTS_Type): OTG_FS_DEVICE_FS_DSTS_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_FS_DSTS_Fields](reg.loc))

proc read*(reg: OTG_FS_DEVICE_FS_DIEPMSK_Type): OTG_FS_DEVICE_FS_DIEPMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_FS_DIEPMSK_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_FS_DIEPMSK_Type, val: OTG_FS_DEVICE_FS_DIEPMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_FS_DIEPMSK_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_FS_DIEPMSK_Type, XFRCM: bool = false, EPDM: bool = false, TOM: bool = false, ITTXFEMSK: bool = false, INEPNMM: bool = false, INEPNEM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDM.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOM.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFEMSK.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNMM.uint32 shl 5).masked(5 .. 5))
  x.setMask((INEPNEM.uint32 shl 6).masked(6 .. 6))
  reg.write x.OTG_FS_DEVICE_FS_DIEPMSK_Fields

template modifyIt*(reg: OTG_FS_DEVICE_FS_DIEPMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_FS_DOEPMSK_Type): OTG_FS_DEVICE_FS_DOEPMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_FS_DOEPMSK_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_FS_DOEPMSK_Type, val: OTG_FS_DEVICE_FS_DOEPMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_FS_DOEPMSK_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_FS_DOEPMSK_Type, XFRCM: bool = false, EPDM: bool = false, STUPM: bool = false, OTEPDM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDM.uint32 shl 1).masked(1 .. 1))
  x.setMask((STUPM.uint32 shl 3).masked(3 .. 3))
  x.setMask((OTEPDM.uint32 shl 4).masked(4 .. 4))
  reg.write x.OTG_FS_DEVICE_FS_DOEPMSK_Fields

template modifyIt*(reg: OTG_FS_DEVICE_FS_DOEPMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_FS_DAINT_Type): OTG_FS_DEVICE_FS_DAINT_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_FS_DAINT_Fields](reg.loc))

proc read*(reg: OTG_FS_DEVICE_FS_DAINTMSK_Type): OTG_FS_DEVICE_FS_DAINTMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_FS_DAINTMSK_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_FS_DAINTMSK_Type, val: OTG_FS_DEVICE_FS_DAINTMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_FS_DAINTMSK_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_FS_DAINTMSK_Type, IEPM: uint32 = 0, OEPINT: uint32 = 0) =
  var x: uint32
  x.setMask((IEPM shl 0).masked(0 .. 15))
  x.setMask((OEPINT shl 16).masked(16 .. 31))
  reg.write x.OTG_FS_DEVICE_FS_DAINTMSK_Fields

template modifyIt*(reg: OTG_FS_DEVICE_FS_DAINTMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DVBUSDIS_Type): OTG_FS_DEVICE_DVBUSDIS_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DVBUSDIS_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DVBUSDIS_Type, val: OTG_FS_DEVICE_DVBUSDIS_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DVBUSDIS_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DVBUSDIS_Type, VBUSDT: uint32 = 6103) =
  var x: uint32
  x.setMask((VBUSDT shl 0).masked(0 .. 15))
  reg.write x.OTG_FS_DEVICE_DVBUSDIS_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DVBUSDIS_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DVBUSPULSE_Type): OTG_FS_DEVICE_DVBUSPULSE_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DVBUSPULSE_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DVBUSPULSE_Type, val: OTG_FS_DEVICE_DVBUSPULSE_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DVBUSPULSE_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DVBUSPULSE_Type, DVBUSP: uint32 = 1464) =
  var x: uint32
  x.setMask((DVBUSP shl 0).masked(0 .. 11))
  reg.write x.OTG_FS_DEVICE_DVBUSPULSE_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DVBUSPULSE_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPEMPMSK_Type): OTG_FS_DEVICE_DIEPEMPMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPEMPMSK_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPEMPMSK_Type, val: OTG_FS_DEVICE_DIEPEMPMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPEMPMSK_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPEMPMSK_Type, INEPTXFEM: uint32 = 0) =
  var x: uint32
  x.setMask((INEPTXFEM shl 0).masked(0 .. 15))
  reg.write x.OTG_FS_DEVICE_DIEPEMPMSK_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPEMPMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_FS_DIEPCTL0_Type): OTG_FS_DEVICE_FS_DIEPCTL0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_FS_DIEPCTL0_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_FS_DIEPCTL0_Type, val: OTG_FS_DEVICE_FS_DIEPCTL0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_FS_DIEPCTL0_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_FS_DIEPCTL0_Type, MPSIZ: uint32 = 0, STALL: bool = false, TXFNUM: uint32 = 0, CNAK: bool = false, SNAK: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 1))
  x.setMask((STALL.uint32 shl 21).masked(21 .. 21))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  reg.write x.OTG_FS_DEVICE_FS_DIEPCTL0_Fields

template modifyIt*(reg: OTG_FS_DEVICE_FS_DIEPCTL0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPCTL1_Type): OTG_FS_DEVICE_DIEPCTL1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPCTL1_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPCTL1_Type, val: OTG_FS_DEVICE_DIEPCTL1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPCTL1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPCTL1_Type, EPENA: bool = false, EPDIS: bool = false, SODDFRM_SD1PID: bool = false, SD0PID_SEVNFRM: bool = false, SNAK: bool = false, CNAK: bool = false, TXFNUM: uint32 = 0, Stall: bool = false, EPTYP: uint32 = 0, USBAEP: bool = false, MPSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((SODDFRM_SD1PID.uint32 shl 29).masked(29 .. 29))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  reg.write x.OTG_FS_DEVICE_DIEPCTL1_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPCTL1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPCTL2_Type): OTG_FS_DEVICE_DIEPCTL2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPCTL2_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPCTL2_Type, val: OTG_FS_DEVICE_DIEPCTL2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPCTL2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPCTL2_Type, EPENA: bool = false, EPDIS: bool = false, SODDFRM: bool = false, SD0PID_SEVNFRM: bool = false, SNAK: bool = false, CNAK: bool = false, TXFNUM: uint32 = 0, Stall: bool = false, EPTYP: uint32 = 0, USBAEP: bool = false, MPSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  reg.write x.OTG_FS_DEVICE_DIEPCTL2_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPCTL2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPCTL3_Type): OTG_FS_DEVICE_DIEPCTL3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPCTL3_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPCTL3_Type, val: OTG_FS_DEVICE_DIEPCTL3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPCTL3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPCTL3_Type, EPENA: bool = false, EPDIS: bool = false, SODDFRM: bool = false, SD0PID_SEVNFRM: bool = false, SNAK: bool = false, CNAK: bool = false, TXFNUM: uint32 = 0, Stall: bool = false, EPTYP: uint32 = 0, USBAEP: bool = false, MPSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  reg.write x.OTG_FS_DEVICE_DIEPCTL3_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPCTL3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPCTL0_Type): OTG_FS_DEVICE_DOEPCTL0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPCTL0_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPCTL0_Type, val: OTG_FS_DEVICE_DOEPCTL0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPCTL0_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPCTL0_Type, EPENA: bool = false, SNAK: bool = false, CNAK: bool = false, Stall: bool = false, SNPM: bool = false) =
  var x: uint32
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((SNPM.uint32 shl 20).masked(20 .. 20))
  reg.write x.OTG_FS_DEVICE_DOEPCTL0_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPCTL0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPCTL1_Type): OTG_FS_DEVICE_DOEPCTL1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPCTL1_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPCTL1_Type, val: OTG_FS_DEVICE_DOEPCTL1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPCTL1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPCTL1_Type, EPENA: bool = false, EPDIS: bool = false, SODDFRM: bool = false, SD0PID_SEVNFRM: bool = false, SNAK: bool = false, CNAK: bool = false, Stall: bool = false, SNPM: bool = false, EPTYP: uint32 = 0, USBAEP: bool = false, MPSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((SNPM.uint32 shl 20).masked(20 .. 20))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  reg.write x.OTG_FS_DEVICE_DOEPCTL1_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPCTL1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPCTL2_Type): OTG_FS_DEVICE_DOEPCTL2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPCTL2_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPCTL2_Type, val: OTG_FS_DEVICE_DOEPCTL2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPCTL2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPCTL2_Type, EPENA: bool = false, EPDIS: bool = false, SODDFRM: bool = false, SD0PID_SEVNFRM: bool = false, SNAK: bool = false, CNAK: bool = false, Stall: bool = false, SNPM: bool = false, EPTYP: uint32 = 0, USBAEP: bool = false, MPSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((SNPM.uint32 shl 20).masked(20 .. 20))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  reg.write x.OTG_FS_DEVICE_DOEPCTL2_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPCTL2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPCTL3_Type): OTG_FS_DEVICE_DOEPCTL3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPCTL3_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPCTL3_Type, val: OTG_FS_DEVICE_DOEPCTL3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPCTL3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPCTL3_Type, EPENA: bool = false, EPDIS: bool = false, SODDFRM: bool = false, SD0PID_SEVNFRM: bool = false, SNAK: bool = false, CNAK: bool = false, Stall: bool = false, SNPM: bool = false, EPTYP: uint32 = 0, USBAEP: bool = false, MPSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((SNPM.uint32 shl 20).masked(20 .. 20))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  reg.write x.OTG_FS_DEVICE_DOEPCTL3_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPCTL3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPINT0_Type): OTG_FS_DEVICE_DIEPINT0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPINT0_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPINT0_Type, val: OTG_FS_DEVICE_DIEPINT0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPINT0_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPINT0_Type, INEPNE: bool = false, ITTXFE: bool = false, TOC: bool = false, EPDISD: bool = false, XFRC: bool = false) =
  var x: uint32
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  reg.write x.OTG_FS_DEVICE_DIEPINT0_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPINT0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPINT1_Type): OTG_FS_DEVICE_DIEPINT1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPINT1_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPINT1_Type, val: OTG_FS_DEVICE_DIEPINT1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPINT1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPINT1_Type, INEPNE: bool = false, ITTXFE: bool = false, TOC: bool = false, EPDISD: bool = false, XFRC: bool = false) =
  var x: uint32
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  reg.write x.OTG_FS_DEVICE_DIEPINT1_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPINT1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPINT2_Type): OTG_FS_DEVICE_DIEPINT2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPINT2_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPINT2_Type, val: OTG_FS_DEVICE_DIEPINT2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPINT2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPINT2_Type, INEPNE: bool = false, ITTXFE: bool = false, TOC: bool = false, EPDISD: bool = false, XFRC: bool = false) =
  var x: uint32
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  reg.write x.OTG_FS_DEVICE_DIEPINT2_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPINT2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPINT3_Type): OTG_FS_DEVICE_DIEPINT3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPINT3_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPINT3_Type, val: OTG_FS_DEVICE_DIEPINT3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPINT3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPINT3_Type, INEPNE: bool = false, ITTXFE: bool = false, TOC: bool = false, EPDISD: bool = false, XFRC: bool = false) =
  var x: uint32
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  reg.write x.OTG_FS_DEVICE_DIEPINT3_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPINT3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPINT0_Type): OTG_FS_DEVICE_DOEPINT0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPINT0_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPINT0_Type, val: OTG_FS_DEVICE_DOEPINT0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPINT0_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPINT0_Type, B2BSTUP: bool = false, OTEPDIS: bool = false, STUP: bool = false, EPDISD: bool = false, XFRC: bool = false) =
  var x: uint32
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  reg.write x.OTG_FS_DEVICE_DOEPINT0_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPINT0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPINT1_Type): OTG_FS_DEVICE_DOEPINT1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPINT1_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPINT1_Type, val: OTG_FS_DEVICE_DOEPINT1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPINT1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPINT1_Type, B2BSTUP: bool = false, OTEPDIS: bool = false, STUP: bool = false, EPDISD: bool = false, XFRC: bool = false) =
  var x: uint32
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  reg.write x.OTG_FS_DEVICE_DOEPINT1_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPINT1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPINT2_Type): OTG_FS_DEVICE_DOEPINT2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPINT2_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPINT2_Type, val: OTG_FS_DEVICE_DOEPINT2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPINT2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPINT2_Type, B2BSTUP: bool = false, OTEPDIS: bool = false, STUP: bool = false, EPDISD: bool = false, XFRC: bool = false) =
  var x: uint32
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  reg.write x.OTG_FS_DEVICE_DOEPINT2_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPINT2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPINT3_Type): OTG_FS_DEVICE_DOEPINT3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPINT3_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPINT3_Type, val: OTG_FS_DEVICE_DOEPINT3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPINT3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPINT3_Type, B2BSTUP: bool = false, OTEPDIS: bool = false, STUP: bool = false, EPDISD: bool = false, XFRC: bool = false) =
  var x: uint32
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  reg.write x.OTG_FS_DEVICE_DOEPINT3_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPINT3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPTSIZ0_Type): OTG_FS_DEVICE_DIEPTSIZ0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPTSIZ0_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPTSIZ0_Type, val: OTG_FS_DEVICE_DIEPTSIZ0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPTSIZ0_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPTSIZ0_Type, PKTCNT: uint32 = 0, XFRSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((PKTCNT shl 19).masked(19 .. 20))
  x.setMask((XFRSIZ shl 0).masked(0 .. 6))
  reg.write x.OTG_FS_DEVICE_DIEPTSIZ0_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPTSIZ0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPTSIZ0_Type): OTG_FS_DEVICE_DOEPTSIZ0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPTSIZ0_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPTSIZ0_Type, val: OTG_FS_DEVICE_DOEPTSIZ0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPTSIZ0_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPTSIZ0_Type, STUPCNT: uint32 = 0, PKTCNT: bool = false, XFRSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((STUPCNT shl 29).masked(29 .. 30))
  x.setMask((PKTCNT.uint32 shl 19).masked(19 .. 19))
  x.setMask((XFRSIZ shl 0).masked(0 .. 6))
  reg.write x.OTG_FS_DEVICE_DOEPTSIZ0_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPTSIZ0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPTSIZ1_Type): OTG_FS_DEVICE_DIEPTSIZ1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPTSIZ1_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPTSIZ1_Type, val: OTG_FS_DEVICE_DIEPTSIZ1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPTSIZ1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPTSIZ1_Type, MCNT: uint32 = 0, PKTCNT: uint32 = 0, XFRSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((MCNT shl 29).masked(29 .. 30))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  reg.write x.OTG_FS_DEVICE_DIEPTSIZ1_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPTSIZ1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPTSIZ2_Type): OTG_FS_DEVICE_DIEPTSIZ2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPTSIZ2_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPTSIZ2_Type, val: OTG_FS_DEVICE_DIEPTSIZ2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPTSIZ2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPTSIZ2_Type, MCNT: uint32 = 0, PKTCNT: uint32 = 0, XFRSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((MCNT shl 29).masked(29 .. 30))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  reg.write x.OTG_FS_DEVICE_DIEPTSIZ2_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPTSIZ2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DIEPTSIZ3_Type): OTG_FS_DEVICE_DIEPTSIZ3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DIEPTSIZ3_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DIEPTSIZ3_Type, val: OTG_FS_DEVICE_DIEPTSIZ3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DIEPTSIZ3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DIEPTSIZ3_Type, MCNT: uint32 = 0, PKTCNT: uint32 = 0, XFRSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((MCNT shl 29).masked(29 .. 30))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  reg.write x.OTG_FS_DEVICE_DIEPTSIZ3_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DIEPTSIZ3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DTXFSTS0_Type): OTG_FS_DEVICE_DTXFSTS0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DTXFSTS0_Fields](reg.loc))

proc read*(reg: OTG_FS_DEVICE_DTXFSTS1_Type): OTG_FS_DEVICE_DTXFSTS1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DTXFSTS1_Fields](reg.loc))

proc read*(reg: OTG_FS_DEVICE_DTXFSTS2_Type): OTG_FS_DEVICE_DTXFSTS2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DTXFSTS2_Fields](reg.loc))

proc read*(reg: OTG_FS_DEVICE_DTXFSTS3_Type): OTG_FS_DEVICE_DTXFSTS3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DTXFSTS3_Fields](reg.loc))

proc read*(reg: OTG_FS_DEVICE_DOEPTSIZ1_Type): OTG_FS_DEVICE_DOEPTSIZ1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPTSIZ1_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPTSIZ1_Type, val: OTG_FS_DEVICE_DOEPTSIZ1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPTSIZ1_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPTSIZ1_Type, RXDPID_STUPCNT: uint32 = 0, PKTCNT: uint32 = 0, XFRSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((RXDPID_STUPCNT shl 29).masked(29 .. 30))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  reg.write x.OTG_FS_DEVICE_DOEPTSIZ1_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPTSIZ1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPTSIZ2_Type): OTG_FS_DEVICE_DOEPTSIZ2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPTSIZ2_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPTSIZ2_Type, val: OTG_FS_DEVICE_DOEPTSIZ2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPTSIZ2_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPTSIZ2_Type, RXDPID_STUPCNT: uint32 = 0, PKTCNT: uint32 = 0, XFRSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((RXDPID_STUPCNT shl 29).masked(29 .. 30))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  reg.write x.OTG_FS_DEVICE_DOEPTSIZ2_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPTSIZ2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_FS_DEVICE_DOEPTSIZ3_Type): OTG_FS_DEVICE_DOEPTSIZ3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_DEVICE_DOEPTSIZ3_Fields](reg.loc))

proc write*(reg: OTG_FS_DEVICE_DOEPTSIZ3_Type, val: OTG_FS_DEVICE_DOEPTSIZ3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_DEVICE_DOEPTSIZ3_Fields](reg.loc), val)

proc write*(reg: OTG_FS_DEVICE_DOEPTSIZ3_Type, RXDPID_STUPCNT: uint32 = 0, PKTCNT: uint32 = 0, XFRSIZ: uint32 = 0) =
  var x: uint32
  x.setMask((RXDPID_STUPCNT shl 29).masked(29 .. 30))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  reg.write x.OTG_FS_DEVICE_DOEPTSIZ3_Fields

template modifyIt*(reg: OTG_FS_DEVICE_DOEPTSIZ3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func DSPD*(r: OTG_FS_DEVICE_FS_DCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `DSPD=`*(r: var OTG_FS_DEVICE_FS_DCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.OTG_FS_DEVICE_FS_DCFG_Fields

func NZLSOHSK*(r: OTG_FS_DEVICE_FS_DCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `NZLSOHSK=`*(r: var OTG_FS_DEVICE_FS_DCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_FS_DEVICE_FS_DCFG_Fields

func DAD*(r: OTG_FS_DEVICE_FS_DCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 10)

proc `DAD=`*(r: var OTG_FS_DEVICE_FS_DCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 10)
  tmp.setMask((val shl 4).masked(4 .. 10))
  r = tmp.OTG_FS_DEVICE_FS_DCFG_Fields

func PFIVL*(r: OTG_FS_DEVICE_FS_DCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `PFIVL=`*(r: var OTG_FS_DEVICE_FS_DCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.OTG_FS_DEVICE_FS_DCFG_Fields

func ERRATIM*(r: OTG_FS_DEVICE_FS_DCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ERRATIM=`*(r: var OTG_FS_DEVICE_FS_DCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_DEVICE_FS_DCFG_Fields

func RWUSIG*(r: OTG_FS_DEVICE_FS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `RWUSIG=`*(r: var OTG_FS_DEVICE_FS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_FS_DCTL_Fields

func SDIS*(r: OTG_FS_DEVICE_FS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SDIS=`*(r: var OTG_FS_DEVICE_FS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_FS_DCTL_Fields

func GINSTS*(r: OTG_FS_DEVICE_FS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func GONSTS*(r: OTG_FS_DEVICE_FS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func TCTL*(r: OTG_FS_DEVICE_FS_DCTL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `TCTL=`*(r: var OTG_FS_DEVICE_FS_DCTL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.OTG_FS_DEVICE_FS_DCTL_Fields

func SGINAK*(r: OTG_FS_DEVICE_FS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `SGINAK=`*(r: var OTG_FS_DEVICE_FS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_FS_DEVICE_FS_DCTL_Fields

func CGINAK*(r: OTG_FS_DEVICE_FS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CGINAK=`*(r: var OTG_FS_DEVICE_FS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_FS_DEVICE_FS_DCTL_Fields

func SGONAK*(r: OTG_FS_DEVICE_FS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `SGONAK=`*(r: var OTG_FS_DEVICE_FS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_FS_DEVICE_FS_DCTL_Fields

func CGONAK*(r: OTG_FS_DEVICE_FS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CGONAK=`*(r: var OTG_FS_DEVICE_FS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_FS_DEVICE_FS_DCTL_Fields

func POPRGDNE*(r: OTG_FS_DEVICE_FS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `POPRGDNE=`*(r: var OTG_FS_DEVICE_FS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_FS_DEVICE_FS_DCTL_Fields

func SUSPSTS*(r: OTG_FS_DEVICE_FS_DSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func ENUMSPD*(r: OTG_FS_DEVICE_FS_DSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 2)

func EERR*(r: OTG_FS_DEVICE_FS_DSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func FNSOF*(r: OTG_FS_DEVICE_FS_DSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 21)

func XFRCM*(r: OTG_FS_DEVICE_FS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_DEVICE_FS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_FS_DIEPMSK_Fields

func EPDM*(r: OTG_FS_DEVICE_FS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDM=`*(r: var OTG_FS_DEVICE_FS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_FS_DIEPMSK_Fields

func TOM*(r: OTG_FS_DEVICE_FS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOM=`*(r: var OTG_FS_DEVICE_FS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_DEVICE_FS_DIEPMSK_Fields

func ITTXFEMSK*(r: OTG_FS_DEVICE_FS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFEMSK=`*(r: var OTG_FS_DEVICE_FS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_DEVICE_FS_DIEPMSK_Fields

func INEPNMM*(r: OTG_FS_DEVICE_FS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `INEPNMM=`*(r: var OTG_FS_DEVICE_FS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_FS_DEVICE_FS_DIEPMSK_Fields

func INEPNEM*(r: OTG_FS_DEVICE_FS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNEM=`*(r: var OTG_FS_DEVICE_FS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_DEVICE_FS_DIEPMSK_Fields

func XFRCM*(r: OTG_FS_DEVICE_FS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_FS_DEVICE_FS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_FS_DOEPMSK_Fields

func EPDM*(r: OTG_FS_DEVICE_FS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDM=`*(r: var OTG_FS_DEVICE_FS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_FS_DOEPMSK_Fields

func STUPM*(r: OTG_FS_DEVICE_FS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUPM=`*(r: var OTG_FS_DEVICE_FS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_DEVICE_FS_DOEPMSK_Fields

func OTEPDM*(r: OTG_FS_DEVICE_FS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDM=`*(r: var OTG_FS_DEVICE_FS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_DEVICE_FS_DOEPMSK_Fields

func IEPINT*(r: OTG_FS_DEVICE_FS_DAINT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func OEPINT*(r: OTG_FS_DEVICE_FS_DAINT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

func IEPM*(r: OTG_FS_DEVICE_FS_DAINTMSK_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `IEPM=`*(r: var OTG_FS_DEVICE_FS_DAINTMSK_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_DEVICE_FS_DAINTMSK_Fields

func OEPINT*(r: OTG_FS_DEVICE_FS_DAINTMSK_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `OEPINT=`*(r: var OTG_FS_DEVICE_FS_DAINTMSK_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_FS_DEVICE_FS_DAINTMSK_Fields

func VBUSDT*(r: OTG_FS_DEVICE_DVBUSDIS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `VBUSDT=`*(r: var OTG_FS_DEVICE_DVBUSDIS_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_DEVICE_DVBUSDIS_Fields

func DVBUSP*(r: OTG_FS_DEVICE_DVBUSPULSE_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `DVBUSP=`*(r: var OTG_FS_DEVICE_DVBUSPULSE_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.OTG_FS_DEVICE_DVBUSPULSE_Fields

func INEPTXFEM*(r: OTG_FS_DEVICE_DIEPEMPMSK_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXFEM=`*(r: var OTG_FS_DEVICE_DIEPEMPMSK_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_FS_DEVICE_DIEPEMPMSK_Fields

func MPSIZ*(r: OTG_FS_DEVICE_FS_DIEPCTL0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `MPSIZ=`*(r: var OTG_FS_DEVICE_FS_DIEPCTL0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.OTG_FS_DEVICE_FS_DIEPCTL0_Fields

func USBAEP*(r: OTG_FS_DEVICE_FS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

func NAKSTS*(r: OTG_FS_DEVICE_FS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_FS_DEVICE_FS_DIEPCTL0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

func STALL*(r: OTG_FS_DEVICE_FS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `STALL=`*(r: var OTG_FS_DEVICE_FS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_FS_DEVICE_FS_DIEPCTL0_Fields

func TXFNUM*(r: OTG_FS_DEVICE_FS_DIEPCTL0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_FS_DEVICE_FS_DIEPCTL0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_FS_DEVICE_FS_DIEPCTL0_Fields

proc `CNAK=`*(r: var OTG_FS_DEVICE_FS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_FS_DEVICE_FS_DIEPCTL0_Fields

proc `SNAK=`*(r: var OTG_FS_DEVICE_FS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_FS_DEVICE_FS_DIEPCTL0_Fields

func EPDIS*(r: OTG_FS_DEVICE_FS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

func EPENA*(r: OTG_FS_DEVICE_FS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

func EPENA*(r: OTG_FS_DEVICE_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

func EPDIS*(r: OTG_FS_DEVICE_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

proc `SODDFRM_SD1PID=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

proc `SNAK=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

proc `CNAK=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

func TXFNUM*(r: OTG_FS_DEVICE_DIEPCTL1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

func Stall*(r: OTG_FS_DEVICE_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

func EPTYP*(r: OTG_FS_DEVICE_DIEPCTL1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

func NAKSTS*(r: OTG_FS_DEVICE_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EONUM_DPID*(r: OTG_FS_DEVICE_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func USBAEP*(r: OTG_FS_DEVICE_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

func MPSIZ*(r: OTG_FS_DEVICE_DIEPCTL1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_DEVICE_DIEPCTL1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_DEVICE_DIEPCTL1_Fields

func EPENA*(r: OTG_FS_DEVICE_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

func EPDIS*(r: OTG_FS_DEVICE_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

proc `SODDFRM=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

proc `SNAK=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

proc `CNAK=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

func TXFNUM*(r: OTG_FS_DEVICE_DIEPCTL2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

func Stall*(r: OTG_FS_DEVICE_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

func EPTYP*(r: OTG_FS_DEVICE_DIEPCTL2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

func NAKSTS*(r: OTG_FS_DEVICE_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EONUM_DPID*(r: OTG_FS_DEVICE_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func USBAEP*(r: OTG_FS_DEVICE_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

func MPSIZ*(r: OTG_FS_DEVICE_DIEPCTL2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_DEVICE_DIEPCTL2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_DEVICE_DIEPCTL2_Fields

func EPENA*(r: OTG_FS_DEVICE_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

func EPDIS*(r: OTG_FS_DEVICE_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

proc `SODDFRM=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

proc `SNAK=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

proc `CNAK=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

func TXFNUM*(r: OTG_FS_DEVICE_DIEPCTL3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

func Stall*(r: OTG_FS_DEVICE_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

func EPTYP*(r: OTG_FS_DEVICE_DIEPCTL3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

func NAKSTS*(r: OTG_FS_DEVICE_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EONUM_DPID*(r: OTG_FS_DEVICE_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func USBAEP*(r: OTG_FS_DEVICE_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

func MPSIZ*(r: OTG_FS_DEVICE_DIEPCTL3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_DEVICE_DIEPCTL3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_DEVICE_DIEPCTL3_Fields

proc `EPENA=`*(r: var OTG_FS_DEVICE_DOEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_DEVICE_DOEPCTL0_Fields

func EPDIS*(r: OTG_FS_DEVICE_DOEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `SNAK=`*(r: var OTG_FS_DEVICE_DOEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_FS_DEVICE_DOEPCTL0_Fields

proc `CNAK=`*(r: var OTG_FS_DEVICE_DOEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_FS_DEVICE_DOEPCTL0_Fields

func Stall*(r: OTG_FS_DEVICE_DOEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_FS_DEVICE_DOEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_FS_DEVICE_DOEPCTL0_Fields

func SNPM*(r: OTG_FS_DEVICE_DOEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SNPM=`*(r: var OTG_FS_DEVICE_DOEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_FS_DEVICE_DOEPCTL0_Fields

func EPTYP*(r: OTG_FS_DEVICE_DOEPCTL0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

func NAKSTS*(r: OTG_FS_DEVICE_DOEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func USBAEP*(r: OTG_FS_DEVICE_DOEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

func MPSIZ*(r: OTG_FS_DEVICE_DOEPCTL0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

func EPENA*(r: OTG_FS_DEVICE_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

func EPDIS*(r: OTG_FS_DEVICE_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

proc `SODDFRM=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

proc `SNAK=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

proc `CNAK=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

func Stall*(r: OTG_FS_DEVICE_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

func SNPM*(r: OTG_FS_DEVICE_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SNPM=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

func EPTYP*(r: OTG_FS_DEVICE_DOEPCTL1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

func NAKSTS*(r: OTG_FS_DEVICE_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EONUM_DPID*(r: OTG_FS_DEVICE_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func USBAEP*(r: OTG_FS_DEVICE_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

func MPSIZ*(r: OTG_FS_DEVICE_DOEPCTL1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_DEVICE_DOEPCTL1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_DEVICE_DOEPCTL1_Fields

func EPENA*(r: OTG_FS_DEVICE_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

func EPDIS*(r: OTG_FS_DEVICE_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

proc `SODDFRM=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

proc `SNAK=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

proc `CNAK=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

func Stall*(r: OTG_FS_DEVICE_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

func SNPM*(r: OTG_FS_DEVICE_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SNPM=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

func EPTYP*(r: OTG_FS_DEVICE_DOEPCTL2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

func NAKSTS*(r: OTG_FS_DEVICE_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EONUM_DPID*(r: OTG_FS_DEVICE_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func USBAEP*(r: OTG_FS_DEVICE_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

func MPSIZ*(r: OTG_FS_DEVICE_DOEPCTL2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_DEVICE_DOEPCTL2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_DEVICE_DOEPCTL2_Fields

func EPENA*(r: OTG_FS_DEVICE_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

func EPDIS*(r: OTG_FS_DEVICE_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

proc `SODDFRM=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

proc `SNAK=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

proc `CNAK=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

func Stall*(r: OTG_FS_DEVICE_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

func SNPM*(r: OTG_FS_DEVICE_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SNPM=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

func EPTYP*(r: OTG_FS_DEVICE_DOEPCTL3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

func NAKSTS*(r: OTG_FS_DEVICE_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EONUM_DPID*(r: OTG_FS_DEVICE_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func USBAEP*(r: OTG_FS_DEVICE_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

func MPSIZ*(r: OTG_FS_DEVICE_DOEPCTL3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_FS_DEVICE_DOEPCTL3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_FS_DEVICE_DOEPCTL3_Fields

func TXFE*(r: OTG_FS_DEVICE_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func INEPNE*(r: OTG_FS_DEVICE_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_FS_DEVICE_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_DEVICE_DIEPINT0_Fields

func ITTXFE*(r: OTG_FS_DEVICE_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_FS_DEVICE_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_DEVICE_DIEPINT0_Fields

func TOC*(r: OTG_FS_DEVICE_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_FS_DEVICE_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_DEVICE_DIEPINT0_Fields

func EPDISD*(r: OTG_FS_DEVICE_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_FS_DEVICE_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_DIEPINT0_Fields

func XFRC*(r: OTG_FS_DEVICE_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_DEVICE_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_DIEPINT0_Fields

func TXFE*(r: OTG_FS_DEVICE_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func INEPNE*(r: OTG_FS_DEVICE_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_FS_DEVICE_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_DEVICE_DIEPINT1_Fields

func ITTXFE*(r: OTG_FS_DEVICE_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_FS_DEVICE_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_DEVICE_DIEPINT1_Fields

func TOC*(r: OTG_FS_DEVICE_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_FS_DEVICE_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_DEVICE_DIEPINT1_Fields

func EPDISD*(r: OTG_FS_DEVICE_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_FS_DEVICE_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_DIEPINT1_Fields

func XFRC*(r: OTG_FS_DEVICE_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_DEVICE_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_DIEPINT1_Fields

func TXFE*(r: OTG_FS_DEVICE_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func INEPNE*(r: OTG_FS_DEVICE_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_FS_DEVICE_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_DEVICE_DIEPINT2_Fields

func ITTXFE*(r: OTG_FS_DEVICE_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_FS_DEVICE_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_DEVICE_DIEPINT2_Fields

func TOC*(r: OTG_FS_DEVICE_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_FS_DEVICE_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_DEVICE_DIEPINT2_Fields

func EPDISD*(r: OTG_FS_DEVICE_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_FS_DEVICE_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_DIEPINT2_Fields

func XFRC*(r: OTG_FS_DEVICE_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_DEVICE_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_DIEPINT2_Fields

func TXFE*(r: OTG_FS_DEVICE_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func INEPNE*(r: OTG_FS_DEVICE_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_FS_DEVICE_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_DEVICE_DIEPINT3_Fields

func ITTXFE*(r: OTG_FS_DEVICE_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_FS_DEVICE_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_DEVICE_DIEPINT3_Fields

func TOC*(r: OTG_FS_DEVICE_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_FS_DEVICE_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_DEVICE_DIEPINT3_Fields

func EPDISD*(r: OTG_FS_DEVICE_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_FS_DEVICE_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_DIEPINT3_Fields

func XFRC*(r: OTG_FS_DEVICE_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_DEVICE_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_DIEPINT3_Fields

func B2BSTUP*(r: OTG_FS_DEVICE_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_FS_DEVICE_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_DEVICE_DOEPINT0_Fields

func OTEPDIS*(r: OTG_FS_DEVICE_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_FS_DEVICE_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_DEVICE_DOEPINT0_Fields

func STUP*(r: OTG_FS_DEVICE_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_FS_DEVICE_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_DEVICE_DOEPINT0_Fields

func EPDISD*(r: OTG_FS_DEVICE_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_FS_DEVICE_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_DOEPINT0_Fields

func XFRC*(r: OTG_FS_DEVICE_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_DEVICE_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_DOEPINT0_Fields

func B2BSTUP*(r: OTG_FS_DEVICE_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_FS_DEVICE_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_DEVICE_DOEPINT1_Fields

func OTEPDIS*(r: OTG_FS_DEVICE_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_FS_DEVICE_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_DEVICE_DOEPINT1_Fields

func STUP*(r: OTG_FS_DEVICE_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_FS_DEVICE_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_DEVICE_DOEPINT1_Fields

func EPDISD*(r: OTG_FS_DEVICE_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_FS_DEVICE_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_DOEPINT1_Fields

func XFRC*(r: OTG_FS_DEVICE_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_DEVICE_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_DOEPINT1_Fields

func B2BSTUP*(r: OTG_FS_DEVICE_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_FS_DEVICE_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_DEVICE_DOEPINT2_Fields

func OTEPDIS*(r: OTG_FS_DEVICE_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_FS_DEVICE_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_DEVICE_DOEPINT2_Fields

func STUP*(r: OTG_FS_DEVICE_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_FS_DEVICE_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_DEVICE_DOEPINT2_Fields

func EPDISD*(r: OTG_FS_DEVICE_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_FS_DEVICE_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_DOEPINT2_Fields

func XFRC*(r: OTG_FS_DEVICE_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_DEVICE_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_DOEPINT2_Fields

func B2BSTUP*(r: OTG_FS_DEVICE_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_FS_DEVICE_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_FS_DEVICE_DOEPINT3_Fields

func OTEPDIS*(r: OTG_FS_DEVICE_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_FS_DEVICE_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_DEVICE_DOEPINT3_Fields

func STUP*(r: OTG_FS_DEVICE_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_FS_DEVICE_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_FS_DEVICE_DOEPINT3_Fields

func EPDISD*(r: OTG_FS_DEVICE_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_FS_DEVICE_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_DEVICE_DOEPINT3_Fields

func XFRC*(r: OTG_FS_DEVICE_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_FS_DEVICE_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_DEVICE_DOEPINT3_Fields

func PKTCNT*(r: OTG_FS_DEVICE_DIEPTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 20)

proc `PKTCNT=`*(r: var OTG_FS_DEVICE_DIEPTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 20)
  tmp.setMask((val shl 19).masked(19 .. 20))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ0_Fields

func XFRSIZ*(r: OTG_FS_DEVICE_DIEPTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `XFRSIZ=`*(r: var OTG_FS_DEVICE_DIEPTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ0_Fields

func STUPCNT*(r: OTG_FS_DEVICE_DOEPTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `STUPCNT=`*(r: var OTG_FS_DEVICE_DOEPTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ0_Fields

func PKTCNT*(r: OTG_FS_DEVICE_DOEPTSIZ0_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `PKTCNT=`*(r: var OTG_FS_DEVICE_DOEPTSIZ0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ0_Fields

func XFRSIZ*(r: OTG_FS_DEVICE_DOEPTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `XFRSIZ=`*(r: var OTG_FS_DEVICE_DOEPTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ0_Fields

func MCNT*(r: OTG_FS_DEVICE_DIEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `MCNT=`*(r: var OTG_FS_DEVICE_DIEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ1_Fields

func PKTCNT*(r: OTG_FS_DEVICE_DIEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_DEVICE_DIEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ1_Fields

func XFRSIZ*(r: OTG_FS_DEVICE_DIEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_DEVICE_DIEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ1_Fields

func MCNT*(r: OTG_FS_DEVICE_DIEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `MCNT=`*(r: var OTG_FS_DEVICE_DIEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ2_Fields

func PKTCNT*(r: OTG_FS_DEVICE_DIEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_DEVICE_DIEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ2_Fields

func XFRSIZ*(r: OTG_FS_DEVICE_DIEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_DEVICE_DIEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ2_Fields

func MCNT*(r: OTG_FS_DEVICE_DIEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `MCNT=`*(r: var OTG_FS_DEVICE_DIEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ3_Fields

func PKTCNT*(r: OTG_FS_DEVICE_DIEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_DEVICE_DIEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ3_Fields

func XFRSIZ*(r: OTG_FS_DEVICE_DIEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_DEVICE_DIEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_DEVICE_DIEPTSIZ3_Fields

func INEPTFSAV*(r: OTG_FS_DEVICE_DTXFSTS0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func INEPTFSAV*(r: OTG_FS_DEVICE_DTXFSTS1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func INEPTFSAV*(r: OTG_FS_DEVICE_DTXFSTS2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func INEPTFSAV*(r: OTG_FS_DEVICE_DTXFSTS3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func RXDPID_STUPCNT*(r: OTG_FS_DEVICE_DOEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `RXDPID_STUPCNT=`*(r: var OTG_FS_DEVICE_DOEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ1_Fields

func PKTCNT*(r: OTG_FS_DEVICE_DOEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_DEVICE_DOEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ1_Fields

func XFRSIZ*(r: OTG_FS_DEVICE_DOEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_DEVICE_DOEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ1_Fields

func RXDPID_STUPCNT*(r: OTG_FS_DEVICE_DOEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `RXDPID_STUPCNT=`*(r: var OTG_FS_DEVICE_DOEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ2_Fields

func PKTCNT*(r: OTG_FS_DEVICE_DOEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_DEVICE_DOEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ2_Fields

func XFRSIZ*(r: OTG_FS_DEVICE_DOEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_DEVICE_DOEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ2_Fields

func RXDPID_STUPCNT*(r: OTG_FS_DEVICE_DOEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `RXDPID_STUPCNT=`*(r: var OTG_FS_DEVICE_DOEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ3_Fields

func PKTCNT*(r: OTG_FS_DEVICE_DOEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_FS_DEVICE_DOEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ3_Fields

func XFRSIZ*(r: OTG_FS_DEVICE_DOEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_FS_DEVICE_DOEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_FS_DEVICE_DOEPTSIZ3_Fields

type
  OTG_FS_PWRCLK_FS_PCGCCTL_Fields* = distinct uint32

proc read*(reg: OTG_FS_PWRCLK_FS_PCGCCTL_Type): OTG_FS_PWRCLK_FS_PCGCCTL_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_FS_PWRCLK_FS_PCGCCTL_Fields](reg.loc))

proc write*(reg: OTG_FS_PWRCLK_FS_PCGCCTL_Type, val: OTG_FS_PWRCLK_FS_PCGCCTL_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_FS_PWRCLK_FS_PCGCCTL_Fields](reg.loc), val)

proc write*(reg: OTG_FS_PWRCLK_FS_PCGCCTL_Type, STPPCLK: bool = false, GATEHCLK: bool = false, PHYSUSP: bool = false) =
  var x: uint32
  x.setMask((STPPCLK.uint32 shl 0).masked(0 .. 0))
  x.setMask((GATEHCLK.uint32 shl 1).masked(1 .. 1))
  x.setMask((PHYSUSP.uint32 shl 4).masked(4 .. 4))
  reg.write x.OTG_FS_PWRCLK_FS_PCGCCTL_Fields

template modifyIt*(reg: OTG_FS_PWRCLK_FS_PCGCCTL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func STPPCLK*(r: OTG_FS_PWRCLK_FS_PCGCCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `STPPCLK=`*(r: var OTG_FS_PWRCLK_FS_PCGCCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_FS_PWRCLK_FS_PCGCCTL_Fields

func GATEHCLK*(r: OTG_FS_PWRCLK_FS_PCGCCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `GATEHCLK=`*(r: var OTG_FS_PWRCLK_FS_PCGCCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_FS_PWRCLK_FS_PCGCCTL_Fields

func PHYSUSP*(r: OTG_FS_PWRCLK_FS_PCGCCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `PHYSUSP=`*(r: var OTG_FS_PWRCLK_FS_PCGCCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_FS_PWRCLK_FS_PCGCCTL_Fields

type
  CAN1_MCR_Fields* = distinct uint32
  CAN1_MSR_Fields* = distinct uint32
  CAN1_TSR_Fields* = distinct uint32
  CAN1_RF0R_Fields* = distinct uint32
  CAN1_RF1R_Fields* = distinct uint32
  CAN1_IER_Fields* = distinct uint32
  CAN1_ESR_Fields* = distinct uint32
  CAN1_BTR_Fields* = distinct uint32
  CAN1_TI0R_Fields* = distinct uint32
  CAN1_TDT0R_Fields* = distinct uint32
  CAN1_TDL0R_Fields* = distinct uint32
  CAN1_TDH0R_Fields* = distinct uint32
  CAN1_TI1R_Fields* = distinct uint32
  CAN1_TDT1R_Fields* = distinct uint32
  CAN1_TDL1R_Fields* = distinct uint32
  CAN1_TDH1R_Fields* = distinct uint32
  CAN1_TI2R_Fields* = distinct uint32
  CAN1_TDT2R_Fields* = distinct uint32
  CAN1_TDL2R_Fields* = distinct uint32
  CAN1_TDH2R_Fields* = distinct uint32
  CAN1_RI0R_Fields* = distinct uint32
  CAN1_RDT0R_Fields* = distinct uint32
  CAN1_RDL0R_Fields* = distinct uint32
  CAN1_RDH0R_Fields* = distinct uint32
  CAN1_RI1R_Fields* = distinct uint32
  CAN1_RDT1R_Fields* = distinct uint32
  CAN1_RDL1R_Fields* = distinct uint32
  CAN1_RDH1R_Fields* = distinct uint32
  CAN1_FMR_Fields* = distinct uint32
  CAN1_FM1R_Fields* = distinct uint32
  CAN1_FS1R_Fields* = distinct uint32
  CAN1_FFA1R_Fields* = distinct uint32
  CAN1_FA1R_Fields* = distinct uint32
  CAN1_F0R1_Fields* = distinct uint32
  CAN1_F0R2_Fields* = distinct uint32
  CAN1_F1R1_Fields* = distinct uint32
  CAN1_F1R2_Fields* = distinct uint32
  CAN1_F2R1_Fields* = distinct uint32
  CAN1_F2R2_Fields* = distinct uint32
  CAN1_F3R1_Fields* = distinct uint32
  CAN1_F3R2_Fields* = distinct uint32
  CAN1_F4R1_Fields* = distinct uint32
  CAN1_F4R2_Fields* = distinct uint32
  CAN1_F5R1_Fields* = distinct uint32
  CAN1_F5R2_Fields* = distinct uint32
  CAN1_F6R1_Fields* = distinct uint32
  CAN1_F6R2_Fields* = distinct uint32
  CAN1_F7R1_Fields* = distinct uint32
  CAN1_F7R2_Fields* = distinct uint32
  CAN1_F8R1_Fields* = distinct uint32
  CAN1_F8R2_Fields* = distinct uint32
  CAN1_F9R1_Fields* = distinct uint32
  CAN1_F9R2_Fields* = distinct uint32
  CAN1_F10R1_Fields* = distinct uint32
  CAN1_F10R2_Fields* = distinct uint32
  CAN1_F11R1_Fields* = distinct uint32
  CAN1_F11R2_Fields* = distinct uint32
  CAN1_F12R1_Fields* = distinct uint32
  CAN1_F12R2_Fields* = distinct uint32
  CAN1_F13R1_Fields* = distinct uint32
  CAN1_F13R2_Fields* = distinct uint32
  CAN1_F14R1_Fields* = distinct uint32
  CAN1_F14R2_Fields* = distinct uint32
  CAN1_F15R1_Fields* = distinct uint32
  CAN1_F15R2_Fields* = distinct uint32
  CAN1_F16R1_Fields* = distinct uint32
  CAN1_F16R2_Fields* = distinct uint32
  CAN1_F17R1_Fields* = distinct uint32
  CAN1_F17R2_Fields* = distinct uint32
  CAN1_F18R1_Fields* = distinct uint32
  CAN1_F18R2_Fields* = distinct uint32
  CAN1_F19R1_Fields* = distinct uint32
  CAN1_F19R2_Fields* = distinct uint32
  CAN1_F20R1_Fields* = distinct uint32
  CAN1_F20R2_Fields* = distinct uint32
  CAN1_F21R1_Fields* = distinct uint32
  CAN1_F21R2_Fields* = distinct uint32
  CAN1_F22R1_Fields* = distinct uint32
  CAN1_F22R2_Fields* = distinct uint32
  CAN1_F23R1_Fields* = distinct uint32
  CAN1_F23R2_Fields* = distinct uint32
  CAN1_F24R1_Fields* = distinct uint32
  CAN1_F24R2_Fields* = distinct uint32
  CAN1_F25R1_Fields* = distinct uint32
  CAN1_F25R2_Fields* = distinct uint32
  CAN1_F26R1_Fields* = distinct uint32
  CAN1_F26R2_Fields* = distinct uint32
  CAN1_F27R1_Fields* = distinct uint32
  CAN1_F27R2_Fields* = distinct uint32

proc read*(reg: CAN1_MCR_Type): CAN1_MCR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_MCR_Fields](reg.loc))

proc write*(reg: CAN1_MCR_Type, val: CAN1_MCR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_MCR_Fields](reg.loc), val)

proc write*(reg: CAN1_MCR_Type, DBF: bool = true, RESET: bool = false, TTCM: bool = false, ABOM: bool = false, AWUM: bool = false, NART: bool = false, RFLM: bool = false, TXFP: bool = false, SLEEP: bool = true, INRQ: bool = false) =
  var x: uint32
  x.setMask((DBF.uint32 shl 16).masked(16 .. 16))
  x.setMask((RESET.uint32 shl 15).masked(15 .. 15))
  x.setMask((TTCM.uint32 shl 7).masked(7 .. 7))
  x.setMask((ABOM.uint32 shl 6).masked(6 .. 6))
  x.setMask((AWUM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NART.uint32 shl 4).masked(4 .. 4))
  x.setMask((RFLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((TXFP.uint32 shl 2).masked(2 .. 2))
  x.setMask((SLEEP.uint32 shl 1).masked(1 .. 1))
  x.setMask((INRQ.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_MCR_Fields

template modifyIt*(reg: CAN1_MCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_MSR_Type): CAN1_MSR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_MSR_Fields](reg.loc))

proc write*(reg: CAN1_MSR_Type, val: CAN1_MSR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_MSR_Fields](reg.loc), val)

proc write*(reg: CAN1_MSR_Type, SLAKI: bool = false, WKUI: bool = false, ERRI: bool = false) =
  var x: uint32
  x.setMask((SLAKI.uint32 shl 4).masked(4 .. 4))
  x.setMask((WKUI.uint32 shl 3).masked(3 .. 3))
  x.setMask((ERRI.uint32 shl 2).masked(2 .. 2))
  reg.write x.CAN1_MSR_Fields

template modifyIt*(reg: CAN1_MSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TSR_Type): CAN1_TSR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TSR_Fields](reg.loc))

proc write*(reg: CAN1_TSR_Type, val: CAN1_TSR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TSR_Fields](reg.loc), val)

proc write*(reg: CAN1_TSR_Type, ABRQ2: bool = false, TERR2: bool = false, ALST2: bool = false, TXOK2: bool = false, RQCP2: bool = false, ABRQ1: bool = false, TERR1: bool = false, ALST1: bool = false, TXOK1: bool = false, RQCP1: bool = false, ABRQ0: bool = false, TERR0: bool = false, ALST0: bool = false, TXOK0: bool = false, RQCP0: bool = false) =
  var x: uint32
  x.setMask((ABRQ2.uint32 shl 23).masked(23 .. 23))
  x.setMask((TERR2.uint32 shl 19).masked(19 .. 19))
  x.setMask((ALST2.uint32 shl 18).masked(18 .. 18))
  x.setMask((TXOK2.uint32 shl 17).masked(17 .. 17))
  x.setMask((RQCP2.uint32 shl 16).masked(16 .. 16))
  x.setMask((ABRQ1.uint32 shl 15).masked(15 .. 15))
  x.setMask((TERR1.uint32 shl 11).masked(11 .. 11))
  x.setMask((ALST1.uint32 shl 10).masked(10 .. 10))
  x.setMask((TXOK1.uint32 shl 9).masked(9 .. 9))
  x.setMask((RQCP1.uint32 shl 8).masked(8 .. 8))
  x.setMask((ABRQ0.uint32 shl 7).masked(7 .. 7))
  x.setMask((TERR0.uint32 shl 3).masked(3 .. 3))
  x.setMask((ALST0.uint32 shl 2).masked(2 .. 2))
  x.setMask((TXOK0.uint32 shl 1).masked(1 .. 1))
  x.setMask((RQCP0.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_TSR_Fields

template modifyIt*(reg: CAN1_TSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_RF0R_Type): CAN1_RF0R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RF0R_Fields](reg.loc))

proc write*(reg: CAN1_RF0R_Type, val: CAN1_RF0R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_RF0R_Fields](reg.loc), val)

proc write*(reg: CAN1_RF0R_Type, RFOM0: bool = false, FOVR0: bool = false, FULL0: bool = false) =
  var x: uint32
  x.setMask((RFOM0.uint32 shl 5).masked(5 .. 5))
  x.setMask((FOVR0.uint32 shl 4).masked(4 .. 4))
  x.setMask((FULL0.uint32 shl 3).masked(3 .. 3))
  reg.write x.CAN1_RF0R_Fields

template modifyIt*(reg: CAN1_RF0R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_RF1R_Type): CAN1_RF1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RF1R_Fields](reg.loc))

proc write*(reg: CAN1_RF1R_Type, val: CAN1_RF1R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_RF1R_Fields](reg.loc), val)

proc write*(reg: CAN1_RF1R_Type, RFOM1: bool = false, FOVR1: bool = false, FULL1: bool = false) =
  var x: uint32
  x.setMask((RFOM1.uint32 shl 5).masked(5 .. 5))
  x.setMask((FOVR1.uint32 shl 4).masked(4 .. 4))
  x.setMask((FULL1.uint32 shl 3).masked(3 .. 3))
  reg.write x.CAN1_RF1R_Fields

template modifyIt*(reg: CAN1_RF1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_IER_Type): CAN1_IER_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_IER_Fields](reg.loc))

proc write*(reg: CAN1_IER_Type, val: CAN1_IER_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_IER_Fields](reg.loc), val)

proc write*(reg: CAN1_IER_Type, SLKIE: bool = false, WKUIE: bool = false, ERRIE: bool = false, LECIE: bool = false, BOFIE: bool = false, EPVIE: bool = false, EWGIE: bool = false, FOVIE1: bool = false, FFIE1: bool = false, FMPIE1: bool = false, FOVIE0: bool = false, FFIE0: bool = false, FMPIE0: bool = false, TMEIE: bool = false) =
  var x: uint32
  x.setMask((SLKIE.uint32 shl 17).masked(17 .. 17))
  x.setMask((WKUIE.uint32 shl 16).masked(16 .. 16))
  x.setMask((ERRIE.uint32 shl 15).masked(15 .. 15))
  x.setMask((LECIE.uint32 shl 11).masked(11 .. 11))
  x.setMask((BOFIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((EPVIE.uint32 shl 9).masked(9 .. 9))
  x.setMask((EWGIE.uint32 shl 8).masked(8 .. 8))
  x.setMask((FOVIE1.uint32 shl 6).masked(6 .. 6))
  x.setMask((FFIE1.uint32 shl 5).masked(5 .. 5))
  x.setMask((FMPIE1.uint32 shl 4).masked(4 .. 4))
  x.setMask((FOVIE0.uint32 shl 3).masked(3 .. 3))
  x.setMask((FFIE0.uint32 shl 2).masked(2 .. 2))
  x.setMask((FMPIE0.uint32 shl 1).masked(1 .. 1))
  x.setMask((TMEIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_IER_Fields

template modifyIt*(reg: CAN1_IER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_ESR_Type): CAN1_ESR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_ESR_Fields](reg.loc))

proc write*(reg: CAN1_ESR_Type, val: CAN1_ESR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_ESR_Fields](reg.loc), val)

proc write*(reg: CAN1_ESR_Type, LEC: uint32 = 0) =
  var x: uint32
  x.setMask((LEC shl 4).masked(4 .. 6))
  reg.write x.CAN1_ESR_Fields

template modifyIt*(reg: CAN1_ESR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_BTR_Type): CAN1_BTR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_BTR_Fields](reg.loc))

proc write*(reg: CAN1_BTR_Type, val: CAN1_BTR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_BTR_Fields](reg.loc), val)

proc write*(reg: CAN1_BTR_Type, SILM: bool = false, LBKM: bool = false, SJW: uint32 = 0, TS2: uint32 = 0, TS1: uint32 = 0, BRP: uint32 = 0) =
  var x: uint32
  x.setMask((SILM.uint32 shl 31).masked(31 .. 31))
  x.setMask((LBKM.uint32 shl 30).masked(30 .. 30))
  x.setMask((SJW shl 24).masked(24 .. 25))
  x.setMask((TS2 shl 20).masked(20 .. 22))
  x.setMask((TS1 shl 16).masked(16 .. 19))
  x.setMask((BRP shl 0).masked(0 .. 9))
  reg.write x.CAN1_BTR_Fields

template modifyIt*(reg: CAN1_BTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TI0R_Type): CAN1_TI0R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TI0R_Fields](reg.loc))

proc write*(reg: CAN1_TI0R_Type, val: CAN1_TI0R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TI0R_Fields](reg.loc), val)

proc write*(reg: CAN1_TI0R_Type, STID: uint32 = 0, EXID: uint32 = 0, IDE: bool = false, RTR: bool = false, TXRQ: bool = false) =
  var x: uint32
  x.setMask((STID shl 21).masked(21 .. 31))
  x.setMask((EXID shl 3).masked(3 .. 20))
  x.setMask((IDE.uint32 shl 2).masked(2 .. 2))
  x.setMask((RTR.uint32 shl 1).masked(1 .. 1))
  x.setMask((TXRQ.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_TI0R_Fields

template modifyIt*(reg: CAN1_TI0R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TDT0R_Type): CAN1_TDT0R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TDT0R_Fields](reg.loc))

proc write*(reg: CAN1_TDT0R_Type, val: CAN1_TDT0R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TDT0R_Fields](reg.loc), val)

proc write*(reg: CAN1_TDT0R_Type, TIME: uint32 = 0, TGT: bool = false, DLC: uint32 = 0) =
  var x: uint32
  x.setMask((TIME shl 16).masked(16 .. 31))
  x.setMask((TGT.uint32 shl 8).masked(8 .. 8))
  x.setMask((DLC shl 0).masked(0 .. 3))
  reg.write x.CAN1_TDT0R_Fields

template modifyIt*(reg: CAN1_TDT0R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TDL0R_Type): CAN1_TDL0R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TDL0R_Fields](reg.loc))

proc write*(reg: CAN1_TDL0R_Type, val: CAN1_TDL0R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TDL0R_Fields](reg.loc), val)

proc write*(reg: CAN1_TDL0R_Type, DATA3: uint32 = 0, DATA2: uint32 = 0, DATA1: uint32 = 0, DATA0: uint32 = 0) =
  var x: uint32
  x.setMask((DATA3 shl 24).masked(24 .. 31))
  x.setMask((DATA2 shl 16).masked(16 .. 23))
  x.setMask((DATA1 shl 8).masked(8 .. 15))
  x.setMask((DATA0 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TDL0R_Fields

template modifyIt*(reg: CAN1_TDL0R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TDH0R_Type): CAN1_TDH0R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TDH0R_Fields](reg.loc))

proc write*(reg: CAN1_TDH0R_Type, val: CAN1_TDH0R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TDH0R_Fields](reg.loc), val)

proc write*(reg: CAN1_TDH0R_Type, DATA7: uint32 = 0, DATA6: uint32 = 0, DATA5: uint32 = 0, DATA4: uint32 = 0) =
  var x: uint32
  x.setMask((DATA7 shl 24).masked(24 .. 31))
  x.setMask((DATA6 shl 16).masked(16 .. 23))
  x.setMask((DATA5 shl 8).masked(8 .. 15))
  x.setMask((DATA4 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TDH0R_Fields

template modifyIt*(reg: CAN1_TDH0R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TI1R_Type): CAN1_TI1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TI1R_Fields](reg.loc))

proc write*(reg: CAN1_TI1R_Type, val: CAN1_TI1R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TI1R_Fields](reg.loc), val)

proc write*(reg: CAN1_TI1R_Type, STID: uint32 = 0, EXID: uint32 = 0, IDE: bool = false, RTR: bool = false, TXRQ: bool = false) =
  var x: uint32
  x.setMask((STID shl 21).masked(21 .. 31))
  x.setMask((EXID shl 3).masked(3 .. 20))
  x.setMask((IDE.uint32 shl 2).masked(2 .. 2))
  x.setMask((RTR.uint32 shl 1).masked(1 .. 1))
  x.setMask((TXRQ.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_TI1R_Fields

template modifyIt*(reg: CAN1_TI1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TDT1R_Type): CAN1_TDT1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TDT1R_Fields](reg.loc))

proc write*(reg: CAN1_TDT1R_Type, val: CAN1_TDT1R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TDT1R_Fields](reg.loc), val)

proc write*(reg: CAN1_TDT1R_Type, TIME: uint32 = 0, TGT: bool = false, DLC: uint32 = 0) =
  var x: uint32
  x.setMask((TIME shl 16).masked(16 .. 31))
  x.setMask((TGT.uint32 shl 8).masked(8 .. 8))
  x.setMask((DLC shl 0).masked(0 .. 3))
  reg.write x.CAN1_TDT1R_Fields

template modifyIt*(reg: CAN1_TDT1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TDL1R_Type): CAN1_TDL1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TDL1R_Fields](reg.loc))

proc write*(reg: CAN1_TDL1R_Type, val: CAN1_TDL1R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TDL1R_Fields](reg.loc), val)

proc write*(reg: CAN1_TDL1R_Type, DATA3: uint32 = 0, DATA2: uint32 = 0, DATA1: uint32 = 0, DATA0: uint32 = 0) =
  var x: uint32
  x.setMask((DATA3 shl 24).masked(24 .. 31))
  x.setMask((DATA2 shl 16).masked(16 .. 23))
  x.setMask((DATA1 shl 8).masked(8 .. 15))
  x.setMask((DATA0 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TDL1R_Fields

template modifyIt*(reg: CAN1_TDL1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TDH1R_Type): CAN1_TDH1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TDH1R_Fields](reg.loc))

proc write*(reg: CAN1_TDH1R_Type, val: CAN1_TDH1R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TDH1R_Fields](reg.loc), val)

proc write*(reg: CAN1_TDH1R_Type, DATA7: uint32 = 0, DATA6: uint32 = 0, DATA5: uint32 = 0, DATA4: uint32 = 0) =
  var x: uint32
  x.setMask((DATA7 shl 24).masked(24 .. 31))
  x.setMask((DATA6 shl 16).masked(16 .. 23))
  x.setMask((DATA5 shl 8).masked(8 .. 15))
  x.setMask((DATA4 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TDH1R_Fields

template modifyIt*(reg: CAN1_TDH1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TI2R_Type): CAN1_TI2R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TI2R_Fields](reg.loc))

proc write*(reg: CAN1_TI2R_Type, val: CAN1_TI2R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TI2R_Fields](reg.loc), val)

proc write*(reg: CAN1_TI2R_Type, STID: uint32 = 0, EXID: uint32 = 0, IDE: bool = false, RTR: bool = false, TXRQ: bool = false) =
  var x: uint32
  x.setMask((STID shl 21).masked(21 .. 31))
  x.setMask((EXID shl 3).masked(3 .. 20))
  x.setMask((IDE.uint32 shl 2).masked(2 .. 2))
  x.setMask((RTR.uint32 shl 1).masked(1 .. 1))
  x.setMask((TXRQ.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_TI2R_Fields

template modifyIt*(reg: CAN1_TI2R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TDT2R_Type): CAN1_TDT2R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TDT2R_Fields](reg.loc))

proc write*(reg: CAN1_TDT2R_Type, val: CAN1_TDT2R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TDT2R_Fields](reg.loc), val)

proc write*(reg: CAN1_TDT2R_Type, TIME: uint32 = 0, TGT: bool = false, DLC: uint32 = 0) =
  var x: uint32
  x.setMask((TIME shl 16).masked(16 .. 31))
  x.setMask((TGT.uint32 shl 8).masked(8 .. 8))
  x.setMask((DLC shl 0).masked(0 .. 3))
  reg.write x.CAN1_TDT2R_Fields

template modifyIt*(reg: CAN1_TDT2R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TDL2R_Type): CAN1_TDL2R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TDL2R_Fields](reg.loc))

proc write*(reg: CAN1_TDL2R_Type, val: CAN1_TDL2R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TDL2R_Fields](reg.loc), val)

proc write*(reg: CAN1_TDL2R_Type, DATA3: uint32 = 0, DATA2: uint32 = 0, DATA1: uint32 = 0, DATA0: uint32 = 0) =
  var x: uint32
  x.setMask((DATA3 shl 24).masked(24 .. 31))
  x.setMask((DATA2 shl 16).masked(16 .. 23))
  x.setMask((DATA1 shl 8).masked(8 .. 15))
  x.setMask((DATA0 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TDL2R_Fields

template modifyIt*(reg: CAN1_TDL2R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_TDH2R_Type): CAN1_TDH2R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_TDH2R_Fields](reg.loc))

proc write*(reg: CAN1_TDH2R_Type, val: CAN1_TDH2R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_TDH2R_Fields](reg.loc), val)

proc write*(reg: CAN1_TDH2R_Type, DATA7: uint32 = 0, DATA6: uint32 = 0, DATA5: uint32 = 0, DATA4: uint32 = 0) =
  var x: uint32
  x.setMask((DATA7 shl 24).masked(24 .. 31))
  x.setMask((DATA6 shl 16).masked(16 .. 23))
  x.setMask((DATA5 shl 8).masked(8 .. 15))
  x.setMask((DATA4 shl 0).masked(0 .. 7))
  reg.write x.CAN1_TDH2R_Fields

template modifyIt*(reg: CAN1_TDH2R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_RI0R_Type): CAN1_RI0R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RI0R_Fields](reg.loc))

proc read*(reg: CAN1_RDT0R_Type): CAN1_RDT0R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RDT0R_Fields](reg.loc))

proc read*(reg: CAN1_RDL0R_Type): CAN1_RDL0R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RDL0R_Fields](reg.loc))

proc read*(reg: CAN1_RDH0R_Type): CAN1_RDH0R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RDH0R_Fields](reg.loc))

proc read*(reg: CAN1_RI1R_Type): CAN1_RI1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RI1R_Fields](reg.loc))

proc read*(reg: CAN1_RDT1R_Type): CAN1_RDT1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RDT1R_Fields](reg.loc))

proc read*(reg: CAN1_RDL1R_Type): CAN1_RDL1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RDL1R_Fields](reg.loc))

proc read*(reg: CAN1_RDH1R_Type): CAN1_RDH1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_RDH1R_Fields](reg.loc))

proc read*(reg: CAN1_FMR_Type): CAN1_FMR_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FMR_Fields](reg.loc))

proc write*(reg: CAN1_FMR_Type, val: CAN1_FMR_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_FMR_Fields](reg.loc), val)

proc write*(reg: CAN1_FMR_Type, CAN2SB: uint32 = 14, FINIT: bool = true) =
  var x: uint32
  x.setMask((CAN2SB shl 8).masked(8 .. 13))
  x.setMask((FINIT.uint32 shl 0).masked(0 .. 0))
  reg.write x.CAN1_FMR_Fields

template modifyIt*(reg: CAN1_FMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_FM1R_Type): CAN1_FM1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FM1R_Fields](reg.loc))

proc write*(reg: CAN1_FM1R_Type, val: CAN1_FM1R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_FM1R_Fields](reg.loc), val)

proc write*(reg: CAN1_FM1R_Type, FBM0: bool = false, FBM1: bool = false, FBM2: bool = false, FBM3: bool = false, FBM4: bool = false, FBM5: bool = false, FBM6: bool = false, FBM7: bool = false, FBM8: bool = false, FBM9: bool = false, FBM10: bool = false, FBM11: bool = false, FBM12: bool = false, FBM13: bool = false, FBM14: bool = false, FBM15: bool = false, FBM16: bool = false, FBM17: bool = false, FBM18: bool = false, FBM19: bool = false, FBM20: bool = false, FBM21: bool = false, FBM22: bool = false, FBM23: bool = false, FBM24: bool = false, FBM25: bool = false, FBM26: bool = false, FBM27: bool = false) =
  var x: uint32
  x.setMask((FBM0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FBM1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FBM2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FBM3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FBM4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FBM5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FBM6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FBM7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FBM8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FBM9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FBM10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FBM11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FBM12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FBM13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FBM14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FBM15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FBM16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FBM17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FBM18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FBM19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FBM20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FBM21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FBM22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FBM23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FBM24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FBM25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FBM26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FBM27.uint32 shl 27).masked(27 .. 27))
  reg.write x.CAN1_FM1R_Fields

template modifyIt*(reg: CAN1_FM1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_FS1R_Type): CAN1_FS1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FS1R_Fields](reg.loc))

proc write*(reg: CAN1_FS1R_Type, val: CAN1_FS1R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_FS1R_Fields](reg.loc), val)

proc write*(reg: CAN1_FS1R_Type, FSC0: bool = false, FSC1: bool = false, FSC2: bool = false, FSC3: bool = false, FSC4: bool = false, FSC5: bool = false, FSC6: bool = false, FSC7: bool = false, FSC8: bool = false, FSC9: bool = false, FSC10: bool = false, FSC11: bool = false, FSC12: bool = false, FSC13: bool = false, FSC14: bool = false, FSC15: bool = false, FSC16: bool = false, FSC17: bool = false, FSC18: bool = false, FSC19: bool = false, FSC20: bool = false, FSC21: bool = false, FSC22: bool = false, FSC23: bool = false, FSC24: bool = false, FSC25: bool = false, FSC26: bool = false, FSC27: bool = false) =
  var x: uint32
  x.setMask((FSC0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FSC1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FSC2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FSC3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FSC4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FSC5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FSC6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FSC7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FSC8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FSC9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FSC10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FSC11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FSC12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FSC13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FSC14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FSC15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FSC16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FSC17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FSC18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FSC19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FSC20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FSC21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FSC22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FSC23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FSC24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FSC25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FSC26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FSC27.uint32 shl 27).masked(27 .. 27))
  reg.write x.CAN1_FS1R_Fields

template modifyIt*(reg: CAN1_FS1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_FFA1R_Type): CAN1_FFA1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FFA1R_Fields](reg.loc))

proc write*(reg: CAN1_FFA1R_Type, val: CAN1_FFA1R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_FFA1R_Fields](reg.loc), val)

proc write*(reg: CAN1_FFA1R_Type, FFA0: bool = false, FFA1: bool = false, FFA2: bool = false, FFA3: bool = false, FFA4: bool = false, FFA5: bool = false, FFA6: bool = false, FFA7: bool = false, FFA8: bool = false, FFA9: bool = false, FFA10: bool = false, FFA11: bool = false, FFA12: bool = false, FFA13: bool = false, FFA14: bool = false, FFA15: bool = false, FFA16: bool = false, FFA17: bool = false, FFA18: bool = false, FFA19: bool = false, FFA20: bool = false, FFA21: bool = false, FFA22: bool = false, FFA23: bool = false, FFA24: bool = false, FFA25: bool = false, FFA26: bool = false, FFA27: bool = false) =
  var x: uint32
  x.setMask((FFA0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FFA1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FFA2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FFA3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FFA4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FFA5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FFA6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FFA7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FFA8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FFA9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FFA10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FFA11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FFA12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FFA13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FFA14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FFA15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FFA16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FFA17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FFA18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FFA19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FFA20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FFA21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FFA22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FFA23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FFA24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FFA25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FFA26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FFA27.uint32 shl 27).masked(27 .. 27))
  reg.write x.CAN1_FFA1R_Fields

template modifyIt*(reg: CAN1_FFA1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_FA1R_Type): CAN1_FA1R_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_FA1R_Fields](reg.loc))

proc write*(reg: CAN1_FA1R_Type, val: CAN1_FA1R_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_FA1R_Fields](reg.loc), val)

proc write*(reg: CAN1_FA1R_Type, FACT0: bool = false, FACT1: bool = false, FACT2: bool = false, FACT3: bool = false, FACT4: bool = false, FACT5: bool = false, FACT6: bool = false, FACT7: bool = false, FACT8: bool = false, FACT9: bool = false, FACT10: bool = false, FACT11: bool = false, FACT12: bool = false, FACT13: bool = false, FACT14: bool = false, FACT15: bool = false, FACT16: bool = false, FACT17: bool = false, FACT18: bool = false, FACT19: bool = false, FACT20: bool = false, FACT21: bool = false, FACT22: bool = false, FACT23: bool = false, FACT24: bool = false, FACT25: bool = false, FACT26: bool = false, FACT27: bool = false) =
  var x: uint32
  x.setMask((FACT0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FACT1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FACT2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FACT3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FACT4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FACT5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FACT6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FACT7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FACT8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FACT9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FACT10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FACT11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FACT12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FACT13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FACT14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FACT15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FACT16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FACT17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FACT18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FACT19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FACT20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FACT21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FACT22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FACT23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FACT24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FACT25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FACT26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FACT27.uint32 shl 27).masked(27 .. 27))
  reg.write x.CAN1_FA1R_Fields

template modifyIt*(reg: CAN1_FA1R_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F0R1_Type): CAN1_F0R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F0R1_Fields](reg.loc))

proc write*(reg: CAN1_F0R1_Type, val: CAN1_F0R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F0R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F0R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F0R1_Fields

template modifyIt*(reg: CAN1_F0R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F0R2_Type): CAN1_F0R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F0R2_Fields](reg.loc))

proc write*(reg: CAN1_F0R2_Type, val: CAN1_F0R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F0R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F0R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F0R2_Fields

template modifyIt*(reg: CAN1_F0R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F1R1_Type): CAN1_F1R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F1R1_Fields](reg.loc))

proc write*(reg: CAN1_F1R1_Type, val: CAN1_F1R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F1R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F1R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F1R1_Fields

template modifyIt*(reg: CAN1_F1R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F1R2_Type): CAN1_F1R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F1R2_Fields](reg.loc))

proc write*(reg: CAN1_F1R2_Type, val: CAN1_F1R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F1R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F1R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F1R2_Fields

template modifyIt*(reg: CAN1_F1R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F2R1_Type): CAN1_F2R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F2R1_Fields](reg.loc))

proc write*(reg: CAN1_F2R1_Type, val: CAN1_F2R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F2R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F2R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F2R1_Fields

template modifyIt*(reg: CAN1_F2R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F2R2_Type): CAN1_F2R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F2R2_Fields](reg.loc))

proc write*(reg: CAN1_F2R2_Type, val: CAN1_F2R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F2R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F2R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F2R2_Fields

template modifyIt*(reg: CAN1_F2R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F3R1_Type): CAN1_F3R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F3R1_Fields](reg.loc))

proc write*(reg: CAN1_F3R1_Type, val: CAN1_F3R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F3R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F3R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F3R1_Fields

template modifyIt*(reg: CAN1_F3R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F3R2_Type): CAN1_F3R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F3R2_Fields](reg.loc))

proc write*(reg: CAN1_F3R2_Type, val: CAN1_F3R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F3R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F3R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F3R2_Fields

template modifyIt*(reg: CAN1_F3R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F4R1_Type): CAN1_F4R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F4R1_Fields](reg.loc))

proc write*(reg: CAN1_F4R1_Type, val: CAN1_F4R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F4R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F4R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F4R1_Fields

template modifyIt*(reg: CAN1_F4R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F4R2_Type): CAN1_F4R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F4R2_Fields](reg.loc))

proc write*(reg: CAN1_F4R2_Type, val: CAN1_F4R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F4R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F4R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F4R2_Fields

template modifyIt*(reg: CAN1_F4R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F5R1_Type): CAN1_F5R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F5R1_Fields](reg.loc))

proc write*(reg: CAN1_F5R1_Type, val: CAN1_F5R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F5R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F5R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F5R1_Fields

template modifyIt*(reg: CAN1_F5R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F5R2_Type): CAN1_F5R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F5R2_Fields](reg.loc))

proc write*(reg: CAN1_F5R2_Type, val: CAN1_F5R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F5R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F5R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F5R2_Fields

template modifyIt*(reg: CAN1_F5R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F6R1_Type): CAN1_F6R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F6R1_Fields](reg.loc))

proc write*(reg: CAN1_F6R1_Type, val: CAN1_F6R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F6R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F6R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F6R1_Fields

template modifyIt*(reg: CAN1_F6R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F6R2_Type): CAN1_F6R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F6R2_Fields](reg.loc))

proc write*(reg: CAN1_F6R2_Type, val: CAN1_F6R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F6R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F6R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F6R2_Fields

template modifyIt*(reg: CAN1_F6R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F7R1_Type): CAN1_F7R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F7R1_Fields](reg.loc))

proc write*(reg: CAN1_F7R1_Type, val: CAN1_F7R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F7R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F7R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F7R1_Fields

template modifyIt*(reg: CAN1_F7R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F7R2_Type): CAN1_F7R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F7R2_Fields](reg.loc))

proc write*(reg: CAN1_F7R2_Type, val: CAN1_F7R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F7R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F7R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F7R2_Fields

template modifyIt*(reg: CAN1_F7R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F8R1_Type): CAN1_F8R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F8R1_Fields](reg.loc))

proc write*(reg: CAN1_F8R1_Type, val: CAN1_F8R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F8R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F8R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F8R1_Fields

template modifyIt*(reg: CAN1_F8R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F8R2_Type): CAN1_F8R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F8R2_Fields](reg.loc))

proc write*(reg: CAN1_F8R2_Type, val: CAN1_F8R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F8R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F8R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F8R2_Fields

template modifyIt*(reg: CAN1_F8R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F9R1_Type): CAN1_F9R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F9R1_Fields](reg.loc))

proc write*(reg: CAN1_F9R1_Type, val: CAN1_F9R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F9R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F9R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F9R1_Fields

template modifyIt*(reg: CAN1_F9R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F9R2_Type): CAN1_F9R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F9R2_Fields](reg.loc))

proc write*(reg: CAN1_F9R2_Type, val: CAN1_F9R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F9R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F9R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F9R2_Fields

template modifyIt*(reg: CAN1_F9R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F10R1_Type): CAN1_F10R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F10R1_Fields](reg.loc))

proc write*(reg: CAN1_F10R1_Type, val: CAN1_F10R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F10R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F10R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F10R1_Fields

template modifyIt*(reg: CAN1_F10R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F10R2_Type): CAN1_F10R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F10R2_Fields](reg.loc))

proc write*(reg: CAN1_F10R2_Type, val: CAN1_F10R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F10R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F10R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F10R2_Fields

template modifyIt*(reg: CAN1_F10R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F11R1_Type): CAN1_F11R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F11R1_Fields](reg.loc))

proc write*(reg: CAN1_F11R1_Type, val: CAN1_F11R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F11R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F11R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F11R1_Fields

template modifyIt*(reg: CAN1_F11R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F11R2_Type): CAN1_F11R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F11R2_Fields](reg.loc))

proc write*(reg: CAN1_F11R2_Type, val: CAN1_F11R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F11R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F11R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F11R2_Fields

template modifyIt*(reg: CAN1_F11R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F12R1_Type): CAN1_F12R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F12R1_Fields](reg.loc))

proc write*(reg: CAN1_F12R1_Type, val: CAN1_F12R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F12R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F12R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F12R1_Fields

template modifyIt*(reg: CAN1_F12R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F12R2_Type): CAN1_F12R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F12R2_Fields](reg.loc))

proc write*(reg: CAN1_F12R2_Type, val: CAN1_F12R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F12R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F12R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F12R2_Fields

template modifyIt*(reg: CAN1_F12R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F13R1_Type): CAN1_F13R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F13R1_Fields](reg.loc))

proc write*(reg: CAN1_F13R1_Type, val: CAN1_F13R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F13R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F13R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F13R1_Fields

template modifyIt*(reg: CAN1_F13R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F13R2_Type): CAN1_F13R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F13R2_Fields](reg.loc))

proc write*(reg: CAN1_F13R2_Type, val: CAN1_F13R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F13R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F13R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F13R2_Fields

template modifyIt*(reg: CAN1_F13R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F14R1_Type): CAN1_F14R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F14R1_Fields](reg.loc))

proc write*(reg: CAN1_F14R1_Type, val: CAN1_F14R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F14R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F14R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F14R1_Fields

template modifyIt*(reg: CAN1_F14R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F14R2_Type): CAN1_F14R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F14R2_Fields](reg.loc))

proc write*(reg: CAN1_F14R2_Type, val: CAN1_F14R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F14R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F14R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F14R2_Fields

template modifyIt*(reg: CAN1_F14R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F15R1_Type): CAN1_F15R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F15R1_Fields](reg.loc))

proc write*(reg: CAN1_F15R1_Type, val: CAN1_F15R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F15R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F15R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F15R1_Fields

template modifyIt*(reg: CAN1_F15R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F15R2_Type): CAN1_F15R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F15R2_Fields](reg.loc))

proc write*(reg: CAN1_F15R2_Type, val: CAN1_F15R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F15R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F15R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F15R2_Fields

template modifyIt*(reg: CAN1_F15R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F16R1_Type): CAN1_F16R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F16R1_Fields](reg.loc))

proc write*(reg: CAN1_F16R1_Type, val: CAN1_F16R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F16R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F16R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F16R1_Fields

template modifyIt*(reg: CAN1_F16R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F16R2_Type): CAN1_F16R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F16R2_Fields](reg.loc))

proc write*(reg: CAN1_F16R2_Type, val: CAN1_F16R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F16R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F16R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F16R2_Fields

template modifyIt*(reg: CAN1_F16R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F17R1_Type): CAN1_F17R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F17R1_Fields](reg.loc))

proc write*(reg: CAN1_F17R1_Type, val: CAN1_F17R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F17R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F17R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F17R1_Fields

template modifyIt*(reg: CAN1_F17R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F17R2_Type): CAN1_F17R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F17R2_Fields](reg.loc))

proc write*(reg: CAN1_F17R2_Type, val: CAN1_F17R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F17R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F17R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F17R2_Fields

template modifyIt*(reg: CAN1_F17R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F18R1_Type): CAN1_F18R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F18R1_Fields](reg.loc))

proc write*(reg: CAN1_F18R1_Type, val: CAN1_F18R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F18R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F18R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F18R1_Fields

template modifyIt*(reg: CAN1_F18R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F18R2_Type): CAN1_F18R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F18R2_Fields](reg.loc))

proc write*(reg: CAN1_F18R2_Type, val: CAN1_F18R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F18R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F18R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F18R2_Fields

template modifyIt*(reg: CAN1_F18R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F19R1_Type): CAN1_F19R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F19R1_Fields](reg.loc))

proc write*(reg: CAN1_F19R1_Type, val: CAN1_F19R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F19R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F19R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F19R1_Fields

template modifyIt*(reg: CAN1_F19R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F19R2_Type): CAN1_F19R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F19R2_Fields](reg.loc))

proc write*(reg: CAN1_F19R2_Type, val: CAN1_F19R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F19R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F19R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F19R2_Fields

template modifyIt*(reg: CAN1_F19R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F20R1_Type): CAN1_F20R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F20R1_Fields](reg.loc))

proc write*(reg: CAN1_F20R1_Type, val: CAN1_F20R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F20R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F20R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F20R1_Fields

template modifyIt*(reg: CAN1_F20R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F20R2_Type): CAN1_F20R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F20R2_Fields](reg.loc))

proc write*(reg: CAN1_F20R2_Type, val: CAN1_F20R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F20R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F20R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F20R2_Fields

template modifyIt*(reg: CAN1_F20R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F21R1_Type): CAN1_F21R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F21R1_Fields](reg.loc))

proc write*(reg: CAN1_F21R1_Type, val: CAN1_F21R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F21R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F21R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F21R1_Fields

template modifyIt*(reg: CAN1_F21R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F21R2_Type): CAN1_F21R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F21R2_Fields](reg.loc))

proc write*(reg: CAN1_F21R2_Type, val: CAN1_F21R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F21R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F21R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F21R2_Fields

template modifyIt*(reg: CAN1_F21R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F22R1_Type): CAN1_F22R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F22R1_Fields](reg.loc))

proc write*(reg: CAN1_F22R1_Type, val: CAN1_F22R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F22R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F22R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F22R1_Fields

template modifyIt*(reg: CAN1_F22R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F22R2_Type): CAN1_F22R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F22R2_Fields](reg.loc))

proc write*(reg: CAN1_F22R2_Type, val: CAN1_F22R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F22R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F22R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F22R2_Fields

template modifyIt*(reg: CAN1_F22R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F23R1_Type): CAN1_F23R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F23R1_Fields](reg.loc))

proc write*(reg: CAN1_F23R1_Type, val: CAN1_F23R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F23R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F23R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F23R1_Fields

template modifyIt*(reg: CAN1_F23R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F23R2_Type): CAN1_F23R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F23R2_Fields](reg.loc))

proc write*(reg: CAN1_F23R2_Type, val: CAN1_F23R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F23R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F23R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F23R2_Fields

template modifyIt*(reg: CAN1_F23R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F24R1_Type): CAN1_F24R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F24R1_Fields](reg.loc))

proc write*(reg: CAN1_F24R1_Type, val: CAN1_F24R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F24R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F24R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F24R1_Fields

template modifyIt*(reg: CAN1_F24R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F24R2_Type): CAN1_F24R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F24R2_Fields](reg.loc))

proc write*(reg: CAN1_F24R2_Type, val: CAN1_F24R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F24R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F24R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F24R2_Fields

template modifyIt*(reg: CAN1_F24R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F25R1_Type): CAN1_F25R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F25R1_Fields](reg.loc))

proc write*(reg: CAN1_F25R1_Type, val: CAN1_F25R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F25R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F25R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F25R1_Fields

template modifyIt*(reg: CAN1_F25R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F25R2_Type): CAN1_F25R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F25R2_Fields](reg.loc))

proc write*(reg: CAN1_F25R2_Type, val: CAN1_F25R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F25R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F25R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F25R2_Fields

template modifyIt*(reg: CAN1_F25R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F26R1_Type): CAN1_F26R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F26R1_Fields](reg.loc))

proc write*(reg: CAN1_F26R1_Type, val: CAN1_F26R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F26R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F26R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F26R1_Fields

template modifyIt*(reg: CAN1_F26R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F26R2_Type): CAN1_F26R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F26R2_Fields](reg.loc))

proc write*(reg: CAN1_F26R2_Type, val: CAN1_F26R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F26R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F26R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F26R2_Fields

template modifyIt*(reg: CAN1_F26R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F27R1_Type): CAN1_F27R1_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F27R1_Fields](reg.loc))

proc write*(reg: CAN1_F27R1_Type, val: CAN1_F27R1_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F27R1_Fields](reg.loc), val)

proc write*(reg: CAN1_F27R1_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F27R1_Fields

template modifyIt*(reg: CAN1_F27R1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: CAN1_F27R2_Type): CAN1_F27R2_Fields {.inline.} =
  volatileLoad(cast[ptr CAN1_F27R2_Fields](reg.loc))

proc write*(reg: CAN1_F27R2_Type, val: CAN1_F27R2_Fields) {.inline.} =
  volatileStore(cast[ptr CAN1_F27R2_Fields](reg.loc), val)

proc write*(reg: CAN1_F27R2_Type, FB0: bool = false, FB1: bool = false, FB2: bool = false, FB3: bool = false, FB4: bool = false, FB5: bool = false, FB6: bool = false, FB7: bool = false, FB8: bool = false, FB9: bool = false, FB10: bool = false, FB11: bool = false, FB12: bool = false, FB13: bool = false, FB14: bool = false, FB15: bool = false, FB16: bool = false, FB17: bool = false, FB18: bool = false, FB19: bool = false, FB20: bool = false, FB21: bool = false, FB22: bool = false, FB23: bool = false, FB24: bool = false, FB25: bool = false, FB26: bool = false, FB27: bool = false, FB28: bool = false, FB29: bool = false, FB30: bool = false, FB31: bool = false) =
  var x: uint32
  x.setMask((FB0.uint32 shl 0).masked(0 .. 0))
  x.setMask((FB1.uint32 shl 1).masked(1 .. 1))
  x.setMask((FB2.uint32 shl 2).masked(2 .. 2))
  x.setMask((FB3.uint32 shl 3).masked(3 .. 3))
  x.setMask((FB4.uint32 shl 4).masked(4 .. 4))
  x.setMask((FB5.uint32 shl 5).masked(5 .. 5))
  x.setMask((FB6.uint32 shl 6).masked(6 .. 6))
  x.setMask((FB7.uint32 shl 7).masked(7 .. 7))
  x.setMask((FB8.uint32 shl 8).masked(8 .. 8))
  x.setMask((FB9.uint32 shl 9).masked(9 .. 9))
  x.setMask((FB10.uint32 shl 10).masked(10 .. 10))
  x.setMask((FB11.uint32 shl 11).masked(11 .. 11))
  x.setMask((FB12.uint32 shl 12).masked(12 .. 12))
  x.setMask((FB13.uint32 shl 13).masked(13 .. 13))
  x.setMask((FB14.uint32 shl 14).masked(14 .. 14))
  x.setMask((FB15.uint32 shl 15).masked(15 .. 15))
  x.setMask((FB16.uint32 shl 16).masked(16 .. 16))
  x.setMask((FB17.uint32 shl 17).masked(17 .. 17))
  x.setMask((FB18.uint32 shl 18).masked(18 .. 18))
  x.setMask((FB19.uint32 shl 19).masked(19 .. 19))
  x.setMask((FB20.uint32 shl 20).masked(20 .. 20))
  x.setMask((FB21.uint32 shl 21).masked(21 .. 21))
  x.setMask((FB22.uint32 shl 22).masked(22 .. 22))
  x.setMask((FB23.uint32 shl 23).masked(23 .. 23))
  x.setMask((FB24.uint32 shl 24).masked(24 .. 24))
  x.setMask((FB25.uint32 shl 25).masked(25 .. 25))
  x.setMask((FB26.uint32 shl 26).masked(26 .. 26))
  x.setMask((FB27.uint32 shl 27).masked(27 .. 27))
  x.setMask((FB28.uint32 shl 28).masked(28 .. 28))
  x.setMask((FB29.uint32 shl 29).masked(29 .. 29))
  x.setMask((FB30.uint32 shl 30).masked(30 .. 30))
  x.setMask((FB31.uint32 shl 31).masked(31 .. 31))
  reg.write x.CAN1_F27R2_Fields

template modifyIt*(reg: CAN1_F27R2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func DBF*(r: CAN1_MCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `DBF=`*(r: var CAN1_MCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_MCR_Fields

func RESET*(r: CAN1_MCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `RESET=`*(r: var CAN1_MCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_MCR_Fields

func TTCM*(r: CAN1_MCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TTCM=`*(r: var CAN1_MCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_MCR_Fields

func ABOM*(r: CAN1_MCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `ABOM=`*(r: var CAN1_MCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_MCR_Fields

func AWUM*(r: CAN1_MCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `AWUM=`*(r: var CAN1_MCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_MCR_Fields

func NART*(r: CAN1_MCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NART=`*(r: var CAN1_MCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_MCR_Fields

func RFLM*(r: CAN1_MCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `RFLM=`*(r: var CAN1_MCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_MCR_Fields

func TXFP*(r: CAN1_MCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TXFP=`*(r: var CAN1_MCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_MCR_Fields

func SLEEP*(r: CAN1_MCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SLEEP=`*(r: var CAN1_MCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_MCR_Fields

func INRQ*(r: CAN1_MCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `INRQ=`*(r: var CAN1_MCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_MCR_Fields

func RX*(r: CAN1_MSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func SAMP*(r: CAN1_MSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func RXM*(r: CAN1_MSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func TXM*(r: CAN1_MSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func SLAKI*(r: CAN1_MSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `SLAKI=`*(r: var CAN1_MSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_MSR_Fields

func WKUI*(r: CAN1_MSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `WKUI=`*(r: var CAN1_MSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_MSR_Fields

func ERRI*(r: CAN1_MSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ERRI=`*(r: var CAN1_MSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_MSR_Fields

func SLAK*(r: CAN1_MSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func INAK*(r: CAN1_MSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func LOW2*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

func LOW1*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

func LOW0*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

func TME2*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

func TME1*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

func TME0*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

func CODE*(r: CAN1_TSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

func ABRQ2*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `ABRQ2=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_TSR_Fields

func TERR2*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `TERR2=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_TSR_Fields

func ALST2*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `ALST2=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_TSR_Fields

func TXOK2*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TXOK2=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_TSR_Fields

func RQCP2*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `RQCP2=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_TSR_Fields

func ABRQ1*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ABRQ1=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_TSR_Fields

func TERR1*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TERR1=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_TSR_Fields

func ALST1*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ALST1=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_TSR_Fields

func TXOK1*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TXOK1=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_TSR_Fields

func RQCP1*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `RQCP1=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_TSR_Fields

func ABRQ0*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ABRQ0=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_TSR_Fields

func TERR0*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TERR0=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_TSR_Fields

func ALST0*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `ALST0=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_TSR_Fields

func TXOK0*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TXOK0=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_TSR_Fields

func RQCP0*(r: CAN1_TSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `RQCP0=`*(r: var CAN1_TSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_TSR_Fields

func RFOM0*(r: CAN1_RF0R_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RFOM0=`*(r: var CAN1_RF0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_RF0R_Fields

func FOVR0*(r: CAN1_RF0R_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FOVR0=`*(r: var CAN1_RF0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_RF0R_Fields

func FULL0*(r: CAN1_RF0R_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FULL0=`*(r: var CAN1_RF0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_RF0R_Fields

func FMP0*(r: CAN1_RF0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

func RFOM1*(r: CAN1_RF1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RFOM1=`*(r: var CAN1_RF1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_RF1R_Fields

func FOVR1*(r: CAN1_RF1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FOVR1=`*(r: var CAN1_RF1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_RF1R_Fields

func FULL1*(r: CAN1_RF1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FULL1=`*(r: var CAN1_RF1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_RF1R_Fields

func FMP1*(r: CAN1_RF1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

func SLKIE*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `SLKIE=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_IER_Fields

func WKUIE*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `WKUIE=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_IER_Fields

func ERRIE*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ERRIE=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_IER_Fields

func LECIE*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `LECIE=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_IER_Fields

func BOFIE*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `BOFIE=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_IER_Fields

func EPVIE*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `EPVIE=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_IER_Fields

func EWGIE*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `EWGIE=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_IER_Fields

func FOVIE1*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FOVIE1=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_IER_Fields

func FFIE1*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FFIE1=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_IER_Fields

func FMPIE1*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FMPIE1=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_IER_Fields

func FOVIE0*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FOVIE0=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_IER_Fields

func FFIE0*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FFIE0=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_IER_Fields

func FMPIE0*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FMPIE0=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_IER_Fields

func TMEIE*(r: CAN1_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TMEIE=`*(r: var CAN1_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_IER_Fields

func REC*(r: CAN1_ESR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func TEC*(r: CAN1_ESR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func LEC*(r: CAN1_ESR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `LEC=`*(r: var CAN1_ESR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.CAN1_ESR_Fields

func BOFF*(r: CAN1_ESR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func EPVF*(r: CAN1_ESR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func EWGF*(r: CAN1_ESR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func SILM*(r: CAN1_BTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SILM=`*(r: var CAN1_BTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_BTR_Fields

func LBKM*(r: CAN1_BTR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `LBKM=`*(r: var CAN1_BTR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_BTR_Fields

func SJW*(r: CAN1_BTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `SJW=`*(r: var CAN1_BTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.CAN1_BTR_Fields

func TS2*(r: CAN1_BTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 22)

proc `TS2=`*(r: var CAN1_BTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 22)
  tmp.setMask((val shl 20).masked(20 .. 22))
  r = tmp.CAN1_BTR_Fields

func TS1*(r: CAN1_BTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 19)

proc `TS1=`*(r: var CAN1_BTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 19)
  tmp.setMask((val shl 16).masked(16 .. 19))
  r = tmp.CAN1_BTR_Fields

func BRP*(r: CAN1_BTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 9)

proc `BRP=`*(r: var CAN1_BTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 9)
  tmp.setMask((val shl 0).masked(0 .. 9))
  r = tmp.CAN1_BTR_Fields

func STID*(r: CAN1_TI0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 31)

proc `STID=`*(r: var CAN1_TI0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 31)
  tmp.setMask((val shl 21).masked(21 .. 31))
  r = tmp.CAN1_TI0R_Fields

func EXID*(r: CAN1_TI0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 20)

proc `EXID=`*(r: var CAN1_TI0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 20)
  tmp.setMask((val shl 3).masked(3 .. 20))
  r = tmp.CAN1_TI0R_Fields

func IDE*(r: CAN1_TI0R_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IDE=`*(r: var CAN1_TI0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_TI0R_Fields

func RTR*(r: CAN1_TI0R_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RTR=`*(r: var CAN1_TI0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_TI0R_Fields

func TXRQ*(r: CAN1_TI0R_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TXRQ=`*(r: var CAN1_TI0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_TI0R_Fields

func TIME*(r: CAN1_TDT0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `TIME=`*(r: var CAN1_TDT0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.CAN1_TDT0R_Fields

func TGT*(r: CAN1_TDT0R_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TGT=`*(r: var CAN1_TDT0R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_TDT0R_Fields

func DLC*(r: CAN1_TDT0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DLC=`*(r: var CAN1_TDT0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.CAN1_TDT0R_Fields

func DATA3*(r: CAN1_TDL0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA3=`*(r: var CAN1_TDL0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TDL0R_Fields

func DATA2*(r: CAN1_TDL0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA2=`*(r: var CAN1_TDL0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TDL0R_Fields

func DATA1*(r: CAN1_TDL0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA1=`*(r: var CAN1_TDL0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TDL0R_Fields

func DATA0*(r: CAN1_TDL0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA0=`*(r: var CAN1_TDL0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TDL0R_Fields

func DATA7*(r: CAN1_TDH0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA7=`*(r: var CAN1_TDH0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TDH0R_Fields

func DATA6*(r: CAN1_TDH0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA6=`*(r: var CAN1_TDH0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TDH0R_Fields

func DATA5*(r: CAN1_TDH0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA5=`*(r: var CAN1_TDH0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TDH0R_Fields

func DATA4*(r: CAN1_TDH0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA4=`*(r: var CAN1_TDH0R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TDH0R_Fields

func STID*(r: CAN1_TI1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 31)

proc `STID=`*(r: var CAN1_TI1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 31)
  tmp.setMask((val shl 21).masked(21 .. 31))
  r = tmp.CAN1_TI1R_Fields

func EXID*(r: CAN1_TI1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 20)

proc `EXID=`*(r: var CAN1_TI1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 20)
  tmp.setMask((val shl 3).masked(3 .. 20))
  r = tmp.CAN1_TI1R_Fields

func IDE*(r: CAN1_TI1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IDE=`*(r: var CAN1_TI1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_TI1R_Fields

func RTR*(r: CAN1_TI1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RTR=`*(r: var CAN1_TI1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_TI1R_Fields

func TXRQ*(r: CAN1_TI1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TXRQ=`*(r: var CAN1_TI1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_TI1R_Fields

func TIME*(r: CAN1_TDT1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `TIME=`*(r: var CAN1_TDT1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.CAN1_TDT1R_Fields

func TGT*(r: CAN1_TDT1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TGT=`*(r: var CAN1_TDT1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_TDT1R_Fields

func DLC*(r: CAN1_TDT1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DLC=`*(r: var CAN1_TDT1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.CAN1_TDT1R_Fields

func DATA3*(r: CAN1_TDL1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA3=`*(r: var CAN1_TDL1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TDL1R_Fields

func DATA2*(r: CAN1_TDL1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA2=`*(r: var CAN1_TDL1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TDL1R_Fields

func DATA1*(r: CAN1_TDL1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA1=`*(r: var CAN1_TDL1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TDL1R_Fields

func DATA0*(r: CAN1_TDL1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA0=`*(r: var CAN1_TDL1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TDL1R_Fields

func DATA7*(r: CAN1_TDH1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA7=`*(r: var CAN1_TDH1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TDH1R_Fields

func DATA6*(r: CAN1_TDH1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA6=`*(r: var CAN1_TDH1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TDH1R_Fields

func DATA5*(r: CAN1_TDH1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA5=`*(r: var CAN1_TDH1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TDH1R_Fields

func DATA4*(r: CAN1_TDH1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA4=`*(r: var CAN1_TDH1R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TDH1R_Fields

func STID*(r: CAN1_TI2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 31)

proc `STID=`*(r: var CAN1_TI2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 31)
  tmp.setMask((val shl 21).masked(21 .. 31))
  r = tmp.CAN1_TI2R_Fields

func EXID*(r: CAN1_TI2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 20)

proc `EXID=`*(r: var CAN1_TI2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 20)
  tmp.setMask((val shl 3).masked(3 .. 20))
  r = tmp.CAN1_TI2R_Fields

func IDE*(r: CAN1_TI2R_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `IDE=`*(r: var CAN1_TI2R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_TI2R_Fields

func RTR*(r: CAN1_TI2R_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RTR=`*(r: var CAN1_TI2R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_TI2R_Fields

func TXRQ*(r: CAN1_TI2R_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TXRQ=`*(r: var CAN1_TI2R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_TI2R_Fields

func TIME*(r: CAN1_TDT2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `TIME=`*(r: var CAN1_TDT2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.CAN1_TDT2R_Fields

func TGT*(r: CAN1_TDT2R_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TGT=`*(r: var CAN1_TDT2R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_TDT2R_Fields

func DLC*(r: CAN1_TDT2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

proc `DLC=`*(r: var CAN1_TDT2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 3)
  tmp.setMask((val shl 0).masked(0 .. 3))
  r = tmp.CAN1_TDT2R_Fields

func DATA3*(r: CAN1_TDL2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA3=`*(r: var CAN1_TDL2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TDL2R_Fields

func DATA2*(r: CAN1_TDL2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA2=`*(r: var CAN1_TDL2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TDL2R_Fields

func DATA1*(r: CAN1_TDL2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA1=`*(r: var CAN1_TDL2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TDL2R_Fields

func DATA0*(r: CAN1_TDL2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA0=`*(r: var CAN1_TDL2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TDL2R_Fields

func DATA7*(r: CAN1_TDH2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `DATA7=`*(r: var CAN1_TDH2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.CAN1_TDH2R_Fields

func DATA6*(r: CAN1_TDH2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `DATA6=`*(r: var CAN1_TDH2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.CAN1_TDH2R_Fields

func DATA5*(r: CAN1_TDH2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `DATA5=`*(r: var CAN1_TDH2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.CAN1_TDH2R_Fields

func DATA4*(r: CAN1_TDH2R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `DATA4=`*(r: var CAN1_TDH2R_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.CAN1_TDH2R_Fields

func STID*(r: CAN1_RI0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 31)

func EXID*(r: CAN1_RI0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 20)

func IDE*(r: CAN1_RI0R_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func RTR*(r: CAN1_RI0R_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func TIME*(r: CAN1_RDT0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

func FMI*(r: CAN1_RDT0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DLC*(r: CAN1_RDT0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func DATA3*(r: CAN1_RDL0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func DATA2*(r: CAN1_RDL0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func DATA1*(r: CAN1_RDL0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DATA0*(r: CAN1_RDL0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func DATA7*(r: CAN1_RDH0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func DATA6*(r: CAN1_RDH0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func DATA5*(r: CAN1_RDH0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DATA4*(r: CAN1_RDH0R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func STID*(r: CAN1_RI1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 31)

func EXID*(r: CAN1_RI1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 20)

func IDE*(r: CAN1_RI1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func RTR*(r: CAN1_RI1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func TIME*(r: CAN1_RDT1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

func FMI*(r: CAN1_RDT1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DLC*(r: CAN1_RDT1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func DATA3*(r: CAN1_RDL1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func DATA2*(r: CAN1_RDL1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func DATA1*(r: CAN1_RDL1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DATA0*(r: CAN1_RDL1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func DATA7*(r: CAN1_RDH1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func DATA6*(r: CAN1_RDH1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func DATA5*(r: CAN1_RDH1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

func DATA4*(r: CAN1_RDH1R_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func CAN2SB*(r: CAN1_FMR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 13)

proc `CAN2SB=`*(r: var CAN1_FMR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 13)
  tmp.setMask((val shl 8).masked(8 .. 13))
  r = tmp.CAN1_FMR_Fields

func FINIT*(r: CAN1_FMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FINIT=`*(r: var CAN1_FMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_FMR_Fields

func FBM0*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FBM0=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_FM1R_Fields

func FBM1*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FBM1=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_FM1R_Fields

func FBM2*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FBM2=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_FM1R_Fields

func FBM3*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FBM3=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_FM1R_Fields

func FBM4*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FBM4=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_FM1R_Fields

func FBM5*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FBM5=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_FM1R_Fields

func FBM6*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FBM6=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_FM1R_Fields

func FBM7*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FBM7=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_FM1R_Fields

func FBM8*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FBM8=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_FM1R_Fields

func FBM9*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FBM9=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_FM1R_Fields

func FBM10*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FBM10=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_FM1R_Fields

func FBM11*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FBM11=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_FM1R_Fields

func FBM12*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FBM12=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_FM1R_Fields

func FBM13*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FBM13=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_FM1R_Fields

func FBM14*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FBM14=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_FM1R_Fields

func FBM15*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FBM15=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_FM1R_Fields

func FBM16*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FBM16=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_FM1R_Fields

func FBM17*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FBM17=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_FM1R_Fields

func FBM18*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FBM18=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_FM1R_Fields

func FBM19*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FBM19=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_FM1R_Fields

func FBM20*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FBM20=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_FM1R_Fields

func FBM21*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FBM21=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_FM1R_Fields

func FBM22*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FBM22=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_FM1R_Fields

func FBM23*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FBM23=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_FM1R_Fields

func FBM24*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FBM24=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_FM1R_Fields

func FBM25*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FBM25=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_FM1R_Fields

func FBM26*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FBM26=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_FM1R_Fields

func FBM27*(r: CAN1_FM1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FBM27=`*(r: var CAN1_FM1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_FM1R_Fields

func FSC0*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FSC0=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_FS1R_Fields

func FSC1*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FSC1=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_FS1R_Fields

func FSC2*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FSC2=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_FS1R_Fields

func FSC3*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FSC3=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_FS1R_Fields

func FSC4*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FSC4=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_FS1R_Fields

func FSC5*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FSC5=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_FS1R_Fields

func FSC6*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FSC6=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_FS1R_Fields

func FSC7*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FSC7=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_FS1R_Fields

func FSC8*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FSC8=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_FS1R_Fields

func FSC9*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FSC9=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_FS1R_Fields

func FSC10*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FSC10=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_FS1R_Fields

func FSC11*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FSC11=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_FS1R_Fields

func FSC12*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FSC12=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_FS1R_Fields

func FSC13*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FSC13=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_FS1R_Fields

func FSC14*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FSC14=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_FS1R_Fields

func FSC15*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FSC15=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_FS1R_Fields

func FSC16*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FSC16=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_FS1R_Fields

func FSC17*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FSC17=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_FS1R_Fields

func FSC18*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FSC18=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_FS1R_Fields

func FSC19*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FSC19=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_FS1R_Fields

func FSC20*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FSC20=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_FS1R_Fields

func FSC21*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FSC21=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_FS1R_Fields

func FSC22*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FSC22=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_FS1R_Fields

func FSC23*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FSC23=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_FS1R_Fields

func FSC24*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FSC24=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_FS1R_Fields

func FSC25*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FSC25=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_FS1R_Fields

func FSC26*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FSC26=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_FS1R_Fields

func FSC27*(r: CAN1_FS1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FSC27=`*(r: var CAN1_FS1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_FS1R_Fields

func FFA0*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FFA0=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_FFA1R_Fields

func FFA1*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FFA1=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_FFA1R_Fields

func FFA2*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FFA2=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_FFA1R_Fields

func FFA3*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FFA3=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_FFA1R_Fields

func FFA4*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FFA4=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_FFA1R_Fields

func FFA5*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FFA5=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_FFA1R_Fields

func FFA6*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FFA6=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_FFA1R_Fields

func FFA7*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FFA7=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_FFA1R_Fields

func FFA8*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FFA8=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_FFA1R_Fields

func FFA9*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FFA9=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_FFA1R_Fields

func FFA10*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FFA10=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_FFA1R_Fields

func FFA11*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FFA11=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_FFA1R_Fields

func FFA12*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FFA12=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_FFA1R_Fields

func FFA13*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FFA13=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_FFA1R_Fields

func FFA14*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FFA14=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_FFA1R_Fields

func FFA15*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FFA15=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_FFA1R_Fields

func FFA16*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FFA16=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_FFA1R_Fields

func FFA17*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FFA17=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_FFA1R_Fields

func FFA18*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FFA18=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_FFA1R_Fields

func FFA19*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FFA19=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_FFA1R_Fields

func FFA20*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FFA20=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_FFA1R_Fields

func FFA21*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FFA21=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_FFA1R_Fields

func FFA22*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FFA22=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_FFA1R_Fields

func FFA23*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FFA23=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_FFA1R_Fields

func FFA24*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FFA24=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_FFA1R_Fields

func FFA25*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FFA25=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_FFA1R_Fields

func FFA26*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FFA26=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_FFA1R_Fields

func FFA27*(r: CAN1_FFA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FFA27=`*(r: var CAN1_FFA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_FFA1R_Fields

func FACT0*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FACT0=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_FA1R_Fields

func FACT1*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FACT1=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_FA1R_Fields

func FACT2*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FACT2=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_FA1R_Fields

func FACT3*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FACT3=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_FA1R_Fields

func FACT4*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FACT4=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_FA1R_Fields

func FACT5*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FACT5=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_FA1R_Fields

func FACT6*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FACT6=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_FA1R_Fields

func FACT7*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FACT7=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_FA1R_Fields

func FACT8*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FACT8=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_FA1R_Fields

func FACT9*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FACT9=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_FA1R_Fields

func FACT10*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FACT10=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_FA1R_Fields

func FACT11*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FACT11=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_FA1R_Fields

func FACT12*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FACT12=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_FA1R_Fields

func FACT13*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FACT13=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_FA1R_Fields

func FACT14*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FACT14=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_FA1R_Fields

func FACT15*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FACT15=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_FA1R_Fields

func FACT16*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FACT16=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_FA1R_Fields

func FACT17*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FACT17=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_FA1R_Fields

func FACT18*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FACT18=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_FA1R_Fields

func FACT19*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FACT19=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_FA1R_Fields

func FACT20*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FACT20=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_FA1R_Fields

func FACT21*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FACT21=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_FA1R_Fields

func FACT22*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FACT22=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_FA1R_Fields

func FACT23*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FACT23=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_FA1R_Fields

func FACT24*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FACT24=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_FA1R_Fields

func FACT25*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FACT25=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_FA1R_Fields

func FACT26*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FACT26=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_FA1R_Fields

func FACT27*(r: CAN1_FA1R_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FACT27=`*(r: var CAN1_FA1R_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_FA1R_Fields

func FB0*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F0R1_Fields

func FB1*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F0R1_Fields

func FB2*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F0R1_Fields

func FB3*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F0R1_Fields

func FB4*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F0R1_Fields

func FB5*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F0R1_Fields

func FB6*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F0R1_Fields

func FB7*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F0R1_Fields

func FB8*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F0R1_Fields

func FB9*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F0R1_Fields

func FB10*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F0R1_Fields

func FB11*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F0R1_Fields

func FB12*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F0R1_Fields

func FB13*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F0R1_Fields

func FB14*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F0R1_Fields

func FB15*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F0R1_Fields

func FB16*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F0R1_Fields

func FB17*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F0R1_Fields

func FB18*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F0R1_Fields

func FB19*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F0R1_Fields

func FB20*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F0R1_Fields

func FB21*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F0R1_Fields

func FB22*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F0R1_Fields

func FB23*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F0R1_Fields

func FB24*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F0R1_Fields

func FB25*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F0R1_Fields

func FB26*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F0R1_Fields

func FB27*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F0R1_Fields

func FB28*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F0R1_Fields

func FB29*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F0R1_Fields

func FB30*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F0R1_Fields

func FB31*(r: CAN1_F0R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F0R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F0R1_Fields

func FB0*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F0R2_Fields

func FB1*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F0R2_Fields

func FB2*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F0R2_Fields

func FB3*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F0R2_Fields

func FB4*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F0R2_Fields

func FB5*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F0R2_Fields

func FB6*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F0R2_Fields

func FB7*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F0R2_Fields

func FB8*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F0R2_Fields

func FB9*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F0R2_Fields

func FB10*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F0R2_Fields

func FB11*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F0R2_Fields

func FB12*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F0R2_Fields

func FB13*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F0R2_Fields

func FB14*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F0R2_Fields

func FB15*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F0R2_Fields

func FB16*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F0R2_Fields

func FB17*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F0R2_Fields

func FB18*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F0R2_Fields

func FB19*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F0R2_Fields

func FB20*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F0R2_Fields

func FB21*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F0R2_Fields

func FB22*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F0R2_Fields

func FB23*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F0R2_Fields

func FB24*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F0R2_Fields

func FB25*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F0R2_Fields

func FB26*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F0R2_Fields

func FB27*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F0R2_Fields

func FB28*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F0R2_Fields

func FB29*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F0R2_Fields

func FB30*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F0R2_Fields

func FB31*(r: CAN1_F0R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F0R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F0R2_Fields

func FB0*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F1R1_Fields

func FB1*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F1R1_Fields

func FB2*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F1R1_Fields

func FB3*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F1R1_Fields

func FB4*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F1R1_Fields

func FB5*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F1R1_Fields

func FB6*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F1R1_Fields

func FB7*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F1R1_Fields

func FB8*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F1R1_Fields

func FB9*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F1R1_Fields

func FB10*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F1R1_Fields

func FB11*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F1R1_Fields

func FB12*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F1R1_Fields

func FB13*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F1R1_Fields

func FB14*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F1R1_Fields

func FB15*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F1R1_Fields

func FB16*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F1R1_Fields

func FB17*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F1R1_Fields

func FB18*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F1R1_Fields

func FB19*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F1R1_Fields

func FB20*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F1R1_Fields

func FB21*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F1R1_Fields

func FB22*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F1R1_Fields

func FB23*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F1R1_Fields

func FB24*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F1R1_Fields

func FB25*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F1R1_Fields

func FB26*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F1R1_Fields

func FB27*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F1R1_Fields

func FB28*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F1R1_Fields

func FB29*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F1R1_Fields

func FB30*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F1R1_Fields

func FB31*(r: CAN1_F1R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F1R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F1R1_Fields

func FB0*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F1R2_Fields

func FB1*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F1R2_Fields

func FB2*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F1R2_Fields

func FB3*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F1R2_Fields

func FB4*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F1R2_Fields

func FB5*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F1R2_Fields

func FB6*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F1R2_Fields

func FB7*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F1R2_Fields

func FB8*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F1R2_Fields

func FB9*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F1R2_Fields

func FB10*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F1R2_Fields

func FB11*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F1R2_Fields

func FB12*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F1R2_Fields

func FB13*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F1R2_Fields

func FB14*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F1R2_Fields

func FB15*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F1R2_Fields

func FB16*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F1R2_Fields

func FB17*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F1R2_Fields

func FB18*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F1R2_Fields

func FB19*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F1R2_Fields

func FB20*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F1R2_Fields

func FB21*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F1R2_Fields

func FB22*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F1R2_Fields

func FB23*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F1R2_Fields

func FB24*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F1R2_Fields

func FB25*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F1R2_Fields

func FB26*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F1R2_Fields

func FB27*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F1R2_Fields

func FB28*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F1R2_Fields

func FB29*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F1R2_Fields

func FB30*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F1R2_Fields

func FB31*(r: CAN1_F1R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F1R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F1R2_Fields

func FB0*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F2R1_Fields

func FB1*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F2R1_Fields

func FB2*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F2R1_Fields

func FB3*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F2R1_Fields

func FB4*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F2R1_Fields

func FB5*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F2R1_Fields

func FB6*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F2R1_Fields

func FB7*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F2R1_Fields

func FB8*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F2R1_Fields

func FB9*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F2R1_Fields

func FB10*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F2R1_Fields

func FB11*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F2R1_Fields

func FB12*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F2R1_Fields

func FB13*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F2R1_Fields

func FB14*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F2R1_Fields

func FB15*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F2R1_Fields

func FB16*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F2R1_Fields

func FB17*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F2R1_Fields

func FB18*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F2R1_Fields

func FB19*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F2R1_Fields

func FB20*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F2R1_Fields

func FB21*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F2R1_Fields

func FB22*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F2R1_Fields

func FB23*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F2R1_Fields

func FB24*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F2R1_Fields

func FB25*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F2R1_Fields

func FB26*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F2R1_Fields

func FB27*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F2R1_Fields

func FB28*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F2R1_Fields

func FB29*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F2R1_Fields

func FB30*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F2R1_Fields

func FB31*(r: CAN1_F2R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F2R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F2R1_Fields

func FB0*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F2R2_Fields

func FB1*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F2R2_Fields

func FB2*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F2R2_Fields

func FB3*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F2R2_Fields

func FB4*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F2R2_Fields

func FB5*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F2R2_Fields

func FB6*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F2R2_Fields

func FB7*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F2R2_Fields

func FB8*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F2R2_Fields

func FB9*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F2R2_Fields

func FB10*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F2R2_Fields

func FB11*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F2R2_Fields

func FB12*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F2R2_Fields

func FB13*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F2R2_Fields

func FB14*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F2R2_Fields

func FB15*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F2R2_Fields

func FB16*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F2R2_Fields

func FB17*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F2R2_Fields

func FB18*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F2R2_Fields

func FB19*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F2R2_Fields

func FB20*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F2R2_Fields

func FB21*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F2R2_Fields

func FB22*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F2R2_Fields

func FB23*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F2R2_Fields

func FB24*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F2R2_Fields

func FB25*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F2R2_Fields

func FB26*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F2R2_Fields

func FB27*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F2R2_Fields

func FB28*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F2R2_Fields

func FB29*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F2R2_Fields

func FB30*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F2R2_Fields

func FB31*(r: CAN1_F2R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F2R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F2R2_Fields

func FB0*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F3R1_Fields

func FB1*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F3R1_Fields

func FB2*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F3R1_Fields

func FB3*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F3R1_Fields

func FB4*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F3R1_Fields

func FB5*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F3R1_Fields

func FB6*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F3R1_Fields

func FB7*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F3R1_Fields

func FB8*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F3R1_Fields

func FB9*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F3R1_Fields

func FB10*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F3R1_Fields

func FB11*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F3R1_Fields

func FB12*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F3R1_Fields

func FB13*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F3R1_Fields

func FB14*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F3R1_Fields

func FB15*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F3R1_Fields

func FB16*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F3R1_Fields

func FB17*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F3R1_Fields

func FB18*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F3R1_Fields

func FB19*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F3R1_Fields

func FB20*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F3R1_Fields

func FB21*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F3R1_Fields

func FB22*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F3R1_Fields

func FB23*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F3R1_Fields

func FB24*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F3R1_Fields

func FB25*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F3R1_Fields

func FB26*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F3R1_Fields

func FB27*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F3R1_Fields

func FB28*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F3R1_Fields

func FB29*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F3R1_Fields

func FB30*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F3R1_Fields

func FB31*(r: CAN1_F3R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F3R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F3R1_Fields

func FB0*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F3R2_Fields

func FB1*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F3R2_Fields

func FB2*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F3R2_Fields

func FB3*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F3R2_Fields

func FB4*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F3R2_Fields

func FB5*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F3R2_Fields

func FB6*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F3R2_Fields

func FB7*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F3R2_Fields

func FB8*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F3R2_Fields

func FB9*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F3R2_Fields

func FB10*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F3R2_Fields

func FB11*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F3R2_Fields

func FB12*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F3R2_Fields

func FB13*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F3R2_Fields

func FB14*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F3R2_Fields

func FB15*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F3R2_Fields

func FB16*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F3R2_Fields

func FB17*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F3R2_Fields

func FB18*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F3R2_Fields

func FB19*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F3R2_Fields

func FB20*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F3R2_Fields

func FB21*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F3R2_Fields

func FB22*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F3R2_Fields

func FB23*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F3R2_Fields

func FB24*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F3R2_Fields

func FB25*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F3R2_Fields

func FB26*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F3R2_Fields

func FB27*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F3R2_Fields

func FB28*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F3R2_Fields

func FB29*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F3R2_Fields

func FB30*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F3R2_Fields

func FB31*(r: CAN1_F3R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F3R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F3R2_Fields

func FB0*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F4R1_Fields

func FB1*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F4R1_Fields

func FB2*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F4R1_Fields

func FB3*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F4R1_Fields

func FB4*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F4R1_Fields

func FB5*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F4R1_Fields

func FB6*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F4R1_Fields

func FB7*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F4R1_Fields

func FB8*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F4R1_Fields

func FB9*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F4R1_Fields

func FB10*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F4R1_Fields

func FB11*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F4R1_Fields

func FB12*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F4R1_Fields

func FB13*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F4R1_Fields

func FB14*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F4R1_Fields

func FB15*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F4R1_Fields

func FB16*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F4R1_Fields

func FB17*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F4R1_Fields

func FB18*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F4R1_Fields

func FB19*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F4R1_Fields

func FB20*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F4R1_Fields

func FB21*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F4R1_Fields

func FB22*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F4R1_Fields

func FB23*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F4R1_Fields

func FB24*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F4R1_Fields

func FB25*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F4R1_Fields

func FB26*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F4R1_Fields

func FB27*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F4R1_Fields

func FB28*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F4R1_Fields

func FB29*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F4R1_Fields

func FB30*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F4R1_Fields

func FB31*(r: CAN1_F4R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F4R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F4R1_Fields

func FB0*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F4R2_Fields

func FB1*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F4R2_Fields

func FB2*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F4R2_Fields

func FB3*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F4R2_Fields

func FB4*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F4R2_Fields

func FB5*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F4R2_Fields

func FB6*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F4R2_Fields

func FB7*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F4R2_Fields

func FB8*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F4R2_Fields

func FB9*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F4R2_Fields

func FB10*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F4R2_Fields

func FB11*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F4R2_Fields

func FB12*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F4R2_Fields

func FB13*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F4R2_Fields

func FB14*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F4R2_Fields

func FB15*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F4R2_Fields

func FB16*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F4R2_Fields

func FB17*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F4R2_Fields

func FB18*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F4R2_Fields

func FB19*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F4R2_Fields

func FB20*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F4R2_Fields

func FB21*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F4R2_Fields

func FB22*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F4R2_Fields

func FB23*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F4R2_Fields

func FB24*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F4R2_Fields

func FB25*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F4R2_Fields

func FB26*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F4R2_Fields

func FB27*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F4R2_Fields

func FB28*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F4R2_Fields

func FB29*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F4R2_Fields

func FB30*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F4R2_Fields

func FB31*(r: CAN1_F4R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F4R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F4R2_Fields

func FB0*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F5R1_Fields

func FB1*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F5R1_Fields

func FB2*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F5R1_Fields

func FB3*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F5R1_Fields

func FB4*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F5R1_Fields

func FB5*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F5R1_Fields

func FB6*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F5R1_Fields

func FB7*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F5R1_Fields

func FB8*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F5R1_Fields

func FB9*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F5R1_Fields

func FB10*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F5R1_Fields

func FB11*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F5R1_Fields

func FB12*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F5R1_Fields

func FB13*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F5R1_Fields

func FB14*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F5R1_Fields

func FB15*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F5R1_Fields

func FB16*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F5R1_Fields

func FB17*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F5R1_Fields

func FB18*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F5R1_Fields

func FB19*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F5R1_Fields

func FB20*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F5R1_Fields

func FB21*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F5R1_Fields

func FB22*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F5R1_Fields

func FB23*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F5R1_Fields

func FB24*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F5R1_Fields

func FB25*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F5R1_Fields

func FB26*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F5R1_Fields

func FB27*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F5R1_Fields

func FB28*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F5R1_Fields

func FB29*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F5R1_Fields

func FB30*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F5R1_Fields

func FB31*(r: CAN1_F5R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F5R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F5R1_Fields

func FB0*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F5R2_Fields

func FB1*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F5R2_Fields

func FB2*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F5R2_Fields

func FB3*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F5R2_Fields

func FB4*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F5R2_Fields

func FB5*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F5R2_Fields

func FB6*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F5R2_Fields

func FB7*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F5R2_Fields

func FB8*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F5R2_Fields

func FB9*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F5R2_Fields

func FB10*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F5R2_Fields

func FB11*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F5R2_Fields

func FB12*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F5R2_Fields

func FB13*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F5R2_Fields

func FB14*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F5R2_Fields

func FB15*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F5R2_Fields

func FB16*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F5R2_Fields

func FB17*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F5R2_Fields

func FB18*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F5R2_Fields

func FB19*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F5R2_Fields

func FB20*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F5R2_Fields

func FB21*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F5R2_Fields

func FB22*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F5R2_Fields

func FB23*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F5R2_Fields

func FB24*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F5R2_Fields

func FB25*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F5R2_Fields

func FB26*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F5R2_Fields

func FB27*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F5R2_Fields

func FB28*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F5R2_Fields

func FB29*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F5R2_Fields

func FB30*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F5R2_Fields

func FB31*(r: CAN1_F5R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F5R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F5R2_Fields

func FB0*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F6R1_Fields

func FB1*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F6R1_Fields

func FB2*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F6R1_Fields

func FB3*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F6R1_Fields

func FB4*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F6R1_Fields

func FB5*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F6R1_Fields

func FB6*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F6R1_Fields

func FB7*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F6R1_Fields

func FB8*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F6R1_Fields

func FB9*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F6R1_Fields

func FB10*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F6R1_Fields

func FB11*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F6R1_Fields

func FB12*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F6R1_Fields

func FB13*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F6R1_Fields

func FB14*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F6R1_Fields

func FB15*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F6R1_Fields

func FB16*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F6R1_Fields

func FB17*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F6R1_Fields

func FB18*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F6R1_Fields

func FB19*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F6R1_Fields

func FB20*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F6R1_Fields

func FB21*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F6R1_Fields

func FB22*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F6R1_Fields

func FB23*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F6R1_Fields

func FB24*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F6R1_Fields

func FB25*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F6R1_Fields

func FB26*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F6R1_Fields

func FB27*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F6R1_Fields

func FB28*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F6R1_Fields

func FB29*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F6R1_Fields

func FB30*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F6R1_Fields

func FB31*(r: CAN1_F6R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F6R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F6R1_Fields

func FB0*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F6R2_Fields

func FB1*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F6R2_Fields

func FB2*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F6R2_Fields

func FB3*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F6R2_Fields

func FB4*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F6R2_Fields

func FB5*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F6R2_Fields

func FB6*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F6R2_Fields

func FB7*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F6R2_Fields

func FB8*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F6R2_Fields

func FB9*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F6R2_Fields

func FB10*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F6R2_Fields

func FB11*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F6R2_Fields

func FB12*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F6R2_Fields

func FB13*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F6R2_Fields

func FB14*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F6R2_Fields

func FB15*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F6R2_Fields

func FB16*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F6R2_Fields

func FB17*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F6R2_Fields

func FB18*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F6R2_Fields

func FB19*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F6R2_Fields

func FB20*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F6R2_Fields

func FB21*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F6R2_Fields

func FB22*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F6R2_Fields

func FB23*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F6R2_Fields

func FB24*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F6R2_Fields

func FB25*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F6R2_Fields

func FB26*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F6R2_Fields

func FB27*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F6R2_Fields

func FB28*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F6R2_Fields

func FB29*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F6R2_Fields

func FB30*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F6R2_Fields

func FB31*(r: CAN1_F6R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F6R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F6R2_Fields

func FB0*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F7R1_Fields

func FB1*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F7R1_Fields

func FB2*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F7R1_Fields

func FB3*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F7R1_Fields

func FB4*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F7R1_Fields

func FB5*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F7R1_Fields

func FB6*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F7R1_Fields

func FB7*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F7R1_Fields

func FB8*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F7R1_Fields

func FB9*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F7R1_Fields

func FB10*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F7R1_Fields

func FB11*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F7R1_Fields

func FB12*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F7R1_Fields

func FB13*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F7R1_Fields

func FB14*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F7R1_Fields

func FB15*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F7R1_Fields

func FB16*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F7R1_Fields

func FB17*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F7R1_Fields

func FB18*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F7R1_Fields

func FB19*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F7R1_Fields

func FB20*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F7R1_Fields

func FB21*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F7R1_Fields

func FB22*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F7R1_Fields

func FB23*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F7R1_Fields

func FB24*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F7R1_Fields

func FB25*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F7R1_Fields

func FB26*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F7R1_Fields

func FB27*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F7R1_Fields

func FB28*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F7R1_Fields

func FB29*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F7R1_Fields

func FB30*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F7R1_Fields

func FB31*(r: CAN1_F7R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F7R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F7R1_Fields

func FB0*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F7R2_Fields

func FB1*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F7R2_Fields

func FB2*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F7R2_Fields

func FB3*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F7R2_Fields

func FB4*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F7R2_Fields

func FB5*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F7R2_Fields

func FB6*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F7R2_Fields

func FB7*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F7R2_Fields

func FB8*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F7R2_Fields

func FB9*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F7R2_Fields

func FB10*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F7R2_Fields

func FB11*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F7R2_Fields

func FB12*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F7R2_Fields

func FB13*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F7R2_Fields

func FB14*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F7R2_Fields

func FB15*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F7R2_Fields

func FB16*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F7R2_Fields

func FB17*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F7R2_Fields

func FB18*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F7R2_Fields

func FB19*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F7R2_Fields

func FB20*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F7R2_Fields

func FB21*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F7R2_Fields

func FB22*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F7R2_Fields

func FB23*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F7R2_Fields

func FB24*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F7R2_Fields

func FB25*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F7R2_Fields

func FB26*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F7R2_Fields

func FB27*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F7R2_Fields

func FB28*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F7R2_Fields

func FB29*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F7R2_Fields

func FB30*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F7R2_Fields

func FB31*(r: CAN1_F7R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F7R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F7R2_Fields

func FB0*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F8R1_Fields

func FB1*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F8R1_Fields

func FB2*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F8R1_Fields

func FB3*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F8R1_Fields

func FB4*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F8R1_Fields

func FB5*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F8R1_Fields

func FB6*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F8R1_Fields

func FB7*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F8R1_Fields

func FB8*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F8R1_Fields

func FB9*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F8R1_Fields

func FB10*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F8R1_Fields

func FB11*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F8R1_Fields

func FB12*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F8R1_Fields

func FB13*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F8R1_Fields

func FB14*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F8R1_Fields

func FB15*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F8R1_Fields

func FB16*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F8R1_Fields

func FB17*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F8R1_Fields

func FB18*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F8R1_Fields

func FB19*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F8R1_Fields

func FB20*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F8R1_Fields

func FB21*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F8R1_Fields

func FB22*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F8R1_Fields

func FB23*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F8R1_Fields

func FB24*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F8R1_Fields

func FB25*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F8R1_Fields

func FB26*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F8R1_Fields

func FB27*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F8R1_Fields

func FB28*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F8R1_Fields

func FB29*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F8R1_Fields

func FB30*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F8R1_Fields

func FB31*(r: CAN1_F8R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F8R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F8R1_Fields

func FB0*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F8R2_Fields

func FB1*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F8R2_Fields

func FB2*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F8R2_Fields

func FB3*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F8R2_Fields

func FB4*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F8R2_Fields

func FB5*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F8R2_Fields

func FB6*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F8R2_Fields

func FB7*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F8R2_Fields

func FB8*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F8R2_Fields

func FB9*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F8R2_Fields

func FB10*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F8R2_Fields

func FB11*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F8R2_Fields

func FB12*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F8R2_Fields

func FB13*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F8R2_Fields

func FB14*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F8R2_Fields

func FB15*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F8R2_Fields

func FB16*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F8R2_Fields

func FB17*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F8R2_Fields

func FB18*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F8R2_Fields

func FB19*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F8R2_Fields

func FB20*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F8R2_Fields

func FB21*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F8R2_Fields

func FB22*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F8R2_Fields

func FB23*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F8R2_Fields

func FB24*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F8R2_Fields

func FB25*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F8R2_Fields

func FB26*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F8R2_Fields

func FB27*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F8R2_Fields

func FB28*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F8R2_Fields

func FB29*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F8R2_Fields

func FB30*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F8R2_Fields

func FB31*(r: CAN1_F8R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F8R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F8R2_Fields

func FB0*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F9R1_Fields

func FB1*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F9R1_Fields

func FB2*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F9R1_Fields

func FB3*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F9R1_Fields

func FB4*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F9R1_Fields

func FB5*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F9R1_Fields

func FB6*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F9R1_Fields

func FB7*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F9R1_Fields

func FB8*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F9R1_Fields

func FB9*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F9R1_Fields

func FB10*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F9R1_Fields

func FB11*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F9R1_Fields

func FB12*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F9R1_Fields

func FB13*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F9R1_Fields

func FB14*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F9R1_Fields

func FB15*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F9R1_Fields

func FB16*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F9R1_Fields

func FB17*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F9R1_Fields

func FB18*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F9R1_Fields

func FB19*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F9R1_Fields

func FB20*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F9R1_Fields

func FB21*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F9R1_Fields

func FB22*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F9R1_Fields

func FB23*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F9R1_Fields

func FB24*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F9R1_Fields

func FB25*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F9R1_Fields

func FB26*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F9R1_Fields

func FB27*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F9R1_Fields

func FB28*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F9R1_Fields

func FB29*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F9R1_Fields

func FB30*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F9R1_Fields

func FB31*(r: CAN1_F9R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F9R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F9R1_Fields

func FB0*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F9R2_Fields

func FB1*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F9R2_Fields

func FB2*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F9R2_Fields

func FB3*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F9R2_Fields

func FB4*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F9R2_Fields

func FB5*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F9R2_Fields

func FB6*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F9R2_Fields

func FB7*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F9R2_Fields

func FB8*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F9R2_Fields

func FB9*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F9R2_Fields

func FB10*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F9R2_Fields

func FB11*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F9R2_Fields

func FB12*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F9R2_Fields

func FB13*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F9R2_Fields

func FB14*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F9R2_Fields

func FB15*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F9R2_Fields

func FB16*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F9R2_Fields

func FB17*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F9R2_Fields

func FB18*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F9R2_Fields

func FB19*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F9R2_Fields

func FB20*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F9R2_Fields

func FB21*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F9R2_Fields

func FB22*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F9R2_Fields

func FB23*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F9R2_Fields

func FB24*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F9R2_Fields

func FB25*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F9R2_Fields

func FB26*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F9R2_Fields

func FB27*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F9R2_Fields

func FB28*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F9R2_Fields

func FB29*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F9R2_Fields

func FB30*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F9R2_Fields

func FB31*(r: CAN1_F9R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F9R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F9R2_Fields

func FB0*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F10R1_Fields

func FB1*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F10R1_Fields

func FB2*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F10R1_Fields

func FB3*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F10R1_Fields

func FB4*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F10R1_Fields

func FB5*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F10R1_Fields

func FB6*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F10R1_Fields

func FB7*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F10R1_Fields

func FB8*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F10R1_Fields

func FB9*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F10R1_Fields

func FB10*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F10R1_Fields

func FB11*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F10R1_Fields

func FB12*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F10R1_Fields

func FB13*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F10R1_Fields

func FB14*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F10R1_Fields

func FB15*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F10R1_Fields

func FB16*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F10R1_Fields

func FB17*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F10R1_Fields

func FB18*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F10R1_Fields

func FB19*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F10R1_Fields

func FB20*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F10R1_Fields

func FB21*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F10R1_Fields

func FB22*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F10R1_Fields

func FB23*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F10R1_Fields

func FB24*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F10R1_Fields

func FB25*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F10R1_Fields

func FB26*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F10R1_Fields

func FB27*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F10R1_Fields

func FB28*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F10R1_Fields

func FB29*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F10R1_Fields

func FB30*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F10R1_Fields

func FB31*(r: CAN1_F10R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F10R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F10R1_Fields

func FB0*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F10R2_Fields

func FB1*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F10R2_Fields

func FB2*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F10R2_Fields

func FB3*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F10R2_Fields

func FB4*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F10R2_Fields

func FB5*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F10R2_Fields

func FB6*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F10R2_Fields

func FB7*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F10R2_Fields

func FB8*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F10R2_Fields

func FB9*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F10R2_Fields

func FB10*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F10R2_Fields

func FB11*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F10R2_Fields

func FB12*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F10R2_Fields

func FB13*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F10R2_Fields

func FB14*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F10R2_Fields

func FB15*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F10R2_Fields

func FB16*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F10R2_Fields

func FB17*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F10R2_Fields

func FB18*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F10R2_Fields

func FB19*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F10R2_Fields

func FB20*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F10R2_Fields

func FB21*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F10R2_Fields

func FB22*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F10R2_Fields

func FB23*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F10R2_Fields

func FB24*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F10R2_Fields

func FB25*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F10R2_Fields

func FB26*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F10R2_Fields

func FB27*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F10R2_Fields

func FB28*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F10R2_Fields

func FB29*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F10R2_Fields

func FB30*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F10R2_Fields

func FB31*(r: CAN1_F10R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F10R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F10R2_Fields

func FB0*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F11R1_Fields

func FB1*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F11R1_Fields

func FB2*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F11R1_Fields

func FB3*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F11R1_Fields

func FB4*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F11R1_Fields

func FB5*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F11R1_Fields

func FB6*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F11R1_Fields

func FB7*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F11R1_Fields

func FB8*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F11R1_Fields

func FB9*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F11R1_Fields

func FB10*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F11R1_Fields

func FB11*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F11R1_Fields

func FB12*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F11R1_Fields

func FB13*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F11R1_Fields

func FB14*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F11R1_Fields

func FB15*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F11R1_Fields

func FB16*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F11R1_Fields

func FB17*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F11R1_Fields

func FB18*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F11R1_Fields

func FB19*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F11R1_Fields

func FB20*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F11R1_Fields

func FB21*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F11R1_Fields

func FB22*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F11R1_Fields

func FB23*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F11R1_Fields

func FB24*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F11R1_Fields

func FB25*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F11R1_Fields

func FB26*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F11R1_Fields

func FB27*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F11R1_Fields

func FB28*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F11R1_Fields

func FB29*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F11R1_Fields

func FB30*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F11R1_Fields

func FB31*(r: CAN1_F11R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F11R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F11R1_Fields

func FB0*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F11R2_Fields

func FB1*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F11R2_Fields

func FB2*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F11R2_Fields

func FB3*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F11R2_Fields

func FB4*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F11R2_Fields

func FB5*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F11R2_Fields

func FB6*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F11R2_Fields

func FB7*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F11R2_Fields

func FB8*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F11R2_Fields

func FB9*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F11R2_Fields

func FB10*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F11R2_Fields

func FB11*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F11R2_Fields

func FB12*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F11R2_Fields

func FB13*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F11R2_Fields

func FB14*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F11R2_Fields

func FB15*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F11R2_Fields

func FB16*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F11R2_Fields

func FB17*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F11R2_Fields

func FB18*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F11R2_Fields

func FB19*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F11R2_Fields

func FB20*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F11R2_Fields

func FB21*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F11R2_Fields

func FB22*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F11R2_Fields

func FB23*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F11R2_Fields

func FB24*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F11R2_Fields

func FB25*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F11R2_Fields

func FB26*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F11R2_Fields

func FB27*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F11R2_Fields

func FB28*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F11R2_Fields

func FB29*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F11R2_Fields

func FB30*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F11R2_Fields

func FB31*(r: CAN1_F11R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F11R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F11R2_Fields

func FB0*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F12R1_Fields

func FB1*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F12R1_Fields

func FB2*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F12R1_Fields

func FB3*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F12R1_Fields

func FB4*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F12R1_Fields

func FB5*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F12R1_Fields

func FB6*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F12R1_Fields

func FB7*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F12R1_Fields

func FB8*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F12R1_Fields

func FB9*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F12R1_Fields

func FB10*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F12R1_Fields

func FB11*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F12R1_Fields

func FB12*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F12R1_Fields

func FB13*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F12R1_Fields

func FB14*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F12R1_Fields

func FB15*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F12R1_Fields

func FB16*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F12R1_Fields

func FB17*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F12R1_Fields

func FB18*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F12R1_Fields

func FB19*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F12R1_Fields

func FB20*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F12R1_Fields

func FB21*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F12R1_Fields

func FB22*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F12R1_Fields

func FB23*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F12R1_Fields

func FB24*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F12R1_Fields

func FB25*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F12R1_Fields

func FB26*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F12R1_Fields

func FB27*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F12R1_Fields

func FB28*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F12R1_Fields

func FB29*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F12R1_Fields

func FB30*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F12R1_Fields

func FB31*(r: CAN1_F12R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F12R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F12R1_Fields

func FB0*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F12R2_Fields

func FB1*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F12R2_Fields

func FB2*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F12R2_Fields

func FB3*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F12R2_Fields

func FB4*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F12R2_Fields

func FB5*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F12R2_Fields

func FB6*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F12R2_Fields

func FB7*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F12R2_Fields

func FB8*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F12R2_Fields

func FB9*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F12R2_Fields

func FB10*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F12R2_Fields

func FB11*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F12R2_Fields

func FB12*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F12R2_Fields

func FB13*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F12R2_Fields

func FB14*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F12R2_Fields

func FB15*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F12R2_Fields

func FB16*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F12R2_Fields

func FB17*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F12R2_Fields

func FB18*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F12R2_Fields

func FB19*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F12R2_Fields

func FB20*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F12R2_Fields

func FB21*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F12R2_Fields

func FB22*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F12R2_Fields

func FB23*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F12R2_Fields

func FB24*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F12R2_Fields

func FB25*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F12R2_Fields

func FB26*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F12R2_Fields

func FB27*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F12R2_Fields

func FB28*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F12R2_Fields

func FB29*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F12R2_Fields

func FB30*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F12R2_Fields

func FB31*(r: CAN1_F12R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F12R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F12R2_Fields

func FB0*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F13R1_Fields

func FB1*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F13R1_Fields

func FB2*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F13R1_Fields

func FB3*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F13R1_Fields

func FB4*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F13R1_Fields

func FB5*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F13R1_Fields

func FB6*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F13R1_Fields

func FB7*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F13R1_Fields

func FB8*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F13R1_Fields

func FB9*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F13R1_Fields

func FB10*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F13R1_Fields

func FB11*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F13R1_Fields

func FB12*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F13R1_Fields

func FB13*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F13R1_Fields

func FB14*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F13R1_Fields

func FB15*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F13R1_Fields

func FB16*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F13R1_Fields

func FB17*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F13R1_Fields

func FB18*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F13R1_Fields

func FB19*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F13R1_Fields

func FB20*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F13R1_Fields

func FB21*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F13R1_Fields

func FB22*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F13R1_Fields

func FB23*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F13R1_Fields

func FB24*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F13R1_Fields

func FB25*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F13R1_Fields

func FB26*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F13R1_Fields

func FB27*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F13R1_Fields

func FB28*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F13R1_Fields

func FB29*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F13R1_Fields

func FB30*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F13R1_Fields

func FB31*(r: CAN1_F13R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F13R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F13R1_Fields

func FB0*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F13R2_Fields

func FB1*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F13R2_Fields

func FB2*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F13R2_Fields

func FB3*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F13R2_Fields

func FB4*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F13R2_Fields

func FB5*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F13R2_Fields

func FB6*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F13R2_Fields

func FB7*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F13R2_Fields

func FB8*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F13R2_Fields

func FB9*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F13R2_Fields

func FB10*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F13R2_Fields

func FB11*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F13R2_Fields

func FB12*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F13R2_Fields

func FB13*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F13R2_Fields

func FB14*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F13R2_Fields

func FB15*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F13R2_Fields

func FB16*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F13R2_Fields

func FB17*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F13R2_Fields

func FB18*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F13R2_Fields

func FB19*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F13R2_Fields

func FB20*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F13R2_Fields

func FB21*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F13R2_Fields

func FB22*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F13R2_Fields

func FB23*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F13R2_Fields

func FB24*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F13R2_Fields

func FB25*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F13R2_Fields

func FB26*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F13R2_Fields

func FB27*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F13R2_Fields

func FB28*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F13R2_Fields

func FB29*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F13R2_Fields

func FB30*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F13R2_Fields

func FB31*(r: CAN1_F13R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F13R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F13R2_Fields

func FB0*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F14R1_Fields

func FB1*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F14R1_Fields

func FB2*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F14R1_Fields

func FB3*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F14R1_Fields

func FB4*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F14R1_Fields

func FB5*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F14R1_Fields

func FB6*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F14R1_Fields

func FB7*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F14R1_Fields

func FB8*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F14R1_Fields

func FB9*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F14R1_Fields

func FB10*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F14R1_Fields

func FB11*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F14R1_Fields

func FB12*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F14R1_Fields

func FB13*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F14R1_Fields

func FB14*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F14R1_Fields

func FB15*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F14R1_Fields

func FB16*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F14R1_Fields

func FB17*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F14R1_Fields

func FB18*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F14R1_Fields

func FB19*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F14R1_Fields

func FB20*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F14R1_Fields

func FB21*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F14R1_Fields

func FB22*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F14R1_Fields

func FB23*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F14R1_Fields

func FB24*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F14R1_Fields

func FB25*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F14R1_Fields

func FB26*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F14R1_Fields

func FB27*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F14R1_Fields

func FB28*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F14R1_Fields

func FB29*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F14R1_Fields

func FB30*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F14R1_Fields

func FB31*(r: CAN1_F14R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F14R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F14R1_Fields

func FB0*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F14R2_Fields

func FB1*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F14R2_Fields

func FB2*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F14R2_Fields

func FB3*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F14R2_Fields

func FB4*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F14R2_Fields

func FB5*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F14R2_Fields

func FB6*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F14R2_Fields

func FB7*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F14R2_Fields

func FB8*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F14R2_Fields

func FB9*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F14R2_Fields

func FB10*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F14R2_Fields

func FB11*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F14R2_Fields

func FB12*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F14R2_Fields

func FB13*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F14R2_Fields

func FB14*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F14R2_Fields

func FB15*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F14R2_Fields

func FB16*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F14R2_Fields

func FB17*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F14R2_Fields

func FB18*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F14R2_Fields

func FB19*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F14R2_Fields

func FB20*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F14R2_Fields

func FB21*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F14R2_Fields

func FB22*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F14R2_Fields

func FB23*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F14R2_Fields

func FB24*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F14R2_Fields

func FB25*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F14R2_Fields

func FB26*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F14R2_Fields

func FB27*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F14R2_Fields

func FB28*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F14R2_Fields

func FB29*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F14R2_Fields

func FB30*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F14R2_Fields

func FB31*(r: CAN1_F14R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F14R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F14R2_Fields

func FB0*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F15R1_Fields

func FB1*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F15R1_Fields

func FB2*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F15R1_Fields

func FB3*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F15R1_Fields

func FB4*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F15R1_Fields

func FB5*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F15R1_Fields

func FB6*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F15R1_Fields

func FB7*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F15R1_Fields

func FB8*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F15R1_Fields

func FB9*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F15R1_Fields

func FB10*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F15R1_Fields

func FB11*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F15R1_Fields

func FB12*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F15R1_Fields

func FB13*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F15R1_Fields

func FB14*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F15R1_Fields

func FB15*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F15R1_Fields

func FB16*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F15R1_Fields

func FB17*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F15R1_Fields

func FB18*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F15R1_Fields

func FB19*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F15R1_Fields

func FB20*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F15R1_Fields

func FB21*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F15R1_Fields

func FB22*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F15R1_Fields

func FB23*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F15R1_Fields

func FB24*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F15R1_Fields

func FB25*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F15R1_Fields

func FB26*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F15R1_Fields

func FB27*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F15R1_Fields

func FB28*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F15R1_Fields

func FB29*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F15R1_Fields

func FB30*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F15R1_Fields

func FB31*(r: CAN1_F15R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F15R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F15R1_Fields

func FB0*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F15R2_Fields

func FB1*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F15R2_Fields

func FB2*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F15R2_Fields

func FB3*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F15R2_Fields

func FB4*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F15R2_Fields

func FB5*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F15R2_Fields

func FB6*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F15R2_Fields

func FB7*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F15R2_Fields

func FB8*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F15R2_Fields

func FB9*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F15R2_Fields

func FB10*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F15R2_Fields

func FB11*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F15R2_Fields

func FB12*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F15R2_Fields

func FB13*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F15R2_Fields

func FB14*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F15R2_Fields

func FB15*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F15R2_Fields

func FB16*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F15R2_Fields

func FB17*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F15R2_Fields

func FB18*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F15R2_Fields

func FB19*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F15R2_Fields

func FB20*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F15R2_Fields

func FB21*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F15R2_Fields

func FB22*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F15R2_Fields

func FB23*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F15R2_Fields

func FB24*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F15R2_Fields

func FB25*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F15R2_Fields

func FB26*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F15R2_Fields

func FB27*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F15R2_Fields

func FB28*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F15R2_Fields

func FB29*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F15R2_Fields

func FB30*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F15R2_Fields

func FB31*(r: CAN1_F15R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F15R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F15R2_Fields

func FB0*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F16R1_Fields

func FB1*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F16R1_Fields

func FB2*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F16R1_Fields

func FB3*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F16R1_Fields

func FB4*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F16R1_Fields

func FB5*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F16R1_Fields

func FB6*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F16R1_Fields

func FB7*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F16R1_Fields

func FB8*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F16R1_Fields

func FB9*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F16R1_Fields

func FB10*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F16R1_Fields

func FB11*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F16R1_Fields

func FB12*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F16R1_Fields

func FB13*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F16R1_Fields

func FB14*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F16R1_Fields

func FB15*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F16R1_Fields

func FB16*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F16R1_Fields

func FB17*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F16R1_Fields

func FB18*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F16R1_Fields

func FB19*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F16R1_Fields

func FB20*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F16R1_Fields

func FB21*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F16R1_Fields

func FB22*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F16R1_Fields

func FB23*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F16R1_Fields

func FB24*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F16R1_Fields

func FB25*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F16R1_Fields

func FB26*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F16R1_Fields

func FB27*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F16R1_Fields

func FB28*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F16R1_Fields

func FB29*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F16R1_Fields

func FB30*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F16R1_Fields

func FB31*(r: CAN1_F16R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F16R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F16R1_Fields

func FB0*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F16R2_Fields

func FB1*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F16R2_Fields

func FB2*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F16R2_Fields

func FB3*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F16R2_Fields

func FB4*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F16R2_Fields

func FB5*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F16R2_Fields

func FB6*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F16R2_Fields

func FB7*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F16R2_Fields

func FB8*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F16R2_Fields

func FB9*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F16R2_Fields

func FB10*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F16R2_Fields

func FB11*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F16R2_Fields

func FB12*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F16R2_Fields

func FB13*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F16R2_Fields

func FB14*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F16R2_Fields

func FB15*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F16R2_Fields

func FB16*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F16R2_Fields

func FB17*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F16R2_Fields

func FB18*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F16R2_Fields

func FB19*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F16R2_Fields

func FB20*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F16R2_Fields

func FB21*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F16R2_Fields

func FB22*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F16R2_Fields

func FB23*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F16R2_Fields

func FB24*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F16R2_Fields

func FB25*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F16R2_Fields

func FB26*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F16R2_Fields

func FB27*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F16R2_Fields

func FB28*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F16R2_Fields

func FB29*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F16R2_Fields

func FB30*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F16R2_Fields

func FB31*(r: CAN1_F16R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F16R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F16R2_Fields

func FB0*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F17R1_Fields

func FB1*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F17R1_Fields

func FB2*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F17R1_Fields

func FB3*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F17R1_Fields

func FB4*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F17R1_Fields

func FB5*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F17R1_Fields

func FB6*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F17R1_Fields

func FB7*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F17R1_Fields

func FB8*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F17R1_Fields

func FB9*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F17R1_Fields

func FB10*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F17R1_Fields

func FB11*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F17R1_Fields

func FB12*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F17R1_Fields

func FB13*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F17R1_Fields

func FB14*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F17R1_Fields

func FB15*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F17R1_Fields

func FB16*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F17R1_Fields

func FB17*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F17R1_Fields

func FB18*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F17R1_Fields

func FB19*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F17R1_Fields

func FB20*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F17R1_Fields

func FB21*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F17R1_Fields

func FB22*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F17R1_Fields

func FB23*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F17R1_Fields

func FB24*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F17R1_Fields

func FB25*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F17R1_Fields

func FB26*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F17R1_Fields

func FB27*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F17R1_Fields

func FB28*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F17R1_Fields

func FB29*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F17R1_Fields

func FB30*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F17R1_Fields

func FB31*(r: CAN1_F17R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F17R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F17R1_Fields

func FB0*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F17R2_Fields

func FB1*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F17R2_Fields

func FB2*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F17R2_Fields

func FB3*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F17R2_Fields

func FB4*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F17R2_Fields

func FB5*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F17R2_Fields

func FB6*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F17R2_Fields

func FB7*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F17R2_Fields

func FB8*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F17R2_Fields

func FB9*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F17R2_Fields

func FB10*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F17R2_Fields

func FB11*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F17R2_Fields

func FB12*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F17R2_Fields

func FB13*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F17R2_Fields

func FB14*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F17R2_Fields

func FB15*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F17R2_Fields

func FB16*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F17R2_Fields

func FB17*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F17R2_Fields

func FB18*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F17R2_Fields

func FB19*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F17R2_Fields

func FB20*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F17R2_Fields

func FB21*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F17R2_Fields

func FB22*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F17R2_Fields

func FB23*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F17R2_Fields

func FB24*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F17R2_Fields

func FB25*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F17R2_Fields

func FB26*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F17R2_Fields

func FB27*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F17R2_Fields

func FB28*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F17R2_Fields

func FB29*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F17R2_Fields

func FB30*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F17R2_Fields

func FB31*(r: CAN1_F17R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F17R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F17R2_Fields

func FB0*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F18R1_Fields

func FB1*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F18R1_Fields

func FB2*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F18R1_Fields

func FB3*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F18R1_Fields

func FB4*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F18R1_Fields

func FB5*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F18R1_Fields

func FB6*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F18R1_Fields

func FB7*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F18R1_Fields

func FB8*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F18R1_Fields

func FB9*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F18R1_Fields

func FB10*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F18R1_Fields

func FB11*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F18R1_Fields

func FB12*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F18R1_Fields

func FB13*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F18R1_Fields

func FB14*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F18R1_Fields

func FB15*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F18R1_Fields

func FB16*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F18R1_Fields

func FB17*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F18R1_Fields

func FB18*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F18R1_Fields

func FB19*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F18R1_Fields

func FB20*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F18R1_Fields

func FB21*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F18R1_Fields

func FB22*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F18R1_Fields

func FB23*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F18R1_Fields

func FB24*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F18R1_Fields

func FB25*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F18R1_Fields

func FB26*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F18R1_Fields

func FB27*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F18R1_Fields

func FB28*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F18R1_Fields

func FB29*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F18R1_Fields

func FB30*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F18R1_Fields

func FB31*(r: CAN1_F18R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F18R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F18R1_Fields

func FB0*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F18R2_Fields

func FB1*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F18R2_Fields

func FB2*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F18R2_Fields

func FB3*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F18R2_Fields

func FB4*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F18R2_Fields

func FB5*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F18R2_Fields

func FB6*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F18R2_Fields

func FB7*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F18R2_Fields

func FB8*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F18R2_Fields

func FB9*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F18R2_Fields

func FB10*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F18R2_Fields

func FB11*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F18R2_Fields

func FB12*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F18R2_Fields

func FB13*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F18R2_Fields

func FB14*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F18R2_Fields

func FB15*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F18R2_Fields

func FB16*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F18R2_Fields

func FB17*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F18R2_Fields

func FB18*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F18R2_Fields

func FB19*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F18R2_Fields

func FB20*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F18R2_Fields

func FB21*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F18R2_Fields

func FB22*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F18R2_Fields

func FB23*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F18R2_Fields

func FB24*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F18R2_Fields

func FB25*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F18R2_Fields

func FB26*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F18R2_Fields

func FB27*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F18R2_Fields

func FB28*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F18R2_Fields

func FB29*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F18R2_Fields

func FB30*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F18R2_Fields

func FB31*(r: CAN1_F18R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F18R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F18R2_Fields

func FB0*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F19R1_Fields

func FB1*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F19R1_Fields

func FB2*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F19R1_Fields

func FB3*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F19R1_Fields

func FB4*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F19R1_Fields

func FB5*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F19R1_Fields

func FB6*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F19R1_Fields

func FB7*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F19R1_Fields

func FB8*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F19R1_Fields

func FB9*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F19R1_Fields

func FB10*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F19R1_Fields

func FB11*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F19R1_Fields

func FB12*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F19R1_Fields

func FB13*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F19R1_Fields

func FB14*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F19R1_Fields

func FB15*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F19R1_Fields

func FB16*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F19R1_Fields

func FB17*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F19R1_Fields

func FB18*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F19R1_Fields

func FB19*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F19R1_Fields

func FB20*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F19R1_Fields

func FB21*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F19R1_Fields

func FB22*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F19R1_Fields

func FB23*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F19R1_Fields

func FB24*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F19R1_Fields

func FB25*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F19R1_Fields

func FB26*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F19R1_Fields

func FB27*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F19R1_Fields

func FB28*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F19R1_Fields

func FB29*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F19R1_Fields

func FB30*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F19R1_Fields

func FB31*(r: CAN1_F19R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F19R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F19R1_Fields

func FB0*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F19R2_Fields

func FB1*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F19R2_Fields

func FB2*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F19R2_Fields

func FB3*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F19R2_Fields

func FB4*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F19R2_Fields

func FB5*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F19R2_Fields

func FB6*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F19R2_Fields

func FB7*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F19R2_Fields

func FB8*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F19R2_Fields

func FB9*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F19R2_Fields

func FB10*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F19R2_Fields

func FB11*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F19R2_Fields

func FB12*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F19R2_Fields

func FB13*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F19R2_Fields

func FB14*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F19R2_Fields

func FB15*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F19R2_Fields

func FB16*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F19R2_Fields

func FB17*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F19R2_Fields

func FB18*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F19R2_Fields

func FB19*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F19R2_Fields

func FB20*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F19R2_Fields

func FB21*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F19R2_Fields

func FB22*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F19R2_Fields

func FB23*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F19R2_Fields

func FB24*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F19R2_Fields

func FB25*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F19R2_Fields

func FB26*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F19R2_Fields

func FB27*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F19R2_Fields

func FB28*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F19R2_Fields

func FB29*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F19R2_Fields

func FB30*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F19R2_Fields

func FB31*(r: CAN1_F19R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F19R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F19R2_Fields

func FB0*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F20R1_Fields

func FB1*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F20R1_Fields

func FB2*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F20R1_Fields

func FB3*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F20R1_Fields

func FB4*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F20R1_Fields

func FB5*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F20R1_Fields

func FB6*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F20R1_Fields

func FB7*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F20R1_Fields

func FB8*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F20R1_Fields

func FB9*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F20R1_Fields

func FB10*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F20R1_Fields

func FB11*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F20R1_Fields

func FB12*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F20R1_Fields

func FB13*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F20R1_Fields

func FB14*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F20R1_Fields

func FB15*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F20R1_Fields

func FB16*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F20R1_Fields

func FB17*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F20R1_Fields

func FB18*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F20R1_Fields

func FB19*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F20R1_Fields

func FB20*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F20R1_Fields

func FB21*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F20R1_Fields

func FB22*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F20R1_Fields

func FB23*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F20R1_Fields

func FB24*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F20R1_Fields

func FB25*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F20R1_Fields

func FB26*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F20R1_Fields

func FB27*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F20R1_Fields

func FB28*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F20R1_Fields

func FB29*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F20R1_Fields

func FB30*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F20R1_Fields

func FB31*(r: CAN1_F20R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F20R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F20R1_Fields

func FB0*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F20R2_Fields

func FB1*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F20R2_Fields

func FB2*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F20R2_Fields

func FB3*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F20R2_Fields

func FB4*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F20R2_Fields

func FB5*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F20R2_Fields

func FB6*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F20R2_Fields

func FB7*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F20R2_Fields

func FB8*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F20R2_Fields

func FB9*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F20R2_Fields

func FB10*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F20R2_Fields

func FB11*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F20R2_Fields

func FB12*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F20R2_Fields

func FB13*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F20R2_Fields

func FB14*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F20R2_Fields

func FB15*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F20R2_Fields

func FB16*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F20R2_Fields

func FB17*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F20R2_Fields

func FB18*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F20R2_Fields

func FB19*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F20R2_Fields

func FB20*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F20R2_Fields

func FB21*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F20R2_Fields

func FB22*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F20R2_Fields

func FB23*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F20R2_Fields

func FB24*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F20R2_Fields

func FB25*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F20R2_Fields

func FB26*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F20R2_Fields

func FB27*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F20R2_Fields

func FB28*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F20R2_Fields

func FB29*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F20R2_Fields

func FB30*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F20R2_Fields

func FB31*(r: CAN1_F20R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F20R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F20R2_Fields

func FB0*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F21R1_Fields

func FB1*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F21R1_Fields

func FB2*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F21R1_Fields

func FB3*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F21R1_Fields

func FB4*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F21R1_Fields

func FB5*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F21R1_Fields

func FB6*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F21R1_Fields

func FB7*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F21R1_Fields

func FB8*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F21R1_Fields

func FB9*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F21R1_Fields

func FB10*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F21R1_Fields

func FB11*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F21R1_Fields

func FB12*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F21R1_Fields

func FB13*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F21R1_Fields

func FB14*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F21R1_Fields

func FB15*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F21R1_Fields

func FB16*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F21R1_Fields

func FB17*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F21R1_Fields

func FB18*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F21R1_Fields

func FB19*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F21R1_Fields

func FB20*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F21R1_Fields

func FB21*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F21R1_Fields

func FB22*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F21R1_Fields

func FB23*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F21R1_Fields

func FB24*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F21R1_Fields

func FB25*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F21R1_Fields

func FB26*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F21R1_Fields

func FB27*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F21R1_Fields

func FB28*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F21R1_Fields

func FB29*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F21R1_Fields

func FB30*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F21R1_Fields

func FB31*(r: CAN1_F21R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F21R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F21R1_Fields

func FB0*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F21R2_Fields

func FB1*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F21R2_Fields

func FB2*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F21R2_Fields

func FB3*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F21R2_Fields

func FB4*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F21R2_Fields

func FB5*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F21R2_Fields

func FB6*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F21R2_Fields

func FB7*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F21R2_Fields

func FB8*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F21R2_Fields

func FB9*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F21R2_Fields

func FB10*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F21R2_Fields

func FB11*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F21R2_Fields

func FB12*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F21R2_Fields

func FB13*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F21R2_Fields

func FB14*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F21R2_Fields

func FB15*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F21R2_Fields

func FB16*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F21R2_Fields

func FB17*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F21R2_Fields

func FB18*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F21R2_Fields

func FB19*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F21R2_Fields

func FB20*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F21R2_Fields

func FB21*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F21R2_Fields

func FB22*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F21R2_Fields

func FB23*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F21R2_Fields

func FB24*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F21R2_Fields

func FB25*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F21R2_Fields

func FB26*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F21R2_Fields

func FB27*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F21R2_Fields

func FB28*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F21R2_Fields

func FB29*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F21R2_Fields

func FB30*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F21R2_Fields

func FB31*(r: CAN1_F21R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F21R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F21R2_Fields

func FB0*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F22R1_Fields

func FB1*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F22R1_Fields

func FB2*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F22R1_Fields

func FB3*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F22R1_Fields

func FB4*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F22R1_Fields

func FB5*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F22R1_Fields

func FB6*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F22R1_Fields

func FB7*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F22R1_Fields

func FB8*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F22R1_Fields

func FB9*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F22R1_Fields

func FB10*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F22R1_Fields

func FB11*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F22R1_Fields

func FB12*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F22R1_Fields

func FB13*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F22R1_Fields

func FB14*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F22R1_Fields

func FB15*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F22R1_Fields

func FB16*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F22R1_Fields

func FB17*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F22R1_Fields

func FB18*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F22R1_Fields

func FB19*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F22R1_Fields

func FB20*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F22R1_Fields

func FB21*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F22R1_Fields

func FB22*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F22R1_Fields

func FB23*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F22R1_Fields

func FB24*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F22R1_Fields

func FB25*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F22R1_Fields

func FB26*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F22R1_Fields

func FB27*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F22R1_Fields

func FB28*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F22R1_Fields

func FB29*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F22R1_Fields

func FB30*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F22R1_Fields

func FB31*(r: CAN1_F22R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F22R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F22R1_Fields

func FB0*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F22R2_Fields

func FB1*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F22R2_Fields

func FB2*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F22R2_Fields

func FB3*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F22R2_Fields

func FB4*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F22R2_Fields

func FB5*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F22R2_Fields

func FB6*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F22R2_Fields

func FB7*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F22R2_Fields

func FB8*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F22R2_Fields

func FB9*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F22R2_Fields

func FB10*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F22R2_Fields

func FB11*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F22R2_Fields

func FB12*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F22R2_Fields

func FB13*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F22R2_Fields

func FB14*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F22R2_Fields

func FB15*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F22R2_Fields

func FB16*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F22R2_Fields

func FB17*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F22R2_Fields

func FB18*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F22R2_Fields

func FB19*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F22R2_Fields

func FB20*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F22R2_Fields

func FB21*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F22R2_Fields

func FB22*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F22R2_Fields

func FB23*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F22R2_Fields

func FB24*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F22R2_Fields

func FB25*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F22R2_Fields

func FB26*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F22R2_Fields

func FB27*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F22R2_Fields

func FB28*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F22R2_Fields

func FB29*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F22R2_Fields

func FB30*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F22R2_Fields

func FB31*(r: CAN1_F22R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F22R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F22R2_Fields

func FB0*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F23R1_Fields

func FB1*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F23R1_Fields

func FB2*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F23R1_Fields

func FB3*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F23R1_Fields

func FB4*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F23R1_Fields

func FB5*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F23R1_Fields

func FB6*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F23R1_Fields

func FB7*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F23R1_Fields

func FB8*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F23R1_Fields

func FB9*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F23R1_Fields

func FB10*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F23R1_Fields

func FB11*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F23R1_Fields

func FB12*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F23R1_Fields

func FB13*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F23R1_Fields

func FB14*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F23R1_Fields

func FB15*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F23R1_Fields

func FB16*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F23R1_Fields

func FB17*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F23R1_Fields

func FB18*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F23R1_Fields

func FB19*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F23R1_Fields

func FB20*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F23R1_Fields

func FB21*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F23R1_Fields

func FB22*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F23R1_Fields

func FB23*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F23R1_Fields

func FB24*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F23R1_Fields

func FB25*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F23R1_Fields

func FB26*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F23R1_Fields

func FB27*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F23R1_Fields

func FB28*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F23R1_Fields

func FB29*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F23R1_Fields

func FB30*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F23R1_Fields

func FB31*(r: CAN1_F23R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F23R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F23R1_Fields

func FB0*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F23R2_Fields

func FB1*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F23R2_Fields

func FB2*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F23R2_Fields

func FB3*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F23R2_Fields

func FB4*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F23R2_Fields

func FB5*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F23R2_Fields

func FB6*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F23R2_Fields

func FB7*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F23R2_Fields

func FB8*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F23R2_Fields

func FB9*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F23R2_Fields

func FB10*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F23R2_Fields

func FB11*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F23R2_Fields

func FB12*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F23R2_Fields

func FB13*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F23R2_Fields

func FB14*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F23R2_Fields

func FB15*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F23R2_Fields

func FB16*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F23R2_Fields

func FB17*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F23R2_Fields

func FB18*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F23R2_Fields

func FB19*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F23R2_Fields

func FB20*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F23R2_Fields

func FB21*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F23R2_Fields

func FB22*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F23R2_Fields

func FB23*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F23R2_Fields

func FB24*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F23R2_Fields

func FB25*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F23R2_Fields

func FB26*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F23R2_Fields

func FB27*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F23R2_Fields

func FB28*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F23R2_Fields

func FB29*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F23R2_Fields

func FB30*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F23R2_Fields

func FB31*(r: CAN1_F23R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F23R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F23R2_Fields

func FB0*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F24R1_Fields

func FB1*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F24R1_Fields

func FB2*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F24R1_Fields

func FB3*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F24R1_Fields

func FB4*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F24R1_Fields

func FB5*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F24R1_Fields

func FB6*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F24R1_Fields

func FB7*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F24R1_Fields

func FB8*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F24R1_Fields

func FB9*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F24R1_Fields

func FB10*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F24R1_Fields

func FB11*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F24R1_Fields

func FB12*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F24R1_Fields

func FB13*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F24R1_Fields

func FB14*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F24R1_Fields

func FB15*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F24R1_Fields

func FB16*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F24R1_Fields

func FB17*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F24R1_Fields

func FB18*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F24R1_Fields

func FB19*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F24R1_Fields

func FB20*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F24R1_Fields

func FB21*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F24R1_Fields

func FB22*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F24R1_Fields

func FB23*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F24R1_Fields

func FB24*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F24R1_Fields

func FB25*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F24R1_Fields

func FB26*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F24R1_Fields

func FB27*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F24R1_Fields

func FB28*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F24R1_Fields

func FB29*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F24R1_Fields

func FB30*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F24R1_Fields

func FB31*(r: CAN1_F24R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F24R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F24R1_Fields

func FB0*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F24R2_Fields

func FB1*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F24R2_Fields

func FB2*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F24R2_Fields

func FB3*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F24R2_Fields

func FB4*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F24R2_Fields

func FB5*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F24R2_Fields

func FB6*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F24R2_Fields

func FB7*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F24R2_Fields

func FB8*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F24R2_Fields

func FB9*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F24R2_Fields

func FB10*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F24R2_Fields

func FB11*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F24R2_Fields

func FB12*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F24R2_Fields

func FB13*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F24R2_Fields

func FB14*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F24R2_Fields

func FB15*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F24R2_Fields

func FB16*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F24R2_Fields

func FB17*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F24R2_Fields

func FB18*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F24R2_Fields

func FB19*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F24R2_Fields

func FB20*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F24R2_Fields

func FB21*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F24R2_Fields

func FB22*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F24R2_Fields

func FB23*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F24R2_Fields

func FB24*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F24R2_Fields

func FB25*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F24R2_Fields

func FB26*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F24R2_Fields

func FB27*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F24R2_Fields

func FB28*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F24R2_Fields

func FB29*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F24R2_Fields

func FB30*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F24R2_Fields

func FB31*(r: CAN1_F24R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F24R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F24R2_Fields

func FB0*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F25R1_Fields

func FB1*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F25R1_Fields

func FB2*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F25R1_Fields

func FB3*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F25R1_Fields

func FB4*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F25R1_Fields

func FB5*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F25R1_Fields

func FB6*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F25R1_Fields

func FB7*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F25R1_Fields

func FB8*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F25R1_Fields

func FB9*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F25R1_Fields

func FB10*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F25R1_Fields

func FB11*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F25R1_Fields

func FB12*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F25R1_Fields

func FB13*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F25R1_Fields

func FB14*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F25R1_Fields

func FB15*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F25R1_Fields

func FB16*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F25R1_Fields

func FB17*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F25R1_Fields

func FB18*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F25R1_Fields

func FB19*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F25R1_Fields

func FB20*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F25R1_Fields

func FB21*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F25R1_Fields

func FB22*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F25R1_Fields

func FB23*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F25R1_Fields

func FB24*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F25R1_Fields

func FB25*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F25R1_Fields

func FB26*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F25R1_Fields

func FB27*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F25R1_Fields

func FB28*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F25R1_Fields

func FB29*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F25R1_Fields

func FB30*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F25R1_Fields

func FB31*(r: CAN1_F25R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F25R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F25R1_Fields

func FB0*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F25R2_Fields

func FB1*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F25R2_Fields

func FB2*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F25R2_Fields

func FB3*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F25R2_Fields

func FB4*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F25R2_Fields

func FB5*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F25R2_Fields

func FB6*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F25R2_Fields

func FB7*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F25R2_Fields

func FB8*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F25R2_Fields

func FB9*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F25R2_Fields

func FB10*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F25R2_Fields

func FB11*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F25R2_Fields

func FB12*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F25R2_Fields

func FB13*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F25R2_Fields

func FB14*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F25R2_Fields

func FB15*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F25R2_Fields

func FB16*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F25R2_Fields

func FB17*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F25R2_Fields

func FB18*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F25R2_Fields

func FB19*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F25R2_Fields

func FB20*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F25R2_Fields

func FB21*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F25R2_Fields

func FB22*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F25R2_Fields

func FB23*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F25R2_Fields

func FB24*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F25R2_Fields

func FB25*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F25R2_Fields

func FB26*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F25R2_Fields

func FB27*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F25R2_Fields

func FB28*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F25R2_Fields

func FB29*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F25R2_Fields

func FB30*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F25R2_Fields

func FB31*(r: CAN1_F25R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F25R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F25R2_Fields

func FB0*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F26R1_Fields

func FB1*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F26R1_Fields

func FB2*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F26R1_Fields

func FB3*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F26R1_Fields

func FB4*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F26R1_Fields

func FB5*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F26R1_Fields

func FB6*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F26R1_Fields

func FB7*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F26R1_Fields

func FB8*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F26R1_Fields

func FB9*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F26R1_Fields

func FB10*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F26R1_Fields

func FB11*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F26R1_Fields

func FB12*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F26R1_Fields

func FB13*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F26R1_Fields

func FB14*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F26R1_Fields

func FB15*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F26R1_Fields

func FB16*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F26R1_Fields

func FB17*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F26R1_Fields

func FB18*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F26R1_Fields

func FB19*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F26R1_Fields

func FB20*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F26R1_Fields

func FB21*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F26R1_Fields

func FB22*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F26R1_Fields

func FB23*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F26R1_Fields

func FB24*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F26R1_Fields

func FB25*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F26R1_Fields

func FB26*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F26R1_Fields

func FB27*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F26R1_Fields

func FB28*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F26R1_Fields

func FB29*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F26R1_Fields

func FB30*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F26R1_Fields

func FB31*(r: CAN1_F26R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F26R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F26R1_Fields

func FB0*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F26R2_Fields

func FB1*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F26R2_Fields

func FB2*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F26R2_Fields

func FB3*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F26R2_Fields

func FB4*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F26R2_Fields

func FB5*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F26R2_Fields

func FB6*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F26R2_Fields

func FB7*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F26R2_Fields

func FB8*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F26R2_Fields

func FB9*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F26R2_Fields

func FB10*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F26R2_Fields

func FB11*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F26R2_Fields

func FB12*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F26R2_Fields

func FB13*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F26R2_Fields

func FB14*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F26R2_Fields

func FB15*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F26R2_Fields

func FB16*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F26R2_Fields

func FB17*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F26R2_Fields

func FB18*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F26R2_Fields

func FB19*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F26R2_Fields

func FB20*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F26R2_Fields

func FB21*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F26R2_Fields

func FB22*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F26R2_Fields

func FB23*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F26R2_Fields

func FB24*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F26R2_Fields

func FB25*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F26R2_Fields

func FB26*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F26R2_Fields

func FB27*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F26R2_Fields

func FB28*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F26R2_Fields

func FB29*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F26R2_Fields

func FB30*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F26R2_Fields

func FB31*(r: CAN1_F26R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F26R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F26R2_Fields

func FB0*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F27R1_Fields

func FB1*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F27R1_Fields

func FB2*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F27R1_Fields

func FB3*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F27R1_Fields

func FB4*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F27R1_Fields

func FB5*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F27R1_Fields

func FB6*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F27R1_Fields

func FB7*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F27R1_Fields

func FB8*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F27R1_Fields

func FB9*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F27R1_Fields

func FB10*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F27R1_Fields

func FB11*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F27R1_Fields

func FB12*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F27R1_Fields

func FB13*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F27R1_Fields

func FB14*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F27R1_Fields

func FB15*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F27R1_Fields

func FB16*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F27R1_Fields

func FB17*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F27R1_Fields

func FB18*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F27R1_Fields

func FB19*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F27R1_Fields

func FB20*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F27R1_Fields

func FB21*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F27R1_Fields

func FB22*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F27R1_Fields

func FB23*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F27R1_Fields

func FB24*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F27R1_Fields

func FB25*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F27R1_Fields

func FB26*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F27R1_Fields

func FB27*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F27R1_Fields

func FB28*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F27R1_Fields

func FB29*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F27R1_Fields

func FB30*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F27R1_Fields

func FB31*(r: CAN1_F27R1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F27R1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F27R1_Fields

func FB0*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `FB0=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.CAN1_F27R2_Fields

func FB1*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `FB1=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.CAN1_F27R2_Fields

func FB2*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FB2=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.CAN1_F27R2_Fields

func FB3*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FB3=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.CAN1_F27R2_Fields

func FB4*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `FB4=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.CAN1_F27R2_Fields

func FB5*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `FB5=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.CAN1_F27R2_Fields

func FB6*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `FB6=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.CAN1_F27R2_Fields

func FB7*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FB7=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.CAN1_F27R2_Fields

func FB8*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `FB8=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.CAN1_F27R2_Fields

func FB9*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FB9=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.CAN1_F27R2_Fields

func FB10*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `FB10=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.CAN1_F27R2_Fields

func FB11*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `FB11=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.CAN1_F27R2_Fields

func FB12*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `FB12=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.CAN1_F27R2_Fields

func FB13*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `FB13=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.CAN1_F27R2_Fields

func FB14*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `FB14=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.CAN1_F27R2_Fields

func FB15*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `FB15=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.CAN1_F27R2_Fields

func FB16*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FB16=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.CAN1_F27R2_Fields

func FB17*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FB17=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.CAN1_F27R2_Fields

func FB18*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FB18=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.CAN1_F27R2_Fields

func FB19*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `FB19=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.CAN1_F27R2_Fields

func FB20*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FB20=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.CAN1_F27R2_Fields

func FB21*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FB21=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.CAN1_F27R2_Fields

func FB22*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FB22=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.CAN1_F27R2_Fields

func FB23*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `FB23=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.CAN1_F27R2_Fields

func FB24*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `FB24=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.CAN1_F27R2_Fields

func FB25*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `FB25=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.CAN1_F27R2_Fields

func FB26*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `FB26=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.CAN1_F27R2_Fields

func FB27*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `FB27=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.CAN1_F27R2_Fields

func FB28*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `FB28=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.CAN1_F27R2_Fields

func FB29*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FB29=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.CAN1_F27R2_Fields

func FB30*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FB30=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.CAN1_F27R2_Fields

func FB31*(r: CAN1_F27R2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `FB31=`*(r: var CAN1_F27R2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.CAN1_F27R2_Fields

type
  FLASH_ACR_Fields* = distinct uint32
  FLASH_SR_Fields* = distinct uint32
  FLASH_CR_Fields* = distinct uint32
  FLASH_OPTCR_Fields* = distinct uint32

proc read*(reg: FLASH_ACR_Type): FLASH_ACR_Fields {.inline.} =
  volatileLoad(cast[ptr FLASH_ACR_Fields](reg.loc))

proc write*(reg: FLASH_ACR_Type, val: FLASH_ACR_Fields) {.inline.} =
  volatileStore(cast[ptr FLASH_ACR_Fields](reg.loc), val)

proc write*(reg: FLASH_ACR_Type, LATENCY: uint32 = 0, PRFTEN: bool = false, ICEN: bool = false, DCEN: bool = false, ICRST: bool = false, DCRST: bool = false) =
  var x: uint32
  x.setMask((LATENCY shl 0).masked(0 .. 2))
  x.setMask((PRFTEN.uint32 shl 8).masked(8 .. 8))
  x.setMask((ICEN.uint32 shl 9).masked(9 .. 9))
  x.setMask((DCEN.uint32 shl 10).masked(10 .. 10))
  x.setMask((ICRST.uint32 shl 11).masked(11 .. 11))
  x.setMask((DCRST.uint32 shl 12).masked(12 .. 12))
  reg.write x.FLASH_ACR_Fields

template modifyIt*(reg: FLASH_ACR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: FLASH_KEYR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc write*(reg: FLASH_OPTKEYR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

proc read*(reg: FLASH_SR_Type): FLASH_SR_Fields {.inline.} =
  volatileLoad(cast[ptr FLASH_SR_Fields](reg.loc))

proc write*(reg: FLASH_SR_Type, val: FLASH_SR_Fields) {.inline.} =
  volatileStore(cast[ptr FLASH_SR_Fields](reg.loc), val)

proc write*(reg: FLASH_SR_Type, EOP: bool = false, OPERR: bool = false, WRPERR: bool = false, PGAERR: bool = false, PGPERR: bool = false, PGSERR: bool = false, RDERR: bool = false) =
  var x: uint32
  x.setMask((EOP.uint32 shl 0).masked(0 .. 0))
  x.setMask((OPERR.uint32 shl 1).masked(1 .. 1))
  x.setMask((WRPERR.uint32 shl 4).masked(4 .. 4))
  x.setMask((PGAERR.uint32 shl 5).masked(5 .. 5))
  x.setMask((PGPERR.uint32 shl 6).masked(6 .. 6))
  x.setMask((PGSERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((RDERR.uint32 shl 8).masked(8 .. 8))
  reg.write x.FLASH_SR_Fields

template modifyIt*(reg: FLASH_SR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FLASH_CR_Type): FLASH_CR_Fields {.inline.} =
  volatileLoad(cast[ptr FLASH_CR_Fields](reg.loc))

proc write*(reg: FLASH_CR_Type, val: FLASH_CR_Fields) {.inline.} =
  volatileStore(cast[ptr FLASH_CR_Fields](reg.loc), val)

proc write*(reg: FLASH_CR_Type, PG: bool = false, SER: bool = false, MER: bool = false, SNB: uint32 = 0, PSIZE: uint32 = 0, STRT: bool = false, EOPIE: bool = false, ERRIE: bool = false, LOCK: bool = true) =
  var x: uint32
  x.setMask((PG.uint32 shl 0).masked(0 .. 0))
  x.setMask((SER.uint32 shl 1).masked(1 .. 1))
  x.setMask((MER.uint32 shl 2).masked(2 .. 2))
  x.setMask((SNB shl 3).masked(3 .. 6))
  x.setMask((PSIZE shl 8).masked(8 .. 9))
  x.setMask((STRT.uint32 shl 16).masked(16 .. 16))
  x.setMask((EOPIE.uint32 shl 24).masked(24 .. 24))
  x.setMask((ERRIE.uint32 shl 25).masked(25 .. 25))
  x.setMask((LOCK.uint32 shl 31).masked(31 .. 31))
  reg.write x.FLASH_CR_Fields

template modifyIt*(reg: FLASH_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: FLASH_OPTCR_Type): FLASH_OPTCR_Fields {.inline.} =
  volatileLoad(cast[ptr FLASH_OPTCR_Fields](reg.loc))

proc write*(reg: FLASH_OPTCR_Type, val: FLASH_OPTCR_Fields) {.inline.} =
  volatileStore(cast[ptr FLASH_OPTCR_Fields](reg.loc), val)

proc write*(reg: FLASH_OPTCR_Type, OPTLOCK: bool = true, OPTSTRT: bool = false, BOR_LEV: uint32 = 3, WDG_SW: bool = true, nRST_STOP: bool = true, nRST_STDBY: bool = true, RDP: uint32 = 170, nWRP: uint32 = 255, SPRMOD: bool = false) =
  var x: uint32
  x.setMask((OPTLOCK.uint32 shl 0).masked(0 .. 0))
  x.setMask((OPTSTRT.uint32 shl 1).masked(1 .. 1))
  x.setMask((BOR_LEV shl 2).masked(2 .. 3))
  x.setMask((WDG_SW.uint32 shl 5).masked(5 .. 5))
  x.setMask((nRST_STOP.uint32 shl 6).masked(6 .. 6))
  x.setMask((nRST_STDBY.uint32 shl 7).masked(7 .. 7))
  x.setMask((RDP shl 8).masked(8 .. 15))
  x.setMask((nWRP shl 16).masked(16 .. 23))
  x.setMask((SPRMOD.uint32 shl 31).masked(31 .. 31))
  reg.write x.FLASH_OPTCR_Fields

template modifyIt*(reg: FLASH_OPTCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func LATENCY*(r: FLASH_ACR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `LATENCY=`*(r: var FLASH_ACR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.FLASH_ACR_Fields

func PRFTEN*(r: FLASH_ACR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PRFTEN=`*(r: var FLASH_ACR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.FLASH_ACR_Fields

func ICEN*(r: FLASH_ACR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `ICEN=`*(r: var FLASH_ACR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.FLASH_ACR_Fields

func DCEN*(r: FLASH_ACR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DCEN=`*(r: var FLASH_ACR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.FLASH_ACR_Fields

proc `ICRST=`*(r: var FLASH_ACR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.FLASH_ACR_Fields

func DCRST*(r: FLASH_ACR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `DCRST=`*(r: var FLASH_ACR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.FLASH_ACR_Fields

func EOP*(r: FLASH_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EOP=`*(r: var FLASH_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FLASH_SR_Fields

func OPERR*(r: FLASH_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `OPERR=`*(r: var FLASH_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FLASH_SR_Fields

func WRPERR*(r: FLASH_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `WRPERR=`*(r: var FLASH_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.FLASH_SR_Fields

func PGAERR*(r: FLASH_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PGAERR=`*(r: var FLASH_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.FLASH_SR_Fields

func PGPERR*(r: FLASH_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PGPERR=`*(r: var FLASH_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FLASH_SR_Fields

func PGSERR*(r: FLASH_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `PGSERR=`*(r: var FLASH_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.FLASH_SR_Fields

func RDERR*(r: FLASH_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `RDERR=`*(r: var FLASH_SR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.FLASH_SR_Fields

func BSY*(r: FLASH_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func PG*(r: FLASH_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `PG=`*(r: var FLASH_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FLASH_CR_Fields

func SER*(r: FLASH_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SER=`*(r: var FLASH_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FLASH_CR_Fields

func MER*(r: FLASH_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `MER=`*(r: var FLASH_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.FLASH_CR_Fields

func SNB*(r: FLASH_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(3 .. 6)

proc `SNB=`*(r: var FLASH_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 6)
  tmp.setMask((val shl 3).masked(3 .. 6))
  r = tmp.FLASH_CR_Fields

func PSIZE*(r: FLASH_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `PSIZE=`*(r: var FLASH_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.FLASH_CR_Fields

func STRT*(r: FLASH_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `STRT=`*(r: var FLASH_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.FLASH_CR_Fields

func EOPIE*(r: FLASH_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `EOPIE=`*(r: var FLASH_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.FLASH_CR_Fields

func ERRIE*(r: FLASH_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `ERRIE=`*(r: var FLASH_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.FLASH_CR_Fields

func LOCK*(r: FLASH_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `LOCK=`*(r: var FLASH_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.FLASH_CR_Fields

func OPTLOCK*(r: FLASH_OPTCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `OPTLOCK=`*(r: var FLASH_OPTCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.FLASH_OPTCR_Fields

func OPTSTRT*(r: FLASH_OPTCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `OPTSTRT=`*(r: var FLASH_OPTCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.FLASH_OPTCR_Fields

func BOR_LEV*(r: FLASH_OPTCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `BOR_LEV=`*(r: var FLASH_OPTCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.FLASH_OPTCR_Fields

func WDG_SW*(r: FLASH_OPTCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `WDG_SW=`*(r: var FLASH_OPTCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.FLASH_OPTCR_Fields

func nRST_STOP*(r: FLASH_OPTCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `nRST_STOP=`*(r: var FLASH_OPTCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.FLASH_OPTCR_Fields

func nRST_STDBY*(r: FLASH_OPTCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `nRST_STDBY=`*(r: var FLASH_OPTCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.FLASH_OPTCR_Fields

func RDP*(r: FLASH_OPTCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 15)

proc `RDP=`*(r: var FLASH_OPTCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 15)
  tmp.setMask((val shl 8).masked(8 .. 15))
  r = tmp.FLASH_OPTCR_Fields

func nWRP*(r: FLASH_OPTCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

proc `nWRP=`*(r: var FLASH_OPTCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 23)
  tmp.setMask((val shl 16).masked(16 .. 23))
  r = tmp.FLASH_OPTCR_Fields

func SPRMOD*(r: FLASH_OPTCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPRMOD=`*(r: var FLASH_OPTCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.FLASH_OPTCR_Fields

type
  EXTI_IMR_Fields* = distinct uint32
  EXTI_EMR_Fields* = distinct uint32
  EXTI_RTSR_Fields* = distinct uint32
  EXTI_FTSR_Fields* = distinct uint32
  EXTI_SWIER_Fields* = distinct uint32
  EXTI_PR_Fields* = distinct uint32

proc read*(reg: EXTI_IMR_Type): EXTI_IMR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_IMR_Fields](reg.loc))

proc write*(reg: EXTI_IMR_Type, val: EXTI_IMR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_IMR_Fields](reg.loc), val)

proc write*(reg: EXTI_IMR_Type, MR0: bool = false, MR1: bool = false, MR2: bool = false, MR3: bool = false, MR4: bool = false, MR5: bool = false, MR6: bool = false, MR7: bool = false, MR8: bool = false, MR9: bool = false, MR10: bool = false, MR11: bool = false, MR12: bool = false, MR13: bool = false, MR14: bool = false, MR15: bool = false, MR16: bool = false, MR17: bool = false, MR18: bool = false, MR19: bool = false, MR20: bool = false, MR21: bool = false, MR22: bool = false) =
  var x: uint32
  x.setMask((MR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((MR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((MR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((MR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((MR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((MR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((MR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((MR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((MR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((MR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((MR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((MR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((MR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((MR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((MR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((MR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((MR16.uint32 shl 16).masked(16 .. 16))
  x.setMask((MR17.uint32 shl 17).masked(17 .. 17))
  x.setMask((MR18.uint32 shl 18).masked(18 .. 18))
  x.setMask((MR19.uint32 shl 19).masked(19 .. 19))
  x.setMask((MR20.uint32 shl 20).masked(20 .. 20))
  x.setMask((MR21.uint32 shl 21).masked(21 .. 21))
  x.setMask((MR22.uint32 shl 22).masked(22 .. 22))
  reg.write x.EXTI_IMR_Fields

template modifyIt*(reg: EXTI_IMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: EXTI_EMR_Type): EXTI_EMR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_EMR_Fields](reg.loc))

proc write*(reg: EXTI_EMR_Type, val: EXTI_EMR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_EMR_Fields](reg.loc), val)

proc write*(reg: EXTI_EMR_Type, MR0: bool = false, MR1: bool = false, MR2: bool = false, MR3: bool = false, MR4: bool = false, MR5: bool = false, MR6: bool = false, MR7: bool = false, MR8: bool = false, MR9: bool = false, MR10: bool = false, MR11: bool = false, MR12: bool = false, MR13: bool = false, MR14: bool = false, MR15: bool = false, MR16: bool = false, MR17: bool = false, MR18: bool = false, MR19: bool = false, MR20: bool = false, MR21: bool = false, MR22: bool = false) =
  var x: uint32
  x.setMask((MR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((MR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((MR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((MR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((MR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((MR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((MR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((MR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((MR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((MR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((MR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((MR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((MR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((MR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((MR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((MR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((MR16.uint32 shl 16).masked(16 .. 16))
  x.setMask((MR17.uint32 shl 17).masked(17 .. 17))
  x.setMask((MR18.uint32 shl 18).masked(18 .. 18))
  x.setMask((MR19.uint32 shl 19).masked(19 .. 19))
  x.setMask((MR20.uint32 shl 20).masked(20 .. 20))
  x.setMask((MR21.uint32 shl 21).masked(21 .. 21))
  x.setMask((MR22.uint32 shl 22).masked(22 .. 22))
  reg.write x.EXTI_EMR_Fields

template modifyIt*(reg: EXTI_EMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: EXTI_RTSR_Type): EXTI_RTSR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_RTSR_Fields](reg.loc))

proc write*(reg: EXTI_RTSR_Type, val: EXTI_RTSR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_RTSR_Fields](reg.loc), val)

proc write*(reg: EXTI_RTSR_Type, TR0: bool = false, TR1: bool = false, TR2: bool = false, TR3: bool = false, TR4: bool = false, TR5: bool = false, TR6: bool = false, TR7: bool = false, TR8: bool = false, TR9: bool = false, TR10: bool = false, TR11: bool = false, TR12: bool = false, TR13: bool = false, TR14: bool = false, TR15: bool = false, TR16: bool = false, TR17: bool = false, TR18: bool = false, TR19: bool = false, TR20: bool = false, TR21: bool = false, TR22: bool = false) =
  var x: uint32
  x.setMask((TR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((TR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((TR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((TR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((TR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((TR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((TR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((TR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((TR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((TR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((TR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((TR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((TR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((TR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((TR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((TR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((TR16.uint32 shl 16).masked(16 .. 16))
  x.setMask((TR17.uint32 shl 17).masked(17 .. 17))
  x.setMask((TR18.uint32 shl 18).masked(18 .. 18))
  x.setMask((TR19.uint32 shl 19).masked(19 .. 19))
  x.setMask((TR20.uint32 shl 20).masked(20 .. 20))
  x.setMask((TR21.uint32 shl 21).masked(21 .. 21))
  x.setMask((TR22.uint32 shl 22).masked(22 .. 22))
  reg.write x.EXTI_RTSR_Fields

template modifyIt*(reg: EXTI_RTSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: EXTI_FTSR_Type): EXTI_FTSR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_FTSR_Fields](reg.loc))

proc write*(reg: EXTI_FTSR_Type, val: EXTI_FTSR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_FTSR_Fields](reg.loc), val)

proc write*(reg: EXTI_FTSR_Type, TR0: bool = false, TR1: bool = false, TR2: bool = false, TR3: bool = false, TR4: bool = false, TR5: bool = false, TR6: bool = false, TR7: bool = false, TR8: bool = false, TR9: bool = false, TR10: bool = false, TR11: bool = false, TR12: bool = false, TR13: bool = false, TR14: bool = false, TR15: bool = false, TR16: bool = false, TR17: bool = false, TR18: bool = false, TR19: bool = false, TR20: bool = false, TR21: bool = false, TR22: bool = false) =
  var x: uint32
  x.setMask((TR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((TR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((TR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((TR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((TR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((TR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((TR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((TR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((TR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((TR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((TR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((TR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((TR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((TR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((TR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((TR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((TR16.uint32 shl 16).masked(16 .. 16))
  x.setMask((TR17.uint32 shl 17).masked(17 .. 17))
  x.setMask((TR18.uint32 shl 18).masked(18 .. 18))
  x.setMask((TR19.uint32 shl 19).masked(19 .. 19))
  x.setMask((TR20.uint32 shl 20).masked(20 .. 20))
  x.setMask((TR21.uint32 shl 21).masked(21 .. 21))
  x.setMask((TR22.uint32 shl 22).masked(22 .. 22))
  reg.write x.EXTI_FTSR_Fields

template modifyIt*(reg: EXTI_FTSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: EXTI_SWIER_Type): EXTI_SWIER_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_SWIER_Fields](reg.loc))

proc write*(reg: EXTI_SWIER_Type, val: EXTI_SWIER_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_SWIER_Fields](reg.loc), val)

proc write*(reg: EXTI_SWIER_Type, SWIER0: bool = false, SWIER1: bool = false, SWIER2: bool = false, SWIER3: bool = false, SWIER4: bool = false, SWIER5: bool = false, SWIER6: bool = false, SWIER7: bool = false, SWIER8: bool = false, SWIER9: bool = false, SWIER10: bool = false, SWIER11: bool = false, SWIER12: bool = false, SWIER13: bool = false, SWIER14: bool = false, SWIER15: bool = false, SWIER16: bool = false, SWIER17: bool = false, SWIER18: bool = false, SWIER19: bool = false, SWIER20: bool = false, SWIER21: bool = false, SWIER22: bool = false) =
  var x: uint32
  x.setMask((SWIER0.uint32 shl 0).masked(0 .. 0))
  x.setMask((SWIER1.uint32 shl 1).masked(1 .. 1))
  x.setMask((SWIER2.uint32 shl 2).masked(2 .. 2))
  x.setMask((SWIER3.uint32 shl 3).masked(3 .. 3))
  x.setMask((SWIER4.uint32 shl 4).masked(4 .. 4))
  x.setMask((SWIER5.uint32 shl 5).masked(5 .. 5))
  x.setMask((SWIER6.uint32 shl 6).masked(6 .. 6))
  x.setMask((SWIER7.uint32 shl 7).masked(7 .. 7))
  x.setMask((SWIER8.uint32 shl 8).masked(8 .. 8))
  x.setMask((SWIER9.uint32 shl 9).masked(9 .. 9))
  x.setMask((SWIER10.uint32 shl 10).masked(10 .. 10))
  x.setMask((SWIER11.uint32 shl 11).masked(11 .. 11))
  x.setMask((SWIER12.uint32 shl 12).masked(12 .. 12))
  x.setMask((SWIER13.uint32 shl 13).masked(13 .. 13))
  x.setMask((SWIER14.uint32 shl 14).masked(14 .. 14))
  x.setMask((SWIER15.uint32 shl 15).masked(15 .. 15))
  x.setMask((SWIER16.uint32 shl 16).masked(16 .. 16))
  x.setMask((SWIER17.uint32 shl 17).masked(17 .. 17))
  x.setMask((SWIER18.uint32 shl 18).masked(18 .. 18))
  x.setMask((SWIER19.uint32 shl 19).masked(19 .. 19))
  x.setMask((SWIER20.uint32 shl 20).masked(20 .. 20))
  x.setMask((SWIER21.uint32 shl 21).masked(21 .. 21))
  x.setMask((SWIER22.uint32 shl 22).masked(22 .. 22))
  reg.write x.EXTI_SWIER_Fields

template modifyIt*(reg: EXTI_SWIER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: EXTI_PR_Type): EXTI_PR_Fields {.inline.} =
  volatileLoad(cast[ptr EXTI_PR_Fields](reg.loc))

proc write*(reg: EXTI_PR_Type, val: EXTI_PR_Fields) {.inline.} =
  volatileStore(cast[ptr EXTI_PR_Fields](reg.loc), val)

proc write*(reg: EXTI_PR_Type, PR0: bool = false, PR1: bool = false, PR2: bool = false, PR3: bool = false, PR4: bool = false, PR5: bool = false, PR6: bool = false, PR7: bool = false, PR8: bool = false, PR9: bool = false, PR10: bool = false, PR11: bool = false, PR12: bool = false, PR13: bool = false, PR14: bool = false, PR15: bool = false, PR16: bool = false, PR17: bool = false, PR18: bool = false, PR19: bool = false, PR20: bool = false, PR21: bool = false, PR22: bool = false) =
  var x: uint32
  x.setMask((PR0.uint32 shl 0).masked(0 .. 0))
  x.setMask((PR1.uint32 shl 1).masked(1 .. 1))
  x.setMask((PR2.uint32 shl 2).masked(2 .. 2))
  x.setMask((PR3.uint32 shl 3).masked(3 .. 3))
  x.setMask((PR4.uint32 shl 4).masked(4 .. 4))
  x.setMask((PR5.uint32 shl 5).masked(5 .. 5))
  x.setMask((PR6.uint32 shl 6).masked(6 .. 6))
  x.setMask((PR7.uint32 shl 7).masked(7 .. 7))
  x.setMask((PR8.uint32 shl 8).masked(8 .. 8))
  x.setMask((PR9.uint32 shl 9).masked(9 .. 9))
  x.setMask((PR10.uint32 shl 10).masked(10 .. 10))
  x.setMask((PR11.uint32 shl 11).masked(11 .. 11))
  x.setMask((PR12.uint32 shl 12).masked(12 .. 12))
  x.setMask((PR13.uint32 shl 13).masked(13 .. 13))
  x.setMask((PR14.uint32 shl 14).masked(14 .. 14))
  x.setMask((PR15.uint32 shl 15).masked(15 .. 15))
  x.setMask((PR16.uint32 shl 16).masked(16 .. 16))
  x.setMask((PR17.uint32 shl 17).masked(17 .. 17))
  x.setMask((PR18.uint32 shl 18).masked(18 .. 18))
  x.setMask((PR19.uint32 shl 19).masked(19 .. 19))
  x.setMask((PR20.uint32 shl 20).masked(20 .. 20))
  x.setMask((PR21.uint32 shl 21).masked(21 .. 21))
  x.setMask((PR22.uint32 shl 22).masked(22 .. 22))
  reg.write x.EXTI_PR_Fields

template modifyIt*(reg: EXTI_PR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func MR0*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `MR0=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_IMR_Fields

func MR1*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MR1=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_IMR_Fields

func MR2*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `MR2=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_IMR_Fields

func MR3*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `MR3=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_IMR_Fields

func MR4*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `MR4=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_IMR_Fields

func MR5*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `MR5=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_IMR_Fields

func MR6*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `MR6=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_IMR_Fields

func MR7*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MR7=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_IMR_Fields

func MR8*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `MR8=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_IMR_Fields

func MR9*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `MR9=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_IMR_Fields

func MR10*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MR10=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_IMR_Fields

func MR11*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `MR11=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_IMR_Fields

func MR12*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `MR12=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_IMR_Fields

func MR13*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `MR13=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_IMR_Fields

func MR14*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MR14=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_IMR_Fields

func MR15*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `MR15=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_IMR_Fields

func MR16*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `MR16=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_IMR_Fields

func MR17*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `MR17=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_IMR_Fields

func MR18*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `MR18=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_IMR_Fields

func MR19*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `MR19=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_IMR_Fields

func MR20*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `MR20=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.EXTI_IMR_Fields

func MR21*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `MR21=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.EXTI_IMR_Fields

func MR22*(r: EXTI_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `MR22=`*(r: var EXTI_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.EXTI_IMR_Fields

func MR0*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `MR0=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_EMR_Fields

func MR1*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MR1=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_EMR_Fields

func MR2*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `MR2=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_EMR_Fields

func MR3*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `MR3=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_EMR_Fields

func MR4*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `MR4=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_EMR_Fields

func MR5*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `MR5=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_EMR_Fields

func MR6*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `MR6=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_EMR_Fields

func MR7*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `MR7=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_EMR_Fields

func MR8*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `MR8=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_EMR_Fields

func MR9*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `MR9=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_EMR_Fields

func MR10*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `MR10=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_EMR_Fields

func MR11*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `MR11=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_EMR_Fields

func MR12*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `MR12=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_EMR_Fields

func MR13*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `MR13=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_EMR_Fields

func MR14*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `MR14=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_EMR_Fields

func MR15*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `MR15=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_EMR_Fields

func MR16*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `MR16=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_EMR_Fields

func MR17*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `MR17=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_EMR_Fields

func MR18*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `MR18=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_EMR_Fields

func MR19*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `MR19=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_EMR_Fields

func MR20*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `MR20=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.EXTI_EMR_Fields

func MR21*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `MR21=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.EXTI_EMR_Fields

func MR22*(r: EXTI_EMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `MR22=`*(r: var EXTI_EMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.EXTI_EMR_Fields

func TR0*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TR0=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_RTSR_Fields

func TR1*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TR1=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_RTSR_Fields

func TR2*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TR2=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_RTSR_Fields

func TR3*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TR3=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_RTSR_Fields

func TR4*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TR4=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_RTSR_Fields

func TR5*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TR5=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_RTSR_Fields

func TR6*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TR6=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_RTSR_Fields

func TR7*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TR7=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_RTSR_Fields

func TR8*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TR8=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_RTSR_Fields

func TR9*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TR9=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_RTSR_Fields

func TR10*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `TR10=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_RTSR_Fields

func TR11*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TR11=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_RTSR_Fields

func TR12*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `TR12=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_RTSR_Fields

func TR13*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `TR13=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_RTSR_Fields

func TR14*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TR14=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_RTSR_Fields

func TR15*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `TR15=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_RTSR_Fields

func TR16*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TR16=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_RTSR_Fields

func TR17*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TR17=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_RTSR_Fields

func TR18*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `TR18=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_RTSR_Fields

func TR19*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `TR19=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_RTSR_Fields

func TR20*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `TR20=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.EXTI_RTSR_Fields

func TR21*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `TR21=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.EXTI_RTSR_Fields

func TR22*(r: EXTI_RTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `TR22=`*(r: var EXTI_RTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.EXTI_RTSR_Fields

func TR0*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `TR0=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_FTSR_Fields

func TR1*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `TR1=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_FTSR_Fields

func TR2*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `TR2=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_FTSR_Fields

func TR3*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TR3=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_FTSR_Fields

func TR4*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TR4=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_FTSR_Fields

func TR5*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TR5=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_FTSR_Fields

func TR6*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `TR6=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_FTSR_Fields

func TR7*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TR7=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_FTSR_Fields

func TR8*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TR8=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_FTSR_Fields

func TR9*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TR9=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_FTSR_Fields

func TR10*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `TR10=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_FTSR_Fields

func TR11*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TR11=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_FTSR_Fields

func TR12*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `TR12=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_FTSR_Fields

func TR13*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `TR13=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_FTSR_Fields

func TR14*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TR14=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_FTSR_Fields

func TR15*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `TR15=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_FTSR_Fields

func TR16*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TR16=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_FTSR_Fields

func TR17*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TR17=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_FTSR_Fields

func TR18*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `TR18=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_FTSR_Fields

func TR19*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `TR19=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_FTSR_Fields

func TR20*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `TR20=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.EXTI_FTSR_Fields

func TR21*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `TR21=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.EXTI_FTSR_Fields

func TR22*(r: EXTI_FTSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `TR22=`*(r: var EXTI_FTSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.EXTI_FTSR_Fields

func SWIER0*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `SWIER0=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_SWIER_Fields

func SWIER1*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SWIER1=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_SWIER_Fields

func SWIER2*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `SWIER2=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_SWIER_Fields

func SWIER3*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `SWIER3=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_SWIER_Fields

func SWIER4*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `SWIER4=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_SWIER_Fields

func SWIER5*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `SWIER5=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_SWIER_Fields

func SWIER6*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `SWIER6=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_SWIER_Fields

func SWIER7*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `SWIER7=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_SWIER_Fields

func SWIER8*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SWIER8=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_SWIER_Fields

func SWIER9*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `SWIER9=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_SWIER_Fields

func SWIER10*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `SWIER10=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_SWIER_Fields

func SWIER11*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `SWIER11=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_SWIER_Fields

func SWIER12*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `SWIER12=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_SWIER_Fields

func SWIER13*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `SWIER13=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_SWIER_Fields

func SWIER14*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `SWIER14=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_SWIER_Fields

func SWIER15*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `SWIER15=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_SWIER_Fields

func SWIER16*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `SWIER16=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_SWIER_Fields

func SWIER17*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `SWIER17=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_SWIER_Fields

func SWIER18*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `SWIER18=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_SWIER_Fields

func SWIER19*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `SWIER19=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_SWIER_Fields

func SWIER20*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SWIER20=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.EXTI_SWIER_Fields

func SWIER21*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `SWIER21=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.EXTI_SWIER_Fields

func SWIER22*(r: EXTI_SWIER_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `SWIER22=`*(r: var EXTI_SWIER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.EXTI_SWIER_Fields

func PR0*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `PR0=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.EXTI_PR_Fields

func PR1*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PR1=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.EXTI_PR_Fields

func PR2*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `PR2=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.EXTI_PR_Fields

func PR3*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PR3=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.EXTI_PR_Fields

func PR4*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `PR4=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.EXTI_PR_Fields

func PR5*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `PR5=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.EXTI_PR_Fields

func PR6*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PR6=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.EXTI_PR_Fields

func PR7*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `PR7=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.EXTI_PR_Fields

func PR8*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PR8=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.EXTI_PR_Fields

func PR9*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PR9=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.EXTI_PR_Fields

func PR10*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `PR10=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.EXTI_PR_Fields

func PR11*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PR11=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.EXTI_PR_Fields

func PR12*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PR12=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.EXTI_PR_Fields

func PR13*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `PR13=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.EXTI_PR_Fields

func PR14*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `PR14=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.EXTI_PR_Fields

func PR15*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PR15=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.EXTI_PR_Fields

func PR16*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `PR16=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.EXTI_PR_Fields

func PR17*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `PR17=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.EXTI_PR_Fields

func PR18*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `PR18=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.EXTI_PR_Fields

func PR19*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `PR19=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.EXTI_PR_Fields

func PR20*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `PR20=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.EXTI_PR_Fields

func PR21*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `PR21=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.EXTI_PR_Fields

func PR22*(r: EXTI_PR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `PR22=`*(r: var EXTI_PR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.EXTI_PR_Fields

type
  OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Fields* = distinct uint32
  OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Fields* = distinct uint32

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Type): OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Type, val: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Type, SRQ: bool = false, HNPRQ: bool = false, HSHNPEN: bool = false, DHNPEN: bool = true) =
  var x: uint32
  x.setMask((SRQ.uint32 shl 1).masked(1 .. 1))
  x.setMask((HNPRQ.uint32 shl 9).masked(9 .. 9))
  x.setMask((HSHNPEN.uint32 shl 10).masked(10 .. 10))
  x.setMask((DHNPEN.uint32 shl 11).masked(11 .. 11))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Type): OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Type, val: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Type, SEDET: bool = false, SRSSCHG: bool = false, HNSSCHG: bool = false, HNGDET: bool = false, ADTOCHG: bool = false, DBCDNE: bool = false) =
  var x: uint32
  x.setMask((SEDET.uint32 shl 2).masked(2 .. 2))
  x.setMask((SRSSCHG.uint32 shl 8).masked(8 .. 8))
  x.setMask((HNSSCHG.uint32 shl 9).masked(9 .. 9))
  x.setMask((HNGDET.uint32 shl 17).masked(17 .. 17))
  x.setMask((ADTOCHG.uint32 shl 18).masked(18 .. 18))
  x.setMask((DBCDNE.uint32 shl 19).masked(19 .. 19))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Type): OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Type, val: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Type, GINT: bool = false, HBSTLEN: uint32 = 0, DMAEN: bool = false, TXFELVL: bool = false, PTXFELVL: bool = false) =
  var x: uint32
  x.setMask((GINT.uint32 shl 0).masked(0 .. 0))
  x.setMask((HBSTLEN shl 1).masked(1 .. 4))
  x.setMask((DMAEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXFELVL.uint32 shl 7).masked(7 .. 7))
  x.setMask((PTXFELVL.uint32 shl 8).masked(8 .. 8))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Type): OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Type, val: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Type, TOCAL: uint32 = 0, PHYSEL: bool = false, SRPCAP: bool = false, HNPCAP: bool = true, TRDT: uint32 = 2, PHYLPCS: bool = false, ULPIFSLS: bool = false, ULPIAR: bool = false, ULPICSM: bool = false, ULPIEVBUSD: bool = false, ULPIEVBUSI: bool = false, TSDPS: bool = false, PCCI: bool = false, PTCI: bool = false, ULPIIPD: bool = false, FHMOD: bool = false, FDMOD: bool = false, CTXPKT: bool = false) =
  var x: uint32
  x.setMask((TOCAL shl 0).masked(0 .. 2))
  x.setMask((PHYSEL.uint32 shl 6).masked(6 .. 6))
  x.setMask((SRPCAP.uint32 shl 8).masked(8 .. 8))
  x.setMask((HNPCAP.uint32 shl 9).masked(9 .. 9))
  x.setMask((TRDT shl 10).masked(10 .. 13))
  x.setMask((PHYLPCS.uint32 shl 15).masked(15 .. 15))
  x.setMask((ULPIFSLS.uint32 shl 17).masked(17 .. 17))
  x.setMask((ULPIAR.uint32 shl 18).masked(18 .. 18))
  x.setMask((ULPICSM.uint32 shl 19).masked(19 .. 19))
  x.setMask((ULPIEVBUSD.uint32 shl 20).masked(20 .. 20))
  x.setMask((ULPIEVBUSI.uint32 shl 21).masked(21 .. 21))
  x.setMask((TSDPS.uint32 shl 22).masked(22 .. 22))
  x.setMask((PCCI.uint32 shl 23).masked(23 .. 23))
  x.setMask((PTCI.uint32 shl 24).masked(24 .. 24))
  x.setMask((ULPIIPD.uint32 shl 25).masked(25 .. 25))
  x.setMask((FHMOD.uint32 shl 29).masked(29 .. 29))
  x.setMask((FDMOD.uint32 shl 30).masked(30 .. 30))
  x.setMask((CTXPKT.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Type): OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Type, val: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Type, CSRST: bool = false, HSRST: bool = false, FCRST: bool = false, RXFFLSH: bool = false, TXFFLSH: bool = false, TXFNUM: uint32 = 0) =
  var x: uint32
  x.setMask((CSRST.uint32 shl 0).masked(0 .. 0))
  x.setMask((HSRST.uint32 shl 1).masked(1 .. 1))
  x.setMask((FCRST.uint32 shl 2).masked(2 .. 2))
  x.setMask((RXFFLSH.uint32 shl 4).masked(4 .. 4))
  x.setMask((TXFFLSH.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXFNUM shl 6).masked(6 .. 10))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Type): OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Type, val: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Type, MMIS: bool = false, SOF: bool = false, ESUSP: bool = false, USBSUSP: bool = false, USBRST: bool = false, ENUMDNE: bool = false, ISOODRP: bool = false, EOPF: bool = false, IISOIXFR: bool = false, PXFR_INCOMPISOOUT: bool = false, DATAFSUSP: bool = false, CIDSCHG: bool = false, DISCINT: bool = false, SRQINT: bool = false, WKUINT: bool = false) =
  var x: uint32
  x.setMask((MMIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((SOF.uint32 shl 3).masked(3 .. 3))
  x.setMask((ESUSP.uint32 shl 10).masked(10 .. 10))
  x.setMask((USBSUSP.uint32 shl 11).masked(11 .. 11))
  x.setMask((USBRST.uint32 shl 12).masked(12 .. 12))
  x.setMask((ENUMDNE.uint32 shl 13).masked(13 .. 13))
  x.setMask((ISOODRP.uint32 shl 14).masked(14 .. 14))
  x.setMask((EOPF.uint32 shl 15).masked(15 .. 15))
  x.setMask((IISOIXFR.uint32 shl 20).masked(20 .. 20))
  x.setMask((PXFR_INCOMPISOOUT.uint32 shl 21).masked(21 .. 21))
  x.setMask((DATAFSUSP.uint32 shl 22).masked(22 .. 22))
  x.setMask((CIDSCHG.uint32 shl 28).masked(28 .. 28))
  x.setMask((DISCINT.uint32 shl 29).masked(29 .. 29))
  x.setMask((SRQINT.uint32 shl 30).masked(30 .. 30))
  x.setMask((WKUINT.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Type): OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Type, val: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Type, MMISM: bool = false, OTGINT: bool = false, SOFM: bool = false, RXFLVLM: bool = false, NPTXFEM: bool = false, GINAKEFFM: bool = false, GONAKEFFM: bool = false, ESUSPM: bool = false, USBSUSPM: bool = false, USBRST: bool = false, ENUMDNEM: bool = false, ISOODRPM: bool = false, EOPFM: bool = false, EPMISM: bool = false, IEPINT: bool = false, OEPINT: bool = false, IISOIXFRM: bool = false, PXFRM_IISOOXFRM: bool = false, FSUSPM: bool = false, HCIM: bool = false, PTXFEM: bool = false, CIDSCHGM: bool = false, DISCINT: bool = false, SRQIM: bool = false, WUIM: bool = false) =
  var x: uint32
  x.setMask((MMISM.uint32 shl 1).masked(1 .. 1))
  x.setMask((OTGINT.uint32 shl 2).masked(2 .. 2))
  x.setMask((SOFM.uint32 shl 3).masked(3 .. 3))
  x.setMask((RXFLVLM.uint32 shl 4).masked(4 .. 4))
  x.setMask((NPTXFEM.uint32 shl 5).masked(5 .. 5))
  x.setMask((GINAKEFFM.uint32 shl 6).masked(6 .. 6))
  x.setMask((GONAKEFFM.uint32 shl 7).masked(7 .. 7))
  x.setMask((ESUSPM.uint32 shl 10).masked(10 .. 10))
  x.setMask((USBSUSPM.uint32 shl 11).masked(11 .. 11))
  x.setMask((USBRST.uint32 shl 12).masked(12 .. 12))
  x.setMask((ENUMDNEM.uint32 shl 13).masked(13 .. 13))
  x.setMask((ISOODRPM.uint32 shl 14).masked(14 .. 14))
  x.setMask((EOPFM.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPMISM.uint32 shl 17).masked(17 .. 17))
  x.setMask((IEPINT.uint32 shl 18).masked(18 .. 18))
  x.setMask((OEPINT.uint32 shl 19).masked(19 .. 19))
  x.setMask((IISOIXFRM.uint32 shl 20).masked(20 .. 20))
  x.setMask((PXFRM_IISOOXFRM.uint32 shl 21).masked(21 .. 21))
  x.setMask((FSUSPM.uint32 shl 22).masked(22 .. 22))
  x.setMask((HCIM.uint32 shl 25).masked(25 .. 25))
  x.setMask((PTXFEM.uint32 shl 26).masked(26 .. 26))
  x.setMask((CIDSCHGM.uint32 shl 28).masked(28 .. 28))
  x.setMask((DISCINT.uint32 shl 29).masked(29 .. 29))
  x.setMask((SRQIM.uint32 shl 30).masked(30 .. 30))
  x.setMask((WUIM.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Type): OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Fields](reg.loc))

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Type): OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Fields](reg.loc))

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Type): OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Type, val: OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Type, RXFD: uint32 = 512) =
  var x: uint32
  x.setMask((RXFD shl 0).masked(0 .. 15))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Type): OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Type, val: OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Type, NPTXFSA: uint32 = 512, NPTXFD: uint32 = 0) =
  var x: uint32
  x.setMask((NPTXFSA shl 0).masked(0 .. 15))
  x.setMask((NPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Type): OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Type, val: OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Type, TX0FSA: uint32 = 512, TX0FD: uint32 = 0) =
  var x: uint32
  x.setMask((TX0FSA shl 0).masked(0 .. 15))
  x.setMask((TX0FD shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_Type): OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_Fields](reg.loc))

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GCCFG_Type): OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GCCFG_Type, val: OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_GCCFG_Type, PWRDWN: bool = false, I2CPADEN: bool = false, VBUSASEN: bool = false, VBUSBSEN: bool = false, SOFOUTEN: bool = false, NOVBUSSENS: bool = false) =
  var x: uint32
  x.setMask((PWRDWN.uint32 shl 16).masked(16 .. 16))
  x.setMask((I2CPADEN.uint32 shl 17).masked(17 .. 17))
  x.setMask((VBUSASEN.uint32 shl 18).masked(18 .. 18))
  x.setMask((VBUSBSEN.uint32 shl 19).masked(19 .. 19))
  x.setMask((SOFOUTEN.uint32 shl 20).masked(20 .. 20))
  x.setMask((NOVBUSSENS.uint32 shl 21).masked(21 .. 21))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_GCCFG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_CID_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_CID_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_CID_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Type): OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Type, val: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Type, PTXSA: uint32 = 1536, PTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((PTXSA shl 0).masked(0 .. 15))
  x.setMask((PTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Type): OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Type, val: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Type, INEPTXSA: uint32 = 1024, INEPTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((INEPTXSA shl 0).masked(0 .. 15))
  x.setMask((INEPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Type): OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Type, val: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Type, INEPTXSA: uint32 = 1024, INEPTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((INEPTXSA shl 0).masked(0 .. 15))
  x.setMask((INEPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Type): OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Type, val: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Type, INEPTXSA: uint32 = 1024, INEPTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((INEPTXSA shl 0).masked(0 .. 15))
  x.setMask((INEPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Type): OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Type, val: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Type, INEPTXSA: uint32 = 1024, INEPTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((INEPTXSA shl 0).masked(0 .. 15))
  x.setMask((INEPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Type): OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Type, val: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Type, INEPTXSA: uint32 = 1024, INEPTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((INEPTXSA shl 0).masked(0 .. 15))
  x.setMask((INEPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Type): OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Type, val: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Type, INEPTXSA: uint32 = 1024, INEPTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((INEPTXSA shl 0).masked(0 .. 15))
  x.setMask((INEPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Type): OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields](reg.loc))

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Type, val: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields](reg.loc), val)

proc write*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Type, INEPTXSA: uint32 = 1024, INEPTXFD: uint32 = 512) =
  var x: uint32
  x.setMask((INEPTXSA shl 0).masked(0 .. 15))
  x.setMask((INEPTXFD shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields

template modifyIt*(reg: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Type): OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Fields](reg.loc))

proc read*(reg: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Type): OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Fields](reg.loc))

func SRQSCS*(r: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func SRQ*(r: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SRQ=`*(r: var OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields

func HNGSCS*(r: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func HNPRQ*(r: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `HNPRQ=`*(r: var OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields

func HSHNPEN*(r: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `HSHNPEN=`*(r: var OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields

func DHNPEN*(r: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `DHNPEN=`*(r: var OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields

func CIDSTS*(r: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func DBCT*(r: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func ASVLD*(r: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func BSVLD*(r: OTG_HS_GLOBAL_OTG_HS_GOTGCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

func SEDET*(r: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `SEDET=`*(r: var OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields

func SRSSCHG*(r: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SRSSCHG=`*(r: var OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields

func HNSSCHG*(r: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `HNSSCHG=`*(r: var OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields

func HNGDET*(r: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `HNGDET=`*(r: var OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields

func ADTOCHG*(r: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `ADTOCHG=`*(r: var OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields

func DBCDNE*(r: OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `DBCDNE=`*(r: var OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GOTGINT_Fields

func GINT*(r: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `GINT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields

func HBSTLEN*(r: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 4)

proc `HBSTLEN=`*(r: var OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 4)
  tmp.setMask((val shl 1).masked(1 .. 4))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields

func DMAEN*(r: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `DMAEN=`*(r: var OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields

func TXFELVL*(r: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXFELVL=`*(r: var OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields

func PTXFELVL*(r: OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PTXFELVL=`*(r: var OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GAHBCFG_Fields

func TOCAL*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `TOCAL=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

proc `PHYSEL=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func SRPCAP*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SRPCAP=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func HNPCAP*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `HNPCAP=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func TRDT*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 13)

proc `TRDT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 13)
  tmp.setMask((val shl 10).masked(10 .. 13))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func PHYLPCS*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `PHYLPCS=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func ULPIFSLS*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `ULPIFSLS=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func ULPIAR*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `ULPIAR=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func ULPICSM*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `ULPICSM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func ULPIEVBUSD*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `ULPIEVBUSD=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func ULPIEVBUSI*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `ULPIEVBUSI=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func TSDPS*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `TSDPS=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func PCCI*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `PCCI=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func PTCI*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

proc `PTCI=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 24)
  tmp.setMask((val.uint32 shl 24).masked(24 .. 24))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func ULPIIPD*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `ULPIIPD=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func FHMOD*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `FHMOD=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func FDMOD*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `FDMOD=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func CTXPKT*(r: OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CTXPKT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GUSBCFG_Fields

func CSRST*(r: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CSRST=`*(r: var OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields

func HSRST*(r: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `HSRST=`*(r: var OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields

func FCRST*(r: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `FCRST=`*(r: var OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields

func RXFFLSH*(r: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `RXFFLSH=`*(r: var OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields

func TXFFLSH*(r: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `TXFFLSH=`*(r: var OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields

func TXFNUM*(r: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 10)

proc `TXFNUM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 10)
  tmp.setMask((val shl 6).masked(6 .. 10))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields

func DMAREQ*(r: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

func AHBIDL*(r: OTG_HS_GLOBAL_OTG_HS_GRSTCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

func CMOD*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func MMIS*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MMIS=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func OTGINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func SOF*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `SOF=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func RXFLVL*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func NPTXFE*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func GINAKEFF*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func BOUTNAKEFF*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func ESUSP*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ESUSP=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func USBSUSP*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `USBSUSP=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func USBRST*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `USBRST=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func ENUMDNE*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ENUMDNE=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func ISOODRP*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ISOODRP=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func EOPF*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EOPF=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func IEPINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func OEPINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

func IISOIXFR*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `IISOIXFR=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func PXFR_INCOMPISOOUT*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `PXFR_INCOMPISOOUT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func DATAFSUSP*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `DATAFSUSP=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func HPRTINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

func HCINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

func PTXFE*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

func CIDSCHG*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `CIDSCHG=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func DISCINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DISCINT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func SRQINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `SRQINT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func WKUINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `WKUINT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTSTS_Fields

func MMISM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MMISM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func OTGINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `OTGINT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func SOFM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `SOFM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func RXFLVLM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `RXFLVLM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func NPTXFEM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `NPTXFEM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func GINAKEFFM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `GINAKEFFM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func GONAKEFFM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `GONAKEFFM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func ESUSPM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `ESUSPM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func USBSUSPM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `USBSUSPM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func USBRST*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `USBRST=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func ENUMDNEM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ENUMDNEM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func ISOODRPM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `ISOODRPM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func EOPFM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EOPFM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func EPMISM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `EPMISM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func IEPINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `IEPINT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func OEPINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `OEPINT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func IISOIXFRM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `IISOIXFRM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func PXFRM_IISOOXFRM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `PXFRM_IISOOXFRM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func FSUSPM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `FSUSPM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func PRTIM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

func HCIM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

proc `HCIM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(25 .. 25)
  tmp.setMask((val.uint32 shl 25).masked(25 .. 25))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func PTXFEM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

proc `PTXFEM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func CIDSCHGM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `CIDSCHGM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func DISCINT*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `DISCINT=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func SRQIM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `SRQIM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func WUIM*(r: OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `WUIM=`*(r: var OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GINTMSK_Fields

func CHNUM*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func BCNT*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 14)

func DPID*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 16)

func PKTSTS*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 20)

func CHNUM*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func BCNT*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 14)

func DPID*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 16)

func PKTSTS*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 20)

func RXFD*(r: OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `RXFD=`*(r: var OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_Fields

func NPTXFSA*(r: OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `NPTXFSA=`*(r: var OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields

func NPTXFD*(r: OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `NPTXFD=`*(r: var OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_Fields

func TX0FSA*(r: OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `TX0FSA=`*(r: var OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields

func TX0FD*(r: OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `TX0FD=`*(r: var OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_Fields

func NPTXFSAV*(r: OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func NPTQXSAV*(r: OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func NPTXQTOP*(r: OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 30)

func PWRDWN*(r: OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `PWRDWN=`*(r: var OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields

func I2CPADEN*(r: OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `I2CPADEN=`*(r: var OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields

func VBUSASEN*(r: OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `VBUSASEN=`*(r: var OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields

func VBUSBSEN*(r: OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `VBUSBSEN=`*(r: var OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields

func SOFOUTEN*(r: OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SOFOUTEN=`*(r: var OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields

func NOVBUSSENS*(r: OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `NOVBUSSENS=`*(r: var OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_GCCFG_Fields

func PTXSA*(r: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PTXSA=`*(r: var OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields

func PTXFD*(r: OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `PTXFD=`*(r: var OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_Fields

func INEPTXSA*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXSA=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields

func INEPTXFD*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `INEPTXFD=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_Fields

func INEPTXSA*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXSA=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields

func INEPTXFD*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `INEPTXFD=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_Fields

func INEPTXSA*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXSA=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields

func INEPTXFD*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `INEPTXFD=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_Fields

func INEPTXSA*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXSA=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields

func INEPTXFD*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `INEPTXFD=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_Fields

func INEPTXSA*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXSA=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields

func INEPTXFD*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `INEPTXFD=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_Fields

func INEPTXSA*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXSA=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields

func INEPTXFD*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `INEPTXFD=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_Fields

func INEPTXSA*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXSA=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields

func INEPTXFD*(r: OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `INEPTXFD=`*(r: var OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_Fields

func EPNUM*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func BCNT*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 14)

func DPID*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 16)

func PKTSTS*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 20)

func FRMNUM*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 24)

func EPNUM*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 3)

func BCNT*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 14)

func DPID*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(15 .. 16)

func PKTSTS*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 20)

func FRMNUM*(r: OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(21 .. 24)

type
  OTG_HS_HOST_OTG_HS_HCFG_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HFIR_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HFNUM_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HPTXSTS_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HAINT_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HAINTMSK_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HPRT_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR0_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR1_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR2_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR3_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR4_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR5_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR6_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR7_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR8_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR9_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR10_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR11_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR12_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR13_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR14_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCCHAR15_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT0_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT1_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT2_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT3_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT4_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT5_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT6_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT7_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT8_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT9_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT10_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT11_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT12_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT13_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT14_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCSPLT15_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT0_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT1_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT2_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT3_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT4_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT5_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT6_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT7_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT8_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT9_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT10_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT11_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT12_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT13_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT14_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINT15_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields* = distinct uint32
  OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields* = distinct uint32

proc read*(reg: OTG_HS_HOST_OTG_HS_HCFG_Type): OTG_HS_HOST_OTG_HS_HCFG_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCFG_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCFG_Type, val: OTG_HS_HOST_OTG_HS_HCFG_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCFG_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCFG_Type, FSLSPCS: uint32 = 0) =
  var x: uint32
  x.setMask((FSLSPCS shl 0).masked(0 .. 1))
  reg.write x.OTG_HS_HOST_OTG_HS_HCFG_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCFG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HFIR_Type): OTG_HS_HOST_OTG_HS_HFIR_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HFIR_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HFIR_Type, val: OTG_HS_HOST_OTG_HS_HFIR_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HFIR_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HFIR_Type, FRIVL: uint32 = 60000, RLDCTRL: bool = false) =
  var x: uint32
  x.setMask((FRIVL shl 0).masked(0 .. 15))
  x.setMask((RLDCTRL.uint32 shl 16).masked(16 .. 16))
  reg.write x.OTG_HS_HOST_OTG_HS_HFIR_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HFIR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HFNUM_Type): OTG_HS_HOST_OTG_HS_HFNUM_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HFNUM_Fields](reg.loc))

proc read*(reg: OTG_HS_HOST_OTG_HS_HPTXSTS_Type): OTG_HS_HOST_OTG_HS_HPTXSTS_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HPTXSTS_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HPTXSTS_Type, val: OTG_HS_HOST_OTG_HS_HPTXSTS_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HPTXSTS_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HPTXSTS_Type, PTXFSAVL: uint32 = 256) =
  var x: uint32
  x.setMask((PTXFSAVL shl 0).masked(0 .. 15))
  reg.write x.OTG_HS_HOST_OTG_HS_HPTXSTS_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HPTXSTS_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HAINT_Type): OTG_HS_HOST_OTG_HS_HAINT_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HAINT_Fields](reg.loc))

proc read*(reg: OTG_HS_HOST_OTG_HS_HAINTMSK_Type): OTG_HS_HOST_OTG_HS_HAINTMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HAINTMSK_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HAINTMSK_Type, val: OTG_HS_HOST_OTG_HS_HAINTMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HAINTMSK_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HAINTMSK_Type, HAINTM: uint32 = 0) =
  var x: uint32
  x.setMask((HAINTM shl 0).masked(0 .. 15))
  reg.write x.OTG_HS_HOST_OTG_HS_HAINTMSK_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HAINTMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HPRT_Type): OTG_HS_HOST_OTG_HS_HPRT_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HPRT_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HPRT_Type, val: OTG_HS_HOST_OTG_HS_HPRT_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HPRT_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HPRT_Type, PCDET: bool = false, PENA: bool = false, PENCHNG: bool = false, POCCHNG: bool = false, PRES: bool = false, PSUSP: bool = false, PRST: bool = false, PPWR: bool = false, PTCTL: uint32 = 0) =
  var x: uint32
  x.setMask((PCDET.uint32 shl 1).masked(1 .. 1))
  x.setMask((PENA.uint32 shl 2).masked(2 .. 2))
  x.setMask((PENCHNG.uint32 shl 3).masked(3 .. 3))
  x.setMask((POCCHNG.uint32 shl 5).masked(5 .. 5))
  x.setMask((PRES.uint32 shl 6).masked(6 .. 6))
  x.setMask((PSUSP.uint32 shl 7).masked(7 .. 7))
  x.setMask((PRST.uint32 shl 8).masked(8 .. 8))
  x.setMask((PPWR.uint32 shl 12).masked(12 .. 12))
  x.setMask((PTCTL shl 13).masked(13 .. 16))
  reg.write x.OTG_HS_HOST_OTG_HS_HPRT_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HPRT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR0_Type): OTG_HS_HOST_OTG_HS_HCCHAR0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR0_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR0_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR0_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR1_Type): OTG_HS_HOST_OTG_HS_HCCHAR1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR1_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR1_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR1_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR2_Type): OTG_HS_HOST_OTG_HS_HCCHAR2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR2_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR2_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR2_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR3_Type): OTG_HS_HOST_OTG_HS_HCCHAR3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR3_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR3_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR3_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR4_Type): OTG_HS_HOST_OTG_HS_HCCHAR4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR4_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR4_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR4_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR5_Type): OTG_HS_HOST_OTG_HS_HCCHAR5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR5_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR5_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR5_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR5_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR6_Type): OTG_HS_HOST_OTG_HS_HCCHAR6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR6_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR6_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR6_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR6_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR7_Type): OTG_HS_HOST_OTG_HS_HCCHAR7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR7_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR7_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR7_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR7_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR8_Type): OTG_HS_HOST_OTG_HS_HCCHAR8_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR8_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR8_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR8_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR8_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR9_Type): OTG_HS_HOST_OTG_HS_HCCHAR9_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR9_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR9_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR9_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR9_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR10_Type): OTG_HS_HOST_OTG_HS_HCCHAR10_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR10_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR10_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR10_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR10_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR11_Type): OTG_HS_HOST_OTG_HS_HCCHAR11_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR11_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR11_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR11_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR11_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR12_Type): OTG_HS_HOST_OTG_HS_HCCHAR12_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR12_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR12_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR12_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR12_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR12_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR13_Type): OTG_HS_HOST_OTG_HS_HCCHAR13_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR13_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR13_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR13_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR13_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR13_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR14_Type): OTG_HS_HOST_OTG_HS_HCCHAR14_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR14_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR14_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR14_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR14_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR14_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCCHAR15_Type): OTG_HS_HOST_OTG_HS_HCCHAR15_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR15_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR15_Type, val: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCCHAR15_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCCHAR15_Type, MPSIZ: uint32 = 0, EPNUM: uint32 = 0, EPDIR: bool = false, LSDEV: bool = false, EPTYP: uint32 = 0, MCNT: uint32 = 0, DAD: uint32 = 0, ODDFRM: bool = false, CHDIS: bool = false, CHENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((EPNUM shl 11).masked(11 .. 14))
  x.setMask((EPDIR.uint32 shl 15).masked(15 .. 15))
  x.setMask((LSDEV.uint32 shl 17).masked(17 .. 17))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((MCNT shl 20).masked(20 .. 21))
  x.setMask((DAD shl 22).masked(22 .. 28))
  x.setMask((ODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((CHDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((CHENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCCHAR15_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT0_Type): OTG_HS_HOST_OTG_HS_HCSPLT0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT0_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT0_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT0_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT0_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT1_Type): OTG_HS_HOST_OTG_HS_HCSPLT1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT1_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT1_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT1_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT1_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT2_Type): OTG_HS_HOST_OTG_HS_HCSPLT2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT2_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT2_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT2_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT2_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT3_Type): OTG_HS_HOST_OTG_HS_HCSPLT3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT3_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT3_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT3_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT3_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT4_Type): OTG_HS_HOST_OTG_HS_HCSPLT4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT4_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT4_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT4_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT4_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT5_Type): OTG_HS_HOST_OTG_HS_HCSPLT5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT5_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT5_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT5_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT5_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT5_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT6_Type): OTG_HS_HOST_OTG_HS_HCSPLT6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT6_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT6_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT6_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT6_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT6_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT7_Type): OTG_HS_HOST_OTG_HS_HCSPLT7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT7_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT7_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT7_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT7_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT7_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT8_Type): OTG_HS_HOST_OTG_HS_HCSPLT8_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT8_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT8_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT8_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT8_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT8_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT8_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT9_Type): OTG_HS_HOST_OTG_HS_HCSPLT9_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT9_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT9_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT9_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT9_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT9_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT9_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT10_Type): OTG_HS_HOST_OTG_HS_HCSPLT10_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT10_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT10_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT10_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT10_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT10_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT10_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT11_Type): OTG_HS_HOST_OTG_HS_HCSPLT11_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT11_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT11_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT11_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT11_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT11_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT11_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT12_Type): OTG_HS_HOST_OTG_HS_HCSPLT12_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT12_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT12_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT12_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT12_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT12_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT12_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT12_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT13_Type): OTG_HS_HOST_OTG_HS_HCSPLT13_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT13_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT13_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT13_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT13_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT13_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT13_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT13_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT14_Type): OTG_HS_HOST_OTG_HS_HCSPLT14_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT14_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT14_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT14_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT14_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT14_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT14_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT14_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCSPLT15_Type): OTG_HS_HOST_OTG_HS_HCSPLT15_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT15_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT15_Type, val: OTG_HS_HOST_OTG_HS_HCSPLT15_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCSPLT15_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCSPLT15_Type, PRTADDR: uint32 = 0, HUBADDR: uint32 = 0, XACTPOS: uint32 = 0, COMPLSPLT: bool = false, SPLITEN: bool = false) =
  var x: uint32
  x.setMask((PRTADDR shl 0).masked(0 .. 6))
  x.setMask((HUBADDR shl 7).masked(7 .. 13))
  x.setMask((XACTPOS shl 14).masked(14 .. 15))
  x.setMask((COMPLSPLT.uint32 shl 16).masked(16 .. 16))
  x.setMask((SPLITEN.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_HOST_OTG_HS_HCSPLT15_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCSPLT15_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT0_Type): OTG_HS_HOST_OTG_HS_HCINT0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT0_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT0_Type, val: OTG_HS_HOST_OTG_HS_HCINT0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT0_Type, XFRC: bool = false, CHH: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT0_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT1_Type): OTG_HS_HOST_OTG_HS_HCINT1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT1_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT1_Type, val: OTG_HS_HOST_OTG_HS_HCINT1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT1_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT1_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT2_Type): OTG_HS_HOST_OTG_HS_HCINT2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT2_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT2_Type, val: OTG_HS_HOST_OTG_HS_HCINT2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT2_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT2_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT3_Type): OTG_HS_HOST_OTG_HS_HCINT3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT3_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT3_Type, val: OTG_HS_HOST_OTG_HS_HCINT3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT3_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT3_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT4_Type): OTG_HS_HOST_OTG_HS_HCINT4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT4_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT4_Type, val: OTG_HS_HOST_OTG_HS_HCINT4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT4_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT4_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT5_Type): OTG_HS_HOST_OTG_HS_HCINT5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT5_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT5_Type, val: OTG_HS_HOST_OTG_HS_HCINT5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT5_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT5_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT5_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT6_Type): OTG_HS_HOST_OTG_HS_HCINT6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT6_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT6_Type, val: OTG_HS_HOST_OTG_HS_HCINT6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT6_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT6_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT6_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT7_Type): OTG_HS_HOST_OTG_HS_HCINT7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT7_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT7_Type, val: OTG_HS_HOST_OTG_HS_HCINT7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT7_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT7_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT7_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT8_Type): OTG_HS_HOST_OTG_HS_HCINT8_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT8_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT8_Type, val: OTG_HS_HOST_OTG_HS_HCINT8_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT8_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT8_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT8_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT9_Type): OTG_HS_HOST_OTG_HS_HCINT9_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT9_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT9_Type, val: OTG_HS_HOST_OTG_HS_HCINT9_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT9_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT9_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT9_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT10_Type): OTG_HS_HOST_OTG_HS_HCINT10_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT10_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT10_Type, val: OTG_HS_HOST_OTG_HS_HCINT10_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT10_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT10_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT10_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT11_Type): OTG_HS_HOST_OTG_HS_HCINT11_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT11_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT11_Type, val: OTG_HS_HOST_OTG_HS_HCINT11_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT11_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT11_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT11_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT12_Type): OTG_HS_HOST_OTG_HS_HCINT12_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT12_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT12_Type, val: OTG_HS_HOST_OTG_HS_HCINT12_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT12_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT12_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT12_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT12_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT13_Type): OTG_HS_HOST_OTG_HS_HCINT13_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT13_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT13_Type, val: OTG_HS_HOST_OTG_HS_HCINT13_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT13_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT13_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT13_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT13_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT14_Type): OTG_HS_HOST_OTG_HS_HCINT14_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT14_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT14_Type, val: OTG_HS_HOST_OTG_HS_HCINT14_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT14_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT14_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT14_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT14_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINT15_Type): OTG_HS_HOST_OTG_HS_HCINT15_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINT15_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT15_Type, val: OTG_HS_HOST_OTG_HS_HCINT15_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINT15_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINT15_Type, XFRC: bool = false, CHH: bool = false, AHBERR: bool = false, STALL: bool = false, NAK: bool = false, ACK: bool = false, NYET: bool = false, TXERR: bool = false, BBERR: bool = false, FRMOR: bool = false, DTERR: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHH.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERR.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALL.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAK.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACK.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERR.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERR.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMOR.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERR.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINT15_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINT15_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK0_Type): OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK0_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK0_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK1_Type): OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK1_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK1_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK2_Type): OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK2_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK2_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK3_Type): OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK3_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK3_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK4_Type): OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK4_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK4_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK5_Type): OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK5_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK5_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK6_Type): OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK6_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK6_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK7_Type): OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK7_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK7_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK8_Type): OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK8_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK8_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK9_Type): OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK9_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK9_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK10_Type): OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK10_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK10_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK11_Type): OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK11_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK11_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK12_Type): OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK12_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK12_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK12_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK13_Type): OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK13_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK13_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK13_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK14_Type): OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK14_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK14_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK14_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK15_Type): OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK15_Type, val: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK15_Type, XFRCM: bool = false, CHHM: bool = false, AHBERRM: bool = false, STALLM: bool = false, NAKM: bool = false, ACKM: bool = false, NYET: bool = false, TXERRM: bool = false, BBERRM: bool = false, FRMORM: bool = false, DTERRM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((CHHM.uint32 shl 1).masked(1 .. 1))
  x.setMask((AHBERRM.uint32 shl 2).masked(2 .. 2))
  x.setMask((STALLM.uint32 shl 3).masked(3 .. 3))
  x.setMask((NAKM.uint32 shl 4).masked(4 .. 4))
  x.setMask((ACKM.uint32 shl 5).masked(5 .. 5))
  x.setMask((NYET.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXERRM.uint32 shl 7).masked(7 .. 7))
  x.setMask((BBERRM.uint32 shl 8).masked(8 .. 8))
  x.setMask((FRMORM.uint32 shl 9).masked(9 .. 9))
  x.setMask((DTERRM.uint32 shl 10).masked(10 .. 10))
  reg.write x.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCINTMSK15_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ0_Type): OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ0_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ0_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ1_Type): OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ1_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ1_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ2_Type): OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ2_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ2_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ3_Type): OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ3_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ3_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ4_Type): OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ4_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ4_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ5_Type): OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ5_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ5_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ6_Type): OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ6_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ6_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ7_Type): OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ7_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ7_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ8_Type): OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ8_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ8_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ9_Type): OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ9_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ9_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ10_Type): OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ10_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ10_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ11_Type): OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ11_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ11_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ12_Type): OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ12_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ12_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ12_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ13_Type): OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ13_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ13_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ13_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ14_Type): OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ14_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ14_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ14_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ15_Type): OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ15_Type, val: OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields](reg.loc), val)

proc write*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ15_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, DPID: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((DPID shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCTSIZ15_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA0_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA0_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA1_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA1_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA2_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA3_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA4_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA4_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA5_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA5_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA6_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA6_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA7_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA7_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA8_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA8_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA8_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA9_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA9_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA9_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA10_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA10_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA10_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA11_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA11_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA11_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA12_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA12_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA12_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA13_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA13_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA13_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA14_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA14_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA14_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_HOST_OTG_HS_HCDMA15_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_HOST_OTG_HS_HCDMA15_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_HOST_OTG_HS_HCDMA15_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func FSLSPCS*(r: OTG_HS_HOST_OTG_HS_HCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `FSLSPCS=`*(r: var OTG_HS_HOST_OTG_HS_HCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCFG_Fields

func FSLSS*(r: OTG_HS_HOST_OTG_HS_HCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func FRIVL*(r: OTG_HS_HOST_OTG_HS_HFIR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `FRIVL=`*(r: var OTG_HS_HOST_OTG_HS_HFIR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HFIR_Fields

func RLDCTRL*(r: OTG_HS_HOST_OTG_HS_HFIR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `RLDCTRL=`*(r: var OTG_HS_HOST_OTG_HS_HFIR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HFIR_Fields

func FRNUM*(r: OTG_HS_HOST_OTG_HS_HFNUM_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func FTREM*(r: OTG_HS_HOST_OTG_HS_HFNUM_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

func PTXFSAVL*(r: OTG_HS_HOST_OTG_HS_HPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `PTXFSAVL=`*(r: var OTG_HS_HOST_OTG_HS_HPTXSTS_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HPTXSTS_Fields

func PTXQSAV*(r: OTG_HS_HOST_OTG_HS_HPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func PTXQTOP*(r: OTG_HS_HOST_OTG_HS_HPTXSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

func HAINT*(r: OTG_HS_HOST_OTG_HS_HAINT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func HAINTM*(r: OTG_HS_HOST_OTG_HS_HAINTMSK_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `HAINTM=`*(r: var OTG_HS_HOST_OTG_HS_HAINTMSK_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HAINTMSK_Fields

func PCSTS*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func PCDET*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PCDET=`*(r: var OTG_HS_HOST_OTG_HS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HPRT_Fields

func PENA*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `PENA=`*(r: var OTG_HS_HOST_OTG_HS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HPRT_Fields

func PENCHNG*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `PENCHNG=`*(r: var OTG_HS_HOST_OTG_HS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HPRT_Fields

func POCA*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func POCCHNG*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `POCCHNG=`*(r: var OTG_HS_HOST_OTG_HS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HPRT_Fields

func PRES*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PRES=`*(r: var OTG_HS_HOST_OTG_HS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HPRT_Fields

func PSUSP*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `PSUSP=`*(r: var OTG_HS_HOST_OTG_HS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HPRT_Fields

func PRST*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `PRST=`*(r: var OTG_HS_HOST_OTG_HS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HPRT_Fields

func PLSTS*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

func PPWR*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `PPWR=`*(r: var OTG_HS_HOST_OTG_HS_HPRT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_HOST_OTG_HS_HPRT_Fields

func PTCTL*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(13 .. 16)

proc `PTCTL=`*(r: var OTG_HS_HOST_OTG_HS_HPRT_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 16)
  tmp.setMask((val shl 13).masked(13 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HPRT_Fields

func PSPD*(r: OTG_HS_HOST_OTG_HS_HPRT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 18)

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR0_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR0_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR1_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR2_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR3_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR3_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR4_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR4_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR5_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR5_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR6_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR6_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR7_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR7_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR8_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR8_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR9_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR9_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR10_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR10_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR11_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR11_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR12_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR12_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR13_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR13_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR14_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR14_Fields

func MPSIZ*(r: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

func EPNUM*(r: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 14)

proc `EPNUM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 14)
  tmp.setMask((val shl 11).masked(11 .. 14))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

func EPDIR*(r: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `EPDIR=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

func LSDEV*(r: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `LSDEV=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

func EPTYP*(r: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

func MCNT*(r: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 21)

proc `MCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 21)
  tmp.setMask((val shl 20).masked(20 .. 21))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

func DAD*(r: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 28)

proc `DAD=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 28)
  tmp.setMask((val shl 22).masked(22 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

func ODDFRM*(r: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields): bool {.inline.} =
  r.uint32.bitsliced(29 .. 29).bool

proc `ODDFRM=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

func CHDIS*(r: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `CHDIS=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

func CHENA*(r: OTG_HS_HOST_OTG_HS_HCCHAR15_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `CHENA=`*(r: var OTG_HS_HOST_OTG_HS_HCCHAR15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCCHAR15_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT0_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT0_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT0_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT0_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT0_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT1_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT1_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT1_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT1_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT1_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT2_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT2_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT2_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT2_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT2_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT3_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT3_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT3_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT3_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT3_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT4_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT4_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT4_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT4_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT4_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT5_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT5_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT5_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT5_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT5_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT6_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT6_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT6_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT6_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT6_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT7_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT7_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT7_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT7_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT7_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT8_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT8_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT8_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT8_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT8_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT9_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT9_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT9_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT9_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT9_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT10_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT10_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT10_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT10_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT10_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT11_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT11_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT11_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT11_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT11_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT12_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT12_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT12_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT12_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT12_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT13_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT13_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT13_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT13_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT13_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT14_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT14_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT14_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT14_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT14_Fields

func PRTADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `PRTADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT15_Fields

func HUBADDR*(r: OTG_HS_HOST_OTG_HS_HCSPLT15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 13)

proc `HUBADDR=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 13)
  tmp.setMask((val shl 7).masked(7 .. 13))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT15_Fields

func XACTPOS*(r: OTG_HS_HOST_OTG_HS_HCSPLT15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `XACTPOS=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT15_Fields

func COMPLSPLT*(r: OTG_HS_HOST_OTG_HS_HCSPLT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `COMPLSPLT=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT15_Fields

func SPLITEN*(r: OTG_HS_HOST_OTG_HS_HCSPLT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `SPLITEN=`*(r: var OTG_HS_HOST_OTG_HS_HCSPLT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_HOST_OTG_HS_HCSPLT15_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT0_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT0_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT0_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT0_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT0_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT0_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT0_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT0_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT0_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT1_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT2_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT3_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT4_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT5_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT6_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT7_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT8_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT8_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT9_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT9_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT10_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT10_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT11_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT11_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT12_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT12_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT13_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT13_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT14_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT14_Fields

func XFRC*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func CHH*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHH=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func AHBERR*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func STALL*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALL=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func NAK*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func ACK*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACK=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func TXERR*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func BBERR*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func FRMOR*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMOR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func DTERR*(r: OTG_HS_HOST_OTG_HS_HCINT15_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERR=`*(r: var OTG_HS_HOST_OTG_HS_HCINT15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINT15_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK0_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK1_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK2_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK3_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK4_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK5_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK6_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK7_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK8_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK9_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK10_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK11_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK12_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK13_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK14_Fields

func XFRCM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func CHHM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CHHM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func AHBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `AHBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func STALLM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STALLM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func NAKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `NAKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func ACKM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `ACKM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func NYET*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `NYET=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func TXERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `TXERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func BBERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `BBERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func FRMORM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FRMORM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func DTERRM*(r: OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DTERRM=`*(r: var OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_HOST_OTG_HS_HCINTMSK15_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ0_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ1_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ2_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ3_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ4_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ5_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ6_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ7_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ8_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ9_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ10_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ11_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ12_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ13_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ14_Fields

func XFRSIZ*(r: OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields

func PKTCNT*(r: OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields

func DPID*(r: OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `DPID=`*(r: var OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_HOST_OTG_HS_HCTSIZ15_Fields

type
  OTG_HS_DEVICE_OTG_HS_DCFG_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DCTL_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DSTS_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DAINT_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DTXFSTS0_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DTXFSTS1_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DTXFSTS2_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DTXFSTS3_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DTXFSTS4_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DTXFSTS5_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields* = distinct uint32
  OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields* = distinct uint32

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DCFG_Type): OTG_HS_DEVICE_OTG_HS_DCFG_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DCFG_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DCFG_Type, val: OTG_HS_DEVICE_OTG_HS_DCFG_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DCFG_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DCFG_Type, DSPD: uint32 = 0, NZLSOHSK: bool = false, DAD: uint32 = 0, PFIVL: uint32 = 0, PERSCHIVL: uint32 = 2, XCVRDLY: bool = false, ERRATIM: bool = false) =
  var x: uint32
  x.setMask((DSPD shl 0).masked(0 .. 1))
  x.setMask((NZLSOHSK.uint32 shl 2).masked(2 .. 2))
  x.setMask((DAD shl 4).masked(4 .. 10))
  x.setMask((PFIVL shl 11).masked(11 .. 12))
  x.setMask((PERSCHIVL shl 24).masked(24 .. 25))
  x.setMask((XCVRDLY.uint32 shl 14).masked(14 .. 14))
  x.setMask((ERRATIM.uint32 shl 15).masked(15 .. 15))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DCFG_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DCFG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DCTL_Type): OTG_HS_DEVICE_OTG_HS_DCTL_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DCTL_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DCTL_Type, val: OTG_HS_DEVICE_OTG_HS_DCTL_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DCTL_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DCTL_Type, RWUSIG: bool = false, SDIS: bool = false, TCTL: uint32 = 0, SGINAK: bool = false, CGINAK: bool = false, SGONAK: bool = false, CGONAK: bool = false, POPRGDNE: bool = false) =
  var x: uint32
  x.setMask((RWUSIG.uint32 shl 0).masked(0 .. 0))
  x.setMask((SDIS.uint32 shl 1).masked(1 .. 1))
  x.setMask((TCTL shl 4).masked(4 .. 6))
  x.setMask((SGINAK.uint32 shl 7).masked(7 .. 7))
  x.setMask((CGINAK.uint32 shl 8).masked(8 .. 8))
  x.setMask((SGONAK.uint32 shl 9).masked(9 .. 9))
  x.setMask((CGONAK.uint32 shl 10).masked(10 .. 10))
  x.setMask((POPRGDNE.uint32 shl 11).masked(11 .. 11))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DCTL_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DCTL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DSTS_Type): OTG_HS_DEVICE_OTG_HS_DSTS_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DSTS_Fields](reg.loc))

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Type): OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Type, XFRCM: bool = false, EPDM: bool = false, TOM: bool = false, ITTXFEMSK: bool = false, INEPNMM: bool = false, INEPNEM: bool = false, TXFURM: bool = false, BIM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDM.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOM.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFEMSK.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNMM.uint32 shl 5).masked(5 .. 5))
  x.setMask((INEPNEM.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFURM.uint32 shl 8).masked(8 .. 8))
  x.setMask((BIM.uint32 shl 9).masked(9 .. 9))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Type): OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Type, XFRCM: bool = false, EPDM: bool = false, STUPM: bool = false, OTEPDM: bool = false, B2BSTUP: bool = false, OPEM: bool = false, BOIM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDM.uint32 shl 1).masked(1 .. 1))
  x.setMask((STUPM.uint32 shl 3).masked(3 .. 3))
  x.setMask((OTEPDM.uint32 shl 4).masked(4 .. 4))
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((OPEM.uint32 shl 8).masked(8 .. 8))
  x.setMask((BOIM.uint32 shl 9).masked(9 .. 9))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DAINT_Type): OTG_HS_DEVICE_OTG_HS_DAINT_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DAINT_Fields](reg.loc))

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DAINTMSK_Type): OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DAINTMSK_Type, val: OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DAINTMSK_Type, IEPM: uint32 = 0, OEPM: uint32 = 0) =
  var x: uint32
  x.setMask((IEPM shl 0).masked(0 .. 15))
  x.setMask((OEPM shl 16).masked(16 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DAINTMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Type): OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Type, val: OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Type, VBUSDT: uint32 = 6103) =
  var x: uint32
  x.setMask((VBUSDT shl 0).masked(0 .. 15))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Type): OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Type, val: OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Type, DVBUSP: uint32 = 1464) =
  var x: uint32
  x.setMask((DVBUSP shl 0).masked(0 .. 11))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Type): OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Type, val: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Type, NONISOTHREN: bool = false, ISOTHREN: bool = false, TXTHRLEN: uint32 = 0, RXTHREN: bool = false, RXTHRLEN: uint32 = 0, ARPEN: bool = false) =
  var x: uint32
  x.setMask((NONISOTHREN.uint32 shl 0).masked(0 .. 0))
  x.setMask((ISOTHREN.uint32 shl 1).masked(1 .. 1))
  x.setMask((TXTHRLEN shl 2).masked(2 .. 10))
  x.setMask((RXTHREN.uint32 shl 16).masked(16 .. 16))
  x.setMask((RXTHRLEN shl 17).masked(17 .. 25))
  x.setMask((ARPEN.uint32 shl 27).masked(27 .. 27))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Type): OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Type, INEPTXFEM: uint32 = 0) =
  var x: uint32
  x.setMask((INEPTXFEM shl 0).masked(0 .. 15))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DEACHINT_Type): OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DEACHINT_Type, val: OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DEACHINT_Type, IEP1INT: bool = false, OEP1INT: bool = false) =
  var x: uint32
  x.setMask((IEP1INT.uint32 shl 1).masked(1 .. 1))
  x.setMask((OEP1INT.uint32 shl 17).masked(17 .. 17))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DEACHINT_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Type): OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Type, val: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Type, IEP1INTM: bool = false, OEP1INTM: bool = false) =
  var x: uint32
  x.setMask((IEP1INTM.uint32 shl 1).masked(1 .. 1))
  x.setMask((OEP1INTM.uint32 shl 17).masked(17 .. 17))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Type): OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Type, XFRCM: bool = false, EPDM: bool = false, TOM: bool = false, ITTXFEMSK: bool = false, INEPNMM: bool = false, INEPNEM: bool = false, TXFURM: bool = false, BIM: bool = false, NAKM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDM.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOM.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFEMSK.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNMM.uint32 shl 5).masked(5 .. 5))
  x.setMask((INEPNEM.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFURM.uint32 shl 8).masked(8 .. 8))
  x.setMask((BIM.uint32 shl 9).masked(9 .. 9))
  x.setMask((NAKM.uint32 shl 13).masked(13 .. 13))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Type): OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Type, XFRCM: bool = false, EPDM: bool = false, TOM: bool = false, ITTXFEMSK: bool = false, INEPNMM: bool = false, INEPNEM: bool = false, TXFURM: bool = false, BIM: bool = false, BERRM: bool = false, NAKM: bool = false, NYETM: bool = false) =
  var x: uint32
  x.setMask((XFRCM.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDM.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOM.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFEMSK.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNMM.uint32 shl 5).masked(5 .. 5))
  x.setMask((INEPNEM.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFURM.uint32 shl 8).masked(8 .. 8))
  x.setMask((BIM.uint32 shl 9).masked(9 .. 9))
  x.setMask((BERRM.uint32 shl 12).masked(12 .. 12))
  x.setMask((NAKM.uint32 shl 13).masked(13 .. 13))
  x.setMask((NYETM.uint32 shl 14).masked(14 .. 14))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Type): OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, Stall: bool = false, TXFNUM: uint32 = 0, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Type): OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, Stall: bool = false, TXFNUM: uint32 = 0, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Type): OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, Stall: bool = false, TXFNUM: uint32 = 0, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Type): OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, Stall: bool = false, TXFNUM: uint32 = 0, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Type): OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, Stall: bool = false, TXFNUM: uint32 = 0, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Type): OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, Stall: bool = false, TXFNUM: uint32 = 0, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Type): OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, Stall: bool = false, TXFNUM: uint32 = 0, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Type): OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, Stall: bool = false, TXFNUM: uint32 = 0, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((TXFNUM shl 22).masked(22 .. 25))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Type): OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Type, XFRC: bool = false, EPDISD: bool = false, TOC: bool = false, ITTXFE: bool = false, INEPNE: bool = false, TXFIFOUDRN: bool = false, BNA: bool = false, PKTDRPSTS: bool = false, BERR: bool = false, NAK: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFIFOUDRN.uint32 shl 8).masked(8 .. 8))
  x.setMask((BNA.uint32 shl 9).masked(9 .. 9))
  x.setMask((PKTDRPSTS.uint32 shl 11).masked(11 .. 11))
  x.setMask((BERR.uint32 shl 12).masked(12 .. 12))
  x.setMask((NAK.uint32 shl 13).masked(13 .. 13))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Type): OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Type, XFRC: bool = false, EPDISD: bool = false, TOC: bool = false, ITTXFE: bool = false, INEPNE: bool = false, TXFIFOUDRN: bool = false, BNA: bool = false, PKTDRPSTS: bool = false, BERR: bool = false, NAK: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFIFOUDRN.uint32 shl 8).masked(8 .. 8))
  x.setMask((BNA.uint32 shl 9).masked(9 .. 9))
  x.setMask((PKTDRPSTS.uint32 shl 11).masked(11 .. 11))
  x.setMask((BERR.uint32 shl 12).masked(12 .. 12))
  x.setMask((NAK.uint32 shl 13).masked(13 .. 13))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Type): OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Type, XFRC: bool = false, EPDISD: bool = false, TOC: bool = false, ITTXFE: bool = false, INEPNE: bool = false, TXFIFOUDRN: bool = false, BNA: bool = false, PKTDRPSTS: bool = false, BERR: bool = false, NAK: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFIFOUDRN.uint32 shl 8).masked(8 .. 8))
  x.setMask((BNA.uint32 shl 9).masked(9 .. 9))
  x.setMask((PKTDRPSTS.uint32 shl 11).masked(11 .. 11))
  x.setMask((BERR.uint32 shl 12).masked(12 .. 12))
  x.setMask((NAK.uint32 shl 13).masked(13 .. 13))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Type): OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Type, XFRC: bool = false, EPDISD: bool = false, TOC: bool = false, ITTXFE: bool = false, INEPNE: bool = false, TXFIFOUDRN: bool = false, BNA: bool = false, PKTDRPSTS: bool = false, BERR: bool = false, NAK: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFIFOUDRN.uint32 shl 8).masked(8 .. 8))
  x.setMask((BNA.uint32 shl 9).masked(9 .. 9))
  x.setMask((PKTDRPSTS.uint32 shl 11).masked(11 .. 11))
  x.setMask((BERR.uint32 shl 12).masked(12 .. 12))
  x.setMask((NAK.uint32 shl 13).masked(13 .. 13))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Type): OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Type, XFRC: bool = false, EPDISD: bool = false, TOC: bool = false, ITTXFE: bool = false, INEPNE: bool = false, TXFIFOUDRN: bool = false, BNA: bool = false, PKTDRPSTS: bool = false, BERR: bool = false, NAK: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFIFOUDRN.uint32 shl 8).masked(8 .. 8))
  x.setMask((BNA.uint32 shl 9).masked(9 .. 9))
  x.setMask((PKTDRPSTS.uint32 shl 11).masked(11 .. 11))
  x.setMask((BERR.uint32 shl 12).masked(12 .. 12))
  x.setMask((NAK.uint32 shl 13).masked(13 .. 13))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Type): OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Type, XFRC: bool = false, EPDISD: bool = false, TOC: bool = false, ITTXFE: bool = false, INEPNE: bool = false, TXFIFOUDRN: bool = false, BNA: bool = false, PKTDRPSTS: bool = false, BERR: bool = false, NAK: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFIFOUDRN.uint32 shl 8).masked(8 .. 8))
  x.setMask((BNA.uint32 shl 9).masked(9 .. 9))
  x.setMask((PKTDRPSTS.uint32 shl 11).masked(11 .. 11))
  x.setMask((BERR.uint32 shl 12).masked(12 .. 12))
  x.setMask((NAK.uint32 shl 13).masked(13 .. 13))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Type): OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Type, XFRC: bool = false, EPDISD: bool = false, TOC: bool = false, ITTXFE: bool = false, INEPNE: bool = false, TXFIFOUDRN: bool = false, BNA: bool = false, PKTDRPSTS: bool = false, BERR: bool = false, NAK: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFIFOUDRN.uint32 shl 8).masked(8 .. 8))
  x.setMask((BNA.uint32 shl 9).masked(9 .. 9))
  x.setMask((PKTDRPSTS.uint32 shl 11).masked(11 .. 11))
  x.setMask((BERR.uint32 shl 12).masked(12 .. 12))
  x.setMask((NAK.uint32 shl 13).masked(13 .. 13))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Type): OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Type, XFRC: bool = false, EPDISD: bool = false, TOC: bool = false, ITTXFE: bool = false, INEPNE: bool = false, TXFIFOUDRN: bool = false, BNA: bool = false, PKTDRPSTS: bool = false, BERR: bool = false, NAK: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((TOC.uint32 shl 3).masked(3 .. 3))
  x.setMask((ITTXFE.uint32 shl 4).masked(4 .. 4))
  x.setMask((INEPNE.uint32 shl 6).masked(6 .. 6))
  x.setMask((TXFIFOUDRN.uint32 shl 8).masked(8 .. 8))
  x.setMask((BNA.uint32 shl 9).masked(9 .. 9))
  x.setMask((PKTDRPSTS.uint32 shl 11).masked(11 .. 11))
  x.setMask((BERR.uint32 shl 12).masked(12 .. 12))
  x.setMask((NAK.uint32 shl 13).masked(13 .. 13))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Type): OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 6))
  x.setMask((PKTCNT shl 19).masked(19 .. 20))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA1_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA1_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA2_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA3_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA4_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA4_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA5_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA5_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPDMA5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DTXFSTS0_Type): OTG_HS_DEVICE_OTG_HS_DTXFSTS0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DTXFSTS0_Fields](reg.loc))

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DTXFSTS1_Type): OTG_HS_DEVICE_OTG_HS_DTXFSTS1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DTXFSTS1_Fields](reg.loc))

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DTXFSTS2_Type): OTG_HS_DEVICE_OTG_HS_DTXFSTS2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DTXFSTS2_Fields](reg.loc))

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DTXFSTS3_Type): OTG_HS_DEVICE_OTG_HS_DTXFSTS3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DTXFSTS3_Fields](reg.loc))

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DTXFSTS4_Type): OTG_HS_DEVICE_OTG_HS_DTXFSTS4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DTXFSTS4_Fields](reg.loc))

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DTXFSTS5_Type): OTG_HS_DEVICE_OTG_HS_DTXFSTS5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DTXFSTS5_Fields](reg.loc))

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Type): OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, MCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((MCNT shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Type): OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, MCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((MCNT shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Type): OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, MCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((MCNT shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Type): OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, MCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((MCNT shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Type): OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Type, val: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, MCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((MCNT shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Type): OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Type, SNPM: bool = false, Stall: bool = false, CNAK: bool = false, SNAK: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((SNPM.uint32 shl 20).masked(20 .. 20))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Type): OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, SNPM: bool = false, Stall: bool = false, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((SNPM.uint32 shl 20).masked(20 .. 20))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Type): OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, SNPM: bool = false, Stall: bool = false, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((SNPM.uint32 shl 20).masked(20 .. 20))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Type): OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Type, MPSIZ: uint32 = 0, USBAEP: bool = false, EPTYP: uint32 = 0, SNPM: bool = false, Stall: bool = false, CNAK: bool = false, SNAK: bool = false, SD0PID_SEVNFRM: bool = false, SODDFRM: bool = false, EPDIS: bool = false, EPENA: bool = false) =
  var x: uint32
  x.setMask((MPSIZ shl 0).masked(0 .. 10))
  x.setMask((USBAEP.uint32 shl 15).masked(15 .. 15))
  x.setMask((EPTYP shl 18).masked(18 .. 19))
  x.setMask((SNPM.uint32 shl 20).masked(20 .. 20))
  x.setMask((Stall.uint32 shl 21).masked(21 .. 21))
  x.setMask((CNAK.uint32 shl 26).masked(26 .. 26))
  x.setMask((SNAK.uint32 shl 27).masked(27 .. 27))
  x.setMask((SD0PID_SEVNFRM.uint32 shl 28).masked(28 .. 28))
  x.setMask((SODDFRM.uint32 shl 29).masked(29 .. 29))
  x.setMask((EPDIS.uint32 shl 30).masked(30 .. 30))
  x.setMask((EPENA.uint32 shl 31).masked(31 .. 31))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Type): OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Type, XFRC: bool = false, EPDISD: bool = false, STUP: bool = false, OTEPDIS: bool = false, B2BSTUP: bool = false, NYET: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((NYET.uint32 shl 14).masked(14 .. 14))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Type): OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Type, XFRC: bool = false, EPDISD: bool = false, STUP: bool = false, OTEPDIS: bool = false, B2BSTUP: bool = false, NYET: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((NYET.uint32 shl 14).masked(14 .. 14))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Type): OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Type, XFRC: bool = false, EPDISD: bool = false, STUP: bool = false, OTEPDIS: bool = false, B2BSTUP: bool = false, NYET: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((NYET.uint32 shl 14).masked(14 .. 14))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Type): OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Type, XFRC: bool = false, EPDISD: bool = false, STUP: bool = false, OTEPDIS: bool = false, B2BSTUP: bool = false, NYET: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((NYET.uint32 shl 14).masked(14 .. 14))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Type): OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Type, XFRC: bool = false, EPDISD: bool = false, STUP: bool = false, OTEPDIS: bool = false, B2BSTUP: bool = false, NYET: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((NYET.uint32 shl 14).masked(14 .. 14))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Type): OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Type, XFRC: bool = false, EPDISD: bool = false, STUP: bool = false, OTEPDIS: bool = false, B2BSTUP: bool = false, NYET: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((NYET.uint32 shl 14).masked(14 .. 14))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Type): OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Type, XFRC: bool = false, EPDISD: bool = false, STUP: bool = false, OTEPDIS: bool = false, B2BSTUP: bool = false, NYET: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((NYET.uint32 shl 14).masked(14 .. 14))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Type): OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Type, XFRC: bool = false, EPDISD: bool = false, STUP: bool = false, OTEPDIS: bool = false, B2BSTUP: bool = false, NYET: bool = false) =
  var x: uint32
  x.setMask((XFRC.uint32 shl 0).masked(0 .. 0))
  x.setMask((EPDISD.uint32 shl 1).masked(1 .. 1))
  x.setMask((STUP.uint32 shl 3).masked(3 .. 3))
  x.setMask((OTEPDIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((B2BSTUP.uint32 shl 6).masked(6 .. 6))
  x.setMask((NYET.uint32 shl 14).masked(14 .. 14))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Type): OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Type, XFRSIZ: uint32 = 0, PKTCNT: bool = false, STUPCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 6))
  x.setMask((PKTCNT.uint32 shl 19).masked(19 .. 19))
  x.setMask((STUPCNT shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Type): OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, RXDPID_STUPCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((RXDPID_STUPCNT shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Type): OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, RXDPID_STUPCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((RXDPID_STUPCNT shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Type): OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, RXDPID_STUPCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((RXDPID_STUPCNT shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Type): OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields](reg.loc))

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Type, val: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields](reg.loc), val)

proc write*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Type, XFRSIZ: uint32 = 0, PKTCNT: uint32 = 0, RXDPID_STUPCNT: uint32 = 0) =
  var x: uint32
  x.setMask((XFRSIZ shl 0).masked(0 .. 18))
  x.setMask((PKTCNT shl 19).masked(19 .. 28))
  x.setMask((RXDPID_STUPCNT shl 29).masked(29 .. 30))
  reg.write x.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields

template modifyIt*(reg: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func DSPD*(r: OTG_HS_DEVICE_OTG_HS_DCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `DSPD=`*(r: var OTG_HS_DEVICE_OTG_HS_DCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCFG_Fields

func NZLSOHSK*(r: OTG_HS_DEVICE_OTG_HS_DCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `NZLSOHSK=`*(r: var OTG_HS_DEVICE_OTG_HS_DCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCFG_Fields

func DAD*(r: OTG_HS_DEVICE_OTG_HS_DCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 10)

proc `DAD=`*(r: var OTG_HS_DEVICE_OTG_HS_DCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 10)
  tmp.setMask((val shl 4).masked(4 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCFG_Fields

func PFIVL*(r: OTG_HS_DEVICE_OTG_HS_DCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `PFIVL=`*(r: var OTG_HS_DEVICE_OTG_HS_DCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCFG_Fields

func PERSCHIVL*(r: OTG_HS_DEVICE_OTG_HS_DCFG_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `PERSCHIVL=`*(r: var OTG_HS_DEVICE_OTG_HS_DCFG_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCFG_Fields

func XCVRDLY*(r: OTG_HS_DEVICE_OTG_HS_DCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `XCVRDLY=`*(r: var OTG_HS_DEVICE_OTG_HS_DCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCFG_Fields

func ERRATIM*(r: OTG_HS_DEVICE_OTG_HS_DCFG_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `ERRATIM=`*(r: var OTG_HS_DEVICE_OTG_HS_DCFG_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCFG_Fields

func RWUSIG*(r: OTG_HS_DEVICE_OTG_HS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `RWUSIG=`*(r: var OTG_HS_DEVICE_OTG_HS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCTL_Fields

func SDIS*(r: OTG_HS_DEVICE_OTG_HS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `SDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCTL_Fields

func GINSTS*(r: OTG_HS_DEVICE_OTG_HS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func GONSTS*(r: OTG_HS_DEVICE_OTG_HS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func TCTL*(r: OTG_HS_DEVICE_OTG_HS_DCTL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 6)

proc `TCTL=`*(r: var OTG_HS_DEVICE_OTG_HS_DCTL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 6)
  tmp.setMask((val shl 4).masked(4 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCTL_Fields

proc `SGINAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCTL_Fields

proc `CGINAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCTL_Fields

proc `SGONAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCTL_Fields

proc `CGONAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCTL_Fields

func POPRGDNE*(r: OTG_HS_DEVICE_OTG_HS_DCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `POPRGDNE=`*(r: var OTG_HS_DEVICE_OTG_HS_DCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DCTL_Fields

func SUSPSTS*(r: OTG_HS_DEVICE_OTG_HS_DSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func ENUMSPD*(r: OTG_HS_DEVICE_OTG_HS_DSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(1 .. 2)

func EERR*(r: OTG_HS_DEVICE_OTG_HS_DSTS_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func FNSOF*(r: OTG_HS_DEVICE_OTG_HS_DSTS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 21)

func XFRCM*(r: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields

func EPDM*(r: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields

func TOM*(r: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields

func ITTXFEMSK*(r: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFEMSK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields

func INEPNMM*(r: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `INEPNMM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields

func INEPNEM*(r: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNEM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields

func TXFURM*(r: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFURM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields

func BIM*(r: OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BIM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPMSK_Fields

func XFRCM*(r: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields

func EPDM*(r: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields

func STUPM*(r: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUPM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields

func OTEPDM*(r: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields

func B2BSTUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields

func OPEM*(r: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `OPEM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields

func BOIM*(r: OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BOIM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPMSK_Fields

func IEPINT*(r: OTG_HS_DEVICE_OTG_HS_DAINT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func OEPINT*(r: OTG_HS_DEVICE_OTG_HS_DAINT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

func IEPM*(r: OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `IEPM=`*(r: var OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields

func OEPM*(r: OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `OEPM=`*(r: var OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DAINTMSK_Fields

func VBUSDT*(r: OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `VBUSDT=`*(r: var OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DVBUSDIS_Fields

func DVBUSP*(r: OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 11)

proc `DVBUSP=`*(r: var OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 11)
  tmp.setMask((val shl 0).masked(0 .. 11))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_Fields

func NONISOTHREN*(r: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `NONISOTHREN=`*(r: var OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields

func ISOTHREN*(r: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ISOTHREN=`*(r: var OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields

func TXTHRLEN*(r: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 10)

proc `TXTHRLEN=`*(r: var OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 10)
  tmp.setMask((val shl 2).masked(2 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields

func RXTHREN*(r: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `RXTHREN=`*(r: var OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields

func RXTHRLEN*(r: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(17 .. 25)

proc `RXTHRLEN=`*(r: var OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 25)
  tmp.setMask((val shl 17).masked(17 .. 25))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields

func ARPEN*(r: OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

proc `ARPEN=`*(r: var OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DTHRCTL_Fields

func INEPTXFEM*(r: OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INEPTXFEM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_Fields

func IEP1INT*(r: OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `IEP1INT=`*(r: var OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields

func OEP1INT*(r: OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `OEP1INT=`*(r: var OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DEACHINT_Fields

func IEP1INTM*(r: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `IEP1INTM=`*(r: var OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields

func OEP1INTM*(r: OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `OEP1INTM=`*(r: var OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_Fields

func XFRCM*(r: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields

func EPDM*(r: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields

func TOM*(r: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields

func ITTXFEMSK*(r: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFEMSK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields

func INEPNMM*(r: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `INEPNMM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields

func INEPNEM*(r: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNEM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields

func TXFURM*(r: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFURM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields

func BIM*(r: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BIM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields

func NAKM*(r: OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NAKM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_Fields

func XFRCM*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRCM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func EPDM*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func TOM*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func ITTXFEMSK*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFEMSK=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func INEPNMM*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `INEPNMM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func INEPNEM*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNEM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func TXFURM*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFURM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func BIM*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BIM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func BERRM*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BERRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func NAKM*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NAKM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func NYETM*(r: OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `NYETM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

func TXFNUM*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

func TXFNUM*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

func TXFNUM*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

func TXFNUM*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

func TXFNUM*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

func TXFNUM*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

func TXFNUM*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

func TXFNUM*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(22 .. 25)

proc `TXFNUM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 25)
  tmp.setMask((val shl 22).masked(22 .. 25))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

func TOC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

func ITTXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

func INEPNE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

func TXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TXFIFOUDRN*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFIFOUDRN=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

func BNA*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BNA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

func PKTDRPSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PKTDRPSTS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

func BERR*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BERR=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

func NAK*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT0_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

func TOC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

func ITTXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

func INEPNE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

func TXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TXFIFOUDRN*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFIFOUDRN=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

func BNA*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BNA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

func PKTDRPSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PKTDRPSTS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

func BERR*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BERR=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

func NAK*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT1_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

func TOC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

func ITTXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

func INEPNE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

func TXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TXFIFOUDRN*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFIFOUDRN=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

func BNA*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BNA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

func PKTDRPSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PKTDRPSTS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

func BERR*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BERR=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

func NAK*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT2_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

func TOC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

func ITTXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

func INEPNE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

func TXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TXFIFOUDRN*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFIFOUDRN=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

func BNA*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BNA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

func PKTDRPSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PKTDRPSTS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

func BERR*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BERR=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

func NAK*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT3_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

func TOC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

func ITTXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

func INEPNE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

func TXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TXFIFOUDRN*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFIFOUDRN=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

func BNA*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BNA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

func PKTDRPSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PKTDRPSTS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

func BERR*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BERR=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

func NAK*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT4_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

func TOC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

func ITTXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

func INEPNE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

func TXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TXFIFOUDRN*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFIFOUDRN=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

func BNA*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BNA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

func PKTDRPSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PKTDRPSTS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

func BERR*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BERR=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

func NAK*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT5_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

func TOC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

func ITTXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

func INEPNE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

func TXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TXFIFOUDRN*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFIFOUDRN=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

func BNA*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BNA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

func PKTDRPSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PKTDRPSTS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

func BERR*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BERR=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

func NAK*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT6_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

func TOC*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TOC=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

func ITTXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `ITTXFE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

func INEPNE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `INEPNE=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

func TXFE*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TXFIFOUDRN*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXFIFOUDRN=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

func BNA*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BNA=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

func PKTDRPSTS*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `PKTDRPSTS=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

func BERR*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `BERR=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

func NAK*(r: OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPINT7_Fields

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 20)

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 20)
  tmp.setMask((val shl 19).masked(19 .. 20))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_Fields

func INEPTFSAV*(r: OTG_HS_DEVICE_OTG_HS_DTXFSTS0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func INEPTFSAV*(r: OTG_HS_DEVICE_OTG_HS_DTXFSTS1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func INEPTFSAV*(r: OTG_HS_DEVICE_OTG_HS_DTXFSTS2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func INEPTFSAV*(r: OTG_HS_DEVICE_OTG_HS_DTXFSTS3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func INEPTFSAV*(r: OTG_HS_DEVICE_OTG_HS_DTXFSTS4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func INEPTFSAV*(r: OTG_HS_DEVICE_OTG_HS_DTXFSTS5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields

func MCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `MCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_Fields

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields

func MCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `MCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_Fields

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields

func MCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `MCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_Fields

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields

func MCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `MCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_Fields

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields

func MCNT*(r: OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `MCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

func SNPM*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SNPM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

func SNPM*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SNPM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

func SNPM*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SNPM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Fields

func MPSIZ*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 10)

proc `MPSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 10)
  tmp.setMask((val shl 0).masked(0 .. 10))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

func USBAEP*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `USBAEP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

func EONUM_DPID*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func NAKSTS*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func EPTYP*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `EPTYP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

func SNPM*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `SNPM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

func Stall*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `Stall=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

proc `CNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 26)
  tmp.setMask((val.uint32 shl 26).masked(26 .. 26))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

proc `SNAK=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(27 .. 27)
  tmp.setMask((val.uint32 shl 27).masked(27 .. 27))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

proc `SD0PID_SEVNFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

proc `SODDFRM=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 29)
  tmp.setMask((val.uint32 shl 29).masked(29 .. 29))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

func EPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `EPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

func EPENA*(r: OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `EPENA=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields

func STUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields

func OTEPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields

func B2BSTUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields

func NYET*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `NYET=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT0_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields

func STUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields

func OTEPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields

func B2BSTUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields

func NYET*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `NYET=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT1_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields

func STUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields

func OTEPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields

func B2BSTUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields

func NYET*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `NYET=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT2_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields

func STUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields

func OTEPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields

func B2BSTUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields

func NYET*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `NYET=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT3_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields

func STUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields

func OTEPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields

func B2BSTUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields

func NYET*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `NYET=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT4_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields

func STUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields

func OTEPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields

func B2BSTUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields

func NYET*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `NYET=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT5_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields

func STUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields

func OTEPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields

func B2BSTUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields

func NYET*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `NYET=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT6_Fields

func XFRC*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `XFRC=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields

func EPDISD*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `EPDISD=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields

func STUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `STUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields

func OTEPDIS*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `OTEPDIS=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields

func B2BSTUP*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `B2BSTUP=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields

func NYET*(r: OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `NYET=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPINT7_Fields

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 6)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 6)
  tmp.setMask((val shl 0).masked(0 .. 6))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields

func STUPCNT*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `STUPCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_Fields

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields

func RXDPID_STUPCNT*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `RXDPID_STUPCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_Fields

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields

func RXDPID_STUPCNT*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `RXDPID_STUPCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_Fields

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields

func RXDPID_STUPCNT*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `RXDPID_STUPCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_Fields

func XFRSIZ*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 18)

proc `XFRSIZ=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 18)
  tmp.setMask((val shl 0).masked(0 .. 18))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields

func PKTCNT*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(19 .. 28)

proc `PKTCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 28)
  tmp.setMask((val shl 19).masked(19 .. 28))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields

func RXDPID_STUPCNT*(r: OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(29 .. 30)

proc `RXDPID_STUPCNT=`*(r: var OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(29 .. 30)
  tmp.setMask((val shl 29).masked(29 .. 30))
  r = tmp.OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_Fields

type
  OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields* = distinct uint32

proc read*(reg: OTG_HS_PWRCLK_OTG_HS_PCGCR_Type): OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields {.inline.} =
  volatileLoad(cast[ptr OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields](reg.loc))

proc write*(reg: OTG_HS_PWRCLK_OTG_HS_PCGCR_Type, val: OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields) {.inline.} =
  volatileStore(cast[ptr OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields](reg.loc), val)

proc write*(reg: OTG_HS_PWRCLK_OTG_HS_PCGCR_Type, STPPCLK: bool = false, GATEHCLK: bool = false, PHYSUSP: bool = false) =
  var x: uint32
  x.setMask((STPPCLK.uint32 shl 0).masked(0 .. 0))
  x.setMask((GATEHCLK.uint32 shl 1).masked(1 .. 1))
  x.setMask((PHYSUSP.uint32 shl 4).masked(4 .. 4))
  reg.write x.OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields

template modifyIt*(reg: OTG_HS_PWRCLK_OTG_HS_PCGCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func STPPCLK*(r: OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `STPPCLK=`*(r: var OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields

func GATEHCLK*(r: OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `GATEHCLK=`*(r: var OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields

func PHYSUSP*(r: OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `PHYSUSP=`*(r: var OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.OTG_HS_PWRCLK_OTG_HS_PCGCR_Fields

type
  SAI1_BCR1_Fields* = distinct uint32
  SAI1_BCR2_Fields* = distinct uint32
  SAI1_BFRCR_Fields* = distinct uint32
  SAI1_BSLOTR_Fields* = distinct uint32
  SAI1_BIM_Fields* = distinct uint32
  SAI1_BSR_Fields* = distinct uint32
  SAI1_BCLRFR_Fields* = distinct uint32
  SAI1_ACR1_Fields* = distinct uint32
  SAI1_ACR2_Fields* = distinct uint32
  SAI1_AFRCR_Fields* = distinct uint32
  SAI1_ASLOTR_Fields* = distinct uint32
  SAI1_AIM_Fields* = distinct uint32
  SAI1_ASR_Fields* = distinct uint32
  SAI1_ACLRFR_Fields* = distinct uint32
  SAI1_GCR_Fields* = distinct uint32

proc read*(reg: SAI1_BCR1_Type): SAI1_BCR1_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_BCR1_Fields](reg.loc))

proc write*(reg: SAI1_BCR1_Type, val: SAI1_BCR1_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_BCR1_Fields](reg.loc), val)

proc write*(reg: SAI1_BCR1_Type, MCJDIV: uint32 = 0, NODIV: bool = false, DMAEN: bool = false, SAIBEN: bool = false, OutDri: bool = false, MONO: bool = false, SYNCEN: uint32 = 0, CKSTR: bool = false, LSBFIRST: bool = false, DS: uint32 = 2, PRTCFG: uint32 = 0, MODE: uint32 = 0) =
  var x: uint32
  x.setMask((MCJDIV shl 20).masked(20 .. 23))
  x.setMask((NODIV.uint32 shl 19).masked(19 .. 19))
  x.setMask((DMAEN.uint32 shl 17).masked(17 .. 17))
  x.setMask((SAIBEN.uint32 shl 16).masked(16 .. 16))
  x.setMask((OutDri.uint32 shl 13).masked(13 .. 13))
  x.setMask((MONO.uint32 shl 12).masked(12 .. 12))
  x.setMask((SYNCEN shl 10).masked(10 .. 11))
  x.setMask((CKSTR.uint32 shl 9).masked(9 .. 9))
  x.setMask((LSBFIRST.uint32 shl 8).masked(8 .. 8))
  x.setMask((DS shl 5).masked(5 .. 7))
  x.setMask((PRTCFG shl 2).masked(2 .. 3))
  x.setMask((MODE shl 0).masked(0 .. 1))
  reg.write x.SAI1_BCR1_Fields

template modifyIt*(reg: SAI1_BCR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_BCR2_Type): SAI1_BCR2_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_BCR2_Fields](reg.loc))

proc write*(reg: SAI1_BCR2_Type, val: SAI1_BCR2_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_BCR2_Fields](reg.loc), val)

proc write*(reg: SAI1_BCR2_Type, COMP: uint32 = 0, CPL: bool = false, MUTECN: uint32 = 0, MUTEVAL: bool = false, MUTE: bool = false, TRIS: bool = false, FFLUS: bool = false, FTH: uint32 = 0) =
  var x: uint32
  x.setMask((COMP shl 14).masked(14 .. 15))
  x.setMask((CPL.uint32 shl 13).masked(13 .. 13))
  x.setMask((MUTECN shl 7).masked(7 .. 12))
  x.setMask((MUTEVAL.uint32 shl 6).masked(6 .. 6))
  x.setMask((MUTE.uint32 shl 5).masked(5 .. 5))
  x.setMask((TRIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((FFLUS.uint32 shl 3).masked(3 .. 3))
  x.setMask((FTH shl 0).masked(0 .. 2))
  reg.write x.SAI1_BCR2_Fields

template modifyIt*(reg: SAI1_BCR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_BFRCR_Type): SAI1_BFRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_BFRCR_Fields](reg.loc))

proc write*(reg: SAI1_BFRCR_Type, val: SAI1_BFRCR_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_BFRCR_Fields](reg.loc), val)

proc write*(reg: SAI1_BFRCR_Type, FSOFF: bool = false, FSPOL: bool = false, FSDEF: bool = false, FSALL: uint32 = 0, FRL: uint32 = 7) =
  var x: uint32
  x.setMask((FSOFF.uint32 shl 18).masked(18 .. 18))
  x.setMask((FSPOL.uint32 shl 17).masked(17 .. 17))
  x.setMask((FSDEF.uint32 shl 16).masked(16 .. 16))
  x.setMask((FSALL shl 8).masked(8 .. 14))
  x.setMask((FRL shl 0).masked(0 .. 7))
  reg.write x.SAI1_BFRCR_Fields

template modifyIt*(reg: SAI1_BFRCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_BSLOTR_Type): SAI1_BSLOTR_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_BSLOTR_Fields](reg.loc))

proc write*(reg: SAI1_BSLOTR_Type, val: SAI1_BSLOTR_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_BSLOTR_Fields](reg.loc), val)

proc write*(reg: SAI1_BSLOTR_Type, SLOTEN: uint32 = 0, NBSLOT: uint32 = 0, SLOTSZ: uint32 = 0, FBOFF: uint32 = 0) =
  var x: uint32
  x.setMask((SLOTEN shl 16).masked(16 .. 31))
  x.setMask((NBSLOT shl 8).masked(8 .. 11))
  x.setMask((SLOTSZ shl 6).masked(6 .. 7))
  x.setMask((FBOFF shl 0).masked(0 .. 4))
  reg.write x.SAI1_BSLOTR_Fields

template modifyIt*(reg: SAI1_BSLOTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_BIM_Type): SAI1_BIM_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_BIM_Fields](reg.loc))

proc write*(reg: SAI1_BIM_Type, val: SAI1_BIM_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_BIM_Fields](reg.loc), val)

proc write*(reg: SAI1_BIM_Type, LFSDETIE: bool = false, AFSDETIE: bool = false, CNRDYIE: bool = false, FREQIE: bool = false, WCKCFG: bool = false, MUTEDET: bool = false, OVRUDRIE: bool = false) =
  var x: uint32
  x.setMask((LFSDETIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((AFSDETIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((CNRDYIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((FREQIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((WCKCFG.uint32 shl 2).masked(2 .. 2))
  x.setMask((MUTEDET.uint32 shl 1).masked(1 .. 1))
  x.setMask((OVRUDRIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.SAI1_BIM_Fields

template modifyIt*(reg: SAI1_BIM_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_BSR_Type): SAI1_BSR_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_BSR_Fields](reg.loc))

proc write*(reg: SAI1_BCLRFR_Type, val: SAI1_BCLRFR_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_BCLRFR_Fields](reg.loc), val)

proc write*(reg: SAI1_BCLRFR_Type, LFSDET: bool = false, CAFSDET: bool = false, CNRDY: bool = false, WCKCFG: bool = false, MUTEDET: bool = false, OVRUDR: bool = false) =
  var x: uint32
  x.setMask((LFSDET.uint32 shl 6).masked(6 .. 6))
  x.setMask((CAFSDET.uint32 shl 5).masked(5 .. 5))
  x.setMask((CNRDY.uint32 shl 4).masked(4 .. 4))
  x.setMask((WCKCFG.uint32 shl 2).masked(2 .. 2))
  x.setMask((MUTEDET.uint32 shl 1).masked(1 .. 1))
  x.setMask((OVRUDR.uint32 shl 0).masked(0 .. 0))
  reg.write x.SAI1_BCLRFR_Fields

proc read*(reg: SAI1_BDR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: SAI1_BDR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: SAI1_BDR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_ACR1_Type): SAI1_ACR1_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_ACR1_Fields](reg.loc))

proc write*(reg: SAI1_ACR1_Type, val: SAI1_ACR1_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_ACR1_Fields](reg.loc), val)

proc write*(reg: SAI1_ACR1_Type, MCJDIV: uint32 = 0, NODIV: bool = false, DMAEN: bool = false, SAIAEN: bool = false, OutDri: bool = false, MONO: bool = false, SYNCEN: uint32 = 0, CKSTR: bool = false, LSBFIRST: bool = false, DS: uint32 = 2, PRTCFG: uint32 = 0, MODE: uint32 = 0) =
  var x: uint32
  x.setMask((MCJDIV shl 20).masked(20 .. 23))
  x.setMask((NODIV.uint32 shl 19).masked(19 .. 19))
  x.setMask((DMAEN.uint32 shl 17).masked(17 .. 17))
  x.setMask((SAIAEN.uint32 shl 16).masked(16 .. 16))
  x.setMask((OutDri.uint32 shl 13).masked(13 .. 13))
  x.setMask((MONO.uint32 shl 12).masked(12 .. 12))
  x.setMask((SYNCEN shl 10).masked(10 .. 11))
  x.setMask((CKSTR.uint32 shl 9).masked(9 .. 9))
  x.setMask((LSBFIRST.uint32 shl 8).masked(8 .. 8))
  x.setMask((DS shl 5).masked(5 .. 7))
  x.setMask((PRTCFG shl 2).masked(2 .. 3))
  x.setMask((MODE shl 0).masked(0 .. 1))
  reg.write x.SAI1_ACR1_Fields

template modifyIt*(reg: SAI1_ACR1_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_ACR2_Type): SAI1_ACR2_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_ACR2_Fields](reg.loc))

proc write*(reg: SAI1_ACR2_Type, val: SAI1_ACR2_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_ACR2_Fields](reg.loc), val)

proc write*(reg: SAI1_ACR2_Type, COMP: uint32 = 0, CPL: bool = false, MUTECN: uint32 = 0, MUTEVAL: bool = false, MUTE: bool = false, TRIS: bool = false, FFLUS: bool = false, FTH: uint32 = 0) =
  var x: uint32
  x.setMask((COMP shl 14).masked(14 .. 15))
  x.setMask((CPL.uint32 shl 13).masked(13 .. 13))
  x.setMask((MUTECN shl 7).masked(7 .. 12))
  x.setMask((MUTEVAL.uint32 shl 6).masked(6 .. 6))
  x.setMask((MUTE.uint32 shl 5).masked(5 .. 5))
  x.setMask((TRIS.uint32 shl 4).masked(4 .. 4))
  x.setMask((FFLUS.uint32 shl 3).masked(3 .. 3))
  x.setMask((FTH shl 0).masked(0 .. 2))
  reg.write x.SAI1_ACR2_Fields

template modifyIt*(reg: SAI1_ACR2_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_AFRCR_Type): SAI1_AFRCR_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_AFRCR_Fields](reg.loc))

proc write*(reg: SAI1_AFRCR_Type, val: SAI1_AFRCR_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_AFRCR_Fields](reg.loc), val)

proc write*(reg: SAI1_AFRCR_Type, FSOFF: bool = false, FSPOL: bool = false, FSDEF: bool = false, FSALL: uint32 = 0, FRL: uint32 = 7) =
  var x: uint32
  x.setMask((FSOFF.uint32 shl 18).masked(18 .. 18))
  x.setMask((FSPOL.uint32 shl 17).masked(17 .. 17))
  x.setMask((FSDEF.uint32 shl 16).masked(16 .. 16))
  x.setMask((FSALL shl 8).masked(8 .. 14))
  x.setMask((FRL shl 0).masked(0 .. 7))
  reg.write x.SAI1_AFRCR_Fields

template modifyIt*(reg: SAI1_AFRCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_ASLOTR_Type): SAI1_ASLOTR_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_ASLOTR_Fields](reg.loc))

proc write*(reg: SAI1_ASLOTR_Type, val: SAI1_ASLOTR_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_ASLOTR_Fields](reg.loc), val)

proc write*(reg: SAI1_ASLOTR_Type, SLOTEN: uint32 = 0, NBSLOT: uint32 = 0, SLOTSZ: uint32 = 0, FBOFF: uint32 = 0) =
  var x: uint32
  x.setMask((SLOTEN shl 16).masked(16 .. 31))
  x.setMask((NBSLOT shl 8).masked(8 .. 11))
  x.setMask((SLOTSZ shl 6).masked(6 .. 7))
  x.setMask((FBOFF shl 0).masked(0 .. 4))
  reg.write x.SAI1_ASLOTR_Fields

template modifyIt*(reg: SAI1_ASLOTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_AIM_Type): SAI1_AIM_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_AIM_Fields](reg.loc))

proc write*(reg: SAI1_AIM_Type, val: SAI1_AIM_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_AIM_Fields](reg.loc), val)

proc write*(reg: SAI1_AIM_Type, LFSDET: bool = false, AFSDETIE: bool = false, CNRDYIE: bool = false, FREQIE: bool = false, WCKCFG: bool = false, MUTEDET: bool = false, OVRUDRIE: bool = false) =
  var x: uint32
  x.setMask((LFSDET.uint32 shl 6).masked(6 .. 6))
  x.setMask((AFSDETIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((CNRDYIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((FREQIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((WCKCFG.uint32 shl 2).masked(2 .. 2))
  x.setMask((MUTEDET.uint32 shl 1).masked(1 .. 1))
  x.setMask((OVRUDRIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.SAI1_AIM_Fields

template modifyIt*(reg: SAI1_AIM_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_ASR_Type): SAI1_ASR_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_ASR_Fields](reg.loc))

proc write*(reg: SAI1_ASR_Type, val: SAI1_ASR_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_ASR_Fields](reg.loc), val)

proc write*(reg: SAI1_ASR_Type, FLVL: uint32 = 0, LFSDET: bool = false, AFSDET: bool = false, CNRDY: bool = false, FREQ: bool = false, WCKCFG: bool = false, MUTEDET: bool = false, OVRUDR: bool = false) =
  var x: uint32
  x.setMask((FLVL shl 16).masked(16 .. 18))
  x.setMask((LFSDET.uint32 shl 6).masked(6 .. 6))
  x.setMask((AFSDET.uint32 shl 5).masked(5 .. 5))
  x.setMask((CNRDY.uint32 shl 4).masked(4 .. 4))
  x.setMask((FREQ.uint32 shl 3).masked(3 .. 3))
  x.setMask((WCKCFG.uint32 shl 2).masked(2 .. 2))
  x.setMask((MUTEDET.uint32 shl 1).masked(1 .. 1))
  x.setMask((OVRUDR.uint32 shl 0).masked(0 .. 0))
  reg.write x.SAI1_ASR_Fields

template modifyIt*(reg: SAI1_ASR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_ACLRFR_Type): SAI1_ACLRFR_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_ACLRFR_Fields](reg.loc))

proc write*(reg: SAI1_ACLRFR_Type, val: SAI1_ACLRFR_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_ACLRFR_Fields](reg.loc), val)

proc write*(reg: SAI1_ACLRFR_Type, LFSDET: bool = false, CAFSDET: bool = false, CNRDY: bool = false, WCKCFG: bool = false, MUTEDET: bool = false, OVRUDR: bool = false) =
  var x: uint32
  x.setMask((LFSDET.uint32 shl 6).masked(6 .. 6))
  x.setMask((CAFSDET.uint32 shl 5).masked(5 .. 5))
  x.setMask((CNRDY.uint32 shl 4).masked(4 .. 4))
  x.setMask((WCKCFG.uint32 shl 2).masked(2 .. 2))
  x.setMask((MUTEDET.uint32 shl 1).masked(1 .. 1))
  x.setMask((OVRUDR.uint32 shl 0).masked(0 .. 0))
  reg.write x.SAI1_ACLRFR_Fields

template modifyIt*(reg: SAI1_ACLRFR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_ADR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: SAI1_ADR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: SAI1_ADR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SAI1_GCR_Type): SAI1_GCR_Fields {.inline.} =
  volatileLoad(cast[ptr SAI1_GCR_Fields](reg.loc))

proc write*(reg: SAI1_GCR_Type, val: SAI1_GCR_Fields) {.inline.} =
  volatileStore(cast[ptr SAI1_GCR_Fields](reg.loc), val)

proc write*(reg: SAI1_GCR_Type, SYNCIN: uint32 = 0, SYNCOUT: uint32 = 0) =
  var x: uint32
  x.setMask((SYNCIN shl 0).masked(0 .. 1))
  x.setMask((SYNCOUT shl 4).masked(4 .. 5))
  reg.write x.SAI1_GCR_Fields

template modifyIt*(reg: SAI1_GCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func MCJDIV*(r: SAI1_BCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `MCJDIV=`*(r: var SAI1_BCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.SAI1_BCR1_Fields

func NODIV*(r: SAI1_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `NODIV=`*(r: var SAI1_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.SAI1_BCR1_Fields

func DMAEN*(r: SAI1_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `DMAEN=`*(r: var SAI1_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.SAI1_BCR1_Fields

func SAIBEN*(r: SAI1_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `SAIBEN=`*(r: var SAI1_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.SAI1_BCR1_Fields

func OutDri*(r: SAI1_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `OutDri=`*(r: var SAI1_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.SAI1_BCR1_Fields

func MONO*(r: SAI1_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `MONO=`*(r: var SAI1_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.SAI1_BCR1_Fields

func SYNCEN*(r: SAI1_BCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `SYNCEN=`*(r: var SAI1_BCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.SAI1_BCR1_Fields

func CKSTR*(r: SAI1_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CKSTR=`*(r: var SAI1_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SAI1_BCR1_Fields

func LSBFIRST*(r: SAI1_BCR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LSBFIRST=`*(r: var SAI1_BCR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SAI1_BCR1_Fields

func DS*(r: SAI1_BCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 7)

proc `DS=`*(r: var SAI1_BCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 7)
  tmp.setMask((val shl 5).masked(5 .. 7))
  r = tmp.SAI1_BCR1_Fields

func PRTCFG*(r: SAI1_BCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `PRTCFG=`*(r: var SAI1_BCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.SAI1_BCR1_Fields

func MODE*(r: SAI1_BCR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `MODE=`*(r: var SAI1_BCR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.SAI1_BCR1_Fields

func COMP*(r: SAI1_BCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `COMP=`*(r: var SAI1_BCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.SAI1_BCR2_Fields

func CPL*(r: SAI1_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CPL=`*(r: var SAI1_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.SAI1_BCR2_Fields

func MUTECN*(r: SAI1_BCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 12)

proc `MUTECN=`*(r: var SAI1_BCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 12)
  tmp.setMask((val shl 7).masked(7 .. 12))
  r = tmp.SAI1_BCR2_Fields

func MUTEVAL*(r: SAI1_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `MUTEVAL=`*(r: var SAI1_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SAI1_BCR2_Fields

func MUTE*(r: SAI1_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `MUTE=`*(r: var SAI1_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SAI1_BCR2_Fields

func TRIS*(r: SAI1_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TRIS=`*(r: var SAI1_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SAI1_BCR2_Fields

func FFLUS*(r: SAI1_BCR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FFLUS=`*(r: var SAI1_BCR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SAI1_BCR2_Fields

func FTH*(r: SAI1_BCR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `FTH=`*(r: var SAI1_BCR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.SAI1_BCR2_Fields

func FSOFF*(r: SAI1_BFRCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FSOFF=`*(r: var SAI1_BFRCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.SAI1_BFRCR_Fields

func FSPOL*(r: SAI1_BFRCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FSPOL=`*(r: var SAI1_BFRCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.SAI1_BFRCR_Fields

func FSDEF*(r: SAI1_BFRCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FSDEF=`*(r: var SAI1_BFRCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.SAI1_BFRCR_Fields

func FSALL*(r: SAI1_BFRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 14)

proc `FSALL=`*(r: var SAI1_BFRCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 14)
  tmp.setMask((val shl 8).masked(8 .. 14))
  r = tmp.SAI1_BFRCR_Fields

func FRL*(r: SAI1_BFRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `FRL=`*(r: var SAI1_BFRCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.SAI1_BFRCR_Fields

func SLOTEN*(r: SAI1_BSLOTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `SLOTEN=`*(r: var SAI1_BSLOTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.SAI1_BSLOTR_Fields

func NBSLOT*(r: SAI1_BSLOTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `NBSLOT=`*(r: var SAI1_BSLOTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.SAI1_BSLOTR_Fields

func SLOTSZ*(r: SAI1_BSLOTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `SLOTSZ=`*(r: var SAI1_BSLOTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.SAI1_BSLOTR_Fields

func FBOFF*(r: SAI1_BSLOTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `FBOFF=`*(r: var SAI1_BSLOTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.SAI1_BSLOTR_Fields

func LFSDETIE*(r: SAI1_BIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LFSDETIE=`*(r: var SAI1_BIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SAI1_BIM_Fields

func AFSDETIE*(r: SAI1_BIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `AFSDETIE=`*(r: var SAI1_BIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SAI1_BIM_Fields

func CNRDYIE*(r: SAI1_BIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CNRDYIE=`*(r: var SAI1_BIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SAI1_BIM_Fields

func FREQIE*(r: SAI1_BIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FREQIE=`*(r: var SAI1_BIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SAI1_BIM_Fields

func WCKCFG*(r: SAI1_BIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `WCKCFG=`*(r: var SAI1_BIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SAI1_BIM_Fields

func MUTEDET*(r: SAI1_BIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MUTEDET=`*(r: var SAI1_BIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SAI1_BIM_Fields

func OVRUDRIE*(r: SAI1_BIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `OVRUDRIE=`*(r: var SAI1_BIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SAI1_BIM_Fields

func FLVL*(r: SAI1_BSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 18)

func LFSDET*(r: SAI1_BSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func AFSDET*(r: SAI1_BSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func CNRDY*(r: SAI1_BSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func FREQ*(r: SAI1_BSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func WCKCFG*(r: SAI1_BSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func MUTEDET*(r: SAI1_BSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func OVRUDR*(r: SAI1_BSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LFSDET=`*(r: var SAI1_BCLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SAI1_BCLRFR_Fields

proc `CAFSDET=`*(r: var SAI1_BCLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SAI1_BCLRFR_Fields

proc `CNRDY=`*(r: var SAI1_BCLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SAI1_BCLRFR_Fields

proc `WCKCFG=`*(r: var SAI1_BCLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SAI1_BCLRFR_Fields

proc `MUTEDET=`*(r: var SAI1_BCLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SAI1_BCLRFR_Fields

proc `OVRUDR=`*(r: var SAI1_BCLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SAI1_BCLRFR_Fields

func MCJDIV*(r: SAI1_ACR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(20 .. 23)

proc `MCJDIV=`*(r: var SAI1_ACR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 23)
  tmp.setMask((val shl 20).masked(20 .. 23))
  r = tmp.SAI1_ACR1_Fields

func NODIV*(r: SAI1_ACR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `NODIV=`*(r: var SAI1_ACR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.SAI1_ACR1_Fields

func DMAEN*(r: SAI1_ACR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `DMAEN=`*(r: var SAI1_ACR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.SAI1_ACR1_Fields

func SAIAEN*(r: SAI1_ACR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `SAIAEN=`*(r: var SAI1_ACR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.SAI1_ACR1_Fields

func OutDri*(r: SAI1_ACR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `OutDri=`*(r: var SAI1_ACR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.SAI1_ACR1_Fields

func MONO*(r: SAI1_ACR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `MONO=`*(r: var SAI1_ACR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.SAI1_ACR1_Fields

func SYNCEN*(r: SAI1_ACR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `SYNCEN=`*(r: var SAI1_ACR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.SAI1_ACR1_Fields

func CKSTR*(r: SAI1_ACR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `CKSTR=`*(r: var SAI1_ACR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SAI1_ACR1_Fields

func LSBFIRST*(r: SAI1_ACR1_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `LSBFIRST=`*(r: var SAI1_ACR1_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SAI1_ACR1_Fields

func DS*(r: SAI1_ACR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 7)

proc `DS=`*(r: var SAI1_ACR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 7)
  tmp.setMask((val shl 5).masked(5 .. 7))
  r = tmp.SAI1_ACR1_Fields

func PRTCFG*(r: SAI1_ACR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(2 .. 3)

proc `PRTCFG=`*(r: var SAI1_ACR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 3)
  tmp.setMask((val shl 2).masked(2 .. 3))
  r = tmp.SAI1_ACR1_Fields

func MODE*(r: SAI1_ACR1_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `MODE=`*(r: var SAI1_ACR1_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.SAI1_ACR1_Fields

func COMP*(r: SAI1_ACR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `COMP=`*(r: var SAI1_ACR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.SAI1_ACR2_Fields

func CPL*(r: SAI1_ACR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `CPL=`*(r: var SAI1_ACR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.SAI1_ACR2_Fields

func MUTECN*(r: SAI1_ACR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(7 .. 12)

proc `MUTECN=`*(r: var SAI1_ACR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 12)
  tmp.setMask((val shl 7).masked(7 .. 12))
  r = tmp.SAI1_ACR2_Fields

func MUTEVAL*(r: SAI1_ACR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `MUTEVAL=`*(r: var SAI1_ACR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SAI1_ACR2_Fields

func MUTE*(r: SAI1_ACR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `MUTE=`*(r: var SAI1_ACR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SAI1_ACR2_Fields

func TRIS*(r: SAI1_ACR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TRIS=`*(r: var SAI1_ACR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SAI1_ACR2_Fields

func FFLUS*(r: SAI1_ACR2_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FFLUS=`*(r: var SAI1_ACR2_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SAI1_ACR2_Fields

func FTH*(r: SAI1_ACR2_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `FTH=`*(r: var SAI1_ACR2_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.SAI1_ACR2_Fields

func FSOFF*(r: SAI1_AFRCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FSOFF=`*(r: var SAI1_AFRCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.SAI1_AFRCR_Fields

func FSPOL*(r: SAI1_AFRCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `FSPOL=`*(r: var SAI1_AFRCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.SAI1_AFRCR_Fields

func FSDEF*(r: SAI1_AFRCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `FSDEF=`*(r: var SAI1_AFRCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.SAI1_AFRCR_Fields

func FSALL*(r: SAI1_AFRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 14)

proc `FSALL=`*(r: var SAI1_AFRCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 14)
  tmp.setMask((val shl 8).masked(8 .. 14))
  r = tmp.SAI1_AFRCR_Fields

func FRL*(r: SAI1_AFRCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `FRL=`*(r: var SAI1_AFRCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.SAI1_AFRCR_Fields

func SLOTEN*(r: SAI1_ASLOTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 31)

proc `SLOTEN=`*(r: var SAI1_ASLOTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 31)
  tmp.setMask((val shl 16).masked(16 .. 31))
  r = tmp.SAI1_ASLOTR_Fields

func NBSLOT*(r: SAI1_ASLOTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 11)

proc `NBSLOT=`*(r: var SAI1_ASLOTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 11)
  tmp.setMask((val shl 8).masked(8 .. 11))
  r = tmp.SAI1_ASLOTR_Fields

func SLOTSZ*(r: SAI1_ASLOTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `SLOTSZ=`*(r: var SAI1_ASLOTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.SAI1_ASLOTR_Fields

func FBOFF*(r: SAI1_ASLOTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 4)

proc `FBOFF=`*(r: var SAI1_ASLOTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 4)
  tmp.setMask((val shl 0).masked(0 .. 4))
  r = tmp.SAI1_ASLOTR_Fields

func LFSDET*(r: SAI1_AIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LFSDET=`*(r: var SAI1_AIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SAI1_AIM_Fields

func AFSDETIE*(r: SAI1_AIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `AFSDETIE=`*(r: var SAI1_AIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SAI1_AIM_Fields

func CNRDYIE*(r: SAI1_AIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CNRDYIE=`*(r: var SAI1_AIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SAI1_AIM_Fields

func FREQIE*(r: SAI1_AIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FREQIE=`*(r: var SAI1_AIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SAI1_AIM_Fields

func WCKCFG*(r: SAI1_AIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `WCKCFG=`*(r: var SAI1_AIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SAI1_AIM_Fields

func MUTEDET*(r: SAI1_AIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MUTEDET=`*(r: var SAI1_AIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SAI1_AIM_Fields

func OVRUDRIE*(r: SAI1_AIM_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `OVRUDRIE=`*(r: var SAI1_AIM_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SAI1_AIM_Fields

func FLVL*(r: SAI1_ASR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 18)

proc `FLVL=`*(r: var SAI1_ASR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 18)
  tmp.setMask((val shl 16).masked(16 .. 18))
  r = tmp.SAI1_ASR_Fields

func LFSDET*(r: SAI1_ASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LFSDET=`*(r: var SAI1_ASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SAI1_ASR_Fields

func AFSDET*(r: SAI1_ASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `AFSDET=`*(r: var SAI1_ASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SAI1_ASR_Fields

func CNRDY*(r: SAI1_ASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CNRDY=`*(r: var SAI1_ASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SAI1_ASR_Fields

func FREQ*(r: SAI1_ASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `FREQ=`*(r: var SAI1_ASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SAI1_ASR_Fields

func WCKCFG*(r: SAI1_ASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `WCKCFG=`*(r: var SAI1_ASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SAI1_ASR_Fields

func MUTEDET*(r: SAI1_ASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MUTEDET=`*(r: var SAI1_ASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SAI1_ASR_Fields

func OVRUDR*(r: SAI1_ASR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `OVRUDR=`*(r: var SAI1_ASR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SAI1_ASR_Fields

func LFSDET*(r: SAI1_ACLRFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LFSDET=`*(r: var SAI1_ACLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SAI1_ACLRFR_Fields

func CAFSDET*(r: SAI1_ACLRFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `CAFSDET=`*(r: var SAI1_ACLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SAI1_ACLRFR_Fields

func CNRDY*(r: SAI1_ACLRFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CNRDY=`*(r: var SAI1_ACLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SAI1_ACLRFR_Fields

func WCKCFG*(r: SAI1_ACLRFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `WCKCFG=`*(r: var SAI1_ACLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SAI1_ACLRFR_Fields

func MUTEDET*(r: SAI1_ACLRFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `MUTEDET=`*(r: var SAI1_ACLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SAI1_ACLRFR_Fields

func OVRUDR*(r: SAI1_ACLRFR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `OVRUDR=`*(r: var SAI1_ACLRFR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SAI1_ACLRFR_Fields

func SYNCIN*(r: SAI1_GCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `SYNCIN=`*(r: var SAI1_GCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.SAI1_GCR_Fields

func SYNCOUT*(r: SAI1_GCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `SYNCOUT=`*(r: var SAI1_GCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.SAI1_GCR_Fields

type
  PWR_CR_Fields* = distinct uint32
  PWR_CSR_Fields* = distinct uint32

proc read*(reg: PWR_CR_Type): PWR_CR_Fields {.inline.} =
  volatileLoad(cast[ptr PWR_CR_Fields](reg.loc))

proc write*(reg: PWR_CR_Type, val: PWR_CR_Fields) {.inline.} =
  volatileStore(cast[ptr PWR_CR_Fields](reg.loc), val)

proc write*(reg: PWR_CR_Type, LPDS: bool = false, PDDS: bool = false, CWUF: bool = false, CSBF: bool = false, PVDE: bool = false, PLS: uint32 = 0, DBP: bool = false, FPDS: bool = false, LPLVDS: bool = false, MRLVDS: bool = false, ADCDC1: bool = false, VOS: uint32 = 3, ODEN: bool = false, ODSWEN: bool = false, UDEN: uint32 = 0, FMSSR: bool = false, FISSR: bool = false) =
  var x: uint32
  x.setMask((LPDS.uint32 shl 0).masked(0 .. 0))
  x.setMask((PDDS.uint32 shl 1).masked(1 .. 1))
  x.setMask((CWUF.uint32 shl 2).masked(2 .. 2))
  x.setMask((CSBF.uint32 shl 3).masked(3 .. 3))
  x.setMask((PVDE.uint32 shl 4).masked(4 .. 4))
  x.setMask((PLS shl 5).masked(5 .. 7))
  x.setMask((DBP.uint32 shl 8).masked(8 .. 8))
  x.setMask((FPDS.uint32 shl 9).masked(9 .. 9))
  x.setMask((LPLVDS.uint32 shl 10).masked(10 .. 10))
  x.setMask((MRLVDS.uint32 shl 11).masked(11 .. 11))
  x.setMask((ADCDC1.uint32 shl 13).masked(13 .. 13))
  x.setMask((VOS shl 14).masked(14 .. 15))
  x.setMask((ODEN.uint32 shl 16).masked(16 .. 16))
  x.setMask((ODSWEN.uint32 shl 17).masked(17 .. 17))
  x.setMask((UDEN shl 18).masked(18 .. 19))
  x.setMask((FMSSR.uint32 shl 20).masked(20 .. 20))
  x.setMask((FISSR.uint32 shl 21).masked(21 .. 21))
  reg.write x.PWR_CR_Fields

template modifyIt*(reg: PWR_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: PWR_CSR_Type): PWR_CSR_Fields {.inline.} =
  volatileLoad(cast[ptr PWR_CSR_Fields](reg.loc))

proc write*(reg: PWR_CSR_Type, val: PWR_CSR_Fields) {.inline.} =
  volatileStore(cast[ptr PWR_CSR_Fields](reg.loc), val)

proc write*(reg: PWR_CSR_Type, EWUP2: bool = false, EWUP: bool = false, BRE: bool = false, UDRDY: uint32 = 0) =
  var x: uint32
  x.setMask((EWUP2.uint32 shl 7).masked(7 .. 7))
  x.setMask((EWUP.uint32 shl 8).masked(8 .. 8))
  x.setMask((BRE.uint32 shl 9).masked(9 .. 9))
  x.setMask((UDRDY shl 18).masked(18 .. 19))
  reg.write x.PWR_CSR_Fields

template modifyIt*(reg: PWR_CSR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func LPDS*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `LPDS=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.PWR_CR_Fields

func PDDS*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `PDDS=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.PWR_CR_Fields

func CWUF*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CWUF=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.PWR_CR_Fields

func CSBF*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CSBF=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.PWR_CR_Fields

func PVDE*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `PVDE=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.PWR_CR_Fields

func PLS*(r: PWR_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(5 .. 7)

proc `PLS=`*(r: var PWR_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 7)
  tmp.setMask((val shl 5).masked(5 .. 7))
  r = tmp.PWR_CR_Fields

func DBP*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `DBP=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.PWR_CR_Fields

func FPDS*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `FPDS=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.PWR_CR_Fields

func LPLVDS*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `LPLVDS=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.PWR_CR_Fields

func MRLVDS*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `MRLVDS=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.PWR_CR_Fields

func ADCDC1*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `ADCDC1=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.PWR_CR_Fields

func VOS*(r: PWR_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `VOS=`*(r: var PWR_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.PWR_CR_Fields

func ODEN*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `ODEN=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.PWR_CR_Fields

func ODSWEN*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `ODSWEN=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.PWR_CR_Fields

func UDEN*(r: PWR_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `UDEN=`*(r: var PWR_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.PWR_CR_Fields

func FMSSR*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `FMSSR=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.PWR_CR_Fields

func FISSR*(r: PWR_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `FISSR=`*(r: var PWR_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.PWR_CR_Fields

func WUF*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func SBF*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func PVDO*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func BRR*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func EWUP2*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `EWUP2=`*(r: var PWR_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.PWR_CSR_Fields

func EWUP*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `EWUP=`*(r: var PWR_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.PWR_CSR_Fields

func BRE*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `BRE=`*(r: var PWR_CSR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.PWR_CSR_Fields

func VOSRDY*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

func ODRDY*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func ODSWRDY*(r: PWR_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func UDRDY*(r: PWR_CSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 19)

proc `UDRDY=`*(r: var PWR_CSR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 19)
  tmp.setMask((val shl 18).masked(18 .. 19))
  r = tmp.PWR_CSR_Fields

type
  QUADSPI_CR_Fields* = distinct uint32
  QUADSPI_DCR_Fields* = distinct uint32
  QUADSPI_SR_Fields* = distinct uint32
  QUADSPI_FCR_Fields* = distinct uint32
  QUADSPI_CCR_Fields* = distinct uint32
  QUADSPI_PIR_Fields* = distinct uint32
  QUADSPI_LPTR_Fields* = distinct uint32

proc read*(reg: QUADSPI_CR_Type): QUADSPI_CR_Fields {.inline.} =
  volatileLoad(cast[ptr QUADSPI_CR_Fields](reg.loc))

proc write*(reg: QUADSPI_CR_Type, val: QUADSPI_CR_Fields) {.inline.} =
  volatileStore(cast[ptr QUADSPI_CR_Fields](reg.loc), val)

proc write*(reg: QUADSPI_CR_Type, PRESCALER: uint32 = 0, PMM: bool = false, APMS: bool = false, TOIE: bool = false, SMIE: bool = false, FTIE: bool = false, TCIE: bool = false, TEIE: bool = false, FTHRES: uint32 = 0, FSEL: bool = false, DFM: bool = false, SSHIFT: bool = false, TCEN: bool = false, DMAEN: bool = false, ABORT: bool = false, EN: bool = false) =
  var x: uint32
  x.setMask((PRESCALER shl 24).masked(24 .. 31))
  x.setMask((PMM.uint32 shl 23).masked(23 .. 23))
  x.setMask((APMS.uint32 shl 22).masked(22 .. 22))
  x.setMask((TOIE.uint32 shl 20).masked(20 .. 20))
  x.setMask((SMIE.uint32 shl 19).masked(19 .. 19))
  x.setMask((FTIE.uint32 shl 18).masked(18 .. 18))
  x.setMask((TCIE.uint32 shl 17).masked(17 .. 17))
  x.setMask((TEIE.uint32 shl 16).masked(16 .. 16))
  x.setMask((FTHRES shl 8).masked(8 .. 12))
  x.setMask((FSEL.uint32 shl 7).masked(7 .. 7))
  x.setMask((DFM.uint32 shl 6).masked(6 .. 6))
  x.setMask((SSHIFT.uint32 shl 4).masked(4 .. 4))
  x.setMask((TCEN.uint32 shl 3).masked(3 .. 3))
  x.setMask((DMAEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((ABORT.uint32 shl 1).masked(1 .. 1))
  x.setMask((EN.uint32 shl 0).masked(0 .. 0))
  reg.write x.QUADSPI_CR_Fields

template modifyIt*(reg: QUADSPI_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_DCR_Type): QUADSPI_DCR_Fields {.inline.} =
  volatileLoad(cast[ptr QUADSPI_DCR_Fields](reg.loc))

proc write*(reg: QUADSPI_DCR_Type, val: QUADSPI_DCR_Fields) {.inline.} =
  volatileStore(cast[ptr QUADSPI_DCR_Fields](reg.loc), val)

proc write*(reg: QUADSPI_DCR_Type, FSIZE: uint32 = 0, CSHT: uint32 = 0, CKMODE: bool = false) =
  var x: uint32
  x.setMask((FSIZE shl 16).masked(16 .. 20))
  x.setMask((CSHT shl 8).masked(8 .. 10))
  x.setMask((CKMODE.uint32 shl 0).masked(0 .. 0))
  reg.write x.QUADSPI_DCR_Fields

template modifyIt*(reg: QUADSPI_DCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_SR_Type): QUADSPI_SR_Fields {.inline.} =
  volatileLoad(cast[ptr QUADSPI_SR_Fields](reg.loc))

proc read*(reg: QUADSPI_FCR_Type): QUADSPI_FCR_Fields {.inline.} =
  volatileLoad(cast[ptr QUADSPI_FCR_Fields](reg.loc))

proc write*(reg: QUADSPI_FCR_Type, val: QUADSPI_FCR_Fields) {.inline.} =
  volatileStore(cast[ptr QUADSPI_FCR_Fields](reg.loc), val)

proc write*(reg: QUADSPI_FCR_Type, CTOF: bool = false, CSMF: bool = false, CTCF: bool = false, CTEF: bool = false) =
  var x: uint32
  x.setMask((CTOF.uint32 shl 4).masked(4 .. 4))
  x.setMask((CSMF.uint32 shl 3).masked(3 .. 3))
  x.setMask((CTCF.uint32 shl 1).masked(1 .. 1))
  x.setMask((CTEF.uint32 shl 0).masked(0 .. 0))
  reg.write x.QUADSPI_FCR_Fields

template modifyIt*(reg: QUADSPI_FCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_DLR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: QUADSPI_DLR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: QUADSPI_DLR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_CCR_Type): QUADSPI_CCR_Fields {.inline.} =
  volatileLoad(cast[ptr QUADSPI_CCR_Fields](reg.loc))

proc write*(reg: QUADSPI_CCR_Type, val: QUADSPI_CCR_Fields) {.inline.} =
  volatileStore(cast[ptr QUADSPI_CCR_Fields](reg.loc), val)

proc write*(reg: QUADSPI_CCR_Type, DDRM: bool = false, DHHC: bool = false, SIOO: bool = false, FMODE: uint32 = 0, DMODE: uint32 = 0, DCYC: uint32 = 0, ABSIZE: uint32 = 0, ABMODE: uint32 = 0, ADSIZE: uint32 = 0, ADMODE: uint32 = 0, IMODE: uint32 = 0, INSTRUCTION: uint32 = 0) =
  var x: uint32
  x.setMask((DDRM.uint32 shl 31).masked(31 .. 31))
  x.setMask((DHHC.uint32 shl 30).masked(30 .. 30))
  x.setMask((SIOO.uint32 shl 28).masked(28 .. 28))
  x.setMask((FMODE shl 26).masked(26 .. 27))
  x.setMask((DMODE shl 24).masked(24 .. 25))
  x.setMask((DCYC shl 18).masked(18 .. 22))
  x.setMask((ABSIZE shl 16).masked(16 .. 17))
  x.setMask((ABMODE shl 14).masked(14 .. 15))
  x.setMask((ADSIZE shl 12).masked(12 .. 13))
  x.setMask((ADMODE shl 10).masked(10 .. 11))
  x.setMask((IMODE shl 8).masked(8 .. 9))
  x.setMask((INSTRUCTION shl 0).masked(0 .. 7))
  reg.write x.QUADSPI_CCR_Fields

template modifyIt*(reg: QUADSPI_CCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_AR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: QUADSPI_AR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: QUADSPI_AR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_ABR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: QUADSPI_ABR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: QUADSPI_ABR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_DR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: QUADSPI_DR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: QUADSPI_DR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_PSMKR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: QUADSPI_PSMKR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: QUADSPI_PSMKR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_PSMAR_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: QUADSPI_PSMAR_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: QUADSPI_PSMAR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_PIR_Type): QUADSPI_PIR_Fields {.inline.} =
  volatileLoad(cast[ptr QUADSPI_PIR_Fields](reg.loc))

proc write*(reg: QUADSPI_PIR_Type, val: QUADSPI_PIR_Fields) {.inline.} =
  volatileStore(cast[ptr QUADSPI_PIR_Fields](reg.loc), val)

proc write*(reg: QUADSPI_PIR_Type, INTERVAL: uint32 = 0) =
  var x: uint32
  x.setMask((INTERVAL shl 0).masked(0 .. 15))
  reg.write x.QUADSPI_PIR_Fields

template modifyIt*(reg: QUADSPI_PIR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: QUADSPI_LPTR_Type): QUADSPI_LPTR_Fields {.inline.} =
  volatileLoad(cast[ptr QUADSPI_LPTR_Fields](reg.loc))

proc write*(reg: QUADSPI_LPTR_Type, val: QUADSPI_LPTR_Fields) {.inline.} =
  volatileStore(cast[ptr QUADSPI_LPTR_Fields](reg.loc), val)

proc write*(reg: QUADSPI_LPTR_Type, TIMEOUT: uint32 = 0) =
  var x: uint32
  x.setMask((TIMEOUT shl 0).masked(0 .. 15))
  reg.write x.QUADSPI_LPTR_Fields

template modifyIt*(reg: QUADSPI_LPTR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func PRESCALER*(r: QUADSPI_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 31)

proc `PRESCALER=`*(r: var QUADSPI_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 31)
  tmp.setMask((val shl 24).masked(24 .. 31))
  r = tmp.QUADSPI_CR_Fields

func PMM*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `PMM=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.QUADSPI_CR_Fields

func APMS*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `APMS=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.QUADSPI_CR_Fields

func TOIE*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `TOIE=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.QUADSPI_CR_Fields

func SMIE*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `SMIE=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.QUADSPI_CR_Fields

func FTIE*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `FTIE=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.QUADSPI_CR_Fields

func TCIE*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `TCIE=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.QUADSPI_CR_Fields

func TEIE*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TEIE=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.QUADSPI_CR_Fields

func FTHRES*(r: QUADSPI_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 12)

proc `FTHRES=`*(r: var QUADSPI_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 12)
  tmp.setMask((val shl 8).masked(8 .. 12))
  r = tmp.QUADSPI_CR_Fields

func FSEL*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `FSEL=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.QUADSPI_CR_Fields

func DFM*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `DFM=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.QUADSPI_CR_Fields

func SSHIFT*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `SSHIFT=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.QUADSPI_CR_Fields

func TCEN*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `TCEN=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.QUADSPI_CR_Fields

func DMAEN*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DMAEN=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.QUADSPI_CR_Fields

func ABORT*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `ABORT=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.QUADSPI_CR_Fields

func EN*(r: QUADSPI_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `EN=`*(r: var QUADSPI_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.QUADSPI_CR_Fields

func FSIZE*(r: QUADSPI_DCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 20)

proc `FSIZE=`*(r: var QUADSPI_DCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 20)
  tmp.setMask((val shl 16).masked(16 .. 20))
  r = tmp.QUADSPI_DCR_Fields

func CSHT*(r: QUADSPI_DCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 10)

proc `CSHT=`*(r: var QUADSPI_DCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 10)
  tmp.setMask((val shl 8).masked(8 .. 10))
  r = tmp.QUADSPI_DCR_Fields

func CKMODE*(r: QUADSPI_DCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CKMODE=`*(r: var QUADSPI_DCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.QUADSPI_DCR_Fields

func FLEVEL*(r: QUADSPI_SR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 14)

func BUSY*(r: QUADSPI_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func TOF*(r: QUADSPI_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func SMF*(r: QUADSPI_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func FTF*(r: QUADSPI_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func TCF*(r: QUADSPI_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func TEF*(r: QUADSPI_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func CTOF*(r: QUADSPI_FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `CTOF=`*(r: var QUADSPI_FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.QUADSPI_FCR_Fields

func CSMF*(r: QUADSPI_FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `CSMF=`*(r: var QUADSPI_FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.QUADSPI_FCR_Fields

func CTCF*(r: QUADSPI_FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CTCF=`*(r: var QUADSPI_FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.QUADSPI_FCR_Fields

func CTEF*(r: QUADSPI_FCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CTEF=`*(r: var QUADSPI_FCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.QUADSPI_FCR_Fields

func DDRM*(r: QUADSPI_CCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `DDRM=`*(r: var QUADSPI_CCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.QUADSPI_CCR_Fields

func DHHC*(r: QUADSPI_CCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(30 .. 30).bool

proc `DHHC=`*(r: var QUADSPI_CCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(30 .. 30)
  tmp.setMask((val.uint32 shl 30).masked(30 .. 30))
  r = tmp.QUADSPI_CCR_Fields

func SIOO*(r: QUADSPI_CCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(28 .. 28).bool

proc `SIOO=`*(r: var QUADSPI_CCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(28 .. 28)
  tmp.setMask((val.uint32 shl 28).masked(28 .. 28))
  r = tmp.QUADSPI_CCR_Fields

func FMODE*(r: QUADSPI_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(26 .. 27)

proc `FMODE=`*(r: var QUADSPI_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(26 .. 27)
  tmp.setMask((val shl 26).masked(26 .. 27))
  r = tmp.QUADSPI_CCR_Fields

func DMODE*(r: QUADSPI_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(24 .. 25)

proc `DMODE=`*(r: var QUADSPI_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(24 .. 25)
  tmp.setMask((val shl 24).masked(24 .. 25))
  r = tmp.QUADSPI_CCR_Fields

func DCYC*(r: QUADSPI_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(18 .. 22)

proc `DCYC=`*(r: var QUADSPI_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 22)
  tmp.setMask((val shl 18).masked(18 .. 22))
  r = tmp.QUADSPI_CCR_Fields

func ABSIZE*(r: QUADSPI_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 17)

proc `ABSIZE=`*(r: var QUADSPI_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 17)
  tmp.setMask((val shl 16).masked(16 .. 17))
  r = tmp.QUADSPI_CCR_Fields

func ABMODE*(r: QUADSPI_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(14 .. 15)

proc `ABMODE=`*(r: var QUADSPI_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 15)
  tmp.setMask((val shl 14).masked(14 .. 15))
  r = tmp.QUADSPI_CCR_Fields

func ADSIZE*(r: QUADSPI_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `ADSIZE=`*(r: var QUADSPI_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.QUADSPI_CCR_Fields

func ADMODE*(r: QUADSPI_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(10 .. 11)

proc `ADMODE=`*(r: var QUADSPI_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 11)
  tmp.setMask((val shl 10).masked(10 .. 11))
  r = tmp.QUADSPI_CCR_Fields

func IMODE*(r: QUADSPI_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(8 .. 9)

proc `IMODE=`*(r: var QUADSPI_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 9)
  tmp.setMask((val shl 8).masked(8 .. 9))
  r = tmp.QUADSPI_CCR_Fields

func INSTRUCTION*(r: QUADSPI_CCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `INSTRUCTION=`*(r: var QUADSPI_CCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.QUADSPI_CCR_Fields

func INTERVAL*(r: QUADSPI_PIR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `INTERVAL=`*(r: var QUADSPI_PIR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.QUADSPI_PIR_Fields

func TIMEOUT*(r: QUADSPI_LPTR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

proc `TIMEOUT=`*(r: var QUADSPI_LPTR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 15)
  tmp.setMask((val shl 0).masked(0 .. 15))
  r = tmp.QUADSPI_LPTR_Fields

type
  SPDIF_RX_CR_Fields* = distinct uint32
  SPDIF_RX_IMR_Fields* = distinct uint32
  SPDIF_RX_SR_Fields* = distinct uint32
  SPDIF_RX_IFCR_Fields* = distinct uint32
  SPDIF_RX_DR_Fields* = distinct uint32
  SPDIF_RX_CSR_Fields* = distinct uint32
  SPDIF_RX_DIR_Fields* = distinct uint32

proc read*(reg: SPDIF_RX_CR_Type): SPDIF_RX_CR_Fields {.inline.} =
  volatileLoad(cast[ptr SPDIF_RX_CR_Fields](reg.loc))

proc write*(reg: SPDIF_RX_CR_Type, val: SPDIF_RX_CR_Fields) {.inline.} =
  volatileStore(cast[ptr SPDIF_RX_CR_Fields](reg.loc), val)

proc write*(reg: SPDIF_RX_CR_Type, SPDIFEN: uint32 = 0, RXDMAEN: bool = false, RXSTEO: bool = false, DRFMT: uint32 = 0, PMSK: bool = false, VMSK: bool = false, CUMSK: bool = false, PTMSK: bool = false, CBDMAEN: bool = false, CHSEL: bool = false, NBTR: uint32 = 0, WFA: bool = false, INSEL: uint32 = 0) =
  var x: uint32
  x.setMask((SPDIFEN shl 0).masked(0 .. 1))
  x.setMask((RXDMAEN.uint32 shl 2).masked(2 .. 2))
  x.setMask((RXSTEO.uint32 shl 3).masked(3 .. 3))
  x.setMask((DRFMT shl 4).masked(4 .. 5))
  x.setMask((PMSK.uint32 shl 6).masked(6 .. 6))
  x.setMask((VMSK.uint32 shl 7).masked(7 .. 7))
  x.setMask((CUMSK.uint32 shl 8).masked(8 .. 8))
  x.setMask((PTMSK.uint32 shl 9).masked(9 .. 9))
  x.setMask((CBDMAEN.uint32 shl 10).masked(10 .. 10))
  x.setMask((CHSEL.uint32 shl 11).masked(11 .. 11))
  x.setMask((NBTR shl 12).masked(12 .. 13))
  x.setMask((WFA.uint32 shl 14).masked(14 .. 14))
  x.setMask((INSEL shl 16).masked(16 .. 18))
  reg.write x.SPDIF_RX_CR_Fields

template modifyIt*(reg: SPDIF_RX_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPDIF_RX_IMR_Type): SPDIF_RX_IMR_Fields {.inline.} =
  volatileLoad(cast[ptr SPDIF_RX_IMR_Fields](reg.loc))

proc write*(reg: SPDIF_RX_IMR_Type, val: SPDIF_RX_IMR_Fields) {.inline.} =
  volatileStore(cast[ptr SPDIF_RX_IMR_Fields](reg.loc), val)

proc write*(reg: SPDIF_RX_IMR_Type, RXNEIE: bool = false, CSRNEIE: bool = false, PERRIE: bool = false, OVRIE: bool = false, SBLKIE: bool = false, SYNCDIE: bool = false, IFEIE: bool = false) =
  var x: uint32
  x.setMask((RXNEIE.uint32 shl 0).masked(0 .. 0))
  x.setMask((CSRNEIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((PERRIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((OVRIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((SBLKIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((SYNCDIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((IFEIE.uint32 shl 6).masked(6 .. 6))
  reg.write x.SPDIF_RX_IMR_Fields

template modifyIt*(reg: SPDIF_RX_IMR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SPDIF_RX_SR_Type): SPDIF_RX_SR_Fields {.inline.} =
  volatileLoad(cast[ptr SPDIF_RX_SR_Fields](reg.loc))

proc write*(reg: SPDIF_RX_IFCR_Type, val: SPDIF_RX_IFCR_Fields) {.inline.} =
  volatileStore(cast[ptr SPDIF_RX_IFCR_Fields](reg.loc), val)

proc write*(reg: SPDIF_RX_IFCR_Type, PERRCF: bool = false, OVRCF: bool = false, SBDCF: bool = false, SYNCDCF: bool = false) =
  var x: uint32
  x.setMask((PERRCF.uint32 shl 2).masked(2 .. 2))
  x.setMask((OVRCF.uint32 shl 3).masked(3 .. 3))
  x.setMask((SBDCF.uint32 shl 4).masked(4 .. 4))
  x.setMask((SYNCDCF.uint32 shl 5).masked(5 .. 5))
  reg.write x.SPDIF_RX_IFCR_Fields

proc read*(reg: SPDIF_RX_DR_Type): SPDIF_RX_DR_Fields {.inline.} =
  volatileLoad(cast[ptr SPDIF_RX_DR_Fields](reg.loc))

proc read*(reg: SPDIF_RX_CSR_Type): SPDIF_RX_CSR_Fields {.inline.} =
  volatileLoad(cast[ptr SPDIF_RX_CSR_Fields](reg.loc))

proc read*(reg: SPDIF_RX_DIR_Type): SPDIF_RX_DIR_Fields {.inline.} =
  volatileLoad(cast[ptr SPDIF_RX_DIR_Fields](reg.loc))

func SPDIFEN*(r: SPDIF_RX_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `SPDIFEN=`*(r: var SPDIF_RX_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.SPDIF_RX_CR_Fields

func RXDMAEN*(r: SPDIF_RX_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `RXDMAEN=`*(r: var SPDIF_RX_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SPDIF_RX_CR_Fields

func RXSTEO*(r: SPDIF_RX_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `RXSTEO=`*(r: var SPDIF_RX_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SPDIF_RX_CR_Fields

func DRFMT*(r: SPDIF_RX_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 5)

proc `DRFMT=`*(r: var SPDIF_RX_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 5)
  tmp.setMask((val shl 4).masked(4 .. 5))
  r = tmp.SPDIF_RX_CR_Fields

func PMSK*(r: SPDIF_RX_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `PMSK=`*(r: var SPDIF_RX_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SPDIF_RX_CR_Fields

func VMSK*(r: SPDIF_RX_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `VMSK=`*(r: var SPDIF_RX_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SPDIF_RX_CR_Fields

func CUMSK*(r: SPDIF_RX_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CUMSK=`*(r: var SPDIF_RX_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SPDIF_RX_CR_Fields

func PTMSK*(r: SPDIF_RX_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PTMSK=`*(r: var SPDIF_RX_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SPDIF_RX_CR_Fields

func CBDMAEN*(r: SPDIF_RX_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CBDMAEN=`*(r: var SPDIF_RX_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SPDIF_RX_CR_Fields

func CHSEL*(r: SPDIF_RX_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CHSEL=`*(r: var SPDIF_RX_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.SPDIF_RX_CR_Fields

func NBTR*(r: SPDIF_RX_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(12 .. 13)

proc `NBTR=`*(r: var SPDIF_RX_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 13)
  tmp.setMask((val shl 12).masked(12 .. 13))
  r = tmp.SPDIF_RX_CR_Fields

func WFA*(r: SPDIF_RX_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `WFA=`*(r: var SPDIF_RX_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.SPDIF_RX_CR_Fields

func INSEL*(r: SPDIF_RX_CR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 18)

proc `INSEL=`*(r: var SPDIF_RX_CR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 18)
  tmp.setMask((val shl 16).masked(16 .. 18))
  r = tmp.SPDIF_RX_CR_Fields

func RXNEIE*(r: SPDIF_RX_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `RXNEIE=`*(r: var SPDIF_RX_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SPDIF_RX_IMR_Fields

func CSRNEIE*(r: SPDIF_RX_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `CSRNEIE=`*(r: var SPDIF_RX_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SPDIF_RX_IMR_Fields

func PERRIE*(r: SPDIF_RX_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `PERRIE=`*(r: var SPDIF_RX_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SPDIF_RX_IMR_Fields

func OVRIE*(r: SPDIF_RX_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `OVRIE=`*(r: var SPDIF_RX_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SPDIF_RX_IMR_Fields

func SBLKIE*(r: SPDIF_RX_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `SBLKIE=`*(r: var SPDIF_RX_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SPDIF_RX_IMR_Fields

func SYNCDIE*(r: SPDIF_RX_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `SYNCDIE=`*(r: var SPDIF_RX_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SPDIF_RX_IMR_Fields

func IFEIE*(r: SPDIF_RX_IMR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `IFEIE=`*(r: var SPDIF_RX_IMR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SPDIF_RX_IMR_Fields

func RXNE*(r: SPDIF_RX_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func CSRNE*(r: SPDIF_RX_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func PERR*(r: SPDIF_RX_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func OVR*(r: SPDIF_RX_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func SBD*(r: SPDIF_RX_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func SYNCD*(r: SPDIF_RX_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func FERR*(r: SPDIF_RX_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func SERR*(r: SPDIF_RX_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func TERR*(r: SPDIF_RX_SR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func WIDTH5*(r: SPDIF_RX_SR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 30)

proc `PERRCF=`*(r: var SPDIF_RX_IFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SPDIF_RX_IFCR_Fields

proc `OVRCF=`*(r: var SPDIF_RX_IFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SPDIF_RX_IFCR_Fields

proc `SBDCF=`*(r: var SPDIF_RX_IFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SPDIF_RX_IFCR_Fields

proc `SYNCDCF=`*(r: var SPDIF_RX_IFCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SPDIF_RX_IFCR_Fields

func DR*(r: SPDIF_RX_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 23)

func PE*(r: SPDIF_RX_DR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

func V*(r: SPDIF_RX_DR_Fields): bool {.inline.} =
  r.uint32.bitsliced(25 .. 25).bool

func U*(r: SPDIF_RX_DR_Fields): bool {.inline.} =
  r.uint32.bitsliced(26 .. 26).bool

func C*(r: SPDIF_RX_DR_Fields): bool {.inline.} =
  r.uint32.bitsliced(27 .. 27).bool

func PT*(r: SPDIF_RX_DR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(28 .. 29)

func USR*(r: SPDIF_RX_CSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 15)

func CS*(r: SPDIF_RX_CSR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 23)

func SOB*(r: SPDIF_RX_CSR_Fields): bool {.inline.} =
  r.uint32.bitsliced(24 .. 24).bool

func THI*(r: SPDIF_RX_DIR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 12)

func TLO*(r: SPDIF_RX_DIR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 28)

type
  HDMI_CEC_CEC_CR_Fields* = distinct uint32
  HDMI_CEC_CEC_CFGR_Fields* = distinct uint32
  HDMI_CEC_CEC_TXDR_Fields* = distinct uint32
  HDMI_CEC_CEC_RXDR_Fields* = distinct uint32
  HDMI_CEC_CEC_ISR_Fields* = distinct uint32
  HDMI_CEC_CEC_IER_Fields* = distinct uint32

proc read*(reg: HDMI_CEC_CEC_CR_Type): HDMI_CEC_CEC_CR_Fields {.inline.} =
  volatileLoad(cast[ptr HDMI_CEC_CEC_CR_Fields](reg.loc))

proc write*(reg: HDMI_CEC_CEC_CR_Type, val: HDMI_CEC_CEC_CR_Fields) {.inline.} =
  volatileStore(cast[ptr HDMI_CEC_CEC_CR_Fields](reg.loc), val)

proc write*(reg: HDMI_CEC_CEC_CR_Type, CECEN: bool = false) =
  var x: uint32
  x.setMask((CECEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.HDMI_CEC_CEC_CR_Fields

template modifyIt*(reg: HDMI_CEC_CEC_CR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: HDMI_CEC_CEC_CFGR_Type): HDMI_CEC_CEC_CFGR_Fields {.inline.} =
  volatileLoad(cast[ptr HDMI_CEC_CEC_CFGR_Fields](reg.loc))

proc write*(reg: HDMI_CEC_CEC_CFGR_Type, val: HDMI_CEC_CEC_CFGR_Fields) {.inline.} =
  volatileStore(cast[ptr HDMI_CEC_CEC_CFGR_Fields](reg.loc), val)

proc write*(reg: HDMI_CEC_CEC_CFGR_Type, LSTN: bool = false, OAR: uint32 = 0, SFTOP: bool = false, BRDNOGEN: bool = false, LBPEGEN: bool = false, BREGEN: bool = false, BRESTP: bool = false, RXTOL: bool = false, SFT: uint32 = 0) =
  var x: uint32
  x.setMask((LSTN.uint32 shl 31).masked(31 .. 31))
  x.setMask((OAR shl 16).masked(16 .. 30))
  x.setMask((SFTOP.uint32 shl 8).masked(8 .. 8))
  x.setMask((BRDNOGEN.uint32 shl 7).masked(7 .. 7))
  x.setMask((LBPEGEN.uint32 shl 6).masked(6 .. 6))
  x.setMask((BREGEN.uint32 shl 5).masked(5 .. 5))
  x.setMask((BRESTP.uint32 shl 4).masked(4 .. 4))
  x.setMask((RXTOL.uint32 shl 3).masked(3 .. 3))
  x.setMask((SFT shl 0).masked(0 .. 2))
  reg.write x.HDMI_CEC_CEC_CFGR_Fields

template modifyIt*(reg: HDMI_CEC_CEC_CFGR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc write*(reg: HDMI_CEC_CEC_TXDR_Type, val: HDMI_CEC_CEC_TXDR_Fields) {.inline.} =
  volatileStore(cast[ptr HDMI_CEC_CEC_TXDR_Fields](reg.loc), val)

proc write*(reg: HDMI_CEC_CEC_TXDR_Type, TXD: uint32 = 0) =
  var x: uint32
  x.setMask((TXD shl 0).masked(0 .. 7))
  reg.write x.HDMI_CEC_CEC_TXDR_Fields

proc read*(reg: HDMI_CEC_CEC_RXDR_Type): HDMI_CEC_CEC_RXDR_Fields {.inline.} =
  volatileLoad(cast[ptr HDMI_CEC_CEC_RXDR_Fields](reg.loc))

proc read*(reg: HDMI_CEC_CEC_ISR_Type): HDMI_CEC_CEC_ISR_Fields {.inline.} =
  volatileLoad(cast[ptr HDMI_CEC_CEC_ISR_Fields](reg.loc))

proc write*(reg: HDMI_CEC_CEC_ISR_Type, val: HDMI_CEC_CEC_ISR_Fields) {.inline.} =
  volatileStore(cast[ptr HDMI_CEC_CEC_ISR_Fields](reg.loc), val)

proc write*(reg: HDMI_CEC_CEC_ISR_Type, TXACKE: bool = false, TXERR: bool = false, TXUDR: bool = false, TXEND: bool = false, TXBR: bool = false, ARBLST: bool = false, RXACKE: bool = false, LBPE: bool = false, SBPE: bool = false, BRE: bool = false, RXOVR: bool = false, RXEND: bool = false, RXBR: bool = false) =
  var x: uint32
  x.setMask((TXACKE.uint32 shl 12).masked(12 .. 12))
  x.setMask((TXERR.uint32 shl 11).masked(11 .. 11))
  x.setMask((TXUDR.uint32 shl 10).masked(10 .. 10))
  x.setMask((TXEND.uint32 shl 9).masked(9 .. 9))
  x.setMask((TXBR.uint32 shl 8).masked(8 .. 8))
  x.setMask((ARBLST.uint32 shl 7).masked(7 .. 7))
  x.setMask((RXACKE.uint32 shl 6).masked(6 .. 6))
  x.setMask((LBPE.uint32 shl 5).masked(5 .. 5))
  x.setMask((SBPE.uint32 shl 4).masked(4 .. 4))
  x.setMask((BRE.uint32 shl 3).masked(3 .. 3))
  x.setMask((RXOVR.uint32 shl 2).masked(2 .. 2))
  x.setMask((RXEND.uint32 shl 1).masked(1 .. 1))
  x.setMask((RXBR.uint32 shl 0).masked(0 .. 0))
  reg.write x.HDMI_CEC_CEC_ISR_Fields

template modifyIt*(reg: HDMI_CEC_CEC_ISR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: HDMI_CEC_CEC_IER_Type): HDMI_CEC_CEC_IER_Fields {.inline.} =
  volatileLoad(cast[ptr HDMI_CEC_CEC_IER_Fields](reg.loc))

proc write*(reg: HDMI_CEC_CEC_IER_Type, val: HDMI_CEC_CEC_IER_Fields) {.inline.} =
  volatileStore(cast[ptr HDMI_CEC_CEC_IER_Fields](reg.loc), val)

proc write*(reg: HDMI_CEC_CEC_IER_Type, TXACKIE: bool = false, TXERRIE: bool = false, TXUDRIE: bool = false, TXENDIE: bool = false, TXBRIE: bool = false, ARBLSTIE: bool = false, RXACKIE: bool = false, LBPEIE: bool = false, SBPEIE: bool = false, BREIE: bool = false, RXOVRIE: bool = false, RXENDIE: bool = false, RXBRIE: bool = false) =
  var x: uint32
  x.setMask((TXACKIE.uint32 shl 12).masked(12 .. 12))
  x.setMask((TXERRIE.uint32 shl 11).masked(11 .. 11))
  x.setMask((TXUDRIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((TXENDIE.uint32 shl 9).masked(9 .. 9))
  x.setMask((TXBRIE.uint32 shl 8).masked(8 .. 8))
  x.setMask((ARBLSTIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((RXACKIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((LBPEIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((SBPEIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((BREIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((RXOVRIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((RXENDIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((RXBRIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.HDMI_CEC_CEC_IER_Fields

template modifyIt*(reg: HDMI_CEC_CEC_IER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func TXEOM*(r: HDMI_CEC_CEC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func TXSOM*(r: HDMI_CEC_CEC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func CECEN*(r: HDMI_CEC_CEC_CR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CECEN=`*(r: var HDMI_CEC_CEC_CR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.HDMI_CEC_CEC_CR_Fields

func LSTN*(r: HDMI_CEC_CEC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(31 .. 31).bool

proc `LSTN=`*(r: var HDMI_CEC_CEC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(31 .. 31)
  tmp.setMask((val.uint32 shl 31).masked(31 .. 31))
  r = tmp.HDMI_CEC_CEC_CFGR_Fields

func OAR*(r: HDMI_CEC_CEC_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(16 .. 30)

proc `OAR=`*(r: var HDMI_CEC_CEC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 30)
  tmp.setMask((val shl 16).masked(16 .. 30))
  r = tmp.HDMI_CEC_CEC_CFGR_Fields

func SFTOP*(r: HDMI_CEC_CEC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `SFTOP=`*(r: var HDMI_CEC_CEC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.HDMI_CEC_CEC_CFGR_Fields

func BRDNOGEN*(r: HDMI_CEC_CEC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `BRDNOGEN=`*(r: var HDMI_CEC_CEC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.HDMI_CEC_CEC_CFGR_Fields

func LBPEGEN*(r: HDMI_CEC_CEC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `LBPEGEN=`*(r: var HDMI_CEC_CEC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.HDMI_CEC_CEC_CFGR_Fields

func BREGEN*(r: HDMI_CEC_CEC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `BREGEN=`*(r: var HDMI_CEC_CEC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.HDMI_CEC_CEC_CFGR_Fields

func BRESTP*(r: HDMI_CEC_CEC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `BRESTP=`*(r: var HDMI_CEC_CEC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.HDMI_CEC_CEC_CFGR_Fields

func RXTOL*(r: HDMI_CEC_CEC_CFGR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `RXTOL=`*(r: var HDMI_CEC_CEC_CFGR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.HDMI_CEC_CEC_CFGR_Fields

func SFT*(r: HDMI_CEC_CEC_CFGR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 2)

proc `SFT=`*(r: var HDMI_CEC_CEC_CFGR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 2)
  tmp.setMask((val shl 0).masked(0 .. 2))
  r = tmp.HDMI_CEC_CEC_CFGR_Fields

proc `TXD=`*(r: var HDMI_CEC_CEC_TXDR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.HDMI_CEC_CEC_TXDR_Fields

func RXD*(r: HDMI_CEC_CEC_RXDR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

func TXACKE*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `TXACKE=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func TXERR*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TXERR=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func TXUDR*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `TXUDR=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func TXEND*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TXEND=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func TXBR*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXBR=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func ARBLST*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARBLST=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func RXACKE*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `RXACKE=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func LBPE*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `LBPE=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func SBPE*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `SBPE=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func BRE*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `BRE=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func RXOVR*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `RXOVR=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func RXEND*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RXEND=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func RXBR*(r: HDMI_CEC_CEC_ISR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `RXBR=`*(r: var HDMI_CEC_CEC_ISR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.HDMI_CEC_CEC_ISR_Fields

func TXACKIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `TXACKIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func TXERRIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `TXERRIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func TXUDRIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `TXUDRIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func TXENDIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `TXENDIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func TXBRIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `TXBRIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func ARBLSTIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `ARBLSTIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func RXACKIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `RXACKIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func LBPEIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `LBPEIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func SBPEIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `SBPEIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func BREIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `BREIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func RXOVRIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `RXOVRIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func RXENDIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `RXENDIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.HDMI_CEC_CEC_IER_Fields

func RXBRIE*(r: HDMI_CEC_CEC_IER_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `RXBRIE=`*(r: var HDMI_CEC_CEC_IER_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.HDMI_CEC_CEC_IER_Fields

type
  SDIO_POWER_Fields* = distinct uint32
  SDIO_CLKCR_Fields* = distinct uint32
  SDIO_CMD_Fields* = distinct uint32
  SDIO_RESPCMD_Fields* = distinct uint32
  SDIO_DLEN_Fields* = distinct uint32
  SDIO_DCTRL_Fields* = distinct uint32
  SDIO_DCOUNT_Fields* = distinct uint32
  SDIO_STA_Fields* = distinct uint32
  SDIO_ICR_Fields* = distinct uint32
  SDIO_MASK_Fields* = distinct uint32
  SDIO_FIFOCNT_Fields* = distinct uint32

proc read*(reg: SDIO_POWER_Type): SDIO_POWER_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_POWER_Fields](reg.loc))

proc write*(reg: SDIO_POWER_Type, val: SDIO_POWER_Fields) {.inline.} =
  volatileStore(cast[ptr SDIO_POWER_Fields](reg.loc), val)

proc write*(reg: SDIO_POWER_Type, PWRCTRL: uint32 = 0) =
  var x: uint32
  x.setMask((PWRCTRL shl 0).masked(0 .. 1))
  reg.write x.SDIO_POWER_Fields

template modifyIt*(reg: SDIO_POWER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SDIO_CLKCR_Type): SDIO_CLKCR_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_CLKCR_Fields](reg.loc))

proc write*(reg: SDIO_CLKCR_Type, val: SDIO_CLKCR_Fields) {.inline.} =
  volatileStore(cast[ptr SDIO_CLKCR_Fields](reg.loc), val)

proc write*(reg: SDIO_CLKCR_Type, HWFC_EN: bool = false, NEGEDGE: bool = false, WIDBUS: uint32 = 0, BYPASS: bool = false, PWRSAV: bool = false, CLKEN: bool = false, CLKDIV: uint32 = 0) =
  var x: uint32
  x.setMask((HWFC_EN.uint32 shl 14).masked(14 .. 14))
  x.setMask((NEGEDGE.uint32 shl 13).masked(13 .. 13))
  x.setMask((WIDBUS shl 11).masked(11 .. 12))
  x.setMask((BYPASS.uint32 shl 10).masked(10 .. 10))
  x.setMask((PWRSAV.uint32 shl 9).masked(9 .. 9))
  x.setMask((CLKEN.uint32 shl 8).masked(8 .. 8))
  x.setMask((CLKDIV shl 0).masked(0 .. 7))
  reg.write x.SDIO_CLKCR_Fields

template modifyIt*(reg: SDIO_CLKCR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SDIO_ARG_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: SDIO_ARG_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: SDIO_ARG_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SDIO_CMD_Type): SDIO_CMD_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_CMD_Fields](reg.loc))

proc write*(reg: SDIO_CMD_Type, val: SDIO_CMD_Fields) {.inline.} =
  volatileStore(cast[ptr SDIO_CMD_Fields](reg.loc), val)

proc write*(reg: SDIO_CMD_Type, CE_ATACMD: bool = false, nIEN: bool = false, ENCMDcompl: bool = false, SDIOSuspend: bool = false, CPSMEN: bool = false, WAITPEND: bool = false, WAITINT: bool = false, WAITRESP: uint32 = 0, CMDINDEX: uint32 = 0) =
  var x: uint32
  x.setMask((CE_ATACMD.uint32 shl 14).masked(14 .. 14))
  x.setMask((nIEN.uint32 shl 13).masked(13 .. 13))
  x.setMask((ENCMDcompl.uint32 shl 12).masked(12 .. 12))
  x.setMask((SDIOSuspend.uint32 shl 11).masked(11 .. 11))
  x.setMask((CPSMEN.uint32 shl 10).masked(10 .. 10))
  x.setMask((WAITPEND.uint32 shl 9).masked(9 .. 9))
  x.setMask((WAITINT.uint32 shl 8).masked(8 .. 8))
  x.setMask((WAITRESP shl 6).masked(6 .. 7))
  x.setMask((CMDINDEX shl 0).masked(0 .. 5))
  reg.write x.SDIO_CMD_Fields

template modifyIt*(reg: SDIO_CMD_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SDIO_RESPCMD_Type): SDIO_RESPCMD_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_RESPCMD_Fields](reg.loc))

proc read*(reg: SDIO_RESP1_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: SDIO_RESP2_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: SDIO_RESP3_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: SDIO_RESP4_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc read*(reg: SDIO_DTIMER_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: SDIO_DTIMER_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: SDIO_DTIMER_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SDIO_DLEN_Type): SDIO_DLEN_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_DLEN_Fields](reg.loc))

proc write*(reg: SDIO_DLEN_Type, val: SDIO_DLEN_Fields) {.inline.} =
  volatileStore(cast[ptr SDIO_DLEN_Fields](reg.loc), val)

proc write*(reg: SDIO_DLEN_Type, DATALENGTH: uint32 = 0) =
  var x: uint32
  x.setMask((DATALENGTH shl 0).masked(0 .. 24))
  reg.write x.SDIO_DLEN_Fields

template modifyIt*(reg: SDIO_DLEN_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SDIO_DCTRL_Type): SDIO_DCTRL_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_DCTRL_Fields](reg.loc))

proc write*(reg: SDIO_DCTRL_Type, val: SDIO_DCTRL_Fields) {.inline.} =
  volatileStore(cast[ptr SDIO_DCTRL_Fields](reg.loc), val)

proc write*(reg: SDIO_DCTRL_Type, SDIOEN: bool = false, RWMOD: bool = false, RWSTOP: bool = false, RWSTART: bool = false, DBLOCKSIZE: uint32 = 0, DMAEN: bool = false, DTMODE: bool = false, DTDIR: bool = false, DTEN: bool = false) =
  var x: uint32
  x.setMask((SDIOEN.uint32 shl 11).masked(11 .. 11))
  x.setMask((RWMOD.uint32 shl 10).masked(10 .. 10))
  x.setMask((RWSTOP.uint32 shl 9).masked(9 .. 9))
  x.setMask((RWSTART.uint32 shl 8).masked(8 .. 8))
  x.setMask((DBLOCKSIZE shl 4).masked(4 .. 7))
  x.setMask((DMAEN.uint32 shl 3).masked(3 .. 3))
  x.setMask((DTMODE.uint32 shl 2).masked(2 .. 2))
  x.setMask((DTDIR.uint32 shl 1).masked(1 .. 1))
  x.setMask((DTEN.uint32 shl 0).masked(0 .. 0))
  reg.write x.SDIO_DCTRL_Fields

template modifyIt*(reg: SDIO_DCTRL_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SDIO_DCOUNT_Type): SDIO_DCOUNT_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_DCOUNT_Fields](reg.loc))

proc read*(reg: SDIO_STA_Type): SDIO_STA_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_STA_Fields](reg.loc))

proc read*(reg: SDIO_ICR_Type): SDIO_ICR_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_ICR_Fields](reg.loc))

proc write*(reg: SDIO_ICR_Type, val: SDIO_ICR_Fields) {.inline.} =
  volatileStore(cast[ptr SDIO_ICR_Fields](reg.loc), val)

proc write*(reg: SDIO_ICR_Type, CEATAENDC: bool = false, SDIOITC: bool = false, DBCKENDC: bool = false, STBITERRC: bool = false, DATAENDC: bool = false, CMDSENTC: bool = false, CMDRENDC: bool = false, RXOVERRC: bool = false, TXUNDERRC: bool = false, DTIMEOUTC: bool = false, CTIMEOUTC: bool = false, DCRCFAILC: bool = false, CCRCFAILC: bool = false) =
  var x: uint32
  x.setMask((CEATAENDC.uint32 shl 23).masked(23 .. 23))
  x.setMask((SDIOITC.uint32 shl 22).masked(22 .. 22))
  x.setMask((DBCKENDC.uint32 shl 10).masked(10 .. 10))
  x.setMask((STBITERRC.uint32 shl 9).masked(9 .. 9))
  x.setMask((DATAENDC.uint32 shl 8).masked(8 .. 8))
  x.setMask((CMDSENTC.uint32 shl 7).masked(7 .. 7))
  x.setMask((CMDRENDC.uint32 shl 6).masked(6 .. 6))
  x.setMask((RXOVERRC.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXUNDERRC.uint32 shl 4).masked(4 .. 4))
  x.setMask((DTIMEOUTC.uint32 shl 3).masked(3 .. 3))
  x.setMask((CTIMEOUTC.uint32 shl 2).masked(2 .. 2))
  x.setMask((DCRCFAILC.uint32 shl 1).masked(1 .. 1))
  x.setMask((CCRCFAILC.uint32 shl 0).masked(0 .. 0))
  reg.write x.SDIO_ICR_Fields

template modifyIt*(reg: SDIO_ICR_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SDIO_MASK_Type): SDIO_MASK_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_MASK_Fields](reg.loc))

proc write*(reg: SDIO_MASK_Type, val: SDIO_MASK_Fields) {.inline.} =
  volatileStore(cast[ptr SDIO_MASK_Fields](reg.loc), val)

proc write*(reg: SDIO_MASK_Type, CEATAENDIE: bool = false, SDIOITIE: bool = false, RXDAVLIE: bool = false, TXDAVLIE: bool = false, RXFIFOEIE: bool = false, TXFIFOEIE: bool = false, RXFIFOFIE: bool = false, TXFIFOFIE: bool = false, RXFIFOHFIE: bool = false, TXFIFOHEIE: bool = false, RXACTIE: bool = false, TXACTIE: bool = false, CMDACTIE: bool = false, DBCKENDIE: bool = false, STBITERRIE: bool = false, DATAENDIE: bool = false, CMDSENTIE: bool = false, CMDRENDIE: bool = false, RXOVERRIE: bool = false, TXUNDERRIE: bool = false, DTIMEOUTIE: bool = false, CTIMEOUTIE: bool = false, DCRCFAILIE: bool = false, CCRCFAILIE: bool = false) =
  var x: uint32
  x.setMask((CEATAENDIE.uint32 shl 23).masked(23 .. 23))
  x.setMask((SDIOITIE.uint32 shl 22).masked(22 .. 22))
  x.setMask((RXDAVLIE.uint32 shl 21).masked(21 .. 21))
  x.setMask((TXDAVLIE.uint32 shl 20).masked(20 .. 20))
  x.setMask((RXFIFOEIE.uint32 shl 19).masked(19 .. 19))
  x.setMask((TXFIFOEIE.uint32 shl 18).masked(18 .. 18))
  x.setMask((RXFIFOFIE.uint32 shl 17).masked(17 .. 17))
  x.setMask((TXFIFOFIE.uint32 shl 16).masked(16 .. 16))
  x.setMask((RXFIFOHFIE.uint32 shl 15).masked(15 .. 15))
  x.setMask((TXFIFOHEIE.uint32 shl 14).masked(14 .. 14))
  x.setMask((RXACTIE.uint32 shl 13).masked(13 .. 13))
  x.setMask((TXACTIE.uint32 shl 12).masked(12 .. 12))
  x.setMask((CMDACTIE.uint32 shl 11).masked(11 .. 11))
  x.setMask((DBCKENDIE.uint32 shl 10).masked(10 .. 10))
  x.setMask((STBITERRIE.uint32 shl 9).masked(9 .. 9))
  x.setMask((DATAENDIE.uint32 shl 8).masked(8 .. 8))
  x.setMask((CMDSENTIE.uint32 shl 7).masked(7 .. 7))
  x.setMask((CMDRENDIE.uint32 shl 6).masked(6 .. 6))
  x.setMask((RXOVERRIE.uint32 shl 5).masked(5 .. 5))
  x.setMask((TXUNDERRIE.uint32 shl 4).masked(4 .. 4))
  x.setMask((DTIMEOUTIE.uint32 shl 3).masked(3 .. 3))
  x.setMask((CTIMEOUTIE.uint32 shl 2).masked(2 .. 2))
  x.setMask((DCRCFAILIE.uint32 shl 1).masked(1 .. 1))
  x.setMask((CCRCFAILIE.uint32 shl 0).masked(0 .. 0))
  reg.write x.SDIO_MASK_Fields

template modifyIt*(reg: SDIO_MASK_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

proc read*(reg: SDIO_FIFOCNT_Type): SDIO_FIFOCNT_Fields {.inline.} =
  volatileLoad(cast[ptr SDIO_FIFOCNT_Fields](reg.loc))

proc read*(reg: SDIO_FIFO_Type): uint32 {.inline.} =
  volatileLoad(cast[ptr uint32](reg.loc))

proc write*(reg: SDIO_FIFO_Type, val: uint32) {.inline.} =
  volatileStore(cast[ptr uint32](reg.loc), val)

template modifyIt*(reg: SDIO_FIFO_Type, op: untyped): untyped =
  block:
    var it {.inject.} = reg.read()
    op
    reg.write(it)

func PWRCTRL*(r: SDIO_POWER_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 1)

proc `PWRCTRL=`*(r: var SDIO_POWER_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 1)
  tmp.setMask((val shl 0).masked(0 .. 1))
  r = tmp.SDIO_POWER_Fields

func HWFC_EN*(r: SDIO_CLKCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `HWFC_EN=`*(r: var SDIO_CLKCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.SDIO_CLKCR_Fields

func NEGEDGE*(r: SDIO_CLKCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `NEGEDGE=`*(r: var SDIO_CLKCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.SDIO_CLKCR_Fields

func WIDBUS*(r: SDIO_CLKCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(11 .. 12)

proc `WIDBUS=`*(r: var SDIO_CLKCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 12)
  tmp.setMask((val shl 11).masked(11 .. 12))
  r = tmp.SDIO_CLKCR_Fields

func BYPASS*(r: SDIO_CLKCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `BYPASS=`*(r: var SDIO_CLKCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SDIO_CLKCR_Fields

func PWRSAV*(r: SDIO_CLKCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `PWRSAV=`*(r: var SDIO_CLKCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SDIO_CLKCR_Fields

func CLKEN*(r: SDIO_CLKCR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `CLKEN=`*(r: var SDIO_CLKCR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SDIO_CLKCR_Fields

func CLKDIV*(r: SDIO_CLKCR_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 7)

proc `CLKDIV=`*(r: var SDIO_CLKCR_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 7)
  tmp.setMask((val shl 0).masked(0 .. 7))
  r = tmp.SDIO_CLKCR_Fields

func CE_ATACMD*(r: SDIO_CMD_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `CE_ATACMD=`*(r: var SDIO_CMD_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.SDIO_CMD_Fields

func nIEN*(r: SDIO_CMD_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `nIEN=`*(r: var SDIO_CMD_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.SDIO_CMD_Fields

func ENCMDcompl*(r: SDIO_CMD_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `ENCMDcompl=`*(r: var SDIO_CMD_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.SDIO_CMD_Fields

func SDIOSuspend*(r: SDIO_CMD_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `SDIOSuspend=`*(r: var SDIO_CMD_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.SDIO_CMD_Fields

func CPSMEN*(r: SDIO_CMD_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `CPSMEN=`*(r: var SDIO_CMD_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SDIO_CMD_Fields

func WAITPEND*(r: SDIO_CMD_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `WAITPEND=`*(r: var SDIO_CMD_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SDIO_CMD_Fields

func WAITINT*(r: SDIO_CMD_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `WAITINT=`*(r: var SDIO_CMD_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SDIO_CMD_Fields

func WAITRESP*(r: SDIO_CMD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(6 .. 7)

proc `WAITRESP=`*(r: var SDIO_CMD_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 7)
  tmp.setMask((val shl 6).masked(6 .. 7))
  r = tmp.SDIO_CMD_Fields

func CMDINDEX*(r: SDIO_CMD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 5)

proc `CMDINDEX=`*(r: var SDIO_CMD_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 5)
  tmp.setMask((val shl 0).masked(0 .. 5))
  r = tmp.SDIO_CMD_Fields

func RESPCMD*(r: SDIO_RESPCMD_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 5)

func DATALENGTH*(r: SDIO_DLEN_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 24)

proc `DATALENGTH=`*(r: var SDIO_DLEN_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 24)
  tmp.setMask((val shl 0).masked(0 .. 24))
  r = tmp.SDIO_DLEN_Fields

func SDIOEN*(r: SDIO_DCTRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `SDIOEN=`*(r: var SDIO_DCTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.SDIO_DCTRL_Fields

func RWMOD*(r: SDIO_DCTRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `RWMOD=`*(r: var SDIO_DCTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SDIO_DCTRL_Fields

func RWSTOP*(r: SDIO_DCTRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `RWSTOP=`*(r: var SDIO_DCTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SDIO_DCTRL_Fields

func RWSTART*(r: SDIO_DCTRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `RWSTART=`*(r: var SDIO_DCTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SDIO_DCTRL_Fields

func DBLOCKSIZE*(r: SDIO_DCTRL_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(4 .. 7)

proc `DBLOCKSIZE=`*(r: var SDIO_DCTRL_Fields, val: uint32) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 7)
  tmp.setMask((val shl 4).masked(4 .. 7))
  r = tmp.SDIO_DCTRL_Fields

func DMAEN*(r: SDIO_DCTRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `DMAEN=`*(r: var SDIO_DCTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SDIO_DCTRL_Fields

func DTMODE*(r: SDIO_DCTRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `DTMODE=`*(r: var SDIO_DCTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SDIO_DCTRL_Fields

func DTDIR*(r: SDIO_DCTRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DTDIR=`*(r: var SDIO_DCTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SDIO_DCTRL_Fields

func DTEN*(r: SDIO_DCTRL_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `DTEN=`*(r: var SDIO_DCTRL_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SDIO_DCTRL_Fields

func DATACOUNT*(r: SDIO_DCOUNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 24)

func CEATAEND*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

func SDIOIT*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

func RXDAVL*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

func TXDAVL*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

func RXFIFOE*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

func TXFIFOE*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

func RXFIFOF*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

func TXFIFOF*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

func RXFIFOHF*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

func TXFIFOHE*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

func RXACT*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

func TXACT*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

func CMDACT*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

func DBCKEND*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

func STBITERR*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

func DATAEND*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

func CMDSENT*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

func CMDREND*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

func RXOVERR*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

func TXUNDERR*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

func DTIMEOUT*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

func CTIMEOUT*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

func DCRCFAIL*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

func CCRCFAIL*(r: SDIO_STA_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

func CEATAENDC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `CEATAENDC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.SDIO_ICR_Fields

func SDIOITC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `SDIOITC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.SDIO_ICR_Fields

func DBCKENDC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DBCKENDC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SDIO_ICR_Fields

func STBITERRC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `STBITERRC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SDIO_ICR_Fields

func DATAENDC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `DATAENDC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SDIO_ICR_Fields

func CMDSENTC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `CMDSENTC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SDIO_ICR_Fields

func CMDRENDC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `CMDRENDC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SDIO_ICR_Fields

func RXOVERRC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RXOVERRC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SDIO_ICR_Fields

func TXUNDERRC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TXUNDERRC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SDIO_ICR_Fields

func DTIMEOUTC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `DTIMEOUTC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SDIO_ICR_Fields

func CTIMEOUTC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CTIMEOUTC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SDIO_ICR_Fields

func DCRCFAILC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DCRCFAILC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SDIO_ICR_Fields

func CCRCFAILC*(r: SDIO_ICR_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CCRCFAILC=`*(r: var SDIO_ICR_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SDIO_ICR_Fields

func CEATAENDIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(23 .. 23).bool

proc `CEATAENDIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(23 .. 23)
  tmp.setMask((val.uint32 shl 23).masked(23 .. 23))
  r = tmp.SDIO_MASK_Fields

func SDIOITIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(22 .. 22).bool

proc `SDIOITIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(22 .. 22)
  tmp.setMask((val.uint32 shl 22).masked(22 .. 22))
  r = tmp.SDIO_MASK_Fields

func RXDAVLIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(21 .. 21).bool

proc `RXDAVLIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(21 .. 21)
  tmp.setMask((val.uint32 shl 21).masked(21 .. 21))
  r = tmp.SDIO_MASK_Fields

func TXDAVLIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(20 .. 20).bool

proc `TXDAVLIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(20 .. 20)
  tmp.setMask((val.uint32 shl 20).masked(20 .. 20))
  r = tmp.SDIO_MASK_Fields

func RXFIFOEIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(19 .. 19).bool

proc `RXFIFOEIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(19 .. 19)
  tmp.setMask((val.uint32 shl 19).masked(19 .. 19))
  r = tmp.SDIO_MASK_Fields

func TXFIFOEIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(18 .. 18).bool

proc `TXFIFOEIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(18 .. 18)
  tmp.setMask((val.uint32 shl 18).masked(18 .. 18))
  r = tmp.SDIO_MASK_Fields

func RXFIFOFIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(17 .. 17).bool

proc `RXFIFOFIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(17 .. 17)
  tmp.setMask((val.uint32 shl 17).masked(17 .. 17))
  r = tmp.SDIO_MASK_Fields

func TXFIFOFIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(16 .. 16).bool

proc `TXFIFOFIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(16 .. 16)
  tmp.setMask((val.uint32 shl 16).masked(16 .. 16))
  r = tmp.SDIO_MASK_Fields

func RXFIFOHFIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(15 .. 15).bool

proc `RXFIFOHFIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(15 .. 15)
  tmp.setMask((val.uint32 shl 15).masked(15 .. 15))
  r = tmp.SDIO_MASK_Fields

func TXFIFOHEIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(14 .. 14).bool

proc `TXFIFOHEIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(14 .. 14)
  tmp.setMask((val.uint32 shl 14).masked(14 .. 14))
  r = tmp.SDIO_MASK_Fields

func RXACTIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(13 .. 13).bool

proc `RXACTIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(13 .. 13)
  tmp.setMask((val.uint32 shl 13).masked(13 .. 13))
  r = tmp.SDIO_MASK_Fields

func TXACTIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(12 .. 12).bool

proc `TXACTIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(12 .. 12)
  tmp.setMask((val.uint32 shl 12).masked(12 .. 12))
  r = tmp.SDIO_MASK_Fields

func CMDACTIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(11 .. 11).bool

proc `CMDACTIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(11 .. 11)
  tmp.setMask((val.uint32 shl 11).masked(11 .. 11))
  r = tmp.SDIO_MASK_Fields

func DBCKENDIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(10 .. 10).bool

proc `DBCKENDIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(10 .. 10)
  tmp.setMask((val.uint32 shl 10).masked(10 .. 10))
  r = tmp.SDIO_MASK_Fields

func STBITERRIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(9 .. 9).bool

proc `STBITERRIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(9 .. 9)
  tmp.setMask((val.uint32 shl 9).masked(9 .. 9))
  r = tmp.SDIO_MASK_Fields

func DATAENDIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(8 .. 8).bool

proc `DATAENDIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(8 .. 8)
  tmp.setMask((val.uint32 shl 8).masked(8 .. 8))
  r = tmp.SDIO_MASK_Fields

func CMDSENTIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(7 .. 7).bool

proc `CMDSENTIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(7 .. 7)
  tmp.setMask((val.uint32 shl 7).masked(7 .. 7))
  r = tmp.SDIO_MASK_Fields

func CMDRENDIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(6 .. 6).bool

proc `CMDRENDIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(6 .. 6)
  tmp.setMask((val.uint32 shl 6).masked(6 .. 6))
  r = tmp.SDIO_MASK_Fields

func RXOVERRIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(5 .. 5).bool

proc `RXOVERRIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(5 .. 5)
  tmp.setMask((val.uint32 shl 5).masked(5 .. 5))
  r = tmp.SDIO_MASK_Fields

func TXUNDERRIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(4 .. 4).bool

proc `TXUNDERRIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(4 .. 4)
  tmp.setMask((val.uint32 shl 4).masked(4 .. 4))
  r = tmp.SDIO_MASK_Fields

func DTIMEOUTIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(3 .. 3).bool

proc `DTIMEOUTIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(3 .. 3)
  tmp.setMask((val.uint32 shl 3).masked(3 .. 3))
  r = tmp.SDIO_MASK_Fields

func CTIMEOUTIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(2 .. 2).bool

proc `CTIMEOUTIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(2 .. 2)
  tmp.setMask((val.uint32 shl 2).masked(2 .. 2))
  r = tmp.SDIO_MASK_Fields

func DCRCFAILIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(1 .. 1).bool

proc `DCRCFAILIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(1 .. 1)
  tmp.setMask((val.uint32 shl 1).masked(1 .. 1))
  r = tmp.SDIO_MASK_Fields

func CCRCFAILIE*(r: SDIO_MASK_Fields): bool {.inline.} =
  r.uint32.bitsliced(0 .. 0).bool

proc `CCRCFAILIE=`*(r: var SDIO_MASK_Fields, val: bool) {.inline.} =
  var tmp = r.uint32
  tmp.clearMask(0 .. 0)
  tmp.setMask((val.uint32 shl 0).masked(0 .. 0))
  r = tmp.SDIO_MASK_Fields

func FIFOCOUNT*(r: SDIO_FIFOCNT_Fields): uint32 {.inline.} =
  r.uint32.bitsliced(0 .. 23)

